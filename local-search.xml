<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>异常处理</title>
    <link href="/2024/02/28/9.%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2024/02/28/9.%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-异常概述"><a href="#1-异常概述" class="headerlink" title="1. 异常概述"></a>1. 异常概述</h2><h3 id="1-1-什么是生活的异常"><a href="#1-1-什么是生活的异常" class="headerlink" title="1.1 什么是生活的异常"></a>1.1 什么是生活的异常</h3><p>男主角小明每天开车上班，正常车程1小时。但是，不出意外的话，可能会出现意外。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441448_watermark.png" alt="image-20220814203918560"></p><p>出现意外，即为异常情况。我们会做相应的处理。如果不处理，到不了公司。处理完了，就可以正常开车去公司。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441563_watermark.png" alt="image-20220520210320301" style="zoom:70%;" /><h3 id="1-2-什么是程序的异常"><a href="#1-2-什么是程序的异常" class="headerlink" title="1.2 什么是程序的异常"></a>1.2 什么是程序的异常</h3><p>在使用计算机语言进行项目开发的过程中，即使程序员把代码写得<code>尽善尽美</code>，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：<code>客户输入数据的格式问题</code>，<code>读取文件是否存在</code>，<code>网络是否始终保持通畅</code>等等。</p><ul><li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常情况，如果不处理最终会导致JVM的非正常停止。</li></ul><blockquote><p>异常指的并不是语法错误和逻辑错误。语法错了，编译不通过，不会产生字节码文件，根本不能运行。</p><p>代码逻辑错误，只是没有得到想要的结果，例如：求a与b的和，你写成了a-b</p></blockquote><h3 id="1-3-异常的抛出机制"><a href="#1-3-异常的抛出机制" class="headerlink" title="1.3 异常的抛出机制"></a>1.3 异常的抛出机制</h3><p>Java中是如何表示不同的异常情况，又是如何让程序员得知，并处理异常的呢？</p><p>Java中把不同的异常用不同的类表示，一旦发生某种异常，就<code>创建该异常类型的对象</code>，并且抛出（throw）。然后程序员可以捕获(catch)到这个异常对象，并处理；如果没有捕获(catch)这个异常对象，那么这个异常对象将会导致程序终止。</p><p>举例：</p><p>运行下面的程序，程序会产生一个数组角标越界异常<code>ArrayIndexOfBoundsException</code>。我们通过图解来解析下异常产生和抛出的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTools</span> &#123;<br>    <span class="hljs-comment">// 对给定的数组通过给定的角标获取元素。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> arr[index];<br>        <span class="hljs-keyword">return</span> element;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">34</span>, <span class="hljs-number">12</span>, <span class="hljs-number">67</span> &#125;;<br>        intnum = ArrayTools.getElement(arr, <span class="hljs-number">4</span>)<br>        System.out.println(<span class="hljs-string">&quot;num=&quot;</span> + num);<br>        System.out.println(<span class="hljs-string">&quot;over&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述程序执行过程图解：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441467_watermark.png"></p><h3 id="1-4-如何对待异常"><a href="#1-4-如何对待异常" class="headerlink" title="1.4 如何对待异常"></a>1.4 如何对待异常</h3><p> 对于程序出现的异常，一般有两种解决方法：一是遇到错误就终止程序的运行。另一种方法是程序员在编写程序时，就充分考虑到各种可能发生的异常和错误，极力预防和避免。实在无法避免的，要编写相应的代码进行异常的检测、以及<code>异常的处理</code>，保证代码的<code>健壮性</code>。</p><h2 id="2-Java异常体系"><a href="#2-Java异常体系" class="headerlink" title="2. Java异常体系"></a>2. Java异常体系</h2><h3 id="2-1-Throwable"><a href="#2-1-Throwable" class="headerlink" title="2.1 Throwable"></a>2.1 Throwable</h3><p><code>java.lang.Throwable</code> 类是Java程序执行过程中发生的异常事件对应的类的根父类。</p><p><strong>Throwable中的常用方法：</strong></p><ul><li><p><code>public void printStackTrace()</code>：打印异常的详细信息。</p><p>包含了异常的类型、异常的原因、异常出现的位置、在开发和调试阶段都得使用printStackTrace。</p></li><li><p><code>public String getMessage()</code>：获取发生异常的原因。</p></li></ul><h3 id="2-2-Error-和-Exception"><a href="#2-2-Error-和-Exception" class="headerlink" title="2.2 Error 和 Exception"></a>2.2 Error 和 Exception</h3><p>Throwable可分为两类：Error和Exception。分别对应着<code>java.lang.Error</code>与<code>java.lang.Exception</code>两个类。</p><p><strong>Error：</strong>Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。一般不编写针对性的代码进行处理。</p><ul><li>例如：StackOverflowError（栈内存溢出）和OutOfMemoryError（堆内存溢出，简称OOM）。</li></ul><p><strong>Exception:</strong> 其它因编程错误或偶然的外在因素导致的一般性问题，需要使用针对性的代码进行处理，使程序继续运行。否则一旦发生异常，程序也会挂掉。例如：</p><ul><li>空指针访问</li><li>试图读取不存在的文件</li><li>网络连接中断</li><li>数组角标越界</li></ul><blockquote><p>说明：</p><ol><li>无论是Error还是Exception，还有很多子类，异常的类型非常丰富。当代码运行出现异常时，特别是我们不熟悉的异常时，不要紧张，把异常的简单类名，拷贝到API中去查去认识它即可。</li><li>我们本章讲的异常处理，其实针对的就是Exception。</li></ol></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441509_watermark.png" alt="image-20220511161910951" style="zoom:67%;" /><h3 id="2-3-编译时异常和运行时异常"><a href="#2-3-编译时异常和运行时异常" class="headerlink" title="2.3 编译时异常和运行时异常"></a>2.3 编译时异常和运行时异常</h3><p>Java程序的执行分为编译时过程和运行时过程。有的错误只有在<code>运行时</code>才会发生。比如：除数为0，数组下标越界等。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441416_watermark.png" alt="image-20220330002449526" style="zoom:80%;" /><p>因此，根据异常可能出现的阶段，可以将异常分为：</p><ul><li><strong>编译时期异常</strong>（即checked异常、受检异常）：在代码编译阶段，编译器就能明确<code>警示</code>当前代码<code>可能发生（不是一定发生）</code>xx异常，并<code>明确督促</code>程序员提前编写处理它的代码。如果程序员<code>没有编写</code>对应的异常处理代码，则编译器就会直接判定编译失败，从而不能生成字节码文件。通常，这类异常的发生不是由程序员的代码引起的，或者不是靠加简单判断就可以避免的，例如：FileNotFoundException（文件找不到异常）。</li><li><strong>运行时期异常</strong>（即runtime异常、unchecked异常、非受检异常）：在代码编译阶段，编译器完全不做任何检查，无论该异常是否会发生，编译器都不给出任何提示。只有等代码运行起来并确实发生了xx异常，它才能被发现。通常，这类异常是由程序员的代码编写不当引起的，只要稍加判断，或者细心检查就可以避免。<ul><li><strong>java.lang.RuntimeException</strong>类及它的子类都是运行时异常。比如：ArrayIndexOutOfBoundsException数组下标越界异常，ClassCastException类型转换异常。</li></ul></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441603_watermark.png" alt="1562771528807"></p><h2 id="3-常见的错误和异常"><a href="#3-常见的错误和异常" class="headerlink" title="3. 常见的错误和异常"></a>3. 常见的错误和异常</h2><h3 id="3-1-Error"><a href="#3-1-Error" class="headerlink" title="3.1 Error"></a>3.1 Error</h3><p>最常见的就是VirtualMachineError，它有两个经典的子类：StackOverflowError、OutOfMemoryError。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.exception;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStackOverflowError</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//StackOverflowError</span><br>        recursion();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recursion</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//递归方法</span><br>        recursion(); <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.exception;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestOutOfMemoryError</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//OutOfMemoryError</span><br>        <span class="hljs-comment">//方式一：</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[Integer.MAX_VALUE];<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//OutOfMemoryError</span><br>        <span class="hljs-comment">//方式二：</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            s.append(<span class="hljs-string">&quot;atguigu&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-2-运行时异常"><a href="#3-2-运行时异常" class="headerlink" title="3.2 运行时异常"></a>3.2 运行时异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.exception;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRuntimeException</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//NullPointerException</span><br>        <span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][];<br>        System.out.println(arr[<span class="hljs-number">0</span>].length);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//ClassCastException</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> (String) obj;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//ArrayIndexOutOfBoundsException</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//InputMismatchException</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>);<span class="hljs-comment">//输入非整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> input.nextInt();<br>        input.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test05</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//ArithmeticException</span><br>        System.out.println(a/b);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-编译时异常"><a href="#3-3-编译时异常" class="headerlink" title="3.3 编译时异常"></a>3.3 编译时异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.exception;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCheckedException</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test06</span><span class="hljs-params">()</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">//休眠1秒  InterruptedException</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test07</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<span class="hljs-comment">//ClassNotFoundException</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test08</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(<span class="hljs-string">&quot;....&quot;</span>);  <span class="hljs-comment">//SQLException</span><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test09</span><span class="hljs-params">()</span>  &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;尚硅谷Java秘籍.txt&quot;</span>); <span class="hljs-comment">//FileNotFoundException</span><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test10</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;尚硅谷Java秘籍.txt&quot;</span>);<br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<span class="hljs-comment">//FileNotFoundException</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> fis.read();<span class="hljs-comment">//IOException</span><br><span class="hljs-keyword">while</span>(b != -<span class="hljs-number">1</span>)&#123;<br>System.out.print((<span class="hljs-type">char</span>)b);<br>b = fis.read();<span class="hljs-comment">//IOException</span><br>&#125;<br><br>fis.close();<span class="hljs-comment">//IOException</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-异常的处理"><a href="#4-异常的处理" class="headerlink" title="4. 异常的处理"></a>4. 异常的处理</h2><h3 id="4-1-异常处理概述"><a href="#4-1-异常处理概述" class="headerlink" title="4.1 异常处理概述"></a>4.1 异常处理概述</h3><p>在编写程序时，经常要在可能出现错误的地方加上检测的代码，如进行x&#x2F;y运算时，要<code>检测分母为0</code>，<code>数据为空</code>，<code>输入的不是数据而是字符</code>等。过多的if-else分支会导致程序的<code>代码加长</code>、<code>臃肿</code>，<code>可读性差</code>，程序员需要花很大的精力“<code>堵漏洞</code>”。因此采用异常处理机制。</p><p><strong>Java异常处理</strong></p><p>Java采用的异常处理机制，是<code>将异常处理的程序代码集中在一起</code>，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。</p><p><strong>Java异常处理的方式：</strong></p><p>方式一：try-catch-finally</p><p>方式二：throws + 异常类型</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441992_watermark.png" alt="image-20220331111051496"></p><h3 id="4-2-方式1：捕获异常（try-catch-finally）"><a href="#4-2-方式1：捕获异常（try-catch-finally）" class="headerlink" title="4.2 方式1：捕获异常（try-catch-finally）"></a>4.2 方式1：捕获异常（try-catch-finally）</h3><p>Java提供了异常处理的<strong>抓抛模型</strong>。</p><ul><li>前面提到，Java程序的执行过程中如出现异常，会生成一个异常类对象，该异常对象将被提交给Java运行时系统，这个过程称为<code>抛出(throw)异常</code>。</li><li>如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。这一过程称为<code>捕获(catch)异常</code>。</li><li>如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。</li></ul><h4 id="4-2-1-try-catch-finally基本格式"><a href="#4-2-1-try-catch-finally基本格式" class="headerlink" title="4.2.1 try-catch-finally基本格式"></a>4.2.1 try-catch-finally基本格式</h4><p>捕获异常语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>......<span class="hljs-comment">//可能产生异常的代码</span><br>&#125;<br><span class="hljs-keyword">catch</span>( 异常类型<span class="hljs-number">1</span> e )&#123;<br>......<span class="hljs-comment">//当产生异常类型1型异常时的处置措施</span><br>&#125;<br><span class="hljs-keyword">catch</span>( 异常类型<span class="hljs-number">2</span> e )&#123;<br>...... <span class="hljs-comment">//当产生异常类型2型异常时的处置措施</span><br>&#125;  <br><span class="hljs-keyword">finally</span>&#123;<br>...... <span class="hljs-comment">//无论是否发生异常，都无条件执行的语句</span><br>&#125; <br><br></code></pre></td></tr></table></figure><p><strong>1、整体执行过程：</strong></p><p>当某段代码可能发生异常，不管这个异常是编译时异常（受检异常）还是运行时异常（非受检异常），我们都可以使用try块将它括起来，并在try块下面编写catch分支尝试捕获对应的异常对象。</p><ul><li>如果在程序运行时，try块中的代码没有发生异常，那么catch所有的分支都不执行。</li><li>如果在程序运行时，try块中的代码发生了异常，根据异常对象的类型，将从上到下选择第一个匹配的catch分支执行。此时try中发生异常的语句下面的代码将不执行，而整个try…catch之后的代码可以继续运行。</li><li>如果在程序运行时，try块中的代码发生了异常，但是所有catch分支都无法匹配（捕获）这个异常，那么JVM将会终止当前方法的执行，并把异常对象“抛”给调用者。如果调用者不处理，程序就挂了。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441945_watermark.png" alt="image-20220503122722605" style="zoom:67%;" /><p><strong>2、try</strong></p><ul><li>捕获异常的第一步是用<code>try&#123;…&#125;语句块</code>选定捕获异常的范围，将可能出现异常的业务逻辑代码放在try语句块中。</li></ul><p><strong>3、catch (Exceptiontype e)</strong></p><ul><li><p>catch分支，分为两个部分，catch()中编写异常类型和异常参数名，{}中编写如果发生了这个异常，要做什么处理的代码。</p></li><li><p>如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可以用其父类作为catch的参数。</p><p>比如：可以用ArithmeticException类作为参数的地方，就可以用RuntimeException类作为参数，或者用所有异常的父类Exception类作为参数。但不能是与ArithmeticException类无关的异常，如NullPointerException（catch中的语句将不会执行）。</p></li><li><p>每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。</p></li><li><p>如果有多个catch分支，并且多个异常类型有父子类关系，必须保证小的子异常类型在上，大的父异常类型在下。否则，报错。</p></li><li><p>catch中常用异常处理的方式</p><ul><li><p><code>public String getMessage()</code>：获取异常的描述信息，返回字符串</p></li><li><p><code>public void printStackTrace()</code>：打印异常的跟踪栈信息并输出到控制台。包含了异常的类型、异常的原因、还包括异常出现的位置，在开发和调试阶段，都得使用printStackTrace()。</p></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441469_watermark.png" alt="image-20220331180736381" style="zoom:80%;" /></li></ul><h4 id="4-2-2-使用举例"><a href="#4-2-2-使用举例" class="headerlink" title="4.2.2 使用举例"></a>4.2.2 使用举例</h4><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexOutExp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String friends[] = &#123; <span class="hljs-string">&quot;lisa&quot;</span>, <span class="hljs-string">&quot;bily&quot;</span>, <span class="hljs-string">&quot;kessy&quot;</span> &#125;;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(friends[i]);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;index err&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;\nthis is the end&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DivideZero1</span> &#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> y;<br>        <span class="hljs-type">DivideZero1</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DivideZero1</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            y = <span class="hljs-number">3</span> / c.x;<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;divide by zero error!&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;program ends ok!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.com&quot;</span>;<br>str1 = <span class="hljs-literal">null</span>;<br>System.out.println(str1.charAt(<span class="hljs-number">0</span>));<br>&#125;<span class="hljs-keyword">catch</span>(NullPointerException e)&#123;<br><span class="hljs-comment">//异常的处理方式1</span><br>System.out.println(<span class="hljs-string">&quot;不好意思，亲~出现了小问题，正在加紧解决...&quot;</span>);<br>&#125;<span class="hljs-keyword">catch</span>(ClassCastException e)&#123;<br><span class="hljs-comment">//异常的处理方式2</span><br>System.out.println(<span class="hljs-string">&quot;出现了类型转换的异常&quot;</span>);<br>&#125;<span class="hljs-keyword">catch</span>(RuntimeException e)&#123;<br><span class="hljs-comment">//异常的处理方式3</span><br>System.out.println(<span class="hljs-string">&quot;出现了运行时异常&quot;</span>);<br>&#125;<br><span class="hljs-comment">//此处的代码，在异常被处理了以后，是可以正常执行的</span><br>System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>举例4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><h4 id="4-2-3-finally使用及举例"><a href="#4-2-3-finally使用及举例" class="headerlink" title="4.2.3 finally使用及举例"></a>4.2.3 finally使用及举例</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441288_watermark.png" alt="image-20220331215517077" style="zoom: 80%;" /><ul><li><p>因为异常会引发程序跳转，从而会导致有些语句执行不到。而程序中有一些特定的代码无论异常是否发生，都<code>需要执行</code>。例如，数据库连接、输入流输出流、Socket连接、Lock锁的关闭等，这样的代码通常就会放到finally块中。所以，我们通常将一定要被执行的代码声明在finally中。</p><ul><li>唯一的例外，使用 System.exit(0) 来终止当前正在运行的 Java 虚拟机。</li></ul></li><li><p>不论在try代码块中是否发生了异常事件，catch语句是否执行，catch语句是否有异常，catch语句中是否有return，finally块中的语句都会被执行。</p></li><li><p>finally语句和catch语句是可选的，但finally不能单独使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>     <br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <br>&#125; <br></code></pre></td></tr></table></figure></li></ul><p>举例1：确保资源关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">import</span> java.util.InputMismatchException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFinally</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入第一个整数：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> input.nextInt();<br>            System.out.print(<span class="hljs-string">&quot;请输入第二个整数：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> input.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a/b;<br>            System.out.println(a + <span class="hljs-string">&quot;/&quot;</span> + b +<span class="hljs-string">&quot;=&quot;</span> + result);<br>        &#125; <span class="hljs-keyword">catch</span> (InputMismatchException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;数字格式不正确，请输入两个整数&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;第二个整数不能为0&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;程序结束，释放资源&quot;</span>);<br>            input.close();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hello1.txt&quot;</span>);<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<span class="hljs-comment">//FileNotFoundException</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> fis.read();<span class="hljs-comment">//IOException</span><br>            <span class="hljs-keyword">while</span>(b != -<span class="hljs-number">1</span>)&#123;<br>                System.out.print((<span class="hljs-type">char</span>)b);<br>                b = fis.read();<span class="hljs-comment">//IOException</span><br>            &#125;<br><br>        &#125;<span class="hljs-keyword">catch</span>(IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(fis != <span class="hljs-literal">null</span>)<br>                    fis.close();<span class="hljs-comment">//IOException</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例2：从try回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinallyTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> test(<span class="hljs-string">&quot;12&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String str)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Integer.parseInt(str);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">catch</span>(NumberFormatException e)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;test结束&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例3：从catch回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinallyTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> test(<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Integer.parseInt(str);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;test结束&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例4：从finally回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinallyTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> test(<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Integer.parseInt(str);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;test结束&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>笔试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> test();<br>        System.out.println(result); <span class="hljs-comment">//100</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            i++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>笔试题：final、finally、finalize有什么区别？</p></blockquote><h4 id="4-2-4-练习"><a href="#4-2-4-练习" class="headerlink" title="4.2.4 练习"></a>4.2.4 练习</h4><p>编写一个类ExceptionTest，在main方法中使用try、catch、finally，要求：</p><ul><li><p>在try块中，编写被零除的代码。</p></li><li><p>在catch块中，捕获被零除所产生的异常，并且打印异常信息</p></li><li><p>在finally块中，打印一条语句。</p></li></ul><h4 id="4-2-5-异常处理的体会"><a href="#4-2-5-异常处理的体会" class="headerlink" title="4.2.5 异常处理的体会"></a>4.2.5 异常处理的体会</h4><ul><li><p>前面使用的异常都是<code>RuntimeException类</code>或是它的<code>子类</code>，这些类的异常的特点是：即使没有使用try和catch捕获，Java自己也能捕获，并且编译通过 ( 但运行时会发生异常使得程序运行终止 )。所以，对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。</p></li><li><p>如果抛出的异常是IOException等类型的<code>非运行时异常</code>，则必须捕获，否则<code>编译错误</code>。也就是说，我们必须处理编译时异常，将异常进行捕捉，转化为运行时异常。</p></li></ul><h3 id="4-3-方式2：声明抛出异常类型（throws）"><a href="#4-3-方式2：声明抛出异常类型（throws）" class="headerlink" title="4.3 方式2：声明抛出异常类型（throws）"></a>4.3 方式2：声明抛出异常类型（throws）</h3><ul><li><p>如果在编写方法体的代码时，某句代码可能发生某个<code>编译时异常</code>，不处理编译不通过，但是在当前方法体中可能<code>不适合处理</code>或<code>无法给出合理的处理方式</code>，则此方法应<code>显示地</code>声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441166_watermark.png" alt="image-20220331112000671" style="zoom:67%;" /></li><li><p>具体方式：在方法声明中用<code>throws语句</code>可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。</p></li></ul><h4 id="4-3-1-throws基本格式"><a href="#4-3-1-throws基本格式" class="headerlink" title="4.3.1 throws基本格式"></a>4.3.1 throws基本格式</h4><p><strong>声明异常格式：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">修饰符 返回值类型 方法名(参数) <span class="hljs-keyword">throws</span> 异常类名<span class="hljs-number">1</span>,异常类名<span class="hljs-number">2</span>…&#123;   &#125;<br></code></pre></td></tr></table></figure><p>在throws后面可以写多个异常类型，用逗号隔开。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">(String file)</span>  <span class="hljs-keyword">throws</span> FileNotFoundException,IOException &#123;<br>...<br><span class="hljs-comment">// 读文件的操作可能产生FileNotFoundException或IOException类型的异常</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>    <span class="hljs-comment">//...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-3-2-throws-使用举例"><a href="#4-3-2-throws-使用举例" class="headerlink" title="4.3.2 throws 使用举例"></a>4.3.2 throws 使用举例</h4><p><strong>举例：针对于编译时异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThrowsCheckedException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;上课.....&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            afterClass();<span class="hljs-comment">//换到这里处理异常</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;准备提前上课&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上课.....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterClass</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">10</span>; i&gt;=<span class="hljs-number">1</span>; i--)&#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">//本来应该在这里处理异常</span><br>            System.out.println(<span class="hljs-string">&quot;距离上课还有：&quot;</span> + i + <span class="hljs-string">&quot;分钟&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>举例：针对于运行时异常：</strong></p><p>throws后面也可以写运行时异常类型，只是运行时异常类型，写或不写对于编译器和程序执行来说都没有任何区别。如果写了，唯一的区别就是调用者调用该方法后，使用try…catch结构时，IDEA可以获得更多的信息，需要添加哪种catch分支。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">import</span> java.util.InputMismatchException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThrowsRuntimeException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入第一个整数：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> input.nextInt();<br>            System.out.print(<span class="hljs-string">&quot;请输入第二个整数：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> input.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> divide(a,b);<br>            System.out.println(a + <span class="hljs-string">&quot;/&quot;</span> + b +<span class="hljs-string">&quot;=&quot;</span> + result);<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException | InputMismatchException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            input.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><span class="hljs-keyword">throws</span> ArithmeticException&#123;<br>        <span class="hljs-keyword">return</span> a/b;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-3-3-方法重写中throws的要求"><a href="#4-3-3-方法重写中throws的要求" class="headerlink" title="4.3.3 方法重写中throws的要求"></a>4.3.3 方法重写中throws的要求</h4><p>方法重写时，对于方法签名是有严格要求的。复习：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">（<span class="hljs-number">1</span>）方法名必须相同<br>（<span class="hljs-number">2</span>）形参列表必须相同<br>（<span class="hljs-number">3</span>）返回值类型<br>- 基本数据类型和<span class="hljs-keyword">void</span>：必须相同<br>- 引用数据类型：&lt;=<br>（<span class="hljs-number">4</span>）权限修饰符：&gt;=，而且要求父类被重写方法在子类中是可见的<br>（<span class="hljs-number">5</span>）不能是<span class="hljs-keyword">static</span>，<span class="hljs-keyword">final</span>修饰的方法<br></code></pre></td></tr></table></figure><p>此外，对于throws异常列表要求：</p><ul><li>如果父类被重写方法的方法签名后面没有 “throws  编译时异常类型”，那么重写方法时，方法签名后面也不能出现“throws  编译时异常类型”。</li><li>如果父类被重写方法的方法签名后面有 “<code>throws  编译时异常类型</code>”，那么重写方法时，throws的编译时异常类型必须 &lt;&#x3D; 被重写方法throws的编译时异常类型，或者不throws编译时异常。</li><li>方法重写，对于“<code>throws 运行时异常类型</code>”没有要求。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        System.out.println(<span class="hljs-string">&quot;Father.method&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException,ClassCastException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Son.method&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-两种异常处理方式的选择"><a href="#4-4-两种异常处理方式的选择" class="headerlink" title="4.4 两种异常处理方式的选择"></a>4.4 两种异常处理方式的选择</h3><p>前提：对于异常，使用相应的处理方式。此时的异常，主要指的是编译时异常。</p><ul><li>如果程序代码中，涉及到资源的调用（流、数据库连接、网络连接等），则必须考虑使用try-catch-finally来处理，保证不出现内存泄漏。</li><li>如果父类被重写的方法没有throws异常类型，则子类重写的方法中如果出现异常，只能考虑使用try-catch-finally进行处理，不能throws。</li><li>开发中，方法a中依次调用了方法b,c,d等方法，方法b,c,d之间是递进关系。此时，如果方法b,c,d中有异常，我们通常选择使用throws，而方法a中通常选择使用try-catch-finally。</li></ul><h2 id="5-手动抛出异常对象：throw"><a href="#5-手动抛出异常对象：throw" class="headerlink" title="5. 手动抛出异常对象：throw"></a>5. 手动抛出异常对象：throw</h2><p>Java 中异常对象的生成有两种方式：</p><ul><li><p>由虚拟机<strong>自动生成</strong>：程序运行过程中，虚拟机检测到程序发生了问题，那么针对当前代码，就会在后台自动创建一个对应异常类的实例对象并抛出。</p></li><li><p>由开发人员<strong>手动创建</strong>：<code>new 异常类型([实参列表]);</code>，如果创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样，但是一旦throw抛出，就会对程序运行产生影响了。</p></li></ul><h3 id="5-1-使用格式"><a href="#5-1-使用格式" class="headerlink" title="5.1 使用格式"></a>5.1 使用格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> 异常类名(参数);<br></code></pre></td></tr></table></figure><p>throw语句抛出的异常对象，和JVM自动创建和抛出的异常对象一样。</p><ul><li><p>如果是编译时异常类型的对象，同样需要使用throws或者try…catch处理，否则编译不通过。</p></li><li><p>如果是运行时异常类型的对象，编译器不提示。</p></li><li><p>可以抛出的异常必须是Throwable或其子类的实例。下面的语句在编译时将会产生语法错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;want to throw&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-2-使用注意点："><a href="#5-2-使用注意点：" class="headerlink" title="5.2 使用注意点："></a>5.2 使用注意点：</h3><p>无论是编译时异常类型的对象，还是运行时异常类型的对象，如果没有被try..catch合理的处理，都会导致程序崩溃。</p><p>throw语句会导致程序执行流程被改变，throw语句是明确抛出一个异常对象，因此它<code>下面的代码将不会执行</code>。</p><p>如果当前方法没有try…catch处理这个异常对象，throw语句就会<code>代替return语句</code>提前终止当前方法的执行，并返回一个异常对象给调用者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThrow</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(max(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">31</span>,<span class="hljs-number">1</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(max(<span class="hljs-number">4</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(max());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span>&#123;<br>        <span class="hljs-keyword">if</span>(nums == <span class="hljs-literal">null</span> || nums.length==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;没有传入任何整数，无法获取最大值&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(nums[i] &gt; max)&#123;<br>                max = nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6-自定义异常"><a href="#6-自定义异常" class="headerlink" title="6. 自定义异常"></a>6. 自定义异常</h2><h3 id="6-1-为什么需要自定义异常类"><a href="#6-1-为什么需要自定义异常类" class="headerlink" title="6.1 为什么需要自定义异常类"></a>6.1 为什么需要自定义异常类</h3><p>Java中不同的异常类，分别表示着某一种具体的异常情况。那么在开发中总是有些异常情况是核心类库中没有定义好的，此时我们需要根据自己业务的异常情况来定义异常类。例如年龄负数问题，考试成绩负数问题，某员工已在团队中等。</p><h3 id="6-2-如何自定义异常类"><a href="#6-2-如何自定义异常类" class="headerlink" title="6.2 如何自定义异常类"></a>6.2 如何自定义异常类</h3><p>（1）要继承一个异常类型</p><p>​自定义一个编译时异常类型：自定义类继承<code>java.lang.Exception</code>。</p><p>​自定义一个运行时异常类型：自定义类继承<code>java.lang.RuntimeException</code>。</p><p>（2）建议大家提供至少两个构造器，一个是无参构造，一个是(String message)构造器。</p><p>（3）自定义异常需要提供<code>serialVersionUID</code></p><h3 id="6-3-注意点"><a href="#6-3-注意点" class="headerlink" title="6.3 注意点"></a>6.3 注意点</h3><ol><li><p>自定义的异常只能通过throw抛出。</p></li><li><p>自定义异常最重要的是异常类的名字和message属性。当异常出现时，可以根据名字判断异常类型。比如：<code>TeamException(&quot;成员已满，无法添加&quot;); </code>、 <code>TeamException(&quot;该员工已是某团队成员&quot;);</code></p></li><li><p>自定义异常对象只能手动抛出。抛出后由try..catch处理，也可以甩锅throws给调用者处理。</p></li></ol><h3 id="6-4-举例"><a href="#6-4-举例" class="headerlink" title="6.4 举例"></a>6.4 举例</h3><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">23423423435L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> idnumber;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">(String message, <span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>        <span class="hljs-built_in">this</span>.idnumber = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> idnumber;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyExpTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regist</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-keyword">throws</span> MyException &#123;<br>        <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyException</span>(<span class="hljs-string">&quot;人数为负值，不合理&quot;</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">else</span><br>            System.out.println(<span class="hljs-string">&quot;登记人数&quot;</span> + num);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">manager</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            regist(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (MyException e) &#123;<br>            System.out.print(<span class="hljs-string">&quot;登记失败，出错种类&quot;</span> + e.getId());<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;本次登记操作结束&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">MyExpTest</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyExpTest</span>();<br>        t.manager();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.define;<br><span class="hljs-comment">//自定义异常：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotTriangleException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">13465653435L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NotTriangleException</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NotTriangleException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.define;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> a;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> b;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> c;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Triangle</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b, <span class="hljs-type">double</span> c)</span> <span class="hljs-keyword">throws</span> NotTriangleException &#123;<br>        <span class="hljs-keyword">if</span>(a&lt;=<span class="hljs-number">0</span> || b&lt;=<span class="hljs-number">0</span> || c&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(<span class="hljs-string">&quot;三角形的边长必须是正数&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a+b&lt;=c || b+c&lt;=a || a+c&lt;=b)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(a+<span class="hljs-string">&quot;,&quot;</span> + b +<span class="hljs-string">&quot;,&quot;</span> + c +<span class="hljs-string">&quot;不能构造三角形，三角形任意两边之后必须大于第三边&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.a = a;<br>        <span class="hljs-built_in">this</span>.b = b;<br>        <span class="hljs-built_in">this</span>.c = c;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setA</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span> <span class="hljs-keyword">throws</span> NotTriangleException&#123;<br>        <span class="hljs-keyword">if</span>(a&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(<span class="hljs-string">&quot;三角形的边长必须是正数&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a+b&lt;=c || b+c&lt;=a || a+c&lt;=b)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(a+<span class="hljs-string">&quot;,&quot;</span> + b +<span class="hljs-string">&quot;,&quot;</span> + c +<span class="hljs-string">&quot;不能构造三角形，三角形任意两边之后必须大于第三边&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.a = a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getB</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setB</span><span class="hljs-params">(<span class="hljs-type">double</span> b)</span> <span class="hljs-keyword">throws</span> NotTriangleException &#123;<br>        <span class="hljs-keyword">if</span>(b&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(<span class="hljs-string">&quot;三角形的边长必须是正数&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a+b&lt;=c || b+c&lt;=a || a+c&lt;=b)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(a+<span class="hljs-string">&quot;,&quot;</span> + b +<span class="hljs-string">&quot;,&quot;</span> + c +<span class="hljs-string">&quot;不能构造三角形，三角形任意两边之后必须大于第三边&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.b = b;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getC</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setC</span><span class="hljs-params">(<span class="hljs-type">double</span> c)</span> <span class="hljs-keyword">throws</span> NotTriangleException &#123;<br>        <span class="hljs-keyword">if</span>(c&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(<span class="hljs-string">&quot;三角形的边长必须是正数&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a+b&lt;=c || b+c&lt;=a || a+c&lt;=b)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(a+<span class="hljs-string">&quot;,&quot;</span> + b +<span class="hljs-string">&quot;,&quot;</span> + c +<span class="hljs-string">&quot;不能构造三角形，三角形任意两边之后必须大于第三边&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.c = c;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Triangle&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;a=&quot;</span> + a +<br>                <span class="hljs-string">&quot;, b=&quot;</span> + b +<br>                <span class="hljs-string">&quot;, c=&quot;</span> + c +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.define;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTriangle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Triangle</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>            System.out.println(<span class="hljs-string">&quot;三角形创建成功：&quot;</span>);<br>            System.out.println(t);<br>        &#125; <span class="hljs-keyword">catch</span> (NotTriangleException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;三角形创建失败&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(t != <span class="hljs-literal">null</span>) &#123;<br>                t.setA(<span class="hljs-number">1</span>);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;三角形边长修改成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NotTriangleException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;三角形边长修改失败&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-练习"><a href="#7-练习" class="headerlink" title="7. 练习"></a>7. 练习</h2><p><strong>练习1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnExceptionDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;进入方法A&quot;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;制造异常&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;用A方法的finally&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodB</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;进入方法B&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;调用B方法的finally&quot;</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        methodA();<br>   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      System.out.println(e.getMessage());<br>    &#125;<br>    methodB();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><p>从键盘接收学生成绩，成绩必须在0~100之间。</p><p>自定义成绩无效异常。</p><p>编写方法接收成绩并返回该成绩，如果输入无效，则抛出自定义异常。</p><p><strong>练习3：</strong></p><p>编写应用程序EcmDef.java，接收命令行的两个参数，要求不能输入负数，计算两数相除。<br>对数据类型不一致(NumberFormatException)、缺少命令行参数(ArrayIndexOutOfBoundsException、<br>除0(ArithmeticException)及输入负数(EcDef 自定义的异常)进行异常处理。</p><p>提示：<br>(1)在主类(EcmDef)中定义异常方法(ecm)完成两数相除功能。</p><p>(2)在main()方法中使用异常处理语句进行异常处理。</p><p>(3)在程序中，自定义对应输入负数的异常类(EcDef)。</p><p>(4)运行时接受参数 java EcmDef 20 10   &#x2F;&#x2F;args[0]&#x3D;“20” args[1]&#x3D;“10”</p><p>(5)Interger类的static方法parseInt(String s)将s转换成对应的int值。<br>     如：int a&#x3D;Interger.parseInt(“314”);&#x2F;&#x2F;a&#x3D;314;</p><h2 id="8-小结与小悟"><a href="#8-小结与小悟" class="headerlink" title="8. 小结与小悟"></a>8. 小结与小悟</h2><h3 id="8-1-小结：异常处理5个关键字"><a href="#8-1-小结：异常处理5个关键字" class="headerlink" title="8.1 小结：异常处理5个关键字"></a>8.1 小结：异常处理5个关键字</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441160_watermark.png" alt="image-20220330003738109" style="zoom: 67%;" /><blockquote><p>类比：上游排污，下游治污</p></blockquote><h3 id="8-2-感悟"><a href="#8-2-感悟" class="headerlink" title="8.2 感悟"></a>8.2 感悟</h3><p><strong>小哲理：</strong></p><p>世界上最遥远的<code>距离</code>，是我在<code>if</code>里你在<code>else</code>里，似乎一直相伴又永远分离；</p><p>世界上最痴心的<code>等待</code>，是我当<code>case</code>你是<code>switch</code>，或许永远都选不上自己；</p><p>世界上最真情的<code>相依</code>，是你在<code>try</code>我在<code>catch</code>。无论你发神马脾气，我都默默承受，静静处理。到那时，再来期待我们的<code>finally</code>。</p><p><strong>歌词：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441877_watermark.png" alt="image-20220511163035280" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象编程（高级）</title>
    <link href="/2024/02/27/8.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/"/>
    <url>/2024/02/27/8.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-关键字：static"><a href="#1-关键字：static" class="headerlink" title="1. 关键字：static"></a>1. 关键字：static</h2><p><strong>回顾类中的实例变量（即非static的成员变量）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> radius;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span>&#123;<br>        <span class="hljs-built_in">this</span>.radius=radius;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findArea</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Math.PI*radius*radius;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建两个Circle对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Circle c1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">2.0</span>);<span class="hljs-comment">//c1.radius=2.0</span><br>Circle c2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">3.0</span>);<span class="hljs-comment">//c2.radius=3.0</span><br></code></pre></td></tr></table></figure><p>Circle类中的变量radius是一个实例变量(instance variable)，它属于类的每一个对象，c1中的radius变化不会影响c2的radius，反之亦然。</p><p><strong>如果想让一个成员变量被类的所有实例所共享，就用static修饰即可，称为类变量（或类属性）！</strong></p><h3 id="1-1-类属性、类方法的设计思想"><a href="#1-1-类属性、类方法的设计思想" class="headerlink" title="1.1 类属性、类方法的设计思想"></a>1.1 类属性、类方法的设计思想</h3><p>当我们编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象，只有通过new关键字才会产出对象，这时系统才会分配内存空间给对象，其方法才可以供外部调用。我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，<code>某些特定的数据在内存空间里只有一份</code>。例如，所有的中国人都有个国家名称，每一个中国人都共享这个国家名称，不必在每一个中国人的实例对象中都单独分配一个用于代表国家名称的变量。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951260_watermark.png" alt="image-20220325213629311"></p><p>此外，在类中声明的实例方法，在类的外面必须要先创建对象，才能调用。但是有些方法的调用者和当前类的对象无关，这样的方法通常被声明为<code>类方法</code>，由于不需要创建对象就可以调用类方法，从而简化了方法的调用。</p><p>这里的类变量、类方法，只需要使用<code>static</code>修饰即可。所以也称为静态变量、静态方法。</p><h3 id="1-2-static关键字"><a href="#1-2-static关键字" class="headerlink" title="1.2 static关键字"></a>1.2 static关键字</h3><ul><li><p>使用范围：</p><ul><li>在Java类中，可用static修饰属性、方法、代码块、内部类</li></ul></li><li><p>被修饰后的成员具备以下特点：</p><ul><li>随着类的加载而加载</li><li>优先于对象存在</li><li>修饰的成员，被所有对象所共享</li><li>访问权限允许时，可不创建对象，直接被类调用</li></ul></li></ul><h3 id="1-3-静态变量"><a href="#1-3-静态变量" class="headerlink" title="1.3 静态变量"></a>1.3 静态变量</h3><h4 id="1-3-1-语法格式"><a href="#1-3-1-语法格式" class="headerlink" title="1.3.1 语法格式"></a>1.3.1 语法格式</h4><p>使用static修饰的成员变量就是静态变量（或类变量、类属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 类&#123;<br>[其他修饰符] <span class="hljs-keyword">static</span> 数据类型 变量名;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-2-静态变量的特点"><a href="#1-3-2-静态变量的特点" class="headerlink" title="1.3.2 静态变量的特点"></a>1.3.2 静态变量的特点</h4><ul><li><p>静态变量的默认值规则和实例变量一样。</p></li><li><p>静态变量值是所有对象共享。</p></li><li><p>静态变量在本类中，可以在任意方法、代码块、构造器中直接使用。</p></li><li><p>如果权限修饰符允许，在其他类中可以通过“<code>类名.静态变量</code>”直接访问，也可以通过“<code>对象.静态变量</code>”的方式访问（但是更推荐使用类名.静态变量的方式）。</p></li><li><p>静态变量的get&#x2F;set方法也静态的，当局部变量与静态变量<code>重名时</code>，使用“<code>类名.静态变量</code>”进行区分。</p></li></ul><h4 id="1-3-3-举例"><a href="#1-3-3-举例" class="headerlink" title="1.3.3 举例"></a>1.3.3 举例</h4><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chinese</span>&#123;<br>    <span class="hljs-comment">//实例变量</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//类变量</span><br>    <span class="hljs-keyword">static</span> String nation;<span class="hljs-comment">//国籍</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Chinese</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Chinese</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Chinese&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, nation=&#x27;&quot;</span> + nation + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Chinese</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>(<span class="hljs-string">&quot;康师傅&quot;</span>,<span class="hljs-number">36</span>);<br>        c1.nation = <span class="hljs-string">&quot;中华人民共和国&quot;</span>;<br><br>        <span class="hljs-type">Chinese</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>(<span class="hljs-string">&quot;老干妈&quot;</span>,<span class="hljs-number">66</span>);<br><br>        System.out.println(c1);<br>        System.out.println(c2);<br><br>        System.out.println(Chinese.nation);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的内存结构：（以经典的JDK6内存解析为例，此时静态变量存储在方法区）</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951279_watermark.png" alt="image-20220514183814514" style="zoom:67%;" /><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> total;<span class="hljs-comment">//这里私有化，在类的外面必须使用get/set方法的方式来访问静态变量</span><br>    <span class="hljs-keyword">static</span> String company; <span class="hljs-comment">//这里缺省权限修饰符，是为了方便类外以“类名.静态变量”的方式访问</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">()</span> &#123;<br>        total++;<br>        id = total;<span class="hljs-comment">//这里使用total静态变量的值为id属性赋值</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>();<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTotal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> total;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTotal</span><span class="hljs-params">(<span class="hljs-type">int</span> total)</span> &#123;<br>        Employee.total = total;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee&#123;company = &quot;</span> + company + <span class="hljs-string">&quot;,id = &quot;</span> + id + <span class="hljs-string">&quot; ,name=&quot;</span> + name +<span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStaticVariable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//静态变量total的默认值是0</span><br>        System.out.println(<span class="hljs-string">&quot;Employee.total = &quot;</span> + Employee.getTotal());<br><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">e1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">e2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;李四&quot;</span>);<br>        System.out.println(e1);<span class="hljs-comment">//静态变量company的默认值是null</span><br>        System.out.println(e2);<span class="hljs-comment">//静态变量company的默认值是null</span><br>        System.out.println(<span class="hljs-string">&quot;Employee.total = &quot;</span> + Employee.getTotal());<span class="hljs-comment">//静态变量total值是2</span><br><br>        Employee.company = <span class="hljs-string">&quot;尚硅谷&quot;</span>;<br>        System.out.println(e1);<span class="hljs-comment">//静态变量company的值是尚硅谷</span><br>        System.out.println(e2);<span class="hljs-comment">//静态变量company的值是尚硅谷</span><br><br>        <span class="hljs-comment">//只要权限修饰符允许,虽然不推荐，但是也可以通过“对象.静态变量”的形式来访问</span><br>        e1.company = <span class="hljs-string">&quot;超级尚硅谷&quot;</span>;<br><br>        System.out.println(e1);<span class="hljs-comment">//静态变量company的值是超级尚硅谷</span><br>        System.out.println(e2);<span class="hljs-comment">//静态变量company的值是超级尚硅谷</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-4-内存解析"><a href="#1-3-4-内存解析" class="headerlink" title="1.3.4 内存解析"></a>1.3.4 内存解析</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951301_watermark.png" alt="image-20220104100145059"></p><h3 id="1-4-静态方法"><a href="#1-4-静态方法" class="headerlink" title="1.4 静态方法"></a>1.4 静态方法</h3><h4 id="1-4-1-语法格式"><a href="#1-4-1-语法格式" class="headerlink" title="1.4.1 语法格式"></a>1.4.1 语法格式</h4><p>用static修饰的成员方法就是静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 类&#123;<br>[其他修饰符] <span class="hljs-keyword">static</span> 返回值类型 方法名(形参列表)&#123;<br>        方法体<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-2-静态方法的特点"><a href="#1-4-2-静态方法的特点" class="headerlink" title="1.4.2 静态方法的特点"></a>1.4.2 静态方法的特点</h4><ul><li>静态方法在本类的任意方法、代码块、构造器中都可以直接被调用。</li><li>只要权限修饰符允许，静态方法在其他类中可以通过“类名.静态方法“的方式调用。也可以通过”对象.静态方法“的方式调用（但是更推荐使用类名.静态方法的方式）。</li><li>在static方法内部只能访问类的static修饰的属性或方法，不能访问类的非static的结构。</li><li>静态方法可以被子类继承，但不能被子类重写。</li><li>静态方法的调用都只看编译时类型。</li><li>因为不需要实例就可以访问static方法，因此static方法内部不能有this，也不能有super。如果有重名问题，使用“类名.”进行区别。</li></ul><h4 id="1-4-3-举例"><a href="#1-4-3-举例" class="headerlink" title="1.4.3 举例"></a>1.4.3 举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Father.method&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Father.fun&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-comment">//    @Override //尝试重写静态方法，加上@Override编译报错，去掉Override不报错，但是也不是重写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Son.fun&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStaticMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Father.method();<br>        Son.method();<span class="hljs-comment">//继承静态方法</span><br><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        f.method();<span class="hljs-comment">//执行Father类中的method</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-练习"><a href="#1-5-练习" class="headerlink" title="1.5 练习"></a>1.5 练习</h3><p>笔试题：如下程序执行会不会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 14:30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        test.hello();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习：</p><p>编写一个类实现银行账户的概念，包含的属性有“帐号”、“密码”、“存款余额”、“利率”、“最小余额”，定义封装这些属性的方法。<code>账号要自动生成。</code></p><p>编写主类，使用银行账户类，输入、输出3个储户的上述信息。</p><p>考虑：哪些属性可以设计成static属性。</p><h2 id="2-单例-Singleton-设计模式"><a href="#2-单例-Singleton-设计模式" class="headerlink" title="2. 单例(Singleton)设计模式"></a>2. 单例(Singleton)设计模式</h2><h3 id="2-1-设计模式概述"><a href="#2-1-设计模式概述" class="headerlink" title="2.1 设计模式概述"></a>2.1 设计模式概述</h3><p><strong>设计模式</strong>是在大量的<code>实践中总结</code>和<code>理论化</code>之后优选的代码结构、编程风格、以及解决问题的思考方式。设计模式免去我们自己再思考和摸索。就像是经典的棋谱，不同的棋局，我们用不同的棋谱。”套路”</p><p>经典的设计模式共有23种。每个设计模式均是特定环境下特定问题的处理方法。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951336_watermark.png" alt="image-20220520174508815" style="zoom: 80%;" /><blockquote><p>简单工厂模式并不是23中经典模式的一种，是其中工厂方法模式的简化版</p></blockquote><blockquote><p>对软件设计模式的研究造就了一本可能是面向对象设计方面最有影响的书籍：《设计模式》：《Design Patterns: Elements of Reusable Object-Oriented Software》（即后述《设计模式》一书），由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 合著（Addison-Wesley，1995）。这几位作者常被称为”四人组（Gang of Four）”，而这本书也就被称为”四人组（或 GoF）”书。</p></blockquote><h3 id="2-2-何为单例模式"><a href="#2-2-何为单例模式" class="headerlink" title="2.2 何为单例模式"></a>2.2 何为单例模式</h3><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类只提供一个取得其对象实例的方法。</p><h3 id="2-3-实现思路"><a href="#2-3-实现思路" class="headerlink" title="2.3 实现思路"></a>2.3 实现思路</h3><p>如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将<code>类的构造器的访问权限设置为private</code>，这样，就不能用new操作符在类的外部产生类的对象了，但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，<code>只能调用该类的某个静态方法</code>以返回类内部创建的对象，静态方法只能访问类中的静态成员变量，所以，指向类内部产生的<code>该类对象的变量也必须定义成静态的</code>。</p><h3 id="2-4-单例模式的两种实现方式"><a href="#2-4-单例模式的两种实现方式" class="headerlink" title="2.4 单例模式的两种实现方式"></a>2.4 单例模式的两种实现方式</h3><h4 id="2-4-1-饿汉式"><a href="#2-4-1-饿汉式" class="headerlink" title="2.4.1 饿汉式"></a>2.4.1 饿汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">// 1.私有化构造器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 2.内部提供一个当前类的实例</span><br>    <span class="hljs-comment">// 4.此实例也必须静态化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">single</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br><br>    <span class="hljs-comment">// 3.提供公共的静态的方法，返回当前类的对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> single;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-4-2-懒汉式"><a href="#2-4-2-懒汉式" class="headerlink" title="2.4.2 懒汉式"></a>2.4.2 懒汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">// 1.私有化构造器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">// 2.内部提供一个当前类的实例</span><br>    <span class="hljs-comment">// 4.此实例也必须静态化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton single;<br>    <span class="hljs-comment">// 3.提供公共的静态的方法，返回当前类的对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(single == <span class="hljs-literal">null</span>) &#123;<br>            single = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> single;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-4-3-饿汉式-vs-懒汉式"><a href="#2-4-3-饿汉式-vs-懒汉式" class="headerlink" title="2.4.3 饿汉式 vs 懒汉式"></a>2.4.3 饿汉式 vs 懒汉式</h4><p>饿汉式：</p><ul><li>特点：<code>立即加载</code>，即在使用类的时候已经将对象创建完毕。</li><li>优点：实现起来<code>简单</code>；没有多线程安全问题。</li><li>缺点：当类被加载的时候，会初始化static的实例，静态变量被创建并分配内存空间，从这以后，这个static的实例便一直占着这块内存，直到类被卸载时，静态变量被摧毁，并释放所占有的内存。因此在某些特定条件下会<code>耗费内存</code>。</li></ul><p>懒汉式：</p><ul><li>特点：<code>延迟加载</code>，即在调用静态方法时实例才被创建。</li><li>优点：实现起来比较简单；当类被加载的时候，static的实例未被创建并分配内存空间，当静态方法第一次被调用时，初始化实例变量，并分配内存，因此在某些特定条件下会<code>节约内存</code>。</li><li>缺点：在多线程环境中，这种实现方法是完全错误的，<code>线程不安全</code>，根本不能保证单例的唯一性。<ul><li>说明：在多线程章节，会将懒汉式改造成线程安全的模式。</li></ul></li></ul><h3 id="2-5-单例模式的优点及应用场景"><a href="#2-5-单例模式的优点及应用场景" class="headerlink" title="2.5 单例模式的优点及应用场景"></a>2.5 单例模式的优点及应用场景</h3><p>由于单例模式只生成一个实例，减少了<code>系统性能开销</code>，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</p><p>举例：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951470_watermark.png" alt="image-20220325222541203" style="zoom:67%;" /><p><strong>应用场景</strong></p><ul><li><p>Windows的Task Manager (任务管理器)就是很典型的单例模式</p></li><li><p>Windows的Recycle Bin (回收站)也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。</p></li><li><p>Application 也是单例的典型应用</p></li><li><p>应用程序的日志应用，一般都使用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只</p><p>能有一个实例去操作，否则内容不好追加。</p></li><li><p>数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。</p></li></ul><h2 id="3-理解main方法的语法"><a href="#3-理解main方法的语法" class="headerlink" title="3. 理解main方法的语法"></a>3. 理解main方法的语法</h2><p>由于JVM需要调用类的main()方法，所以该方法的访问权限必须是public，又因为JVM在执行main()方法时不必创建对象，所以该方法必须是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数。 </p><p>又因为main() 方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员，这种情况，我们在之前的例子中多次碰到。</p><p><strong>命令行参数用法举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommandPara</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;args[&quot;</span> + i + <span class="hljs-string">&quot;] = &quot;</span> + args[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//运行程序CommandPara.java</span><br>java CommandPara <span class="hljs-string">&quot;Tom&quot;</span> <span class="hljs-string">&quot;Jerry&quot;</span> <span class="hljs-string">&quot;Shkstart&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//输出结果</span><br>args[<span class="hljs-number">0</span>] = Tom<br>args[<span class="hljs-number">1</span>] = Jerry<br>args[<span class="hljs-number">2</span>] = Shkstart<br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951389_watermark.png" alt="image-20220325223215924"></p><p>IDEA工具：</p><p>（1）配置运行参数</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951857_watermark.png" alt="image-20211228101828718" style="zoom: 80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951097_watermark.png" alt="image-20211228102022216" style="zoom:67%;" /><p>（2）运行程序</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951379_watermark.png" alt="image-20211228102059327" style="zoom: 80%;" /><p>笔试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此处，Something类的文件名叫OtherThing.java</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Something</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] something_to_do)</span> &#123;        <br>        System.out.println(<span class="hljs-string">&quot;Do something ...&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//上述程序是否可以正常编译、运行？ </span><br><br></code></pre></td></tr></table></figure><h2 id="4-类的成员之四：代码块"><a href="#4-类的成员之四：代码块" class="headerlink" title="4. 类的成员之四：代码块"></a>4. 类的成员之四：代码块</h2><p>如果成员变量想要初始化的值不是一个硬编码的常量值，而是需要通过复杂的计算或读取文件、或读取运行环境信息等方式才能获取的一些值，该怎么办呢？此时，可以考虑代码块（或初始化块）。</p><ul><li><p>代码块(或初始化块)的<code>作用</code>：</p></li><li><p>对Java类或对象进行初始化</p></li><li><p>代码块(或初始化块)的<code>分类</code>：</p><ul><li><p>一个类中代码块若有修饰符，则只能被static修饰，称为静态代码块(static block)</p></li><li><p>没有使用static修饰的，为非静态代码块。</p></li></ul></li></ul><h3 id="4-1-静态代码块"><a href="#4-1-静态代码块" class="headerlink" title="4.1 静态代码块"></a>4.1 静态代码块</h3><p>如果想要为静态变量初始化，可以直接在静态变量的声明后面直接赋值，也可以使用静态代码块。</p><h4 id="4-1-1-语法格式"><a href="#4-1-1-语法格式" class="headerlink" title="4.1.1 语法格式"></a>4.1.1 语法格式</h4><p>在代码块的前面加static，就是静态代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">【修饰符】 class 类&#123;<br><span class="hljs-keyword">static</span>&#123;<br>        静态代码块<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-2-静态代码块的特点"><a href="#4-1-2-静态代码块的特点" class="headerlink" title="4.1.2 静态代码块的特点"></a>4.1.2 静态代码块的特点</h4><ol><li><p>可以有输出语句。</p></li><li><p>可以对类的属性、类的声明进行初始化操作。</p></li><li><p>不可以对非静态的属性初始化。即：不可以调用非静态的属性和方法。</p></li><li><p>若有多个静态的代码块，那么按照从上到下的顺序依次执行。</p></li><li><p>静态代码块的执行要先于非静态代码块。</p></li><li><p>静态代码块随着类的加载而加载，且只执行一次。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Chinese</span> &#123;<br><span class="hljs-comment">//    private static String country = &quot;中国&quot;;</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String country;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;非静态代码块，country = &quot;</span> + country);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        country = <span class="hljs-string">&quot;中国&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Chinese</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStaticBlock</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Chinese</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-type">Chinese</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>(<span class="hljs-string">&quot;李四&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-2-非静态代码块"><a href="#4-2-非静态代码块" class="headerlink" title="4.2 非静态代码块"></a>4.2 非静态代码块</h3><h4 id="4-2-1-语法格式"><a href="#4-2-1-语法格式" class="headerlink" title="4.2.1 语法格式"></a>4.2.1 语法格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">【修饰符】 class 类&#123;<br>    &#123;<br>        非静态代码块<br>    &#125;<br>    【修饰符】 构造器名()&#123;<br>    <span class="hljs-comment">// 实例初始化代码</span><br>    &#125;<br>    【修饰符】 构造器名(参数列表)&#123;<br>        <span class="hljs-comment">// 实例初始化代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-非静态代码块的作用"><a href="#4-2-2-非静态代码块的作用" class="headerlink" title="4.2.2 非静态代码块的作用"></a>4.2.2 非静态代码块的作用</h4><p>和构造器一样，也是用于实例变量的初始化等操作。</p><h4 id="4-2-3-非静态代码块的意义"><a href="#4-2-3-非静态代码块的意义" class="headerlink" title="4.2.3 非静态代码块的意义"></a>4.2.3 非静态代码块的意义</h4><p>如果多个重载的构造器有公共代码，并且这些代码都是先于构造器其他代码执行的，那么可以将这部分代码抽取到非静态代码块中，减少冗余代码。</p><h4 id="4-2-4-非静态代码块的执行特点"><a href="#4-2-4-非静态代码块的执行特点" class="headerlink" title="4.2.4 非静态代码块的执行特点"></a>4.2.4 非静态代码块的执行特点</h4><ol><li><p>可以有输出语句。</p></li><li><p>可以对类的属性、类的声明进行初始化操作。</p></li><li><p>除了调用非静态的结构外，还可以调用静态的变量或方法。</p></li><li><p>若有多个非静态的代码块，那么按照从上到下的顺序依次执行。</p></li><li><p>每次创建对象的时候，都会执行一次。且先于构造器执行。</p></li></ol><h3 id="4-3-举例"><a href="#4-3-举例" class="headerlink" title="4.3 举例"></a>4.3 举例</h3><p><strong>举例1：</strong></p><p>（1）声明User类，</p><ul><li><p>包含属性：username（String类型），password（String类型），registrationTime（long类型），私有化</p></li><li><p>包含get&#x2F;set方法，其中registrationTime没有set方法</p></li><li><p>包含无参构造，</p><ul><li>输出“新用户注册”，</li><li>registrationTime赋值为当前系统时间，</li><li>username就默认为当前系统时间值，</li><li>password默认为“123456”</li></ul></li><li><p>包含有参构造(String username, String password)，</p><ul><li>输出“新用户注册”，</li><li>registrationTime赋值为当前系统时间，</li><li>username和password由参数赋值</li></ul></li><li><p>包含public String getInfo()方法，返回：“用户名：xx，密码：xx，注册时间：xx”</p></li></ul><p>（2）编写测试类，测试类main方法的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    System.out.println(u1.getInfo());<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;song&quot;</span>,<span class="hljs-string">&quot;8888&quot;</span>);<br>    System.out.println(u2.getInfo());<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不用非静态代码块，User类是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.block.no;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> registrationTime;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;新用户注册&quot;</span>);<br>        registrationTime = System.currentTimeMillis();<br>        username = registrationTime+<span class="hljs-string">&quot;&quot;</span>;<br>        password = <span class="hljs-string">&quot;123456&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String username,String password)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;新用户注册&quot;</span>);<br>        registrationTime = System.currentTimeMillis();<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getRegistrationTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> registrationTime;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户名：&quot;</span> + username + <span class="hljs-string">&quot;，密码：&quot;</span> + password + <span class="hljs-string">&quot;，注册时间：&quot;</span> + registrationTime;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果提取构造器公共代码到非静态代码块，User类是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.block.use;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> registrationTime;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;新用户注册&quot;</span>);<br>        registrationTime = System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        username = registrationTime+<span class="hljs-string">&quot;&quot;</span>;<br>        password = <span class="hljs-string">&quot;123456&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String username, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getRegistrationTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> registrationTime;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户名：&quot;</span> + username + <span class="hljs-string">&quot;，密码：&quot;</span> + password + <span class="hljs-string">&quot;，注册时间：&quot;</span> + registrationTime;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">static</span>&#123;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>is = DBCPTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;dbcp.properties&quot;</span>);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">pros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>pros.load(is);<br><span class="hljs-comment">//调用BasicDataSourceFactory的静态方法，获取数据源。</span><br>dataSource = BasicDataSourceFactory.createDataSource(pros);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-keyword">if</span>(is != <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>is.close();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-小结：实例变量赋值顺序"><a href="#4-4-小结：实例变量赋值顺序" class="headerlink" title="4.4 小结：实例变量赋值顺序"></a>4.4 小结：实例变量赋值顺序</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951628_watermark.png" alt="image-20220325230208941" style="zoom:67%;" /><h3 id="4-5-练习"><a href="#4-5-练习" class="headerlink" title="4.5 练习"></a>4.5 练习</h3><p>练习1：分析加载顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Root</span>&#123;<br><span class="hljs-keyword">static</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Root的静态初始化块&quot;</span>);<br>&#125;<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;Root的普通初始化块&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Root</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Root的无参数的构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mid</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Root</span>&#123;<br><span class="hljs-keyword">static</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Mid的静态初始化块&quot;</span>);<br>&#125;<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;Mid的普通初始化块&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Mid</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Mid的无参数的构造器&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Mid</span><span class="hljs-params">(String msg)</span>&#123;<br><span class="hljs-comment">//通过this调用同一类中重载的构造器</span><br><span class="hljs-built_in">this</span>();<br>System.out.println(<span class="hljs-string">&quot;Mid的带参数构造器，其参数值：&quot;</span><br>+ msg);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Leaf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mid</span>&#123;<br><span class="hljs-keyword">static</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Leaf的静态初始化块&quot;</span>);<br>&#125;<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;Leaf的普通初始化块&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Leaf</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//通过super调用父类中有一个字符串参数的构造器</span><br><span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;尚硅谷&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Leaf的构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeafTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(); <br><span class="hljs-comment">//new Leaf();</span><br>&#125;<br>&#125;<br><br>Root的静态初始化块<br>Mid的静态初始化块<br>Leaf的静态初始化块<br>Root的普通初始化块<br>Root的无参数的构造器<br>Mid的普通初始化块<br>Mid的无参数的构造器<br>Mid的带参数构造器，其参数值：尚硅谷<br>Leaf的普通初始化块<br>Leaf的构造器<br></code></pre></td></tr></table></figure><p>练习2：分析加载顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">static</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;11111111111&quot;</span>);<br>&#125;<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;22222222222&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Father</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;33333333333&quot;</span>);<br><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">static</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;44444444444&quot;</span>);<br>&#125;<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;55555555555&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Son</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;66666666666&quot;</span>);<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <br>System.out.println(<span class="hljs-string">&quot;77777777777&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;************************&quot;</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>System.out.println(<span class="hljs-string">&quot;************************&quot;</span>);<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>System.out.println(<span class="hljs-string">&quot;************************&quot;</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>();<br>&#125;<br><br>&#125;<br><br><span class="hljs-number">11111111111</span><br><span class="hljs-number">44444444444</span><br><span class="hljs-number">77777777777</span><br>************************<br><span class="hljs-number">22222222222</span><br><span class="hljs-number">33333333333</span><br><span class="hljs-number">55555555555</span><br><span class="hljs-number">66666666666</span><br>************************<br><span class="hljs-number">22222222222</span><br><span class="hljs-number">33333333333</span><br><span class="hljs-number">55555555555</span><br><span class="hljs-number">66666666666</span><br>************************<br><span class="hljs-number">22222222222</span><br><span class="hljs-number">33333333333</span><br></code></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu05.field.interview;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 16:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Zi</span> <span class="hljs-variable">zi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zi</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> getNum(<span class="hljs-string">&quot;（1）i&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> getNum(<span class="hljs-string">&quot;（2）j&quot;</span>);<br>    <span class="hljs-keyword">static</span>&#123;<br>        print(<span class="hljs-string">&quot;（3）父类静态代码块&quot;</span>);<br>    &#125;<br>    &#123;<br>        print(<span class="hljs-string">&quot;（4）父类非静态代码块，又称为构造代码块&quot;</span>);<br>    &#125;<br>    Fu()&#123;<br>        print(<span class="hljs-string">&quot;（5）父类构造器&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String str)</span>&#123;<br>        System.out.println(str + <span class="hljs-string">&quot;-&gt;&quot;</span> + i);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNum</span><span class="hljs-params">(String str)</span>&#123;<br>        print(str);<br>        <span class="hljs-keyword">return</span> ++i;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> getNum(<span class="hljs-string">&quot;（6）k&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> getNum(<span class="hljs-string">&quot;（7）h&quot;</span>);<br>    <span class="hljs-keyword">static</span>&#123;<br>        print(<span class="hljs-string">&quot;（8）子类静态代码块&quot;</span>);<br>    &#125;<br>    &#123;<br>        print(<span class="hljs-string">&quot;（9）子类非静态代码块，又称为构造代码块&quot;</span>);<br>    &#125;<br>    Zi()&#123;<br>        print(<span class="hljs-string">&quot;（10）子类构造器&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String str)</span>&#123;<br>        System.out.println(str + <span class="hljs-string">&quot;-&gt;&quot;</span> + k);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNum</span><span class="hljs-params">(String str)</span>&#123;<br>        print(str);<br>        <span class="hljs-keyword">return</span> ++k;<br>    &#125;<br>&#125;<br><br>（<span class="hljs-number">1</span>）i-&gt;<span class="hljs-number">0</span><br>（<span class="hljs-number">3</span>）父类静态代码块-&gt;<span class="hljs-number">1</span><br>（<span class="hljs-number">6</span>）k-&gt;<span class="hljs-number">0</span><br>（<span class="hljs-number">8</span>）子类静态代码块-&gt;<span class="hljs-number">1</span><br>（<span class="hljs-number">2</span>）j-&gt;<span class="hljs-number">1</span><br>（<span class="hljs-number">4</span>）父类非静态代码块，又称为构造代码块-&gt;<span class="hljs-number">2</span><br>（<span class="hljs-number">5</span>）父类构造器-&gt;<span class="hljs-number">2</span><br>（<span class="hljs-number">7</span>）h-&gt;<span class="hljs-number">1</span><br>（<span class="hljs-number">9</span>）子类非静态代码块，又称为构造代码块-&gt;<span class="hljs-number">2</span><br>（<span class="hljs-number">10</span>）子类构造器-&gt;<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="5-final关键字"><a href="#5-final关键字" class="headerlink" title="5. final关键字"></a>5. final关键字</h2><h3 id="5-1-final的意义"><a href="#5-1-final的意义" class="headerlink" title="5.1 final的意义"></a>5.1 final的意义</h3><p>final：最终的，不可更改的</p><h3 id="5-2-final的使用"><a href="#5-2-final的使用" class="headerlink" title="5.2 final的使用"></a>5.2 final的使用</h3><h4 id="5-2-1-final修饰类"><a href="#5-2-1-final修饰类" class="headerlink" title="5.2.1 final修饰类"></a>5.2.1 final修饰类</h4><p>表示这个类不能被继承，没有子类。提高安全性，提高程序的可读性。</p><p>例如：String类、System类、StringBuffer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Eunuch</span>&#123;<span class="hljs-comment">//太监类</span><br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Eunuch</span>&#123;<span class="hljs-comment">//错误</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-2-final修饰方法"><a href="#5-2-2-final修饰方法" class="headerlink" title="5.2.2 final修饰方法"></a>5.2.2 final修饰方法</h4><p>表示这个方法不能被子类重写。</p><p>例如：Object类中的getClass()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;father&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//错误</span><br>System.out.println(<span class="hljs-string">&quot;son&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-3-final修饰变量"><a href="#5-2-3-final修饰变量" class="headerlink" title="5.2.3 final修饰变量"></a>5.2.3 final修饰变量</h4><p>final修饰某个变量（成员变量或局部变量），一旦赋值，它的值就不能被修改，即常量，常量名建议使用大写字母。</p><p>例如：final double MY_PI &#x3D; 3.14;</p><blockquote><p>如果某个成员变量用final修饰后，没有set方法，并且必须初始化（可以显式赋值、或在初始化块赋值、实例变量还可以在构造器中赋值）</p></blockquote><ul><li>修饰成员变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">totalNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> ID;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span> &#123;<br>        ID = ++totalNumber; <span class="hljs-comment">// 可在构造器中给final修饰的“变量”赋值</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        System.out.println(t.ID);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>修饰局部变量：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFinal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MIN_SCORE ;<br>        MIN_SCORE = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_SCORE</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        MAX_SCORE = <span class="hljs-number">200</span>; <span class="hljs-comment">//非法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>错误演示：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INFO</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu&quot;</span>;  <span class="hljs-comment">//声明常量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//The final field A.INFO cannot be  assigned</span><br>        <span class="hljs-comment">//INFO = &quot;尚硅谷&quot;; </span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-3-笔试题"><a href="#5-3-笔试题" class="headerlink" title="5.3 笔试题"></a>5.3 笔试题</h3><p>题1：排错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Something</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addOne</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">return</span> ++x;<br>        <span class="hljs-comment">// return x + 1;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题2：排错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Something</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Other</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Other</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Something</span>().addOne(o);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOne</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Other o)</span> &#123;<br>        <span class="hljs-comment">// o = new Other();</span><br>        o.i++;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Other</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> i;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6-抽象类与抽象方法-或abstract关键字"><a href="#6-抽象类与抽象方法-或abstract关键字" class="headerlink" title="6. 抽象类与抽象方法(或abstract关键字)"></a>6. 抽象类与抽象方法(或abstract关键字)</h2><h3 id="6-1-由来"><a href="#6-1-由来" class="headerlink" title="6.1 由来"></a>6.1 由来</h3><p>举例1：</p><p>随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类叫做抽象类。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951881_watermark.png" alt="image-20220325231608838"></p><p>举例2：</p><p>我们声明一些几何图形类：圆、矩形、三角形类等，发现这些类都有共同特征：求面积、求周长。那么这些共同特征应该抽取到一个共同父类：几何图形类中。但是这些方法在父类中又<code>无法给出具体的实现</code>，而是应该交给子类各自具体实现。那么父类在声明这些方法时，<code>就只有方法签名，没有方法体</code>，我们把没有方法体的方法称为<strong>抽象方法</strong>。Java语法规定，包含抽象方法的类必须是<strong>抽象类</strong>。</p><h3 id="6-2-语法格式"><a href="#6-2-语法格式" class="headerlink" title="6.2 语法格式"></a>6.2 语法格式</h3><ul><li><strong>抽象类</strong>：被abstract修饰的类。</li><li><strong>抽象方法</strong>：被abstract修饰没有方法体的方法。</li></ul><p>抽象类的语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[权限修饰符] <span class="hljs-keyword">abstract</span> class 类名&#123;<br>    <br>&#125;<br>[权限修饰符] <span class="hljs-keyword">abstract</span> class 类名 extends 父类&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>抽象方法的语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[其他修饰符] <span class="hljs-keyword">abstract</span> 返回值类型 方法名([形参列表]);<br></code></pre></td></tr></table></figure><blockquote><p>注意：抽象方法没有方法体</p></blockquote><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951912_watermark.png" alt="image-20220517204707255"></p><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span> <span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;小猫吃鱼和猫粮&quot;</span>); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CatTest</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建子类对象</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(); <br>       <br>        <span class="hljs-comment">// 调用eat方法</span><br>        c.eat();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做<strong>实现方法</strong>。</p><h3 id="6-3-使用说明"><a href="#6-3-使用说明" class="headerlink" title="6.3 使用说明"></a>6.3 使用说明</h3><ol><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p><p>抽象类是用来被继承的，抽象类的子类必须重写父类的抽象方法，并提供方法体。若没有重写全部的抽象方法，仍为抽象类。</p></blockquote></li><li><p>抽象类中，也有构造方法，是供子类创建对象时，初始化父类成员变量使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()或手动的super(实参列表)，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。 </p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li></ol><h3 id="6-4-注意事项"><a href="#6-4-注意事项" class="headerlink" title="6.4 注意事项"></a>6.4 注意事项</h3><ul><li><p>不能用abstract修饰变量、代码块、构造器；</p></li><li><p>不能用abstract修饰私有方法、静态方法、final的方法、final的类。</p></li></ul><h3 id="6-5-应用举例1"><a href="#6-5-应用举例1" class="headerlink" title="6.5 应用举例1"></a>6.5 应用举例1</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951081_watermark.png" alt="image-20220325232847872"></p><p>在航运公司系统中，Vehicle类需要定义两个方法分别<code>计算运输工具的燃料效率</code>和<code>行驶距离</code>。</p><p><strong>问题：</strong>卡车(Truck)和驳船(RiverBarge)的燃料效率和行驶距离的计算方法完全不同。Vehicle类不能提供计算方法，但子类可以。</p><p><strong>解决方案：</strong>Java允许类设计者指定：超类声明一个方法但不提供实现，该方法的实现由子类提供。这样的方法称为抽象方法。有一个或更多抽象方法的类称为抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Vehicle是一个抽象类，有两个抽象方法。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calcFuelEfficiency</span><span class="hljs-params">()</span>;<span class="hljs-comment">//计算燃料效率的抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calcTripDistance</span><span class="hljs-params">()</span>;<span class="hljs-comment">//计算行驶距离的抽象方法</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Truck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Vehicle</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calcFuelEfficiency</span><span class="hljs-params">( )</span>   &#123; <span class="hljs-comment">//写出计算卡车的燃料效率的具体方法   &#125;</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calcTripDistance</span><span class="hljs-params">( )</span>    &#123;  <span class="hljs-comment">//写出计算卡车行驶距离的具体方法   &#125;</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RiverBarge</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Vehicle</span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calcFuelEfficiency</span><span class="hljs-params">( )</span> &#123; <span class="hljs-comment">//写出计算驳船的燃料效率的具体方法  &#125;</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calcTripDistance</span><span class="hljs-params">( )</span>  &#123;  <span class="hljs-comment">//写出计算驳船行驶距离的具体方法&#125;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-6-应用举例2：模板方法设计模式-TemplateMethod"><a href="#6-6-应用举例2：模板方法设计模式-TemplateMethod" class="headerlink" title="6.6 应用举例2：模板方法设计模式(TemplateMethod)"></a>6.6 应用举例2：模板方法设计模式(TemplateMethod)</h3><p>抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。</p><p><strong>解决的问题</strong>：</p><ul><li><p>当功能内部一部分实现是确定的，另一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。</p></li><li><p>换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。</p></li></ul><p><strong>类比举例：</strong>英语六级模板</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951227_watermark.png" alt="image-20220503145003315" style="zoom: 80%;" /><p>制作月饼的模板：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951406_watermark.png" alt="image-20220517205013997" style="zoom: 50%;" /><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Template</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        code();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;执行时间是：&quot;</span> + (end - start));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">code</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubTemplate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Template</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">code</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><span class="hljs-comment">//抽象类的应用：模板方法的设计模式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TemplateMethodTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">BankTemplateMethod</span> <span class="hljs-variable">btm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawMoney</span>();<br>btm.process();<br><br><span class="hljs-type">BankTemplateMethod</span> <span class="hljs-variable">btm2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ManageMoney</span>();<br>btm2.process();<br>&#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BankTemplateMethod</span> &#123;<br><span class="hljs-comment">// 具体方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">takeNumber</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;取号排队&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transact</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 办理具体的业务 //钩子方法</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">evaluate</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;反馈评分&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 模板方法，把基本操作组合到一起，子类一般不能重写</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.takeNumber();<br><br><span class="hljs-built_in">this</span>.transact();<span class="hljs-comment">// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类的实现代码</span><br><br><span class="hljs-built_in">this</span>.evaluate();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawMoney</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BankTemplateMethod</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transact</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;我要取款！！！&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ManageMoney</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BankTemplateMethod</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transact</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;我要理财！我这里有2000万美元!!&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>模板方法设计模式是编程中经常用得到的模式。各个框架、类库中都有他的影子，比如常见的有：</p><ul><li><p>数据库访问的封装</p></li><li><p>Junit单元测试</p></li><li><p>JavaWeb的Servlet中关于doGet&#x2F;doPost方法调用</p></li><li><p>Hibernate中模板程序</p></li><li><p>Spring中JDBCTemlate、HibernateTemplate等</p></li></ul><h3 id="6-7-思考与练习"><a href="#6-7-思考与练习" class="headerlink" title="6.7 思考与练习"></a>6.7 思考与练习</h3><p><strong>思考：</strong></p><p>问题1：为什么抽象类不可以使用final关键字声明？</p><p>问题2：一个抽象类中可以定义构造器吗？</p><p>问题3：是否可以这样理解：抽象类就是比普通类多定义了抽象方法，除了不能直接进行类的实例化操作之外，并没有任何的不同？</p><p><strong>练习1：</strong></p><p>编写一个Employee类，声明为抽象类，包含如下三个属性：name，id，salary。提供必要的构造器和抽象方法：work()。</p><p>对于Manager类来说，他既是员工，还具有奖金(bonus)的属性。</p><p>请使用继承的思想，设计CommonEmployee类和Manager类，要求类中提供必要的方法进行属性访问。</p><p><strong>练习2：软件外包公司外派管理</strong></p><p>有一家软件外包公司，可以外派开发人员，该公司有两个角色：普通开发人员Developer和项目经理Manager。他们的关系如下图：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951970_watermark.png" alt="image-20220504164925878"></p><p>普通开发人员的工作内容是“开发项目”，项目经理的工作内容是“项目管理”。对外的报价是普通开发人员每天500,元，超过60天每天400元。项目经理每天800元，超过60天每天700元。</p><p>有一家银行需要1名项目经理、2名开发人员，现场开发90天，计算银行需要付给软件公司的总金额。</p><p>提示：创建数组 Employee[] emps &#x3D; new Employee[3]。其中存储驻场的3名员工。</p><p><strong>练习3：</strong></p><p>创建父类Shape，包含绘制形状的抽象方法draw()。</p><p>创建Shape的子类Circle和Rectangle，重写draw()方法，绘制圆形和矩形。</p><p>绘制多个圆形和矩形。</p><p><strong>练习4：</strong></p><p>1、声明抽象父类Person，包含抽象方法public abstract void eat();<br>2、声明子类中国人Chinese，重写抽象方法，打印用筷子吃饭<br>3、声明子类美国人American，重写抽象方法，打印用刀叉吃饭<br>4、声明子类印度人Indian，重写抽象方法，打印用手抓饭<br>5、声明测试类PersonTest，创建Person数组，存储各国人对象，并遍历数组，调用eat()方法</p><p><strong>练习5：工资系统设计</strong></p><p>编写工资系统，实现不同类型员工(多态)的按月发放工资。如果当月出现某个Employee对象的生日，则将该雇员的工资增加100元。</p><p>实验说明：</p><p>（1）定义一个Employee类，该类包含：</p><p>private成员变量name,number,birthday，其中birthday 为MyDate类的对象；</p><p>abstract方法earnings()；</p><p>toString()方法输出对象的name,number和birthday。</p><p>（2）MyDate类包含:</p><p>private成员变量year,month,day ；</p><p>toDateString()方法返回日期对应的字符串：xxxx年xx月xx日</p><p>（3）定义SalariedEmployee类继承Employee类，实现按月计算工资的员工处理。该类包括：private成员变量monthlySalary；</p><p>实现父类的抽象方法earnings(),该方法返回monthlySalary值；toString()方法输出员工类型信息及员工的name，number,birthday。</p><p>（4）参照SalariedEmployee类定义HourlyEmployee类，实现按小时计算工资的员工处理。该类包括：</p><p>private成员变量wage和hour；</p><p>实现父类的抽象方法earnings(),该方法返回wage*hour值；</p><p>toString()方法输出员工类型信息及员工的name，number,birthday。</p><p>（5）定义PayrollSystem类，创建Employee变量数组并初始化，该数组存放各类雇员对象的引用。利用循环结构遍历数组元素，输出各个对象的类型,name,number,birthday,以及该对象生日。当键盘输入本月月份值时，如果本月是某个Employee对象的生日，还要输出增加工资信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//提示：</span><br><span class="hljs-comment">//定义People类型的数组People c1[]=new People[10];</span><br><span class="hljs-comment">//数组元素赋值</span><br>c1[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;0001&quot;</span>,<span class="hljs-number">20</span>);<br>c1[<span class="hljs-number">1</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;0002&quot;</span>,<span class="hljs-number">19</span>);<br><span class="hljs-comment">//若People有两个子类Student和Officer，则数组元素赋值时，可以使父类类型的数组元素指向子类。</span><br>c1[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;0001&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">85.0</span>);<br>c1[<span class="hljs-number">1</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Officer</span>(<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;0002&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">90.5</span>);<br><br></code></pre></td></tr></table></figure><h2 id="7-接口-interface"><a href="#7-接口-interface" class="headerlink" title="7. 接口(interface)"></a>7. 接口(interface)</h2><h3 id="7-1-类比"><a href="#7-1-类比" class="headerlink" title="7.1 类比"></a>7.1 类比</h3><p>生活中大家每天都在用USB接口，那么USB接口与我们今天要学习的接口有什么相同点呢？</p><pre><code class="hljs"> USB，（Universal Serial Bus，通用串行总线）是Intel公司开发的总线架构，使得在计算机上添加串行设备（鼠标、键盘、打印机、扫描仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等）非常容易。</code></pre><p>其实，不管是电脑上的USB插口，还是其他设备上的USB插口都只是<code>遵循了USB规范</code>的一种具体设备而已。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951180_watermark.png" alt="bbcc80f541000c71b81650cfaa770c86"></p><p>只要设备遵循USB规范的，那么就可以与电脑互联，并正常通信。至于这个设备、电脑是哪个厂家制造的，内部是如何实现的，我们都无需关心。</p><p>Java的软件系统会有很多模块组成，那么各个模块之间也应该采用这种<code>面向接口</code>的<code>低耦合</code>，为系统提供更好的可扩展性和可维护性。</p><h3 id="7-2-概述"><a href="#7-2-概述" class="headerlink" title="7.2 概述"></a>7.2 概述</h3><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是&#x2F;要…则必须能…”的思想。继承是一个”是不是”的is-a关系，而接口实现则是 “能不能”的<code>has-a</code>关系。</p><ul><li>例如：电脑都预留了可以插入USB设备的USB接口，USB接口具备基本的数据传输的开启功能和关闭功能。你能不能用USB进行连接，或是否具备USB通信功能，就看你能否遵循USB接口规范</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951582_watermark.png" alt="image-20220517211517846" style="zoom:67%;" /><ul><li>例如：Java程序是否能够连接使用某种数据库产品，那么要看该数据库产品能否实现Java设计的JDBC规范</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951718_watermark.png" alt="image-20220325235434103" style="zoom:67%;" /><blockquote><p>接口的本质是契约、标准、规范，就像我们的法律一样。制定好后大家都要遵守。</p></blockquote><h3 id="7-3-定义格式"><a href="#7-3-定义格式" class="headerlink" title="7.3 定义格式"></a>7.3 定义格式</h3><p>接口的定义，它与定义类方式相似，但是使用 <code>interface</code> 关键字。它也会被编译成.class文件，但一定要明确它并不是类，而是另外一种引用数据类型。</p><blockquote><p>引用数据类型：数组，类，枚举，接口，注解。</p></blockquote><h4 id="7-3-1-接口的声明格式"><a href="#7-3-1-接口的声明格式" class="headerlink" title="7.3.1 接口的声明格式"></a>7.3.1 接口的声明格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] interface 接口名&#123;<br>    <span class="hljs-comment">//接口的成员列表：</span><br>    <span class="hljs-comment">// 公共的静态常量</span><br>    <span class="hljs-comment">// 公共的抽象方法</span><br>    <br>    <span class="hljs-comment">// 公共的默认方法（JDK1.8以上）</span><br>    <span class="hljs-comment">// 公共的静态方法（JDK1.8以上）</span><br>    <span class="hljs-comment">// 私有方法（JDK1.9以上）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB3</span>&#123;<br>    <span class="hljs-comment">//静态常量</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">MAX_SPEED</span> <span class="hljs-operator">=</span> <span class="hljs-number">500</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;<span class="hljs-comment">//500MB/s</span><br><br>    <span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//默认方法</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;USB 3.0可以同步全速地进行读写操作&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-3-2-接口的成员说明"><a href="#7-3-2-接口的成员说明" class="headerlink" title="7.3.2 接口的成员说明"></a>7.3.2 接口的成员说明</h4><p><strong>在JDK8.0 之前</strong>，接口中只允许出现：</p><p>（1）公共的静态的常量：其中<code>public static final</code>可以省略</p><p>（2）公共的抽象的方法：其中<code>public abstract</code>可以省略</p><blockquote><p>理解：接口是从多个相似类中抽象出来的规范，不需要提供具体实现</p></blockquote><p><strong>在JDK8.0 时</strong>，接口中允许声明<code>默认方法</code>和<code>静态方法</code>：</p><p>（3）公共的默认的方法：其中public 可以省略，建议保留，但是default不能省略</p><p>（4）公共的静态的方法：其中public 可以省略，建议保留，但是static不能省略</p><p><strong>在JDK9.0 时</strong>，接口又增加了：</p><p>（5）私有方法</p><p>除此之外，接口中没有构造器，没有初始化块，因为接口中没有成员变量需要动态初始化。</p><h3 id="7-4-接口的使用规则"><a href="#7-4-接口的使用规则" class="headerlink" title="7.4 接口的使用规则"></a>7.4 接口的使用规则</h3><p><strong>1、类实现接口（implements）</strong></p><p>接口<strong>不能创建对象</strong>，但是可以被类实现（<code>implements</code> ，类似于被继承）。</p><p>类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的实现类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 <code> implements</code>关键字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">【修饰符】 class 实现类  implements 接口&#123;<br><span class="hljs-comment">// 重写接口中抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span><br>  <span class="hljs-comment">// 重写接口中默认方法【可选】</span><br>&#125;<br><br>【修饰符】 class 实现类 extends 父类 implements 接口&#123;<br>    <span class="hljs-comment">// 重写接口中抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span><br>  <span class="hljs-comment">// 重写接口中默认方法【可选】</span><br>&#125;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951181_watermark.png" alt="image-20220514163212312" style="zoom:80%;" /><p>注意：</p><ol><li><p>如果接口的实现类是非抽象类，那么必须<code>重写接口中所有抽象方法</code>。</p></li><li><p>默认方法可以选择保留，也可以重写。</p><blockquote><p>重写时，default单词就不要再写了，它只用于在接口中表示默认方法，到类中就没有默认方法的概念了</p></blockquote></li><li><p>接口中的静态方法不能被继承也不能被重写</p></li></ol><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB</span>&#123;<span class="hljs-comment">// </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> ;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(USB usb)</span>&#123;<br>usb.start() ;<br>System.out.println(<span class="hljs-string">&quot;=========== USB 设备工作 ========&quot;</span>) ;<br>usb.stop() ;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Flash</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">// 重写方法</span><br>System.out.println(<span class="hljs-string">&quot;U盘开始工作。&quot;</span>) ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">// 重写方法</span><br>System.out.println(<span class="hljs-string">&quot;U盘停止工作。&quot;</span>) ;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Print</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">// 重写方法</span><br>System.out.println(<span class="hljs-string">&quot;打印机开始工作。&quot;</span>) ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">// 重写方法</span><br>System.out.println(<span class="hljs-string">&quot;打印机停止工作。&quot;</span>) ;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfaceDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>Computer.show(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flash</span>()) ;<br>Computer.show(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Print</span>()) ;<br><br>c.show(<span class="hljs-keyword">new</span> <span class="hljs-title class_">USB</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;移动硬盘开始运行&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;移动硬盘停止运行&quot;</span>);<br>&#125;<br>&#125;);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2、接口的多实现（implements）</strong></p><p>之前学过，在继承体系中，一个类只能继承一个父类。而对于接口而言，一个类是可以实现多个接口的，这叫做接口的<code>多实现</code>。并且，一个类能继承一个父类，同时实现多个接口。</p><p>实现格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">【修饰符】 class 实现类  implements 接口<span class="hljs-number">1</span>，接口<span class="hljs-number">2</span>，接口<span class="hljs-number">3</span>。。。&#123;<br><span class="hljs-comment">// 重写接口中所有抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span><br>  <span class="hljs-comment">// 重写接口中默认方法【可选】</span><br>&#125;<br><br>【修饰符】 class 实现类 extends 父类 implements 接口<span class="hljs-number">1</span>，接口<span class="hljs-number">2</span>，接口<span class="hljs-number">3</span>。。。&#123;<br>    <span class="hljs-comment">// 重写接口中所有抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span><br>  <span class="hljs-comment">// 重写接口中默认方法【可选】</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>接口中，有多个抽象方法时，实现类必须重写所有抽象方法。<strong>如果抽象方法有重名的，只需要重写一次</strong>。</p></blockquote><p>举例：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951631_watermark.png" alt="image-20220514163311418" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951817_watermark.png" alt="image-20220325235321778" style="zoom:67%;" /><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951032_watermark.png" alt="1562216188519"></p><p>定义多个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showA</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showB</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>,B &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showA</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;showA&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showB</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;showB&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br>        c.showA();<br>        c.showB();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、接口的多继承(extends)</strong></p><p>一个接口能继承另一个或者多个接口，接口的继承也使用 <code>extends</code> 关键字，子接口继承父接口的方法。</p><p>定义父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Chargeable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">charge</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义子接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UsbC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Chargeable</span>,USB3 &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义子接口的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeCConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UsbC</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;正反面都支持&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">charge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;可充电&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;接收数据&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;输出数据&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>所有父接口的抽象方法都有重写。</p><p>方法签名相同的抽象方法只需要实现一次。</p></blockquote><p><strong>4、接口与实现类对象构成多态引用</strong></p><p>实现类实现接口，类似于子类继承父类，因此，接口类型的变量与实现类的对象之间，也可以构成多态引用。通过接口类型的变量调用方法，最终执行的是你new的实现类对象实现的方法体。</p><p>接口的不同实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mouse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB3</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;发送脉冲信号&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;不接收信号&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyBoard</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB3</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;不接收信号&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;发送按键信号&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestComputer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br>        <span class="hljs-type">USB3</span> <span class="hljs-variable">usb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mouse</span>();<br>        computer.setUsb(usb);<br>        usb.start();<br>        usb.out();<br>        usb.in();<br>        usb.stop();<br>        System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br>        usb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyBoard</span>();<br>        computer.setUsb(usb);<br>        usb.start();<br>        usb.out();<br>        usb.in();<br>        usb.stop();<br>        System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br>        usb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MobileHDD</span>();<br>        computer.setUsb(usb);<br>        usb.start();<br>        usb.out();<br>        usb.in();<br>        usb.stop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5、使用接口的静态成员</strong></p><p>接口不能直接创建对象，但是可以通过接口名直接调用接口的静态方法和静态常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUSB3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//通过“接口名.”调用接口的静态方法 (JDK8.0才能开始使用)</span><br>        USB3.show();<br>        <span class="hljs-comment">//通过“接口名.”直接使用接口的静态常量</span><br>        System.out.println(USB3.MAX_SPEED);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6、使用接口的非静态方法</strong></p><ul><li>对于接口的静态方法，直接使用“<code>接口名.</code>”进行调用即可<ul><li>也只能使用“接口名.”进行调用，不能通过实现类的对象进行调用</li></ul></li><li>对于接口的抽象方法、默认方法，只能通过实现类对象才可以调用<ul><li>接口不能直接创建对象，只能创建实现类的对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMobileHDD</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建实现类对象</span><br>        <span class="hljs-type">MobileHDD</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MobileHDD</span>();<br><br>        <span class="hljs-comment">//通过实现类对象调用重写的抽象方法，以及接口的默认方法，如果实现类重写了就执行重写的默认方法，如果没有重写，就执行接口中的默认方法</span><br>        b.start();<br>        b.in();<br>        b.stop();<br><br>        <span class="hljs-comment">//通过接口名调用接口的静态方法</span><br><span class="hljs-comment">//        MobileHDD.show();</span><br><span class="hljs-comment">//        b.show();</span><br>        Usb3.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-5-JDK8中相关冲突问题"><a href="#7-5-JDK8中相关冲突问题" class="headerlink" title="7.5 JDK8中相关冲突问题"></a>7.5 JDK8中相关冲突问题</h3><h4 id="7-5-1-默认方法冲突问题"><a href="#7-5-1-默认方法冲突问题" class="headerlink" title="7.5.1 默认方法冲突问题"></a>7.5.1 默认方法冲突问题</h4><p><strong>（1）类优先原则</strong></p><p>当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的抽象方法重名，子类就近选择执行父类的成员方法。代码如下：</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Friend</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">date</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//约会</span><br>        System.out.println(<span class="hljs-string">&quot;吃喝玩乐&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">date</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//约会</span><br>        System.out.println(<span class="hljs-string">&quot;爸爸约吃饭&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Friend</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">date</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//(1)不重写默认保留父类的</span><br>        <span class="hljs-comment">//(2)调用父类被重写的</span><br><span class="hljs-comment">//        super.date();</span><br>        <span class="hljs-comment">//(3)保留父接口的</span><br><span class="hljs-comment">//        Friend.super.date();</span><br>        <span class="hljs-comment">//(4)完全重写</span><br>        System.out.println(<span class="hljs-string">&quot;跟康师傅学Java&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSon</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        s.date();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（2）接口冲突（左右为难）</strong></p><ul><li>当一个类同时实现了多个父接口，而多个父接口中包含方法签名相同的默认方法时，怎么办呢？</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951062_watermark.jpg"></p><p>无论你多难抉择，最终都是要做出选择的。</p><p>声明接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BoyFriend</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">date</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//约会</span><br>        System.out.println(<span class="hljs-string">&quot;神秘约会&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>选择保留其中一个，通过“<code>接口名.super.方法名</code>“的方法选择保留哪个接口的默认方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Girl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Friend</span>,BoyFriend&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">date</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//(1)保留其中一个父接口的</span><br><span class="hljs-comment">//        Friend.super.date();</span><br><span class="hljs-comment">//        BoyFriend.super.date();</span><br>        <span class="hljs-comment">//(2)完全重写</span><br>        System.out.println(<span class="hljs-string">&quot;跟康师傅学Java&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestGirl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Girl</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>();<br>        girl.date();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>当一个子接口同时继承了多个接口，而多个父接口中包含方法签名相同的默认方法时，怎么办呢？</li></ul><p>另一个父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB2</span> &#123;<br>    <span class="hljs-comment">//静态常量</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">MAX_SPEED</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;<span class="hljs-comment">//60MB/s</span><br><br>    <span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//默认方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;USB 2.0可以高速地进行读写操作&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">USB2</span>,USB3 &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Usb.start&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Usb.stop&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>子接口重写默认方法时，default关键字可以保留。</p><p>子类重写默认方法时，default关键字不可以保留。</p></blockquote><h4 id="7-5-2-常量冲突问题"><a href="#7-5-2-常量冲突问题" class="headerlink" title="7.5.2 常量冲突问题"></a>7.5.2 常量冲突问题</h4><ul><li>当子类继承父类又实现父接口，而父类中存在与父接口常量同名的成员变量，并且该成员变量名在子类中仍然可见。</li><li>当子类同时实现多个接口，而多个接口存在相同同名常量。</li></ul><p>此时在子类中想要引用父类或父接口的同名的常量或成员变量时，就会有冲突问题。</p><p>父类和父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperClass</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SuperInterface</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MotherInterface</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SuperClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SuperInterface</span>,MotherInterface &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        System.out.println(&quot;x = &quot; + x);//模糊不清</span><br>        System.out.println(<span class="hljs-string">&quot;super.x = &quot;</span> + <span class="hljs-built_in">super</span>.x);<br>        System.out.println(<span class="hljs-string">&quot;SuperInterface.x = &quot;</span> + SuperInterface.x);<br>        System.out.println(<span class="hljs-string">&quot;MotherInterface.x = &quot;</span> + MotherInterface.x);<br>        System.out.println(<span class="hljs-string">&quot;y = &quot;</span> + y);<span class="hljs-comment">//没有重名问题，可以直接访问</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-6-接口的总结与面试题"><a href="#7-6-接口的总结与面试题" class="headerlink" title="7.6 接口的总结与面试题"></a>7.6 接口的总结与面试题</h3><ul><li>接口本身不能创建对象，只能创建接口的实现类对象，接口类型的变量可以与实现类对象构成多态引用。</li><li>声明接口用interface，接口的成员声明有限制：<ul><li>（1）公共的静态常量</li><li>（2）公共的抽象方法</li><li>（3）公共的默认方法（JDK8.0 及以上）</li><li>（4）公共的静态方法（JDK8.0 及以上）</li><li>（5）私有方法（JDK9.0 及以上）</li></ul></li><li>类可以实现接口，关键字是implements，而且支持多实现。如果实现类不是抽象类，就必须实现接口中所有的抽象方法。如果实现类既要继承父类又要实现父接口，那么继承（extends）在前，实现（implements）在后。</li><li>接口可以继承接口，关键字是extends，而且支持多继承。</li><li>接口的默认方法可以选择重写或不重写。如果有冲突问题，另行处理。子类重写父接口的默认方法，要去掉default，子接口重写父接口的默认方法，不要去掉default。</li><li>接口的静态方法不能被继承，也不能被重写。接口的静态方法只能通过“接口名.静态方法名”进行调用。</li></ul><p><strong>面试题</strong></p><p><strong>1、为什么接口中只能声明公共的静态的常量？</strong></p><p>因为接口是标准规范，那么在规范中需要声明一些底线边界值，当实现者在实现这些规范时，不能去随意修改和触碰这些底线，否则就有“危险”。</p><p>例如：USB1.0规范中规定最大传输速率是1.5Mbps，最大输出电流是5V&#x2F;500mA</p><p>​           USB3.0规范中规定最大传输速率是5Gbps(500MB&#x2F;s)，最大输出电流是5V&#x2F;900mA</p><p>例如：尚硅谷学生行为规范中规定学员，早上8:25之前进班，晚上21:30之后离开等等。</p><p><strong>2、为什么JDK8.0 之后允许接口定义静态方法和默认方法呢？因为它违反了接口作为一个抽象标准定义的概念。</strong></p><p><code>静态方法</code>：因为之前的标准类库设计中，有很多Collection&#x2F;Colletions或者Path&#x2F;Paths这样成对的接口和类，后面的类中都是静态方法，而这些静态方法都是为前面的接口服务的，那么这样设计一对API，不如把静态方法直接定义到接口中使用和维护更方便。</p><p><code>默认方法</code>：（1）我们要在已有的老版接口中提供新方法时，如果添加抽象方法，就会涉及到原来使用这些接口的类就会有问题，那么为了保持与旧版本代码的兼容性，只能允许在接口中定义默认方法实现。比如：Java8中对Collection、List、Comparator等接口提供了丰富的默认方法。（2）当我们接口的某个抽象方法，在很多实现类中的实现代码是一样的，此时将这个抽象方法设计为默认方法更为合适，那么实现类就可以选择重写，也可以选择不重写。</p><p><strong>3、为什么JDK1.9要允许接口定义私有方法呢？因为我们说接口是规范，规范是需要公开让大家遵守的。</strong></p><p><strong>私有方法</strong>：因为有了默认方法和静态方法这样具有具体实现的方法，那么就可能出现多个方法由共同的代码可以抽取，而这些共同的代码抽取出来的方法又只希望在接口内部使用，所以就增加了私有方法。</p><h3 id="7-7-接口与抽象类之间的对比"><a href="#7-7-接口与抽象类之间的对比" class="headerlink" title="7.7 接口与抽象类之间的对比"></a>7.7 接口与抽象类之间的对比</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951174_watermark.png" alt="image-20220328002053452"></p><blockquote><p>在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口。</p></blockquote><h3 id="7-8-练习"><a href="#7-8-练习" class="headerlink" title="7.8 练习"></a>7.8 练习</h3><p><strong>笔试题：</strong>排错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pX</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(x);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>().pX();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>笔试题：</strong>排错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Playable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Bounceable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rollable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Playable</span>, Bounceable &#123;<br>    <span class="hljs-type">Ball</span> <span class="hljs-variable">ball</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ball</span>(<span class="hljs-string">&quot;PingPang&quot;</span>);<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ball</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rollable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Ball</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span> &#123;<br>        ball = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ball</span>(<span class="hljs-string">&quot;Football&quot;</span>);<br>        System.out.println(ball.getName());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习1：</strong></p><p>定义一个接口用来实现两个对象的比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CompareObject</span>&#123;<br><span class="hljs-comment">//若返回值是 0 , 代表相等; 若为正数，代表当前对象大；负数代表当前对象小</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个Circle类，声明redius属性，提供getter和setter方法</p><p>定义一个ComparableCircle类，继承Circle类并且实现CompareObject接口。在ComparableCircle类中给出接口中方法compareTo的实现体，用来比较两个圆的半径大小。</p><p>定义一个测试类InterfaceTest，创建两个ComparableCircle对象，调用compareTo方法比较两个类的半径大小。</p><p>思考：参照上述做法定义矩形类Rectangle和ComparableRectangle类，在ComparableRectangle类中给出compareTo方法的实现，比较两个矩形的面积大小。</p><p><strong>练习2：交通工具案例</strong></p><p>阿里的一个工程师，声明的属性和方法如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951549_watermark.png" alt="image-20220504172547709"></p><p>其中，有一个乘坐交通工具的方法takingVehicle()，在此方法中调用交通工具的run()。为了出行方便，他买了一辆捷安特自行车、一辆雅迪电动车和一辆奔驰轿车。这里涉及到的相关类及接口关系如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951169_watermark.png" alt="image-20220504172918861"></p><p>其中，电动车增加动力的方式是充电，轿车增加动力的方式是加油。在具体交通工具的run()中调用其所在类的相关属性信息。</p><p>请编写相关代码，并测试。</p><p>提示：创建Vehicle[]数组，保存阿里工程师的三辆交通工具，并分别在工程师的takingVehicle()中调用。</p><h2 id="8-内部类（InnerClass"><a href="#8-内部类（InnerClass" class="headerlink" title="8. 内部类（InnerClass)"></a>8. 内部类（InnerClass)</h2><h3 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h3><h4 id="8-1-1-什么是内部类"><a href="#8-1-1-什么是内部类" class="headerlink" title="8.1.1 什么是内部类"></a>8.1.1 什么是内部类</h4><p>将一个类A定义在另一个类B里面，里面的那个类A就称为<code>内部类（InnerClass）</code>，类B则称为<code>外部类（OuterClass）</code>。</p><h4 id="8-1-2-为什么要声明内部类呢"><a href="#8-1-2-为什么要声明内部类呢" class="headerlink" title="8.1.2 为什么要声明内部类呢"></a>8.1.2 为什么要声明内部类呢</h4><p>具体来说，当一个事物A的内部，还有一个部分需要一个完整的结构B进行描述，而这个内部的完整的结构B又只为外部事物A提供服务，不在其他地方单独使用，那么整个内部的完整结构B最好使用内部类。</p><p>总的来说，遵循<code>高内聚、低耦合</code>的面向对象开发原则。</p><h4 id="8-1-3-内部类的分类"><a href="#8-1-3-内部类的分类" class="headerlink" title="8.1.3 内部类的分类"></a>8.1.3 内部类的分类</h4><p>根据内部类声明的位置（如同变量的分类），我们可以分为：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951372_watermark.png" alt="image-20221124223912529"></p><h3 id="8-2-成员内部类"><a href="#8-2-成员内部类" class="headerlink" title="8.2 成员内部类"></a>8.2 成员内部类</h3><h4 id="8-2-1-概述"><a href="#8-2-1-概述" class="headerlink" title="8.2.1 概述"></a>8.2.1 概述</h4><p>如果成员内部类中不使用外部类的非静态成员，那么通常将内部类声明为静态内部类，否则声明为非静态内部类。</p><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 外部类&#123;<br>    [其他修饰符] [<span class="hljs-keyword">static</span>] class 内部类&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>成员内部类的使用特征，概括来讲有如下两种角色：</strong></p><ul><li>成员内部类作为<code>类的成员的角色</code>：<ul><li>和外部类不同，Inner class还可以声明为private或protected；</li><li>可以调用外部类的结构。（注意：在静态内部类中不能使用外部类的非静态成员）</li><li>Inner class 可以声明为static的，但此时就不能再使用外层类的非static的成员变量；</li></ul></li><li>成员内部类作为<code>类的角色</code>：<ul><li>可以在内部定义属性、方法、构造器等结构</li><li>可以继承自己的想要继承的父类，实现自己想要实现的父接口们，和外部类的父类和父接口无关</li><li>可以声明为abstract类 ，因此可以被其它的内部类继承</li><li>可以声明为final的，表示不能被继承</li><li>编译以后生成OuterClass$InnerClass.class字节码文件（也适用于局部内部类）</li></ul></li></ul><p>注意点：</p><ol start="2"><li><p>外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式</p></li><li><p>成员内部类可以直接使用外部类的所有成员，包括私有的数据</p></li><li><p>当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的</p></li></ol><h4 id="8-2-2-创建成员内部类对象"><a href="#8-2-2-创建成员内部类对象" class="headerlink" title="8.2.2 创建成员内部类对象"></a>8.2.2 创建成员内部类对象</h4><ul><li>实例化静态内部类</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">外部类名.静态内部类名 变量 <span class="hljs-operator">=</span> 外部类名.静态内部类名()<span class="hljs-comment">;</span><br>变量.非静态方法()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>实例化非静态内部类</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">外部类名 变量<span class="hljs-number">1</span> <span class="hljs-operator">=</span> new 外部类()<span class="hljs-comment">;</span><br>外部类名.非静态内部类名 变量<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 变量<span class="hljs-number">1</span>.new 非静态内部类名()<span class="hljs-comment">;</span><br>变量<span class="hljs-number">2</span>.非静态方法()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="8-2-3-举例"><a href="#8-2-3-举例" class="headerlink" title="8.2.3 举例"></a>8.2.3 举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMemberInnerClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建静态内部类实例，并调用方法</span><br>        Outer.<span class="hljs-type">StaticInner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>.StaticInner();<br>        inner.inFun();<br>        <span class="hljs-comment">//调用静态内部类静态方法</span><br>        Outer.StaticInner.inMethod();<br><br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br>        <br>        <span class="hljs-comment">//创建非静态内部类实例（方式1），并调用方法</span><br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>        Outer.<span class="hljs-type">NoStaticInner</span> <span class="hljs-variable">inner1</span> <span class="hljs-operator">=</span> outer.<span class="hljs-keyword">new</span> <span class="hljs-title class_">NoStaticInner</span>();<br>        inner1.inFun();<br><br>        <span class="hljs-comment">//创建非静态内部类实例（方式2）</span><br>        Outer.<span class="hljs-type">NoStaticInner</span> <span class="hljs-variable">inner2</span> <span class="hljs-operator">=</span> outer.getNoStaticInner();<br>        inner1.inFun();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;外部类的静态a&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">b</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;外部类的静态b&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;外部类对象的非静态c&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;外部类对象的非静态d&quot;</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticInner</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;静态内部类的静态a&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;静态内部类对象的非静态c&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inMethod</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;Inner.a = &quot;</span> + a);<br>            System.out.println(<span class="hljs-string">&quot;Outer.a = &quot;</span> + Outer.a);<br>            System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inFun</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;Inner.inFun&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;Outer.a = &quot;</span> + Outer.a);<br>            System.out.println(<span class="hljs-string">&quot;Inner.a = &quot;</span> + a);<br>            System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<br>            System.out.println(<span class="hljs-string">&quot;c = &quot;</span> + c);<br><span class="hljs-comment">//            System.out.println(&quot;d = &quot; + d);//不能访问外部类的非静态成员</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoStaticInner</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;非静态内部类对象的非静态a&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;非静态内部类对象的非静态c&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inFun</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;NoStaticInner.inFun&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;Outer.a = &quot;</span> + Outer.a);<br>            System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>            System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<br>            System.out.println(<span class="hljs-string">&quot;Outer.c = &quot;</span> + Outer.<span class="hljs-built_in">this</span>.c);<br>            System.out.println(<span class="hljs-string">&quot;c = &quot;</span> + c);<br>            System.out.println(<span class="hljs-string">&quot;d = &quot;</span> + d);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> NoStaticInner <span class="hljs-title function_">getNoStaticInner</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoStaticInner</span>();<br>    &#125;<br>&#125;<br><br>Inner.inFun<br>Outer.a = 外部类的静态a<br>Inner.a = 静态内部类的静态<span class="hljs-type">a</span><br><span class="hljs-variable">b</span> <span class="hljs-operator">=</span> 外部类的静态<span class="hljs-type">b</span><br><span class="hljs-variable">c</span> <span class="hljs-operator">=</span> 静态内部类对象的非静态c<br>Inner.a = 静态内部类的静态a<br>Outer.a = 外部类的静态<span class="hljs-type">a</span><br><span class="hljs-variable">b</span> <span class="hljs-operator">=</span> 外部类的静态b<br>*****************************<br>NoStaticInner.inFun<br>Outer.a = 外部类的静态<span class="hljs-type">a</span><br><span class="hljs-variable">a</span> <span class="hljs-operator">=</span> 非静态内部类对象的非静态<span class="hljs-type">a</span><br><span class="hljs-variable">b</span> <span class="hljs-operator">=</span> 外部类的静态b<br>Outer.c = 外部类对象的非静态<span class="hljs-type">c</span><br><span class="hljs-variable">c</span> <span class="hljs-operator">=</span> 非静态内部类对象的非静态<span class="hljs-type">c</span><br><span class="hljs-variable">d</span> <span class="hljs-operator">=</span> 外部类对象的非静态d<br>NoStaticInner.inFun<br>Outer.a = 外部类的静态<span class="hljs-type">a</span><br><span class="hljs-variable">a</span> <span class="hljs-operator">=</span> 非静态内部类对象的非静态<span class="hljs-type">a</span><br><span class="hljs-variable">b</span> <span class="hljs-operator">=</span> 外部类的静态b<br>Outer.c = 外部类对象的非静态<span class="hljs-type">c</span><br><span class="hljs-variable">c</span> <span class="hljs-operator">=</span> 非静态内部类对象的非静态<span class="hljs-type">c</span><br><span class="hljs-variable">d</span> <span class="hljs-operator">=</span> 外部类对象的非静态d<br></code></pre></td></tr></table></figure><h3 id="8-3-局部内部类"><a href="#8-3-局部内部类" class="headerlink" title="8.3 局部内部类"></a>8.3 局部内部类</h3><h4 id="8-3-1-非匿名局部内部类"><a href="#8-3-1-非匿名局部内部类" class="headerlink" title="8.3.1 非匿名局部内部类"></a>8.3.1 非匿名局部内部类</h4><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 外部类&#123;<br>    [修饰符] 返回值类型  方法名(形参列表)&#123;<br>            [<span class="hljs-keyword">final</span>/<span class="hljs-keyword">abstract</span>] class 内部类&#123;<br>    &#125;<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>编译后有自己的独立的字节码文件，只不过在内部类名前面冠以外部类名、$符号、编号。<ul><li>这里有编号是因为同一个外部类中，不同的方法中存在相同名称的局部内部类</li></ul></li></ul><ul><li>和成员内部类不同的是，它前面不能有权限修饰符等</li><li>局部内部类如同局部变量一样，有作用域</li><li>局部内部类中是否能访问外部类的非静态的成员，取决于所在的方法</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestLocalInner</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 17:19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLocalInner</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Outer.outMethod();<br>        System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);<br><br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>        out.outTest();<br>        System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);<br><br>        <span class="hljs-type">Runner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> Outer.getRunner();<br>        runner.run();<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">outMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Outer.outMethod&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;局部变量c&quot;</span>;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inMethod</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;Inner.inMethod&quot;</span>);<br>                System.out.println(c);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        in.inMethod();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">outTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inMethod1</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;Inner.inMethod1&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        in.inMethod1();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runner <span class="hljs-title function_">getRunner</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runner</span>&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;LocalRunner.run&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalRunner</span>();<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Runner</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br><br>Outer.outMethod<br>Inner.inMethod<br>局部变量c<br>-------------------<br>Inner.inMethod1<br>-------------------<br></code></pre></td></tr></table></figure><h4 id="8-3-2-匿名内部类"><a href="#8-3-2-匿名内部类" class="headerlink" title="8.3.2 匿名内部类"></a>8.3.2 匿名内部类</h4><p>因为考虑到这个子类或实现类是一次性的，那么我们“费尽心机”的给它取名字，就显得多余。那么我们完全可以使用匿名内部类的方式来实现，避免给类命名的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 父类([实参列表])&#123;<br>    重写方法...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 父接口()&#123;<br>    重写方法...<br>&#125;<br></code></pre></td></tr></table></figure><p>举例1：使用匿名内部类的对象直接调用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;aaaa&quot;</span>);<br>&#125;<br>    &#125;.a();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例2：通过父类或父接口的变量多态引用匿名内部类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">A</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;aaaa&quot;</span>);<br>&#125;<br>    &#125;;<br>    obj.a();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例3：匿名内部类的对象作为实参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(A a)</span>&#123;<br>    a.method();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    test(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>()&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;aaaa&quot;</span>);<br>&#125;<br>    &#125;);<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-练习"><a href="#8-4-练习" class="headerlink" title="8.4 练习"></a>8.4 练习</h3><p>练习：判断输出结果为何？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        s1.a = <span class="hljs-number">10</span>;<br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        s2.a = <span class="hljs-number">20</span>;<br>        Test.<span class="hljs-type">Inner</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>.Inner();<br>        System.out.println(s3.a);<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> t.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        System.out.println(r.a);<br>    &#125;<br>&#125;<br><br><span class="hljs-number">5</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>练习2：</p><p>编写一个匿名内部类，它继承Object，并在匿名内部类中，声明一个方法public void test()打印尚硅谷。</p><p>请编写代码调用这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;尚硅谷&quot;</span>);<br>&#125;<br>&#125;.test();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="9-枚举类"><a href="#9-枚举类" class="headerlink" title="9. 枚举类"></a>9. 枚举类</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><ul><li><p>枚举类型本质上也是一种类，只不过是这个类的对象是有限的、固定的几个，不能让用户随意创建。</p></li><li><p>枚举类的例子举不胜举：</p><ul><li><code>星期</code>：Monday(星期一)……Sunday(星期天)</li><li><code>性别</code>：Man(男)、Woman(女)</li><li><code>月份</code>：January(1月)……December(12月)</li><li><code>季节</code>：Spring(春节)……Winter(冬天)</li><li><code>三原色</code>：red(红色)、green(绿色)、blue(蓝色)</li><li><code>支付方式</code>：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银行卡)、CreditCard(信用卡)</li><li><code>就职状态</code>：Busy(忙碌)、Free(空闲)、Vocation(休假)、Dimission(离职)</li><li><code>订单状态</code>：Nonpayment（未付款）、Paid（已付款）、Fulfilled（已配货）、Delivered（已发货）、Checked（已确认收货）、Return（退货）、Exchange（换货）、Cancel（取消）</li><li><code>线程状态</code>：创建、就绪、运行、阻塞、死亡</li></ul></li><li><p><strong>若枚举只有一个对象, 则可以作为一种单例模式的实现方式。</strong></p></li><li><p>枚举类的实现：</p><ul><li>在JDK5.0 之前，需要程序员自定义枚举类型。</li><li>在JDK5.0 之后，Java支持<code>enum</code>关键字来快速定义枚举类型。</li></ul></li></ul><h3 id="9-2-定义枚举类（JDK5-0-之前）"><a href="#9-2-定义枚举类（JDK5-0-之前）" class="headerlink" title="9.2 定义枚举类（JDK5.0 之前）"></a>9.2 定义枚举类（JDK5.0 之前）</h3><p>在JDK5.0 之前如何声明枚举类呢？</p><ul><li><code>私有化</code>类的构造器，保证不能在类的外部创建其对象</li><li>在类的内部创建枚举类的实例。声明为：<code>public static final</code> ，对外暴露这些常量对象</li><li>对象如果有<code>实例变量</code>，应该声明为<code>private final</code>（建议，不是必须），并在构造器中初始化</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Season</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SEASONNAME;<span class="hljs-comment">//季节的名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SEASONDESC;<span class="hljs-comment">//季节的描述</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season</span><span class="hljs-params">(String seasonName,String seasonDesc)</span>&#123;<br>        <span class="hljs-built_in">this</span>.SEASONNAME = seasonName;<br>        <span class="hljs-built_in">this</span>.SEASONDESC = seasonDesc;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SPRING</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;春天&quot;</span>, <span class="hljs-string">&quot;春暖花开&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SUMMER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;夏天&quot;</span>, <span class="hljs-string">&quot;夏日炎炎&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">AUTUMN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;秋天&quot;</span>, <span class="hljs-string">&quot;秋高气爽&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">WINTER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;冬天&quot;</span>, <span class="hljs-string">&quot;白雪皑皑&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Season&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;SEASONNAME=&#x27;&quot;</span> + SEASONNAME + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, SEASONDESC=&#x27;&quot;</span> + SEASONDESC + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeasonTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Season.AUTUMN);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-3-定义枚举类（JDK5-0-之后）"><a href="#9-3-定义枚举类（JDK5-0-之后）" class="headerlink" title="9.3 定义枚举类（JDK5.0 之后）"></a>9.3 定义枚举类（JDK5.0 之后）</h3><h4 id="9-3-1-enum关键字声明枚举"><a href="#9-3-1-enum关键字声明枚举" class="headerlink" title="9.3.1 enum关键字声明枚举"></a>9.3.1 enum关键字声明枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">【修饰符】 <span class="hljs-keyword">enum</span> 枚举类名&#123;<br>    常量对象列表<br>&#125;<br><br>【修饰符】 <span class="hljs-keyword">enum</span> 枚举类名&#123;<br>    常量对象列表;<br>    <br>    对象的实例变量列表;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.enumeration;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Week</span> &#123;<br>    MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestEnum</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Season</span> <span class="hljs-variable">spring</span> <span class="hljs-operator">=</span> Season.SPRING;<br>System.out.println(spring);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-3-2-enum方式定义的要求和特点"><a href="#9-3-2-enum方式定义的要求和特点" class="headerlink" title="9.3.2 enum方式定义的要求和特点"></a>9.3.2 enum方式定义的要求和特点</h4><ul><li>枚举类的常量对象列表必须在枚举类的首行，因为是常量，所以建议大写。</li><li>列出的实例系统会自动添加 public static final 修饰。</li><li>如果常量对象列表后面没有其他代码，那么“；”可以省略，否则不可以省略“；”。</li><li>编译器给枚举类默认提供的是private的无参构造，如果枚举类需要的是无参构造，就不需要声明，写常量对象列表时也不用加参数</li><li>如果枚举类需要的是有参构造，需要手动定义，有参构造的private可以省略，调用有参构造的方法就是在常量对象名后面加(实参列表)就可以。</li><li>枚举类默认继承的是java.lang.Enum类，因此不能再继承其他的类型。</li><li>JDK5.0 之后switch，提供支持枚举类型，case后面可以写枚举常量名，无需添加枚举类作为限定。</li></ul><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SeasonEnum</span> &#123;<br>    SPRING(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;春风又绿江南岸&quot;</span>),<br>    SUMMER(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;映日荷花别样红&quot;</span>),<br>    AUTUMN(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;秋水共长天一色&quot;</span>),<br>    WINTER(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;窗含西岭千秋雪&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonDesc;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SeasonEnum</span><span class="hljs-params">(String seasonName, String seasonDesc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.seasonName = seasonName;<br>        <span class="hljs-built_in">this</span>.seasonDesc = seasonDesc;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSeasonName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> seasonName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSeasonDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> seasonDesc;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.enumeration;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Week</span> &#123;<br>    MONDAY(<span class="hljs-string">&quot;星期一&quot;</span>),<br>    TUESDAY(<span class="hljs-string">&quot;星期二&quot;</span>),<br>    WEDNESDAY(<span class="hljs-string">&quot;星期三&quot;</span>),<br>    THURSDAY(<span class="hljs-string">&quot;星期四&quot;</span>),<br>    FRIDAY(<span class="hljs-string">&quot;星期五&quot;</span>),<br>    SATURDAY(<span class="hljs-string">&quot;星期六&quot;</span>),<br>    SUNDAY(<span class="hljs-string">&quot;星期日&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String description;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Week</span><span class="hljs-params">(String description)</span>&#123;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() +<span class="hljs-string">&quot;:&quot;</span>+ description;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.enumeration;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestWeek</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Week</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> Week.MONDAY;<br>        System.out.println(week);<br><br>        <span class="hljs-keyword">switch</span> (week)&#123;<br>            <span class="hljs-keyword">case</span> MONDAY:<br>                System.out.println(<span class="hljs-string">&quot;怀念周末，困意很浓&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> TUESDAY:<br>                System.out.println(<span class="hljs-string">&quot;进入学习状态&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> WEDNESDAY:<br>                System.out.println(<span class="hljs-string">&quot;死撑&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> THURSDAY:<br>                System.out.println(<span class="hljs-string">&quot;小放松&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> FRIDAY:<br>                System.out.println(<span class="hljs-string">&quot;又信心满满&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SATURDAY:<br>                System.out.println(<span class="hljs-string">&quot;开始盼周末，无心学习&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SUNDAY:<br>                System.out.println(<span class="hljs-string">&quot;一觉到下午&quot;</span>);<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>经验之谈：</p><p>开发中，当需要定义一组常量时，强烈建议使用枚举类。</p></blockquote><h3 id="9-4-enum中常用方法"><a href="#9-4-enum中常用方法" class="headerlink" title="9.4 enum中常用方法"></a>9.4 enum中常用方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">String <span class="hljs-title">toString</span>(): 默认返回的是常量名（对象名），可以继续手动重写该方法！</span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-keyword">static</span> 枚举类型[] <span class="hljs-title">values</span>():返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值，是一个静态方法</span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-keyword">static</span> 枚举类型 <span class="hljs-title">valueOf</span>(<span class="hljs-params">String name</span>)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。</span><br><span class="hljs-function">    </span><br><span class="hljs-function">String <span class="hljs-title">name</span>():得到当前枚举常量的名称。建议优先使用<span class="hljs-title">toString</span>()。</span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">ordinal</span>():返回当前枚举常量的次序号，默认从0开始</span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.enumeration;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestEnumMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//values()</span><br>        Week[] values = Week.values();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;<br>            <span class="hljs-comment">//ordinal()、name()</span><br>            System.out.println((values[i].ordinal()+<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;-&gt;&quot;</span> + values[i].name());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;------------------------&quot;</span>);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入星期值：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">weekValue</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">Week</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> values[weekValue-<span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//toString()</span><br>        System.out.println(week);<br><br>        System.out.print(<span class="hljs-string">&quot;请输入星期名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">weekName</span> <span class="hljs-operator">=</span> input.next();<br>        <span class="hljs-comment">//valueOf()</span><br>        week = Week.valueOf(weekName);<br>        System.out.println(week);<br><br>        input.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-5-实现接口的枚举类"><a href="#9-5-实现接口的枚举类" class="headerlink" title="9.5 实现接口的枚举类"></a>9.5 实现接口的枚举类</h3><ul><li>和普通 Java 类一样，枚举类可以实现一个或多个接口</li><li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只要统一实现该方法即可。</li><li>若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式，则可以让每个枚举值分别来实现该方法</li></ul><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、枚举类可以像普通的类一样，实现接口，并且可以多个，但要求必须实现里面所有的抽象方法！</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">A</span> implements 接口<span class="hljs-number">1</span>，接口<span class="hljs-number">2</span>&#123;<br><span class="hljs-comment">//抽象方法的实现</span><br>&#125;<br><br><span class="hljs-comment">//2、如果枚举类的常量可以继续重写抽象方法!</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">A</span> implements 接口<span class="hljs-number">1</span>，接口<span class="hljs-number">2</span>&#123;<br>    常量名<span class="hljs-number">1</span>(参数)&#123;<br>        <span class="hljs-comment">//抽象方法的实现或重写</span><br>    &#125;,<br>    常量名<span class="hljs-number">2</span>(参数)&#123;<br>        <span class="hljs-comment">//抽象方法的实现或重写</span><br>    &#125;,<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Info</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//使用enum关键字定义枚举类</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Info</span>&#123;<br><span class="hljs-comment">//1. 创建枚举类中的对象,声明在enum枚举类的首位</span><br>SPRING(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;春暖花开&quot;</span>)&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;春天在哪里？&quot;</span>);<br>&#125;<br>&#125;,<br>SUMMER(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;夏日炎炎&quot;</span>)&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;宁静的夏天&quot;</span>);<br>&#125;<br>&#125;,<br>AUTUMN(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;秋高气爽&quot;</span>)&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;秋天是用来分手的季节&quot;</span>);<br>&#125;<br>&#125;,<br>WINTER(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;白雪皑皑&quot;</span>)&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;2002年的第一场雪&quot;</span>);<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//2. 声明每个对象拥有的属性:private final修饰</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SEASON_NAME;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SEASON_DESC;<br><br><span class="hljs-comment">//3. 私有化类的构造器</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Season1</span><span class="hljs-params">(String seasonName,String seasonDesc)</span>&#123;<br><span class="hljs-built_in">this</span>.SEASON_NAME = seasonName;<br><span class="hljs-built_in">this</span>.SEASON_DESC = seasonDesc;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSEASON_NAME</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> SEASON_NAME;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSEASON_DESC</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> SEASON_DESC;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-注解-Annotation"><a href="#10-注解-Annotation" class="headerlink" title="10. 注解(Annotation)"></a>10. 注解(Annotation)</h2><h3 id="10-1-注解概述"><a href="#10-1-注解概述" class="headerlink" title="10.1 注解概述"></a>10.1 注解概述</h3><h4 id="10-1-1-什么是注解"><a href="#10-1-1-什么是注解" class="headerlink" title="10.1.1 什么是注解"></a>10.1.1 什么是注解</h4><p>注解（Annotation）是从<code>JDK5.0</code>开始引入，以“<code>@注解名</code>”在代码中存在。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Deprecated</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(value=”unchecked”)</span><br></code></pre></td></tr></table></figure><p>Annotation 可以像修饰符一样被使用，可用于修饰包、类、构造器、方法、成员变量、参数、局部变量的声明。还可以添加一些参数值，这些信息被保存在 Annotation 的 “name&#x3D;value” 对中。</p><p>注解可以在类编译、运行时进行加载，体现不同的功能。</p><h4 id="10-1-2-注解与注释"><a href="#10-1-2-注解与注释" class="headerlink" title="10.1.2 注解与注释"></a>10.1.2 注解与注释</h4><p>注解也可以看做是一种注释，通过使用 Annotation，程序员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。但是，注解，不同于单行注释和多行注释。</p><ul><li>对于单行注释和多行注释是给程序员看的。</li><li>而注解是可以被编译器或其他程序读取的。程序还可以根据注解的不同，做出相应的处理。</li></ul><h4 id="10-1-3-注解的重要性"><a href="#10-1-3-注解的重要性" class="headerlink" title="10.1.3 注解的重要性"></a>10.1.3 注解的重要性</h4><p>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在<code>JavaEE/Android中注解占据了更重要的角色</code>，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的<code>繁冗代码</code>和<code>XML配置</code>等。</p><p>未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，Struts2有一部分也是基于注解的了。<code>注解是一种趋势</code>，一定程度上可以说：<code>框架 = 注解 + 反射 + 设计模式</code>。</p><h3 id="10-2-常见的Annotation作用"><a href="#10-2-常见的Annotation作用" class="headerlink" title="10.2 常见的Annotation作用"></a>10.2 常见的Annotation作用</h3><p><strong>示例1：生成文档相关的注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@author</span> 标明开发该类模块的作者，多个作者之间使用,分割<br><span class="hljs-meta">@version</span> 标明该类模块的版本<br><span class="hljs-meta">@see</span> 参考转向，也就是相关主题<br><span class="hljs-meta">@since</span> 从哪个版本开始增加的<br><span class="hljs-meta">@param</span> 对方法中某参数的说明，如果没有参数就不能写<br><span class="hljs-meta">@return</span> 对方法返回值的说明，如果方法的返回值类型是<span class="hljs-keyword">void</span>就不能写<br><span class="hljs-meta">@exception</span> 对方法可能抛出的异常进行说明 ，如果方法没有用<span class="hljs-keyword">throws</span>显式抛出的异常就不能写<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.annotation.javadoc;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> Math.java</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavadocTest</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 程序的主方法，程序的入口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args String[] 命令行参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 求圆面积的方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> radius double 半径值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> double 圆的面积</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span>&#123;<br><span class="hljs-keyword">return</span> Math.PI * radius * radius;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>示例2：在编译时进行格式检查(JDK内置的三个基本注解)</strong></p><p><code>@Override</code>: 限定重写父类方法，该注解只能用于方法</p><p><code>@Deprecated</code>: 用于表示所修饰的元素(类，方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择</p><p><code>@SuppressWarnings</code>: 抑制编译器警告</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.annotation.javadoc;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationTest</span>&#123;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-meta">@SuppressWarnings(&quot;unused&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-meta">@Deprecated</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;过时的方法&quot;</span>);<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;重写的toString方法()&quot;</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>示例3：跟踪代码依赖性，实现替代配置文件功能</strong></p><ul><li>Servlet3.0提供了注解(annotation)，使得不再需要在web.xml文件中进行Servlet的部署。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123; &#125;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        doGet(request, response);<br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.servlet.LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>Spring框架中关于“事务”的管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation=Propagation.REQUIRES_NEW,isolation=Isolation.READ_COMMITTED,readOnly=false,timeout=3)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(String username, String isbn)</span> &#123;<br><span class="hljs-comment">//1.查询书的单价</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookShopDao.findBookPriceByIsbn(isbn);<br>    <span class="hljs-comment">//2. 更新库存</span><br>    bookShopDao.updateBookStock(isbn);<br>    <span class="hljs-comment">//3. 更新用户的余额</span><br>    bookShopDao.updateUserAccount(username, price);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置事务属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;dataSourceTransactionManager&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 配置每个方法使用的事务属性 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;buyBook&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span> </span><br><span class="hljs-tag"> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;READ_COMMITTED&quot;</span>  <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span>  <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;3&quot;</span> /&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="10-3-三个最基本的注解"><a href="#10-3-三个最基本的注解" class="headerlink" title="10.3 三个最基本的注解"></a>10.3 三个最基本的注解</h3><h4 id="10-3-1-Override"><a href="#10-3-1-Override" class="headerlink" title="10.3.1 @Override"></a>10.3.1 @Override</h4><ul><li><p>用于检测被标记的方法为有效的重写方法，如果不是，则报编译错误！</p></li><li><p>只能标记在方法上。</p></li><li><p>它会被编译器程序读取。</p></li></ul><h4 id="10-3-2-Deprecated"><a href="#10-3-2-Deprecated" class="headerlink" title="10.3.2 @Deprecated"></a>10.3.2 @Deprecated</h4><ul><li><p>用于表示被标记的数据已经过时，不推荐使用。</p></li><li><p>可以用于修饰 属性、方法、构造、类、包、局部变量、参数。</p></li><li><p>它会被编译器程序读取。</p></li></ul><h4 id="10-3-3-SuppressWarnings"><a href="#10-3-3-SuppressWarnings" class="headerlink" title="10.3.3 @SuppressWarnings"></a>10.3.3 @SuppressWarnings</h4><ul><li><p>抑制编译警告。当我们不希望看到警告信息的时候，可以使用 SuppressWarnings 注解来抑制警告信息</p></li><li><p>可以用于修饰类、属性、方法、构造、局部变量、参数</p></li><li><p>它会被编译器程序读取。</p></li><li><p>可以指定的警告类型有（了解）</p><ul><li>all，抑制所有警告</li><li>unchecked，抑制与未检查的作业相关的警告</li><li>unused，抑制与未用的程式码及停用的程式码相关的警告</li><li>deprecation，抑制与淘汰的相关警告</li><li>nls，抑制与非 nls 字串文字相关的警告</li><li>null，抑制与空值分析相关的警告</li><li>rawtypes，抑制与使用 raw 类型相关的警告</li><li>static-access，抑制与静态存取不正确相关的警告</li><li>static-method，抑制与可能宣告为 static 的方法相关的警告</li><li>super，抑制与置换方法相关但不含 super 呼叫的警告</li><li>…</li></ul></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.annotation;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAnnotation</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> i;<br><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-string">&quot;world&quot;</span>);<br><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        f.show();<br>        f.methodOl();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Father.show&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodOl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Father Method&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">void method01() &#123;</span><br><span class="hljs-comment">System.out.println(&quot;Son Method&quot;);</span><br><span class="hljs-comment">&#125;*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-4-元注解"><a href="#10-4-元注解" class="headerlink" title="10.4 元注解"></a>10.4 元注解</h3><p>JDK1.5在java.lang.annotation包定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。</p><p>（1）**@Target：**用于描述注解的使用范围</p><ul><li>可以通过枚举类型ElementType的10个常量对象来指定</li><li>TYPE，METHOD，CONSTRUCTOR，PACKAGE…..</li></ul><p>（2）**@Retention：**用于描述注解的生命周期</p><ul><li>可以通过枚举类型RetentionPolicy的3个常量对象来指定</li><li>SOURCE（源代码）、CLASS（字节码）、RUNTIME（运行时）</li><li><code>唯有RUNTIME阶段才能被反射读取到</code>。</li></ul><p>（3）**@Documented**：表明这个注解应该被 javadoc工具记录。</p><p>（4）**@Inherited：**允许子类继承父类中的注解</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.annotation.ElementType.*;<br><br><span class="hljs-meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SuppressWarnings &#123;<br>    String[] value();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.annotation.ElementType.*;<br><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Deprecated &#123;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>拓展：元数据</p><p>String name &#x3D; “Tom”;</p></blockquote><h3 id="10-5-自定义注解的使用"><a href="#10-5-自定义注解的使用" class="headerlink" title="10.5 自定义注解的使用"></a>10.5 自定义注解的使用</h3><p>一个完整的注解应该包含三个部分：<br>（1）声明<br>（2）使用<br>（3）读取</p><h4 id="10-5-1-声明自定义注解"><a href="#10-5-1-声明自定义注解" class="headerlink" title="10.5.1 声明自定义注解"></a>10.5.1 声明自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">【元注解】<br>【修饰符】 <span class="hljs-meta">@interface</span> 注解名&#123;<br>    【成员列表】<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>自定义注解可以通过四个元注解@Retention,@Target，@Inherited,@Documented，分别说明它的声明周期，使用位置，是否被继承，是否被生成到API文档中。</li><li>Annotation 的成员在 Annotation 定义中以无参数有返回值的抽象方法的形式来声明，我们又称为配置参数。返回值类型只能是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组</li><li>可以使用 default 关键字为抽象方法指定默认返回值</li><li>如果定义的注解含有抽象方法，那么使用时必须指定返回值，除非它有默认值。格式是“方法名 &#x3D; 返回值”，如果只有一个抽象方法需要赋值，且方法名为value，可以省略“value&#x3D;”，所以如果注解只有一个抽象方法成员，建议使用方法名value。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Table &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Column &#123;<br>    String <span class="hljs-title function_">columnName</span><span class="hljs-params">()</span>;<br>    String <span class="hljs-title function_">columnType</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10-5-2-使用自定义注解"><a href="#10-5-2-使用自定义注解" class="headerlink" title="10.5.2 使用自定义注解"></a>10.5.2 使用自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.annotation;<br><br><span class="hljs-meta">@Table(&quot;t_stu&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-meta">@Column(columnName = &quot;sid&quot;,columnType = &quot;int&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-meta">@Column(columnName = &quot;sname&quot;,columnType = &quot;varchar(20)&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="10-5-3-读取和处理自定义注解"><a href="#10-5-3-读取和处理自定义注解" class="headerlink" title="10.5.3 读取和处理自定义注解"></a>10.5.3 读取和处理自定义注解</h4><p>自定义注解必须配上注解的信息处理流程才有意义。</p><p>我们自己定义的注解，只能使用反射的代码读取。所以自定义注解的声明周期必须是RetentionPolicy.RUNTIME。</p><p>具体的使用见<code>《尚硅谷_宋红康_第17章_反射机制.md》</code>。</p><h3 id="10-6-JUnit单元测试"><a href="#10-6-JUnit单元测试" class="headerlink" title="10.6 JUnit单元测试"></a>10.6 JUnit单元测试</h3><h4 id="10-6-1-测试分类"><a href="#10-6-1-测试分类" class="headerlink" title="10.6.1 测试分类"></a>10.6.1 测试分类</h4><p><strong>黑盒测试：</strong>不需要写代码，给输入值，看程序是否能够输出期望的值。 </p><p><strong>白盒测试：</strong>需要写代码的。关注程序具体的执行流程。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951704_watermark.png" alt="image-20220511181800694" style="zoom: 50%;" /><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951314_watermark.png" alt="image-20220524102038600"></p><h4 id="10-6-2-JUnit单元测试介绍"><a href="#10-6-2-JUnit单元测试介绍" class="headerlink" title="10.6.2 JUnit单元测试介绍"></a>10.6.2 JUnit单元测试介绍</h4><p>JUnit 是由 Erich Gamma 和 Kent Beck 编写的一个测试框架（regression testing framework），供Java开发人员编写单元测试之用。</p><p><strong>JUnit测试是程序员测试，即所谓白盒测试，因为程序员知道被测试的软件如何（How）完成功能和完成什么样（What）的功能。</strong></p><p>要使用JUnit，必须在项目的编译路径中<code>引入JUnit的库</code>，即相关的.class文件组成的jar包。jar就是一个压缩包，压缩包都是开发好的第三方（Oracle公司第一方，我们自己第二方，其他都是第三方）工具类，都是以class文件形式存在的。</p><h4 id="10-6-3-引入本地JUnit-jar"><a href="#10-6-3-引入本地JUnit-jar" class="headerlink" title="10.6.3 引入本地JUnit.jar"></a>10.6.3 引入本地JUnit.jar</h4><p>第1步：在项目中File-Project Structure中操作：添加Libraries库</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952651_watermark.png" alt="image-20211228180938922" style="zoom:80%;" /><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952653_watermark.png" alt="image-20221002195547325"></p><p>其中，junit-libs包内容如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952861_watermark.png" alt="image-20220813005206452"></p><p>第2步：选择要在哪些module中应用JUnit库</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952135_watermark.png" alt="image-20220813005511062"></p><p>第3步：检查是否应用成功</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952347_watermark.png" alt="image-20220813005729233"></p><p><strong>注意Scope：选择Compile，否则编译时，无法使用JUnit。</strong></p><p>第4步：下次如果有新的模块要使用该libs库，这样操作即可</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952773_watermark.png" alt="image-20220813005944022"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952092_watermark.png" alt="image-20220813010018152"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952418_watermark.png" alt="image-20220813010055217"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952837_watermark.png" alt="image-20220813010124381"></p><h4 id="10-6-4-编写和运行-Test单元测试方法"><a href="#10-6-4-编写和运行-Test单元测试方法" class="headerlink" title="10.6.4 编写和运行@Test单元测试方法"></a>10.6.4 编写和运行@Test单元测试方法</h4><p>JUnit4版本，要求@Test标记的方法必须满足如下要求：</p><ul><li>所在的类必须是public的，非抽象的，包含唯一的无参构造器。</li><li>@Test标记的方法本身必须是public，非抽象的，非静态的，void无返回值，()无参数的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.junit;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJUnit</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;TestJUnit.test01&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;TestJUnit.test02&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;TestJUnit.test03&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952206_watermark.png" alt="image-20220106152412245"></p><h4 id="10-6-5-设置执行JUnit用例时支持控制台输入"><a href="#10-6-5-设置执行JUnit用例时支持控制台输入" class="headerlink" title="10.6.5 设置执行JUnit用例时支持控制台输入"></a>10.6.5 设置执行JUnit用例时支持控制台输入</h4><p><strong>1. 设置数据：</strong></p><p>默认情况下，在单元测试方法中使用Scanner时，并不能实现控制台数据的输入。需要做如下设置：</p><p>在<code>idea64.exe.vmoptions配置文件</code>中加入下面一行设置，重启idea后生效。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">-Deditable.java.test.console</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p><strong>2. 配置文件位置：</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952556_watermark.png" alt="image-20220813011625546"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952874_watermark.png" alt="image-20220813011642180"></p><p>添加完成之后，重启IDEA即可。</p><p><strong>3. 如果上述位置设置不成功，需要继续修改如下位置</strong></p><p>修改位置1：IDEA安装目录的bin目录（例如：<code>D:\develop_tools\IDEA\IntelliJ IDEA 2022.1.2\bin</code>）下的idea64.exe.vmoptions文件。 </p><p>修改位置2：C盘的用户目录<code>C:\Users\用户名\AppData\Roaming\JetBrains\IntelliJIdea2022.1</code> 下的idea64.exe.vmoptions&#96;件。</p><h4 id="10-6-6-定义test测试方法模板"><a href="#10-6-6-定义test测试方法模板" class="headerlink" title="10.6.6 定义test测试方法模板"></a>10.6.6 定义test测试方法模板</h4><p>选中自定义的模板组，点击”+”（1.Live Template）来定义模板。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952267_watermark.png" alt="image-20211229100040505"></p><h2 id="11-包装类"><a href="#11-包装类" class="headerlink" title="11. 包装类"></a>11. 包装类</h2><h3 id="11-1-为什么需要包装类"><a href="#11-1-为什么需要包装类" class="headerlink" title="11.1 为什么需要包装类"></a>11.1 为什么需要包装类</h3><p>Java提供了两个类型系统，<code>基本数据类型</code>与<code>引用数据类型</code>。使用基本数据类型在于效率，然而当要使用只针对对象设计的API或新特性（例如泛型），怎么办呢？例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//情况1：方法形参</span><br>Object类的equals(Object obj)<br><br><span class="hljs-comment">//情况2：方法形参</span><br>ArrayList类的add(Object obj)<br><span class="hljs-comment">//没有如下的方法：</span><br>add(<span class="hljs-type">int</span> number)<br>add(<span class="hljs-type">double</span> d)<br>add(<span class="hljs-type">boolean</span> b)<br><br><span class="hljs-comment">//情况3：泛型</span><br>Set&lt;T&gt;<br>List&lt;T&gt;<br>Cllection&lt;T&gt;<br>Map&lt;K,V&gt;<br></code></pre></td></tr></table></figure><h3 id="11-2-有哪些包装类"><a href="#11-2-有哪些包装类" class="headerlink" title="11.2 有哪些包装类"></a>11.2 有哪些包装类</h3><p>Java针对八种基本数据类型定义了相应的引用类型：包装类（封装类）。有了类的特点，就可以调用类中的方法，Java才是真正的面向对象。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952621_watermark.png" alt="image-20220329001912486" style="zoom:80%;" /><p>封装以后的，内存结构对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">520</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">520</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952865_watermark.png" alt="image-20220514163725830" style="zoom:80%;" /><h3 id="11-3-自定义包装类"><a href="#11-3-自定义包装类" class="headerlink" title="11.3 自定义包装类"></a>11.3 自定义包装类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInteger</span> &#123;<br>    <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyInteger</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyInteger</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> String.valueOf(value);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="11-4-包装类与基本数据类型间的转换"><a href="#11-4-包装类与基本数据类型间的转换" class="headerlink" title="11.4 包装类与基本数据类型间的转换"></a>11.4 包装类与基本数据类型间的转换</h3><h4 id="11-4-1-装箱"><a href="#11-4-1-装箱" class="headerlink" title="11.4.1 装箱"></a>11.4.1 装箱</h4><p> <strong>装箱：把基本数据类型转为包装类对象</strong></p><blockquote><p>转为包装类的对象，是为了使用专门为对象设计的API和特性</p></blockquote><p>基本数值—-&gt;包装对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">obj1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">4</span>);<span class="hljs-comment">//使用构造函数函数</span><br><span class="hljs-type">Float</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float</span>(“<span class="hljs-number">4.56</span>”);<br><span class="hljs-type">Long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Long</span>(“asdf”);  <span class="hljs-comment">//NumberFormatException</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">obj2</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">4</span>);<span class="hljs-comment">//使用包装类中的valueOf方法</span><br></code></pre></td></tr></table></figure><h4 id="11-4-2-拆箱"><a href="#11-4-2-拆箱" class="headerlink" title="11.4.2 拆箱"></a>11.4.2 拆箱</h4><p><strong>拆箱：把包装类对象拆为基本数据类型</strong></p><blockquote><p>转为基本数据类型，一般是因为需要运算，Java中的大多数运算符是为基本数据类型设计的。比较、算术等</p></blockquote><p>包装对象—-&gt;基本数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">4</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> obj.intValue();<br></code></pre></td></tr></table></figure><p><strong>自动装箱与拆箱：</strong></p><p>由于我们经常要做基本类型与包装类之间的转换，从<code>JDK5.0 </code>开始，基本类型与包装类的装箱、拆箱动作可以自动完成。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<span class="hljs-comment">//自动装箱。相当于Integer i = Integer.valueOf(4);</span><br>i = i + <span class="hljs-number">5</span>;<span class="hljs-comment">//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;</span><br><span class="hljs-comment">//加法运算完成后，再次装箱，把基本数值转成对象。</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：只能与自己对应的类型之间才能实现自动装箱与拆箱。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">Double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//错误的，1是int类型</span><br></code></pre></td></tr></table></figure><h3 id="11-5-基本数据类型、包装类与字符串间的转换"><a href="#11-5-基本数据类型、包装类与字符串间的转换" class="headerlink" title="11.5 基本数据类型、包装类与字符串间的转换"></a>11.5 基本数据类型、包装类与字符串间的转换</h3><p><strong>（1）基本数据类型转为字符串</strong></p><p><strong>方式1：</strong>调用字符串重载的valueOf()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">//String str = a;//错误的</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> String.valueOf(a);<br></code></pre></td></tr></table></figure><p><strong>方式2：</strong>更直接的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> a + <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>（2）字符串转为基本数据类型</strong></p><p><strong>方式1：</strong>除了Character类之外，其他所有包装类都具有parseXxx静态方法可以将字符串参数转换为对应的基本类型，例如：</p><ul><li><code>public static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</li><li><code>public static long parseLong(String s)</code>：将字符串参数转换为对应的long基本类型。</li><li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li></ul><p><strong>方式2：</strong>字符串转为包装类，然后可以自动拆箱为基本数据类型</p><ul><li><code>public static Integer valueOf(String s)</code>：将字符串参数转换为对应的Integer包装类，然后可以自动拆箱为int基本类型</li><li><code>public static Long valueOf(String s)</code>：将字符串参数转换为对应的Long包装类，然后可以自动拆箱为long基本类型</li><li><code>public static Double valueOf(String s)</code>：将字符串参数转换为对应的Double包装类，然后可以自动拆箱为double基本类型</li></ul><p>注意:如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出<code>java.lang.NumberFormatException</code>异常。</p><p><strong>方式3：</strong>通过包装类的构造器实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-string">&quot;整数的字符串&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> Double.parseDouble(<span class="hljs-string">&quot;小数的字符串&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Boolean.parseBoolean(<span class="hljs-string">&quot;true或false&quot;</span>);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-string">&quot;整数的字符串&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> Double.valueOf(<span class="hljs-string">&quot;小数的字符串&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Boolean.valueOf(<span class="hljs-string">&quot;true或false&quot;</span>);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(“<span class="hljs-number">12</span>”);<br><br></code></pre></td></tr></table></figure><p>其他方式小结：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952470_watermark.png" alt="image-20220813012801907"></p><h3 id="11-6-包装类的其它API"><a href="#11-6-包装类的其它API" class="headerlink" title="11.6 包装类的其它API"></a>11.6 包装类的其它API</h3><h4 id="11-6-1-数据类型的最大最小值"><a href="#11-6-1-数据类型的最大最小值" class="headerlink" title="11.6.1 数据类型的最大最小值"></a>11.6.1 数据类型的最大最小值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer.MAX_VALUE和Integer.MIN_VALUE<br>    <br>Long.MAX_VALUE和Long.MIN_VALUE<br>    <br>Double.MAX_VALUE和Double.MIN_VALUE<br></code></pre></td></tr></table></figure><h4 id="11-6-2-字符转大小写"><a href="#11-6-2-字符转大小写" class="headerlink" title="11.6.2 字符转大小写"></a>11.6.2 字符转大小写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Character.toUpperCase(<span class="hljs-string">&#x27;x&#x27;</span>);<br><br>Character.toLowerCase(<span class="hljs-string">&#x27;X&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="11-6-3-整数转进制"><a href="#11-6-3-整数转进制" class="headerlink" title="11.6.3 整数转进制"></a>11.6.3 整数转进制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer.toBinaryString(<span class="hljs-type">int</span> i) <br>    <br>Integer.toHexString(<span class="hljs-type">int</span> i)<br>    <br>Integer.toOctalString(<span class="hljs-type">int</span> i)<br></code></pre></td></tr></table></figure><h4 id="11-6-4-比较的方法"><a href="#11-6-4-比较的方法" class="headerlink" title="11.6.4 比较的方法"></a>11.6.4 比较的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Double.compare(<span class="hljs-type">double</span> d1, <span class="hljs-type">double</span> d2)<br>    <br>Integer.compare(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) <br></code></pre></td></tr></table></figure><h3 id="11-7-包装类对象的特点"><a href="#11-7-包装类对象的特点" class="headerlink" title="11.7 包装类对象的特点"></a>11.7 包装类对象的特点</h3><h4 id="11-7-1-包装类缓存对象"><a href="#11-7-1-包装类缓存对象" class="headerlink" title="11.7.1 包装类缓存对象"></a>11.7.1 包装类缓存对象</h4><table><thead><tr><th>包装类</th><th>缓存对象</th></tr></thead><tbody><tr><td>Byte</td><td>-128~127</td></tr><tr><td>Short</td><td>-128~127</td></tr><tr><td>Integer</td><td>-128~127</td></tr><tr><td>Long</td><td>-128~127</td></tr><tr><td>Float</td><td>没有</td></tr><tr><td>Double</td><td>没有</td></tr><tr><td>Character</td><td>0~127</td></tr><tr><td>Boolean</td><td>true和false</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>System.out.println(a == b);<span class="hljs-comment">//true</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>System.out.println(i == j);<span class="hljs-comment">//false</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//新new的在堆中</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//这个用的是缓冲的常量对象，在方法区</span><br>System.out.println(m == n);<span class="hljs-comment">//false</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//新new的在堆中</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//另一个新new的在堆中</span><br>System.out.println(x == y);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>;<br><span class="hljs-type">Double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>;<br>System.out.println(d1==d2);<span class="hljs-comment">//false 比较地址，没有缓存对象，每一个都是新new的</span><br></code></pre></td></tr></table></figure><h4 id="11-7-2-类型转换问题"><a href="#11-7-2-类型转换问题" class="headerlink" title="11.7.2 类型转换问题"></a>11.7.2 类型转换问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>System.out.println(i==j);<span class="hljs-comment">//true  会先将i自动拆箱为int，然后根据基本数据类型“自动类型转换”规则，转为double比较</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>System.out.println(i==j);<span class="hljs-comment">//true 会自动拆箱，按照基本数据类型进行比较</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">Double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span><br>System.out.println(i==d);<span class="hljs-comment">//编译报错</span><br></code></pre></td></tr></table></figure><h4 id="11-7-3-包装类对象不可变"><a href="#11-7-3-包装类对象不可变" class="headerlink" title="11.7.3 包装类对象不可变"></a>11.7.3 包装类对象不可变</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestExam</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">2</span>);<br><span class="hljs-type">Circle</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>();<br>change(i,j,c);<br>System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i);<span class="hljs-comment">//1</span><br>System.out.println(<span class="hljs-string">&quot;j = &quot;</span> + j);<span class="hljs-comment">//2</span><br>System.out.println(<span class="hljs-string">&quot;c.radius = &quot;</span> + c.radius);<span class="hljs-comment">//10.0</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 方法的参数传递机制：</span><br><span class="hljs-comment"> * （1）基本数据类型：形参的修改完全不影响实参</span><br><span class="hljs-comment"> * （2）引用数据类型：通过形参修改对象的属性值，会影响实参的属性值</span><br><span class="hljs-comment"> * 这类Integer等包装类对象是“不可变”对象，即一旦修改，就是新对象，和实参就无关了</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,Integer b,Circle c )</span>&#123;<br>a += <span class="hljs-number">10</span>;<br><span class="hljs-comment">//b += 10;//等价于  b = new Integer(b+10);</span><br>c.radius += <span class="hljs-number">10</span>;<br><span class="hljs-comment">/*c = new Circle();</span><br><span class="hljs-comment">c.radius+=10;*/</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>&#123;<br><span class="hljs-type">double</span> radius;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-8-练习"><a href="#11-8-练习" class="headerlink" title="11.8 练习"></a>11.8 练习</h3><p>笔试题：如下两个题目输出结果相同吗？各是什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>);<br>System.out.println(o1);<span class="hljs-comment">//1.0</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Object o2;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>)<br>    o2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span><br>    o2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>);<br>System.out.println(o2);<span class="hljs-comment">//1</span><br><br></code></pre></td></tr></table></figure><p>面试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>    System.out.println(i == j);<br><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    System.out.println(m == n);<span class="hljs-comment">//</span><br><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>    System.out.println(x == y);<span class="hljs-comment">//</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>练习：</p><p>利用Vector代替数组处理：从键盘读入学生成绩（以负数代表输入结束），找出最高分，并输出学生成绩等级。</p><ul><li><p>提示：数组一旦创建，长度就固定不变，所以在创建数组前就需要知道它的长度。而向量类java.util.Vector可以根据需要动态伸缩。</p></li><li><p>创建Vector对象：Vector v&#x3D;new Vector();</p></li><li><p>给向量添加元素：v.addElement(Object obj);  &#x2F;&#x2F;obj必须是对象</p></li><li><p>取出向量中的元素：Object obj&#x3D;v.elementAt(0);</p><ul><li>注意第一个元素的下标是0，返回值是Object类型的。</li></ul></li><li><p>计算向量的长度：v.size();</p></li><li><p>若与最高分相差10分内：A等；20分内：B等；30分内：C等；其它：D等</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象编程（基础）</title>
    <link href="/2024/02/23/6.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    <url>/2024/02/23/6.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第06章-面向对象编程（基础）"><a href="#第06章-面向对象编程（基础）" class="headerlink" title="第06章_面向对象编程（基础）"></a>第06章_面向对象编程（基础）</h1><h2 id="1-面向对象编程概述-了解"><a href="#1-面向对象编程概述-了解" class="headerlink" title="1. 面向对象编程概述(了解)"></a>1. 面向对象编程概述(了解)</h2><h3 id="1-1-程序设计的思路"><a href="#1-1-程序设计的思路" class="headerlink" title="1.1 程序设计的思路"></a>1.1 程序设计的思路</h3><p>面向对象，是软件开发中的一类编程风格、开发范式。除了<code>面向对象</code>，还有<code>面向过程</code>、<code>指令式编程</code>和<code>函数式编程</code>。在所有的编程范式中，我们接触最多的还是面向过程和面向对象两种。</p><blockquote><p>类比：史书类型</p><ul><li>纪传体：以人物传记为中心，“本纪”叙述帝王，“世家”记叙王侯封国和特殊人物，“列传”记叙民间人物。</li><li>编年体：按年、月、日顺序编写。</li><li>国别体：是一部分国记事的历史散文，分载多国历史。</li></ul></blockquote><p>早期先有面向过程思想，随着软件规模的扩大，问题复杂性的提高，面向过程的<code>弊端</code>越来越明显，出现了面向对象思想并成为目前主流的方式。</p><p><strong>1. 面向过程的程序设计思想（Process-Oriented Programming）</strong>，简称<code>POP</code></p><ul><li>关注的焦点是<code>过程</code>：过程就是操作数据的步骤。如果某个过程的实现代码重复出现，那么就可以把这个过程抽取为一个<code>函数</code>。这样就可以大大简化冗余代码，便于维护。</li><li>典型的语言：C语言</li><li>代码结构：以<code>函数</code>为组织单位。</li><li>是一种“<code>执行者思维</code>”，适合解决简单问题。扩展能力差、后期维护难度较大。</li></ul><p><strong>2. 面向对象的程序设计思想（ Object Oriented Programming）</strong>，简称<code>OOP</code></p><ul><li>关注的焦点是<code>类</code>：在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，用类来表示。</li><li>典型的语言：Java、C#、C++、Python、Ruby和PHP等</li><li>代码结构：以<code>类</code>为组织单位。每种事物都具备自己的<code>属性</code>和<code>行为/功能</code>。</li><li>是一种“<code>设计者思维</code>”，适合解决复杂问题。代码扩展性强、可维护性高。</li></ul><h3 id="1-2-由实际问题考虑如何设计程序"><a href="#1-2-由实际问题考虑如何设计程序" class="headerlink" title="1.2 由实际问题考虑如何设计程序"></a>1.2 由实际问题考虑如何设计程序</h3><p><strong>思考1：如何开车？</strong></p><p>面向过程思想思考问题时，我们首先思考“<code>怎么按步骤实现？</code>”并将步骤对应成方法，一步一步，最终完成。 这个适合<code>简单任务</code>，不需要<code>过多协作</code>的情况。针对如何开车，可以列出步骤：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231501095_watermark.png" alt="image-20220520154055429" style="zoom: 90%;" /><p>面向过程适合简单、不需要协作的事务，重点关注如何执行。 </p><p><strong>思考2：如何造车？</strong></p><p>造车太复杂，需要<code>很多协作</code>才能完成。此时我们思考的是“<code>车怎么设计？</code>”，而不是“怎么按特定步骤造车的问题”。这就是思维方式的转变，前者就是面向对象思想。所以，面向对象(Oriented-Object)思想更契合人的思维模式。</p><p>用面向对象思想思考“如何设计车”：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231501630_watermark.png" alt="a49bd1fc8152291f0c5b43ee3322672d" style="zoom: 25%;" /><p>自然地，我们就会从“车由什么组成”开始思考。发现，车由如下结构组成：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231456513_watermark.png" alt="image-20220520155357634" style="zoom: 67%;" /><p>我们找轮胎厂完成制造轮胎的步骤，发动机厂完成制造发动机的步骤，…；这样，大家可以同时进行车的制造，最终进行组装，大大提高了效率。但是，具体到轮胎厂的一个流水线操作，仍然是有步骤的，还是离不开面向过程思维！</p><p>因此，<strong>面向对象可以帮助我们从宏观上把握、从整体上分析整个系统。</strong> 但是，具体到实现部分的微观操作（就是一个个方法），仍然需要面向过程的思路去处理。</p><blockquote><p>注意：</p><p>我们千万不要把面向过程和面向对象对立起来。他们是相辅相成的。面向对象离不开面向过程！</p></blockquote><p><strong>类比举例1：</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231456638_watermark.jpeg" alt="tuandui"></p><blockquote><p>当需求单一，或者简单时，我们一步步去操作没问题，并且效率也挺高。</p><p>可随着需求的更改，功能的增多，发现需要面对每一个步骤很麻烦了，这时就开始思索，<strong>能不能把这些步骤和功能进行封装，封装时根据不同的功能，进行不同的封装，功能类似的封装在一起。</strong>这样结构就清晰了很多。用的时候，找到对应的类就可以了。这就是面向对象的思想。</p></blockquote><p><strong>类比举例2：人把大象装进冰箱</strong></p><ul><li><p>面向过程</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">1.打开冰箱<br><br>2.把大象装进冰箱<br><br>3.把冰箱门关住<br><br></code></pre></td></tr></table></figure><p>面向对象</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gcode">人&#123;<br>    打开（冰箱）&#123;<br>冰箱.开门<span class="hljs-comment">()</span>;<br>    &#125;<br>    操作<span class="hljs-comment">(大象)</span>&#123;<br>             大象.进入<span class="hljs-comment">(冰箱)</span>;<br>    &#125;<br>    关闭<span class="hljs-comment">(冰箱)</span>&#123;   <br>          冰箱.关门<span class="hljs-comment">()</span>;     <br>    &#125;<br>&#125;<br><br>冰箱&#123;<br>     开门<span class="hljs-comment">()</span>&#123; &#125;  <br>     关门<span class="hljs-comment">()</span>&#123; &#125;<br>&#125;<br><br>大象&#123;<br>     进入<span class="hljs-comment">(冰箱)</span>&#123;  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><p><strong>练习：</strong>抽象出下面系统中的“类”及其关系</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231456593_watermark.png" alt="image-20220319180839009" style="zoom:80%;" /><h3 id="1-3-如何掌握这种思想？"><a href="#1-3-如何掌握这种思想？" class="headerlink" title="1.3 如何掌握这种思想？"></a>1.3 如何掌握这种思想？</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231456550_watermark.png" alt="image-20220319180301856" style="zoom: 67%;" /><h2 id="2-Java语言的基本元素：类和对象"><a href="#2-Java语言的基本元素：类和对象" class="headerlink" title="2. Java语言的基本元素：类和对象"></a>2. Java语言的基本元素：类和对象</h2><h3 id="2-1-引入"><a href="#2-1-引入" class="headerlink" title="2.1 引入"></a>2.1 引入</h3><p>人认识世界，其实就是面向对象的。比如，我们认识一下美人鱼（都没见过）</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231501760_watermark.png" alt="image-20220520162643547" style="zoom:67%;" /><p>经过“仔细学习”，发现美人鱼通常具备一些特征：</p><ul><li>女孩</li><li>有鱼尾</li><li>美丽</li></ul><p>这个总结的过程，其实是<code>抽象化</code>的过程。抽象出来的美人鱼的特征，可以归纳为一个<code>美人鱼类</code>。而图片中的都是这个类呈现出来的<code>具体的对象</code>。</p><h3 id="2-2-类和对象概述"><a href="#2-2-类和对象概述" class="headerlink" title="2.2 类和对象概述"></a>2.2 类和对象概述</h3><p><code>类(Class)</code>和<code>对象(Object)</code>是面向对象的核心概念。</p><p><strong>1、什么是类</strong></p><p><strong>类</strong>：具有相同特征的事物的抽象描述，是<code>抽象的</code>、概念上的定义。</p><p><strong>2、什么是对象</strong></p><p><strong>对象</strong>：实际存在的该类事物的<code>每个个体</code>，是<code>具体的</code>，因而也称为<code>实例(instance)</code>。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231456595_watermark.png" alt="image-20220319210405983"></p><p>可以理解为：<code>类 =&gt; 抽象概念的人</code>；<code>对象 =&gt; 实实在在的某个人</code></p><hr><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231538507.jpeg" style="zoom:85%;" /><hr><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457152_watermark.png" alt="image-20220503101940126" style="zoom:67%;" /><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><strong>3、类与对象的关系错误理解</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">曰：“白马非马，可乎？”<br>曰：“可。”<br>曰：“何哉？”<br>曰：“马者，所以命形也。白者，所以命色也。命色者，非命形也，故曰白马非马。”<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457212_watermark.png" alt="image-20220319214213898"></p><h3 id="2-3-类的成员概述"><a href="#2-3-类的成员概述" class="headerlink" title="2.3 类的成员概述"></a>2.3 类的成员概述</h3><blockquote><p>面向对象程序设计的重点是<code>类的设计</code></p><p>类的设计，其实就是<code>类的成员的设计</code></p></blockquote><ul><li><p>现实世界的生物体，大到鲸鱼，小到蚂蚁，都是由最基本的<code>细胞</code>构成的。同理，Java代码世界是由诸多个不同功能的<code>类</code>构成的。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457746_watermark.png" alt="image-20220319211527249" style="zoom:67%;" /></li><li><p>现实生物世界中的细胞又是由什么构成的呢？细胞核、细胞质、… </p><p>Java中用类class来描述事物也是如此。类，是一组相关<code>属性</code>和<code>行为</code>的集合，这也是类最基本的两个成员。</p><ul><li><strong>属性</strong>：该类事物的状态信息。对应类中的<code>成员变量</code><ul><li><strong>成员变量 &lt;&#x3D;&gt; 属性 &lt;&#x3D;&gt; Field</strong></li></ul></li><li><strong>行为</strong>：该类事物要做什么操作，或者基于事物的状态能做什么。对应类中的<code>成员方法</code><ul><li><strong>(成员)方法 &lt;&#x3D;&gt; 函数 &lt;&#x3D;&gt; Method</strong></li></ul></li></ul></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457464_watermark.jpeg" alt="20220319_211611" style="zoom: 67%;" /><ul><li>举例：</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457353_watermark.png" alt="image-20220319211859026"></p><h3 id="2-4-面向对象完成功能的三步骤（重要）"><a href="#2-4-面向对象完成功能的三步骤（重要）" class="headerlink" title="2.4 面向对象完成功能的三步骤（重要）"></a>2.4 面向对象完成功能的三步骤（重要）</h3><h4 id="步骤1：类的定义"><a href="#步骤1：类的定义" class="headerlink" title="步骤1：类的定义"></a>步骤1：类的定义</h4><p>类的定义使用关键字：class。格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 类名&#123;<br>属性声明;<br>    方法声明;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-comment">//声明属性age</span><br>    <span class="hljs-type">int</span> age ;                   <br>    <br>    <span class="hljs-comment">//声明方法showAge()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;        <br>    System.out.println(<span class="hljs-string">&quot;人吃饭&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>    <span class="hljs-comment">//声明属性</span><br>String type; <span class="hljs-comment">//种类</span><br>String nickName; <span class="hljs-comment">//昵称</span><br>String hostName; <span class="hljs-comment">//主人名称</span><br><br>    <span class="hljs-comment">//声明方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//吃东西</span><br>System.out.println(<span class="hljs-string">&quot;狗狗进食&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    String name;<br>    <span class="hljs-type">char</span> gender;<br>    Dog dog;<br>    <br>    <span class="hljs-comment">//喂宠物</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">()</span>&#123;<br>        dog.eat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="步骤2：对象的创建"><a href="#步骤2：对象的创建" class="headerlink" title="步骤2：对象的创建"></a>步骤2：对象的创建</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457157_watermark.png" alt="image-20220319213201568" style="zoom: 50%;" /><ul><li>创建对象，使用关键字：<strong>new</strong></li><li>创建对象语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1：给创建的对象命名</span><br><span class="hljs-comment">//把创建的对象用一个引用数据类型的变量保存起来，这样就可以反复使用这个对象了</span><br>类名 对象名 = <span class="hljs-keyword">new</span> 类名();<br><br><span class="hljs-comment">//方式2：</span><br><span class="hljs-keyword">new</span> 类名()<span class="hljs-comment">//也称为匿名对象</span><br><br></code></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//创建Person类的对象</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">per</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-comment">//创建Dog类的对象</span><br><span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="步骤3：对象调用属性或方法"><a href="#步骤3：对象调用属性或方法" class="headerlink" title="步骤3：对象调用属性或方法"></a>步骤3：对象调用属性或方法</h4><ul><li><p>对象是类的一个<strong>实例</strong>，必然具备该类事物的属性和行为（即方法）。</p></li><li><p>使用”<code>对象名.属性</code>“ 或 “<code>对象名.方法</code>“的方式访问对象成员（包括属性和方法）</p></li></ul><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明Animal类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123; <span class="hljs-comment">//动物类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> legs;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Eating.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Move.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimalTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">xb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>        xb.legs = <span class="hljs-number">4</span>;<span class="hljs-comment">//访问属性</span><br>        System.out.println(xb.legs);<br>        xb.eat();<span class="hljs-comment">//访问方法</span><br>        xb.move();<span class="hljs-comment">//访问方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>图示理解：<img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457907_watermark.png" alt="image-20220319213753668"></p><p>举例2：针对前面步骤1的举例2：类的实例化（创建类的对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Game</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-comment">//通过Person对象调用属性</span><br>        p.name = <span class="hljs-string">&quot;康师傅&quot;</span>;<br>        p.gender = <span class="hljs-string">&#x27;男&#x27;</span>;<br>        p.dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(); <span class="hljs-comment">//给Person对象的dog属性赋值</span><br>        <br>        <span class="hljs-comment">//给Person对象的dog属性的type、nickname属性赋值</span><br>        p.dog.type = <span class="hljs-string">&quot;柯基犬&quot;</span>;<br>        p.dog.nickName = <span class="hljs-string">&quot;小白&quot;</span>;<br>        <br>        <span class="hljs-comment">//通过Person对象调用方法</span><br>        p.feed();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-匿名对象-anonymous-object"><a href="#2-5-匿名对象-anonymous-object" class="headerlink" title="2.5 匿名对象 (anonymous object)"></a>2.5 匿名对象 (anonymous object)</h3><ul><li><p>我们也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。</p><ul><li>如：new Person().shout();</li></ul></li><li><p>使用情况</p><ul><li>如果一个对象只需要进行一次方法调用，那么就可以使用匿名对象。 </li><li>我们经常将匿名对象作为实参传递给一个方法调用。</li></ul></li></ul><h2 id="3-对象的内存解析"><a href="#3-对象的内存解析" class="headerlink" title="3. 对象的内存解析"></a>3. 对象的内存解析</h2><h3 id="3-1-JVM内存结构划分"><a href="#3-1-JVM内存结构划分" class="headerlink" title="3.1 JVM内存结构划分"></a>3.1 JVM内存结构划分</h3><p>HotSpot Java虚拟机的架构图如下。其中我们主要关心的是运行时数据区部分（Runtime Data Area）。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457907_watermark.png" alt="JVM架构-简图"></p><p>其中：</p><p><code>堆（Heap）</code>：此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。</p><p><code>栈（Stack）</code>：是指虚拟机栈。虚拟机栈用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。 方法执行完，自动释放。</p><p><code>方法区（Method Area）</code>：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><h3 id="3-2-对象内存解析"><a href="#3-2-对象内存解析" class="headerlink" title="3.2 对象内存解析"></a>3.2 对象内存解析</h3><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123; <span class="hljs-comment">//类：人</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">boolean</span> isMale;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonTest</span> &#123; <span class="hljs-comment">//测试类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p1.name = <span class="hljs-string">&quot;赵同学&quot;</span>;<br>        p1.age = <span class="hljs-number">20</span>;<br>        p1.isMale = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p2.age = <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p3</span> <span class="hljs-operator">=</span> p1;<br>        p3.name = <span class="hljs-string">&quot;郭同学&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内存解析图：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457445_watermark.png" alt="image-20220319215723183" style="zoom:67%;" /><blockquote><p>说明：</p><ul><li>堆：凡是new出来的结构(对象、数组)都放在堆空间中。</li><li>对象的属性存放在堆空间中。</li><li>创建一个类的多个对象（比如p1、p2），则每个对象都拥有当前类的一套”副本”（即属性）。当通过一个对象修改其属性时，不会影响其它对象此属性的值。</li><li>当声明一个新的变量使用现有的对象进行赋值时（比如p3 &#x3D; p1），此时并没有在堆空间中创建新的对象。而是两个变量共同指向了堆空间中同一个对象。当通过一个对象修改属性时，会影响另外一个对象对此属性的调用。</li></ul></blockquote><p><strong>面试题：对象名中存储的是什么呢？</strong></p><p>答：对象地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<span class="hljs-comment">//Student@7852e922</span><br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(stu);<span class="hljs-comment">//Student@4e25154f</span><br>        <br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>System.out.println(arr);<span class="hljs-comment">//[I@70dea4e</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接打印对象名和数组名都是显示“类型@对象的hashCode值”，所以说<strong>类、数组都是引用数据类型，引用数据类型的变量中存储的是对象的地址，或者说指向堆中对象的首地址。</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457510_watermark.png" alt="1561597909862"></p><h3 id="3-3-练习"><a href="#3-3-练习" class="headerlink" title="3.3 练习"></a>3.3 练习</h3><p>根据代码，画出内存图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;red&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;color=&quot;</span> + color + <span class="hljs-string">&quot;,num=&quot;</span> + num);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CarTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();   <span class="hljs-comment">//建立对象c1</span><br>        <span class="hljs-type">Car</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();   <span class="hljs-comment">//建立对象c2</span><br>        c1.color = <span class="hljs-string">&quot;blue&quot;</span>;   <span class="hljs-comment">//对对象的属性进行修改</span><br>        c1.show();   <span class="hljs-comment">//使用对象的方法</span><br>        c2.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-类的成员之一：成员变量-field"><a href="#4-类的成员之一：成员变量-field" class="headerlink" title="4. 类的成员之一：成员变量(field)"></a>4. 类的成员之一：成员变量(field)</h2><h3 id="4-1-如何声明成员变量"><a href="#4-1-如何声明成员变量" class="headerlink" title="4.1 如何声明成员变量"></a>4.1 如何声明成员变量</h3><ul><li>语法格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符<span class="hljs-number">1</span>] class 类名&#123;<br>    [修饰符<span class="hljs-number">2</span>] 数据类型 成员变量名 [= 初始化值]; <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>说明：<ul><li>位置要求：必须在类中，方法外</li><li>修饰符2(暂不考虑)<ul><li>常用的权限修饰符有：private、缺省、protected、public</li><li>其他修饰符：static、final</li></ul></li><li>数据类型<ul><li>任何基本数据类型(如int、Boolean) 或 任何引用数据类型。</li></ul></li><li>成员变量名<ul><li>属于标识符，符合命名规则和规范即可。</li></ul></li><li>初始化值<ul><li>根据情况，可以显式赋值；也可以不赋值，使用默认值</li></ul></li></ul></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;             <span class="hljs-comment">//声明private变量 age</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> “Lila”;    <span class="hljs-comment">//声明public变量 name</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-2-成员变量-vs-局部变量"><a href="#4-2-成员变量-vs-局部变量" class="headerlink" title="4.2 成员变量 vs 局部变量"></a>4.2 成员变量 vs 局部变量</h3><p><strong>1、变量的分类：成员变量与局部变量</strong></p><ul><li>在方法体外，类体内声明的变量称为成员变量。</li><li>在方法体内部等位置声明的变量称为局部变量。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457161_watermark.png" alt="image-20220511101608038" style="zoom:67%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457822_watermark.png" alt="image-20220319230744617" style="zoom:80%;" /><blockquote><p>其中，static可以将成员变量分为两大类，静态变量和非静态变量。其中静态变量又称为类变量，非静态变量又称为实例变量或者属性。接下来先学习实例变量。</p></blockquote><p><strong>2、成员变量 与 局部变量 的对比</strong></p><ul><li><p>相同点</p><ul><li>变量声明的格式相同： 数据类型  变量名 &#x3D; 初始化值</li></ul><ul><li><pre><code class="hljs">        变量必须先声明、后初始化、再使用。</code></pre></li></ul><ul><li>变量都有其对应的作用域。只在其作用域内是有效的</li></ul></li><li><p>不同点</p></li></ul><p>1、声明位置和方式<br>（1）实例变量：在类中方法外<br>（2）局部变量：在方法体{}中或方法的形参列表、代码块中</p><p>2、在内存中存储的位置不同<br>（1）实例变量：堆<br>（2）局部变量：栈</p><p>3、生命周期<br>（1）实例变量：和对象的生命周期一样，随着对象的创建而存在，随着对象被GC回收而消亡，<br>            而且每一个对象的实例变量是独立的。<br>（2）局部变量：和方法调用的生命周期一样，每一次方法被调用而在存在，随着方法执行的结束而消亡，<br>            而且每一次方法调用都是独立。</p><p>4、作用域<br>（1）实例变量：通过对象就可以使用，本类中直接调用，其他类中“对象.实例变量”<br>（2）局部变量：出了作用域就不能使用</p><p>5、修饰符（后面来讲）<br>（1）实例变量：public,protected,private,final,volatile,transient等<br>（2）局部变量：final</p><p>6、默认值<br>（1）实例变量：有默认值<br>（2）局部变量：没有，必须手动初始化。其中的形参比较特殊，靠实参给它初始化。</p><p><strong>3、对象属性的默认初始化赋值</strong></p><p>当一个对象被创建时，会对其中各种类型的成员变量自动进行初始化赋值。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457348_watermark.png" alt="image-20220319231821747" style="zoom:80%;" /><p><strong>4、举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<span class="hljs-comment">//人类</span><br>    <span class="hljs-comment">//1.属性</span><br>    String name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-type">boolean</span> isMale;<span class="hljs-comment">//是否是男性</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String nation)</span> &#123;<br>        <span class="hljs-comment">//nation:局部变量</span><br>        String color;<span class="hljs-comment">//color:局部变量</span><br>        color = <span class="hljs-string">&quot;yellow&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p.show(<span class="hljs-string">&quot;CHN&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458656_watermark.png" alt="image-20220319231703240" style="zoom:80%;" /><h2 id="5-类的成员之二：方法-method"><a href="#5-类的成员之二：方法-method" class="headerlink" title="5. 类的成员之二：方法(method)"></a>5. 类的成员之二：方法(method)</h2><h3 id="5-1-方法的引入"><a href="#5-1-方法的引入" class="headerlink" title="5.1 方法的引入"></a>5.1 方法的引入</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458995_watermark.jpeg"/><p>《街霸》游戏中，每次人物出拳、出脚或跳跃等动作都需要编写50-80行的代码，在每次出拳、出脚或跳跃的地方都需要重复地编写这50-80行代码，这样程序会变得<code>很臃肿</code>，可读性也非常差。为了解决代码重复编写的问题，可以将出拳、出脚或跳跃的代码提取出来放在一个{}中，并为这段代码起个名字，这样在每次的出拳、出脚或跳跃的地方通过这个名字来调用这个{}的代码就可以了。</p><p>上述过程中，所提取出来的代码可以被看作是程序中定义的一个方法，程序在需要出拳、出脚或跳跃时调用该方法即可。</p><h3 id="5-2-方法-method、函数-的理解"><a href="#5-2-方法-method、函数-的理解" class="headerlink" title="5.2 方法(method、函数)的理解"></a>5.2 方法(method、函数)的理解</h3><ul><li><p><code>方法</code>是类或对象行为特征的抽象，用来完成某个功能操作。在某些语言中也称为<code>函数</code>或<code>过程</code>。 </p></li><li><p>将功能封装为方法的目的是，可以<code>实现代码重用，减少冗余，简化代码</code></p></li><li><p>Java里的方法<code>不能独立存在</code>，所有的方法必须定义在类里。</p></li><li><p>举例1：</p><ul><li>Math.random()的random()方法</li><li>Math.sqrt(x)的sqrt(x)方法</li><li>System.out.println(x)的println(x)方法</li><li>new Scanner(System.in).nextInt()的nextInt()方法</li><li>Arrays类中的binarySearch()方法、sort()方法、equals()方法</li></ul></li><li><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>  &#123;  <span class="hljs-comment">//声明方法getAge()</span><br><span class="hljs-keyword">return</span> age; <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;  <span class="hljs-comment">//声明方法setAge</span><br>age = i;        <span class="hljs-comment">//将参数i的值赋给类的成员变量age</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-3-如何声明方法"><a href="#5-3-如何声明方法" class="headerlink" title="5.3 如何声明方法"></a>5.3 如何声明方法</h3><p><strong>1、声明方法的语法格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] 返回值类型 方法名([形参列表])[<span class="hljs-keyword">throws</span> 异常列表]&#123;<br>        方法体的功能代码<br>&#125;<br></code></pre></td></tr></table></figure><p>（1）一个完整的方法 &#x3D; 方法头 + 方法体。</p><ul><li>方法头就是<code>[修饰符] 返回值类型 方法名([形参列表])[throws 异常列表]</code>，也称为<code>方法签名</code>。通常调用方法时只需要关注方法头就可以，从方法头可以看出这个方法的功能和调用格式。</li><li>方法体就是方法被调用后要执行的代码。对于调用者来说，不了解方法体如何实现的，并不影响方法的使用。</li></ul><p><strong>（2）方法头可能包含5个部分</strong></p><ul><li><p><strong>修饰符</strong>：可选的。方法的修饰符也有很多，例如：public、protected、private、static、abstract、native、final、synchronized等，后面会一一学习。</p><ul><li>其中，权限修饰符有public、protected、private。在讲封装性之前，我们先默认使用pulbic修饰方法。</li><li>其中，根据是否有static，可以将方法分为静态方法和非静态方法。其中静态方法又称为类方法，非静态方法又称为实例方法。咱们在讲static前先学习实例方法。</li></ul></li><li><p><strong>返回值类型</strong>： 表示方法运行的结果的数据类型，方法执行后将结果返回到调用者。</p><ul><li>无返回值，则声明：void</li><li>有返回值，则声明出返回值类型（可以是任意类型）。与方法体中“<code>return 返回值</code>”搭配使用</li></ul></li><li><p><strong>方法名</strong>：属于标识符，命名时遵循标识符命名规则和规范，“见名知意”</p></li><li><p><strong>形参列表</strong>：表示完成方法体功能时需要外部提供的数据列表。可以包含零个，一个或多个参数。</p><ul><li>无论是否有参数，()不能省略</li><li>如果有参数，每一个参数都要指定数据类型和参数名，多个参数之间使用逗号分隔，例如：<ul><li>一个参数： (数据类型  参数名)</li><li>二个参数： (数据类型1  参数1,  数据类型2  参数2)</li></ul></li><li>参数的类型可以是基本数据类型、引用数据类型</li></ul></li><li><p><strong>throws 异常列表</strong>：可选，在【第09章-异常处理】章节再讲</p></li></ul><p><strong>（3）方法体</strong>：方法体必须有{}括起来，在{}中编写完成方法功能的代码</p><p><strong>（4）关于方法体中return语句的说明：</strong></p><ul><li><p>return语句的作用是结束方法的执行，并将方法的结果返回去</p></li><li><p>如果返回值类型不是void，方法体中必须保证一定有 return 返回值; 语句，并且要求该返回值结果的类型与声明的返回值类型一致或兼容。</p></li><li><p>如果返回值类型为void时，方法体中可以没有return语句，如果要用return语句提前结束方法的执行，那么return后面不能跟返回值，直接写return ; 就可以。</p></li><li><p>return语句后面就不能再写其他代码了，否则会报错：Unreachable code</p></li></ul><p>补充：方法的分类：按照是否有形参及返回值</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458413_watermark.png" alt="image-20220320000047155" style="zoom: 50%;" /><p><strong>2、类比举例</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458261_watermark.png" alt="image-20220503102323689" style="zoom:67%;" /><p><strong>3、代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test04.method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法定义案例演示</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDefineDemo</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无参无返回值方法的演示</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有参无返回值方法的演示</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length int 第一个参数，表示矩形的长</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> width int 第二个参数，表示矩形的宽</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sign char 第三个参数，表示填充矩形图形的符号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printRectangle</span><span class="hljs-params">(<span class="hljs-type">int</span> length, <span class="hljs-type">int</span> width, <span class="hljs-type">char</span> sign)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= length ; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j &lt;= width; j++)&#123;<br>                System.out.print(sign);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无参有返回值方法的演示</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIntBetweenOneToHundred</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">100</span>+<span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有参有返回值方法的演示</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a int 第一个参数，要比较大小的整数之一</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b int 第二个参数，要比较大小的整数之二</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> int 比较大小的两个整数中较大者的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-4-如何调用实例方法"><a href="#5-4-如何调用实例方法" class="headerlink" title="5.4 如何调用实例方法"></a>5.4 如何调用实例方法</h3><p>方法通过方法名被调用，且只有被调用才会执行。</p><p><strong>1、方法调用语法格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">对象.方法名([实参列表])<br></code></pre></td></tr></table></figure><p><strong>2、示例</strong></p><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test04.method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法调用案例演示</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodInvokeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">MethodDefineDemo</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodDefineDemo</span>();<br><br>        System.out.println(<span class="hljs-string">&quot;-----------------------方法调用演示-------------------------&quot;</span>);<br><br>        <span class="hljs-comment">//调用MethodDefineDemo类中无参无返回值的方法sayHello</span><br>        md.sayHello();<br>        md.sayHello();<br>        md.sayHello();<br>        <span class="hljs-comment">//调用一次，执行一次，不调用不执行</span><br><br>        System.out.println(<span class="hljs-string">&quot;------------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//调用MethodDefineDemo类中有参无返回值的方法printRectangle</span><br>        md.printRectangle(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;@&#x27;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;------------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//调用MethodDefineDemo类中无参有返回值的方法getIntBetweenOneToHundred</span><br>        md.getIntBetweenOneToHundred();<span class="hljs-comment">//语法没问题，就是结果丢失</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> md.getIntBetweenOneToHundred();<br>        System.out.println(<span class="hljs-string">&quot;num = &quot;</span> + num);<br><br>        System.out.println(md.getIntBetweenOneToHundred());<br>        <span class="hljs-comment">//上面的代码调用了getIntBetweenOneToHundred三次，这个方法执行了三次</span><br><br>        System.out.println(<span class="hljs-string">&quot;------------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//调用MethodDefineDemo类中有参有返回值的方法max</span><br>        md.max(<span class="hljs-number">3</span>,<span class="hljs-number">6</span>);<span class="hljs-comment">//语法没问题，就是结果丢失</span><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">bigger</span> <span class="hljs-operator">=</span> md.max(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br>        System.out.println(<span class="hljs-string">&quot;bigger = &quot;</span> + bigger);<br><br>        System.out.println(<span class="hljs-string">&quot;8,3中较大者是：&quot;</span> + md.max(<span class="hljs-number">8</span>,<span class="hljs-number">9</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、创建Scanner的对象</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//System.in默认代表键盘输入</span><br><br><span class="hljs-comment">//2、提示输入xx</span><br>System.out.print(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>); <span class="hljs-comment">//对象.非静态方法(实参列表)</span><br><br><span class="hljs-comment">//3、接收输入内容</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> input.nextInt();  <span class="hljs-comment">//对象.非静态方法()</span><br></code></pre></td></tr></table></figure><h3 id="5-5-使用的注意点"><a href="#5-5-使用的注意点" class="headerlink" title="5.5  使用的注意点"></a>5.5  使用的注意点</h3><p>（1）必须先声明后使用，且方法必须定义在类的内部</p><p>（2）调用一次就执行一次，不调用不执行。</p><p>（3）方法中可以调用类中的方法或属性，不可以在方法内部定义方法。</p><p>正确示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">类&#123;<br>    方法<span class="hljs-number">1</span>()&#123;<br>        <br>    &#125;<br>    方法<span class="hljs-number">2</span>()&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">类&#123;<br>    方法<span class="hljs-number">1</span>()&#123;<br>        方法<span class="hljs-number">2</span>()&#123;  <span class="hljs-comment">//位置错误</span><br>        <br>   &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-6-关键字return的使用"><a href="#5-6-关键字return的使用" class="headerlink" title="5.6 关键字return的使用"></a>5.6 关键字return的使用</h3><ul><li>return在方法中的作用：<ul><li>作用1：结束一个方法</li><li>作用2：结束一个方法的同时，可以返回数据给方法的调用者</li></ul></li><li>注意点：在return关键字的直接后面不能声明执行语句</li></ul><h3 id="5-7-方法调用内存分析"><a href="#5-7-方法调用内存分析" class="headerlink" title="5.7 方法调用内存分析"></a>5.7 方法调用内存分析</h3><ul><li><p>方法<code>没有被调用</code>的时候，都在<code>方法区</code>中的字节码文件(.class)中存储。</p></li><li><p>方法<code>被调用</code>的时候，需要进入到<code>栈内存</code>中运行。方法每调用一次就会在栈中有一个<code>入栈</code>动作，即给当前方法开辟一块独立的内存区域，用于存储当前方法的局部变量的值。</p></li><li><p>当方法执行结束后，会释放该内存，称为<code>出栈</code>，如果方法有返回值，就会把结果返回调用处，如果没有返回值，就直接结束，回到调用处继续执行下一条指令。</p></li><li><p>栈结构：先进后出，后进先出。</p></li></ul><p>举例分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 9:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p1.eat();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        sleep();<br>        System.out.println(<span class="hljs-string">&quot;人：吃饭&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人：睡觉&quot;</span>);<br>        doSport();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSport</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人：运动&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内存分析：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458899_watermark.png" alt="image-20220524104951449"></p><h3 id="5-8-练习"><a href="#5-8-练习" class="headerlink" title="5.8 练习"></a>5.8 练习</h3><p><strong>练习1：</strong>创建一个Person类，其定义如下：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458440_watermark.png" alt="image-20220320001337145" style="zoom:67%;" /><p>要求：</p><p>(1)创建Person类的对象，设置该对象的name、age和sex属性，调用study方法，输出字符串“studying”，调用showAge()方法显示age值，调用addAge()方法给对象的age属性值增加2岁。<br>(2)创建第二个对象，执行上述操作，体会同一个类的不同对象之间的关系。</p><p><strong>练习2：</strong>利用面向对象的编程方法，设计圆类Circle，包含属性（半径）和计算圆面积的方法。定义测试类，创建该Circle类的对象，并进行测试。</p><p><strong>练习3：</strong></p><p>3.1 编写程序，声明一个method方法，在方法中打印一个<code>10*8的*型矩形</code>，在main方法中调用该方法。</p><p>3.2 修改上一个程序，在method方法中，除打印一个<code>10*8的*型矩形</code>外，再计算该矩形的面积，并将其作为方法返回值。在main方法中调用该方法，接收返回的面积值并打印。</p><p>3.3 修改上一个程序，在method方法提供m和n两个参数，方法中打印一个<code>m*n的*型矩形</code>，并计算该矩形的面积， 将其作为方法返回值。在main方法中调用该方法，接收返回的面积值并打印。</p><p><strong>练习4：</strong>声明一个日期类型MyDate：有属性：年year,月month，日day。创建2个日期对象，分别赋值为：你的出生日期，你对象的出生日期，并显示信息。</p><p><strong>练习5（课下练习）：</strong>用面向对象的方式编写用户登录程序。</p><p>用户类：</p><ul><li>属性：用户名，密码</li><li>方法：登录</li></ul><p>界面类：</p><ul><li>在界面类中添加main方法，接受用户输入，并调用用户类的登录方法进行验证。<ul><li>输出：<ul><li>登录失败：用户名或密码错误！</li><li>登录成功：欢迎你，用户名！</li></ul></li></ul></li></ul><p>参考代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    String name;<br>    String password;<span class="hljs-comment">//密码</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现用户登录的判断</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputName 输入的用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputPwd  输入的密码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String inputName,String inputPwd)</span>&#123;<br>        <span class="hljs-keyword">if</span>(name.equals(inputName) &amp;&amp; password.equals(inputPwd))&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录成功：欢迎你，&quot;</span> + name);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败：用户名或密码错误！&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  实现用户登录的判断</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputName 输入的用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputPwd 输入的密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true:登录成功  false:登录失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login1</span><span class="hljs-params">(String inputName,String inputPwd)</span>&#123;<br><span class="hljs-comment">//        if(name.equals(inputName) &amp;&amp; password.equals(inputPwd))&#123;</span><br><span class="hljs-comment">//            return true;</span><br><span class="hljs-comment">//        &#125;else&#123;</span><br><span class="hljs-comment">//            return false;</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//简化为：</span><br>        <span class="hljs-keyword">return</span> name.equals(inputName) &amp;&amp; password.equals(inputPwd);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 用户界面类UserInterface：</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * - 在用户界面类中添加main方法，接受用户输入，并调用用户类的登录方法进行验证。</span><br><span class="hljs-comment"> * - 输出：</span><br><span class="hljs-comment"> *     - 登录失败：用户名或密码错误！</span><br><span class="hljs-comment"> *     - 登录成功：欢迎你，用户名！</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 9:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInterface</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        u1.name = <span class="hljs-string">&quot;Tom&quot;</span>;<br>        u1.password = <span class="hljs-string">&quot;abc123&quot;</span>;<br><br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入用户名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br>        System.out.print(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> scanner.next();<br><br>        <span class="hljs-comment">//演示1：</span><br><span class="hljs-comment">//        u1.login(name,pwd);</span><br><br>        <span class="hljs-comment">//演示2：</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLogin</span> <span class="hljs-operator">=</span> u1.login1(name, pwd);<br>        <span class="hljs-keyword">if</span>(isLogin)&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录成功：欢迎你，&quot;</span> + u1.name);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败：用户名或密码错误！&quot;</span>);<br>        &#125;<br><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-对象数组"><a href="#6-对象数组" class="headerlink" title="6. 对象数组"></a>6. 对象数组</h2><p>数组的元素可以是基本数据类型，也可以是引用数据类型。当元素是引用类型中的类时，我们称为对象数组。</p><p><strong>1、案例</strong></p><p>定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。</p><p>问题一：打印出3年级(state值为3）的学生信息。</p><p>问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</p><p>提示：</p><ol><li><p>生成随机数：Math.random()，返回值类型double; </p></li><li><p>四舍五入取整：Math.round(double d)，返回值类型long。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br><span class="hljs-type">int</span> number;<span class="hljs-comment">//学号</span><br><span class="hljs-type">int</span> state;<span class="hljs-comment">//年级</span><br><span class="hljs-type">int</span> score;<span class="hljs-comment">//成绩</span><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;number : &quot;</span> + number <br>+ <span class="hljs-string">&quot;,state : &quot;</span> + state + <span class="hljs-string">&quot;,score : &quot;</span> + score);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">// Student s1 = new Student();</span><br><span class="hljs-comment">// s1.number = 1;</span><br><span class="hljs-comment">// s1.state = (int)(Math.random() * 6 + 1);//[1,6]</span><br><span class="hljs-comment">// s1.score = (int)(Math.random() * 101);//[0,100]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Student s2 = new Student();</span><br><span class="hljs-comment">// s2.number = 2;</span><br><span class="hljs-comment">// s2.state = (int)(Math.random() * 6 + 1);//[1,6]</span><br><span class="hljs-comment">// s2.score = (int)(Math.random() * 101);//[0,100]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// //....</span><br><span class="hljs-comment">// 对象数组</span><br><span class="hljs-comment">// String[] arr = new String[10];</span><br><span class="hljs-comment">// 数组的创建</span><br>Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">20</span>];<br><span class="hljs-comment">// 通过循环结构给数组的属性赋值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.length; i++) &#123;<br><span class="hljs-comment">// 数组元素的赋值</span><br>students[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-comment">// 数组元素是一个对象，给对象的各个属性赋值</span><br>students[i].number = (i + <span class="hljs-number">1</span>);<br>students[i].state = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">6</span> + <span class="hljs-number">1</span>);<span class="hljs-comment">// [1,6]</span><br>students[i].score = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">101</span>);<span class="hljs-comment">// [0,100]</span><br>&#125;<br><br><span class="hljs-comment">// 问题一：打印出3年级(state值为3）的学生信息。</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.length; i++) &#123;<br><br><span class="hljs-keyword">if</span> (students[i].state == <span class="hljs-number">3</span>) &#123;<br><span class="hljs-comment">//System.out.println(</span><br><span class="hljs-comment">//&quot;number:&quot; + students[i].number + &quot;,state:&quot; + students[i].state + &quot;,score:&quot; + students[i].score);</span><br>students[i].info();<br><br>&#125;<br><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;******************************&quot;</span>);<br><span class="hljs-comment">// 问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span><br><span class="hljs-comment">// 排序前</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.length; i++) &#123;<br><span class="hljs-comment">//System.out.println(</span><br><span class="hljs-comment">//&quot;number:&quot; + students[i].number + &quot;,state:&quot; + </span><br><span class="hljs-comment">//students[i].state + &quot;,score:&quot; + students[i].score);</span><br><br>students[i].info();<br>&#125;<br><br>System.out.println();<br><span class="hljs-comment">// 排序：</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; students.length - <span class="hljs-number">1</span> - i; j++) &#123;<br><span class="hljs-keyword">if</span> (students[j].score &gt; students[j + <span class="hljs-number">1</span>].score) &#123;<br><span class="hljs-type">Student</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> students[j];<br>students[j] = students[j + <span class="hljs-number">1</span>];<br>students[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 排序后：</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.length; i++) &#123;<br><span class="hljs-comment">//System.out.println(</span><br><span class="hljs-comment">//&quot;number:&quot; + students[i].number + &quot;,state:&quot; + </span><br><span class="hljs-comment">//students[i].state + &quot;,score:&quot; + students[i].score);</span><br><br>students[i].info();<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458414_watermark.png" alt="image-20220320001627445"></p><p><strong>2、注意点</strong></p><p>对象数组，首先要创建数组对象本身，即确定数组的长度，然后再创建每一个元素对象，如果不创建，数组的元素的默认值就是<code>null</code>，所以很容易出现<code>空指针异常NullPointerException</code>。</p><p><strong>3、练习</strong></p><p>（1）定义矩形类Rectangle，包含长、宽属性，area()返回矩形面积的方法，perimeter()返回矩形周长的方法，String getInfo()返回圆对象的详细信息（如：长、宽、面积、周长等数据）的方法</p><p>（2）在测试类中创建长度为3的Rectangle[]数组，用来装3个矩形对象，并给3个矩形对象的长分别赋值为10,20,30，宽分别赋值为5,15,25，遍历输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test08.array;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-type">double</span> length;<br>    <span class="hljs-type">double</span> width;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//面积</span><br>        <span class="hljs-keyword">return</span> length * width;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">perimeter</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//周长</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * (length + width);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;长：&quot;</span> + length +<br>                <span class="hljs-string">&quot;，宽：&quot;</span> + width +<br>                <span class="hljs-string">&quot;，面积：&quot;</span> + area() +<br>                <span class="hljs-string">&quot;，周长：&quot;</span> + perimeter();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test08.array;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectArrayTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//声明并创建一个长度为3的矩形对象数组</span><br>        Rectangle[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>[<span class="hljs-number">3</span>];<br><br>        <span class="hljs-comment">//创建3个矩形对象，并为对象的实例变量赋值，</span><br>        <span class="hljs-comment">//3个矩形对象的长分别是10,20,30</span><br>        <span class="hljs-comment">//3个矩形对象的宽分别是5,15,25</span><br>        <span class="hljs-comment">//调用矩形对象的getInfo()返回对象信息后输出</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            <span class="hljs-comment">//创建矩形对象</span><br>            array[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>();<br><br>            <span class="hljs-comment">//为矩形对象的成员变量赋值</span><br>            array[i].length = (i+<span class="hljs-number">1</span>) * <span class="hljs-number">10</span>;<br>            array[i].width = (<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>) * <span class="hljs-number">5</span>;<br><br>            <span class="hljs-comment">//获取并输出对象对象的信息</span><br>            System.out.println(array[i].getInfo());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458147_watermark.png" alt="image-20211228153827819"></p><h2 id="7-再谈方法"><a href="#7-再谈方法" class="headerlink" title="7. 再谈方法"></a>7. 再谈方法</h2><h3 id="7-1-方法的重载（overload）"><a href="#7-1-方法的重载（overload）" class="headerlink" title="7.1 方法的重载（overload）"></a>7.1 方法的重载（overload）</h3><h4 id="7-1-1-概念及特点"><a href="#7-1-1-概念及特点" class="headerlink" title="7.1.1 概念及特点"></a>7.1.1 概念及特点</h4><ul><li><strong>方法重载</strong>：在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可。<ul><li>参数列表不同，意味着参数个数或参数类型的不同</li></ul></li><li><strong>重载的特点</strong>：与修饰符、返回值类型无关，只看参数列表，且参数列表必须不同。(参数个数或参数类型)。调用时，根据方法参数列表的不同来区别。</li><li><strong>重载方法调用</strong>：JVM通过方法的参数列表，调用匹配的方法。<ul><li>先找个数、类型最匹配的</li><li>再找个数和类型可以兼容的，如果同时多个方法可以兼容将会报错</li></ul></li></ul><h4 id="7-1-2-示例"><a href="#7-1-2-示例" class="headerlink" title="7.1.2 示例"></a>7.1.2 示例</h4><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//System.out.println()方法就是典型的重载方法，其内部的声明形式如下：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintStream</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">byte</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">short</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">long</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">float</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">char</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">()</span><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-number">1.2f</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//返回两个整数的和</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x+y;<br>&#125;<br><br><span class="hljs-comment">//返回三个整数的和</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)</span>&#123;<br>    <span class="hljs-keyword">return</span> x+y+z;<br>&#125;<br><span class="hljs-comment">//返回两个小数的和</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x+y;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​举例3：方法的重载和返回值类型无关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathTools</span> &#123;<br>    <span class="hljs-comment">//以下方法不是重载，会报错</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOneToHundred</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">100</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getOneToHundred</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> Math.random()*<span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="7-1-3-练习"><a href="#7-1-3-练习" class="headerlink" title="7.1.3 练习"></a>7.1.3 练习</h4><p><strong>练习1：</strong>判 断与<code>void show(int a,char b,double c)&#123;&#125;</code>构成重载的有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">a)<span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">char</span> y,<span class="hljs-type">double</span> z)</span>&#123;&#125;     <span class="hljs-comment">// no</span><br><br>b)<span class="hljs-type">int</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">double</span> c,<span class="hljs-type">char</span> b)</span>&#123;&#125;      <span class="hljs-comment">// yes</span><br><br>c) <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">double</span> c,<span class="hljs-type">char</span> b)</span>&#123;&#125;    <span class="hljs-comment">// yes</span><br><br>d) <span class="hljs-type">boolean</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> c,<span class="hljs-type">char</span> b)</span>&#123;&#125;          <span class="hljs-comment">// yes</span><br><br>e) <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">double</span> c)</span>&#123;&#125;                 <span class="hljs-comment">// yes</span><br><br>f) <span class="hljs-type">double</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">char</span> y,<span class="hljs-type">double</span> z)</span>&#123;&#125;  <span class="hljs-comment">// no</span><br><br>g) <span class="hljs-keyword">void</span> <span class="hljs-title function_">shows</span><span class="hljs-params">()</span>&#123;<span class="hljs-type">double</span> c&#125;                <span class="hljs-comment">// no</span><br></code></pre></td></tr></table></figure><p><strong>练习2</strong>：编写程序，定义三个重载方法并调用。</p><ul><li><p>方法名为mOL。</p></li><li><p>三个方法分别接收一个int参数、两个int参数、一个字符串参数。分别执行平方运算并输出结果，相乘并输出结果，输出字符串信息。</p></li><li><p>在主类的main ()方法中分别用参数区别调用三个方法。</p></li></ul><p><strong>练习3</strong>：定义三个重载方法max()，第一个方法求两个int值中的最大值，第二个方法求两个double值中的最大值，第三个方法求三个double值中的最大值，并分别调用三个方法。</p><h3 id="7-2-可变个数的形参"><a href="#7-2-可变个数的形参" class="headerlink" title="7.2 可变个数的形参"></a>7.2 可变个数的形参</h3><p>在**JDK 5.0 <strong>中提供了</strong>Varargs(<strong>variable number of arguments</strong>)**机制。即当定义一个方法时，形参的类型可以确定，但是形参的个数不确定，那么可以考虑使用可变个数的形参。</p><p><strong>格式：</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">方法名<span class="hljs-comment">(参数的类型名 ...参数名)</span><br></code></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,String[] books)</span>;<br><br><span class="hljs-comment">//JDK5.0：采用可变个数形参来定义方法，传入多个同一类型变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,String...books)</span>;<br><br></code></pre></td></tr></table></figure><p><strong>特点：</strong></p><ol><li><p>可变参数：方法参数部分指定类型的参数个数是可变多个：0个，1个或多个</p></li><li><p>可变个数形参的方法与同名的方法之间，彼此构成重载</p></li><li><p>可变参数方法的使用与方法参数部分使用数组是一致的，二者不能同时声明，否则报错。</p></li><li><p>方法的参数部分有可变形参，需要放在形参声明的最后</p></li><li><p>在一个方法的形参中，最多只能声明一个可变个数的形参</p></li></ol><p><strong>案例分析：</strong></p><p>案例1：n个字符串进行拼接，每一个字符串之间使用某字符进行分割，如果没有传入字符串，那么返回空字符串””</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTools</span> &#123;<br>    String <span class="hljs-title function_">concat</span><span class="hljs-params">(<span class="hljs-type">char</span> seperator, String... args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>                str += args[i];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                str += seperator + args[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test05.param;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringToolsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringTools</span> <span class="hljs-variable">tools</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTools</span>();<br><br>        System.out.println(tools.concat(<span class="hljs-string">&#x27;-&#x27;</span>));<br>        System.out.println(tools.concat(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&quot;hello&quot;</span>));<br>        System.out.println(tools.concat(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>));<br>        System.out.println(tools.concat(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;java&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例2：求n个整数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberTools</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">total</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            sum += nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            sum += nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestVarParam</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NumberTools</span> <span class="hljs-variable">tools</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberTools</span>();<br><br>        System.out.println(tools.sum());<span class="hljs-comment">//0个实参</span><br>        System.out.println(tools.sum(<span class="hljs-number">5</span>));<span class="hljs-comment">//1个实参</span><br>        System.out.println(tools.sum(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>));<span class="hljs-comment">//4个实参</span><br>        System.out.println(tools.sum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;));<span class="hljs-comment">//传入数组实参</span><br><br>        System.out.println(<span class="hljs-string">&quot;------------------------------------&quot;</span>);<br>        System.out.println(tools.total(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;&#125;));<span class="hljs-comment">//0个元素的数组</span><br>        System.out.println(tools.total(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">5</span>&#125;));<span class="hljs-comment">//1个元素的数组</span><br>        System.out.println(tools.total(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;));<span class="hljs-comment">//传入数组实参</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例3：如下的方法彼此构成重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathTools</span> &#123;<br>    <span class="hljs-comment">//求两个整数的最大值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a&gt;b?a:b;<br>    &#125;<br><br>    <span class="hljs-comment">//求两个小数的最大值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a&gt;b?a:b;<br>    &#125;<br><br>    <span class="hljs-comment">//求三个整数的最大值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span>&#123;<br>        <span class="hljs-keyword">return</span> max(max(a,b),c);<br>    &#125;<br>    <br>    <span class="hljs-comment">//求n个整数的最大值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<span class="hljs-comment">//如果没有传入整数，或者传入null，这句代码会报异常</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(nums[i] &gt; max)&#123;<br>                max = nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>    <span class="hljs-comment">/*    //求n整数的最大值</span><br><span class="hljs-comment">    public int max(int[] nums)&#123;  //编译就报错，与(int... nums)无法区分</span><br><span class="hljs-comment">        int max = nums[0];//如果没有传入整数，或者传入null，这句代码会报异常</span><br><span class="hljs-comment">        for (int i = 1; i &lt; nums.length; i++) &#123;</span><br><span class="hljs-comment">            if(nums[i] &gt; max)&#123;</span><br><span class="hljs-comment">                max = nums[i];</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return max;</span><br><span class="hljs-comment">    &#125;*/</span><br><br><span class="hljs-comment">/*    //求n整数的最大值</span><br><span class="hljs-comment">    public int max(int first, int... nums)&#123;  //当前类不报错，但是调用时会引起多个方法同时匹配</span><br><span class="hljs-comment">        int max = first;</span><br><span class="hljs-comment">        for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="hljs-comment">            if(nums[i] &gt; max)&#123;</span><br><span class="hljs-comment">                max = nums[i];</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return max;</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-方法的参数传递机制"><a href="#7-3-方法的参数传递机制" class="headerlink" title="7.3 方法的参数传递机制"></a>7.3 方法的参数传递机制</h3><h4 id="7-3-1-形参和实参"><a href="#7-3-1-形参和实参" class="headerlink" title="7.3.1 形参和实参"></a>7.3.1 形参和实参</h4><ul><li>形参（formal parameter）：在定义方法时，方法名后面括号()中声明的变量称为形式参数，简称形参。</li><li>实参（actual parameter）：在调用方法时，方法名后面括号()中的使用的值&#x2F;变量&#x2F;表达式称为实际参数，简称实参。</li></ul><h4 id="7-3-2-参数传递机制：值传递"><a href="#7-3-2-参数传递机制：值传递" class="headerlink" title="7.3.2 参数传递机制：值传递"></a>7.3.2 参数传递机制：值传递</h4><p>Java里方法的参数传递方式只有一种：<code>值传递</code>。 即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。</p><ul><li><p>形参是基本数据类型：将实参基本数据类型变量的“数据值”传递给形参</p></li><li><p>形参是引用数据类型：将实参引用数据类型变量的“地址值”传递给形参</p></li></ul><h4 id="7-3-3-举例"><a href="#7-3-3-举例" class="headerlink" title="7.3.3 举例"></a>7.3.3 举例</h4><p><strong>1、形参是基本数据类型</strong></p><p>案例：编写方法，交换两个整型变量的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br><span class="hljs-comment">//交换m和n的值</span><br><span class="hljs-comment">//int temp = m;</span><br><span class="hljs-comment">//m = n;</span><br><span class="hljs-comment">//n = temp;</span><br><br><span class="hljs-type">ValueTransferTest1</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueTransferTest1</span>();<br>test.swap(m, n);<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> m;<br>m = n;<br>n = temp;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458807_watermark.png" alt="image-20221120153322455"></p><p><strong>2、形参是引用数据类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Data</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>();<br>d1.m = <span class="hljs-number">10</span>;<br>d1.n = <span class="hljs-number">20</span>;<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + d1.m + <span class="hljs-string">&quot;, n = &quot;</span> + d1.n);<br><br><span class="hljs-comment">//实现 换序</span><br><br><span class="hljs-type">ValueTransferTest2</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueTransferTest2</span>();<br>test.swap(d1);<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + d1.m + <span class="hljs-string">&quot;, n = &quot;</span> + d1.n);<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(Data data)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data.m;<br>data.m = data.n;<br>data.n = temp;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span>&#123;<br><span class="hljs-type">int</span> m;<br><span class="hljs-type">int</span> n;<br>&#125;<br></code></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458643_watermark.png" alt="image-20221120153442447"></p><h4 id="7-3-4-练习"><a href="#7-3-4-练习" class="headerlink" title="7.3.4 练习"></a>7.3.4 练习</h4><p>练习1：判断如下程序输出的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssignNewObject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(MyData my)</span>&#123;<br>        my = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyData</span>(); <span class="hljs-comment">//考虑堆空间此新创建的对象，和main中的data对象是否有关</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> my.x;<br>        my.x = my.y;<br>        my.y = temp;<br>     <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AssignNewObject</span> <span class="hljs-variable">tools</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssignNewObject</span>();<br>        <br>        <span class="hljs-type">MyData</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyData</span>();<br>        data.x = <span class="hljs-number">1</span>;<br>        data.y = <span class="hljs-number">2</span>;<br>        System.out.println(<span class="hljs-string">&quot;交换之前：x = &quot;</span> + data.x +<span class="hljs-string">&quot;,y = &quot;</span> + data.y);<span class="hljs-comment">//</span><br>        tools.swap(data);<span class="hljs-comment">//调用完之后，x与y的值交换？</span><br>        System.out.println(<span class="hljs-string">&quot;交换之后：x = &quot;</span> + data.x +<span class="hljs-string">&quot;,y = &quot;</span> + data.y);<span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>&#123;<br>    <span class="hljs-type">int</span> x ;<br>    <span class="hljs-type">int</span> y;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习2：如下操作是否可以实现数组排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTypeParam</span> &#123;<br><br>    <span class="hljs-comment">//冒泡排序，实现数组从小到大排序</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                    arr[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//打印数组的元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ArrayTypeParam</span> <span class="hljs-variable">tools</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayTypeParam</span>();<br><br>        <span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;排序之前：&quot;</span>);<br>        tools.print(nums);<br><br>        tools.sort(nums);<span class="hljs-comment">//对nums数组进行排序</span><br><br>        System.out.println(<span class="hljs-string">&quot;排序之后：&quot;</span>);<br>        tools.print(nums);<span class="hljs-comment">//输出nums数组的元素</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习3：通过内存结构图，写出如下程序的输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//栈：每个方法在调用时，都会有以栈帧的方法压入栈中。栈帧中保存了当前方法中声明的变量：方法内声明的，形参</span><br><span class="hljs-comment">//堆：存放new出来的&quot;东西&quot;：对象（成员变量在对象中）、数组实体（数组元素）。 </span><br><span class="hljs-comment">//注意：变量前如果声明有类型，那么这就是一个新的刚要定义的变量。如果变量前没有声明类型，那就说明此变量在之前已经声明过。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransferTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">TransferTest3</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransferTest3</span>();<br>        test.first();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">first</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">Value</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Value</span>();<br>        v.i = <span class="hljs-number">25</span>;<br>        second(v, i);<br>        System.out.println(v.i);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">second</span><span class="hljs-params">(Value v, <span class="hljs-type">int</span> i)</span> &#123;<br>        i = <span class="hljs-number">0</span>;<br>        v.i = <span class="hljs-number">20</span>;<br>        <span class="hljs-type">Value</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Value</span>();<br>        v = val;<br>        System.out.println(v.i + <span class="hljs-string">&quot; &quot;</span> + i);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Value</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>内存解析：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458235_watermark.jpeg" alt="20220320_233145" style="zoom:80%;" /><p>练习4：<code>貌似是</code>考查方法的参数传递</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458353_watermark.png" alt="image-20220320233402122"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//法一：</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>       <span class="hljs-comment">// 在不改变原本题目的前提下，如何写这个函数才能在main函数中输出a=100，b=200？ </span><br>       a = a * <span class="hljs-number">10</span>;<br>       b = b * <span class="hljs-number">20</span>;<br>       System.out.println(a);<br>       System.out.println(b);<br>       System.exit(<span class="hljs-number">0</span>);<br>   &#125;<br><br>   <span class="hljs-comment">//法二：</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br><br>       <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(System.out) &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(String x)</span> &#123;<br><br>               <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;a=10&quot;</span>.equals(x)) &#123;<br>                   x = <span class="hljs-string">&quot;a=100&quot;</span>;<br>               &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;b=10&quot;</span>.equals(x)) &#123;<br>                   x = <span class="hljs-string">&quot;b=200&quot;</span>;<br>               &#125;<br>               <span class="hljs-built_in">super</span>.println(x);<br>           &#125;<br>       &#125;;<br><br>       System.setOut(ps);<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>练习5：将对象作为参数传递给方法</p><p>（1）定义一个Circle类，包含一个double型的radius属性代表圆的半径，一个findArea()方法返回圆的面积。<br>（2）定义一个类PassObject，在类中定义一个方法printAreas()，该方法的定义如下：public void printAreas(Circle c, int time)，在printAreas方法中打印输出1到time之间的每个整数半径值，以及对应的面积。例如，times为5，则输出半径1，2，3，4，5，以及对应的圆面积。<br>（3）在main方法中调用printAreas()方法，调用完毕后输出当前半径值。程序运行结果如图所示。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458851_watermark.png" alt="image-20220320233626003"></p><h3 id="7-4-递归-recursion-方法"><a href="#7-4-递归-recursion-方法" class="headerlink" title="7.4 递归(recursion)方法"></a>7.4 递归(recursion)方法</h3><p>举例1：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459062_watermark.png" alt="image-20220521160246138" style="zoom: 67%;" /><p>举例2：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs erlang">从前有座山,山上有座庙,庙里有个老和尚,老和尚在给小和尚讲故事,讲的啥?<br>      从前有座山,山上有座庙,庙里有个老和尚,老和尚在给小和尚讲故事,讲的啥?<br>          从前有座山,山上有座庙,庙里有个老和尚,老和尚在给小和尚讲故事,讲的啥?<br>              从前有座山,山上有座庙,庙里有个老和尚,老和尚在给小和尚讲故事,讲的啥?...<br>    ...<br>老和尚没了,庙塌了,小和尚还俗结婚了。<br></code></pre></td></tr></table></figure><p><strong>递归方法调用</strong>：方法自己调用自己的现象就称为递归。</p><p>**递归的分类:**直接递归、间接递归。</p><ul><li><p>直接递归：方法自身调用自己。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodA</span><span class="hljs-params">()</span>&#123;<br>methodA();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>间接递归：可以理解为A()方法调用B()方法，B()方法调用C()方法，C()方法调用A()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>B();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span>&#123;<br>C();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">C</span><span class="hljs-params">()</span>&#123;<br>A();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>说明</strong>：</p><ul><li>递归方法包含了一种<code>隐式的循环</code>。</li><li>递归方法会<code>重复执行</code>某段代码，但这种重复执行无须循环控制。</li><li>递归一定要向<code>已知方向</code>递归，否则这种递归就变成了无穷递归，停不下来，类似于<code>死循环</code>。最终发生<code>栈内存溢出</code>。</li></ul><p><strong>举例：</strong></p><p>举例1：计算1 ~ n的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RecursionDemo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecursionDemo</span>();<br><span class="hljs-comment">//计算1~num的和，使用递归完成</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>      <span class="hljs-comment">// 调用求和的方法</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> demo.getSum(num);<br>      <span class="hljs-comment">// 输出结果</span><br>System.out.println(sum);<br><br>&#125;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    通过递归算法实现.</span><br><span class="hljs-comment">    参数列表:int </span><br><span class="hljs-comment">    返回值类型: int </span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>      <span class="hljs-comment">/* </span><br><span class="hljs-comment">         num为1时,方法返回1,</span><br><span class="hljs-comment">         相当于是方法的出口,num总有是1的情况</span><br><span class="hljs-comment">      */</span><br><span class="hljs-keyword">if</span>(num == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">          num不为1时,方法返回 num +(num-1)的累和</span><br><span class="hljs-comment">          递归调用getSum方法</span><br><span class="hljs-comment">        */</span><br><span class="hljs-keyword">return</span> num + getSum(num-<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码执行图解：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459762_watermark.png"></p><p>举例2：递归方法计算n!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">multiply</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-keyword">if</span>(num == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> num * multiply(num - <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459858_watermark.png" alt="image-20220520150018655"></p><p>举例3：已知有一个数列：f(0) &#x3D; 1，f(1) &#x3D; 4，f(n+2)&#x3D;2*f(n+1) + f(n)，其中n是大于0的整数，求f(10)的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * f(num - <span class="hljs-number">1</span>) + f(num - <span class="hljs-number">2</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例4：已知一个数列：f(20) &#x3D; 1,f(21) &#x3D; 4,f(n+2) &#x3D; 2*f(n+1)+f(n)，其中n是大于0的整数，求f(10)的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-keyword">if</span>(num == <span class="hljs-number">20</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num == <span class="hljs-number">21</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> func(num + <span class="hljs-number">2</span>) - <span class="hljs-number">2</span> * func(num + <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例5：计算斐波那契数列（Fibonacci）的第n个值，斐波那契数列满足如下规律，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">21</span>,<span class="hljs-number">34</span>,<span class="hljs-number">55</span>,....<br></code></pre></td></tr></table></figure><p>即从第三个数开始，一个数等于前两个数之和。假设f(n)代表斐波那契数列的第n个值，那么f(n)满足：<br>f(n) &#x3D; f(n-2) + f(n-1); </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用递归的写法</span><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<span class="hljs-comment">//计算斐波那契数列第n个值是多少</span><br>       <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//负数是返回特殊值1，表示不计算负数情况</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> f(n - <span class="hljs-number">2</span>) + f(n - <span class="hljs-number">1</span>);<br>   &#125;<br><br>   <span class="hljs-comment">//不用递归</span><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">fValue</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<span class="hljs-comment">//计算斐波那契数列第n个值是多少</span><br>       <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//负数是返回特殊值1，表示不计算负数情况</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>       &#125;<br>       <span class="hljs-comment">//从第三个数开始，  等于 前两个整数相加</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">beforeBefore</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//相当于n=1时的值</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">before</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//相当于n=2时的值</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> beforeBefore + before; <span class="hljs-comment">//相当于n=3的值</span><br>       <span class="hljs-comment">//再完后</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; i &lt;= n; i++) &#123;<br>           beforeBefore = before;<br>           before = current;<br>           current = beforeBefore + before;<br>           <span class="hljs-comment">/*</span><br><span class="hljs-comment">           假设i=4</span><br><span class="hljs-comment">               beforeBefore = before; //相当于n=2时的值</span><br><span class="hljs-comment">               before = current; //相当于n=3的值</span><br><span class="hljs-comment">               current = beforeBefore + before; //相当于n = 4的值</span><br><span class="hljs-comment">           假设i=5</span><br><span class="hljs-comment">               beforeBefore = before; //相当于n=3的值</span><br><span class="hljs-comment">               before = current; //相当于n = 4的值</span><br><span class="hljs-comment">               current = beforeBefore + before; //相当于n = 5的值</span><br><span class="hljs-comment">               ....</span><br><span class="hljs-comment">            */</span><br>       &#125;<br>       <span class="hljs-keyword">return</span> current;<br>   &#125;<br></code></pre></td></tr></table></figure><p>举例6：面试题</p><blockquote><p>宋老师，我今天去百度面试，遇到一个一个双重递归调用的问题，我琢磨了一下，完全不知道为什么。打断点了，也还是没看懂为什么程序会那样走。您有空可以看一下，求指教。</p></blockquote><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459806_watermark.png" alt="image-20220320235105406"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">recursion</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> &#123;<br>       count++;<br>       System.out.println(<span class="hljs-string">&quot;count1:&quot;</span> + count + <span class="hljs-string">&quot;  k:&quot;</span> + k);<br>       <span class="hljs-keyword">if</span> (k &lt;= <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> recursion(k - <span class="hljs-number">1</span>) + recursion(k - <span class="hljs-number">2</span>);<span class="hljs-comment">//287</span><br>       <span class="hljs-comment">//return recursion(k - 1);//11</span><br>       <span class="hljs-comment">//return recursion(k - 1) + recursion(k - 1);//2047</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>剖析：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459423_watermark.png" alt="image-20220320235229941" style="zoom:67%;" /><blockquote><p>最后说两句：</p><ol><li><p>递归调用会占用大量的系统堆栈，内存耗用多，在递归调用层次多时速度要比循环<code>慢的多</code>，所以在使用递归时要慎重。</p></li><li><p>在要求高性能的情况下尽量避免使用递归，递归调用既花时间又<code>耗内存</code>。考虑使用循环迭代</p></li></ol></blockquote><h2 id="8-关键字：package、import"><a href="#8-关键字：package、import" class="headerlink" title="8. 关键字：package、import"></a>8. 关键字：package、import</h2><h3 id="8-1-package-包"><a href="#8-1-package-包" class="headerlink" title="8.1 package(包)"></a>8.1 package(包)</h3><p>package，称为包，用于指明该文件中定义的类、接口等结构所在的包。</p><h4 id="8-1-1-语法格式"><a href="#8-1-1-语法格式" class="headerlink" title="8.1.1 语法格式"></a>8.1.1 语法格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 顶层包名.子包名 ;<br></code></pre></td></tr></table></figure><p>举例：pack1\pack2\PackageTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pack1.pack2;    <span class="hljs-comment">//指定类PackageTest属于包pack1.pack2</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PackageTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;in  method display()&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>一个源文件只能有一个声明包的package语句</li><li>package语句作为Java源文件的第一条语句出现。若缺省该语句，则指定为无名包。</li><li>包名，属于标识符，满足标识符命名的规则和规范（全部小写）、见名知意<ul><li>包通常使用所在公司域名的倒置：com.atguigu.xxx。</li><li>大家取包名时不要使用”<code>java.xx</code>“包</li></ul></li><li>包对应于文件系统的目录，package语句中用 “.” 来指明包(目录)的层次，每.一次就表示一层文件目录。</li><li>同一个包下可以声明多个结构（类、接口），但是不能定义同名的结构（类、接口）。不同的包下可以定义同名的结构（类、接口）</li></ul><h4 id="8-1-2-包的作用"><a href="#8-1-2-包的作用" class="headerlink" title="8.1.2 包的作用"></a>8.1.2 包的作用</h4><ul><li>包可以包含类和子包，划分<code>项目层次</code>，便于管理</li><li>帮助<code>管理大型软件</code>系统：将功能相近的类划分到同一个包中。比如：MVC的设计模式</li><li>解决<code>类命名冲突</code>的问题</li><li>控制<code>访问权限</code></li></ul><h4 id="8-1-3-应用举例"><a href="#8-1-3-应用举例" class="headerlink" title="8.1.3 应用举例"></a>8.1.3 应用举例</h4><p>举例1：某航运软件系统包括：一组域对象、GUI和reports子系统</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459121_watermark.png" alt="image-20220321233025157"></p><p><strong>举例2：MVC设计模式</strong></p><p>MVC是一种软件构件模式，目的是为了降低程序开发中代码业务的耦合度。</p><p>MVC设计模式将整个程序分为三个层次：<code>视图模型(Viewer)层</code>，<code>控制器(Controller)层</code>，与<code>数据模型(Model)层</code>。这种将程序输入输出、数据处理，以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程序的耦合性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">视图层viewer：显示数据,为用户提供使用界面，与用户直接进行交互。<br> &gt;相关工具类   view.utils<br> &gt;自定义view  view.ui<br><br>控制层controller：解析用户请求，处理业务逻辑，给予用户响应<br> &gt;应用界面相关    controller.activity<br> &gt;存放fragment   controller.fragment<br> &gt;显示列表的适配器 controller.adapter<br> &gt;服务相关的        controller.service<br> &gt;抽取的基类        controller.base<br>    <br>模型层model：主要承载数据、处理数据<br> &gt;数据对象封装 model.bean/domain<br> &gt;数据库操作类 model.dao<br> &gt;数据库      model.db<br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459077_watermark.png" alt="image-20220321233153448"></p><h4 id="8-1-4-JDK中主要的包介绍"><a href="#8-1-4-JDK中主要的包介绍" class="headerlink" title="8.1.4 JDK中主要的包介绍"></a>8.1.4 JDK中主要的包介绍</h4><p><code>java.lang</code>—-包含一些Java语言的核心类，如String、Math、Integer、 System和Thread，提供常用功能<br><code>java.net</code>—-包含执行与网络相关的操作的类和接口。<br><code>java.io</code>   —-包含能提供多种输入&#x2F;输出功能的类。<br><code>java.util</code>—-包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。<br><code>java.text</code>—-包含了一些java格式化相关的类<br><code>java.sql</code>—-包含了java进行JDBC数据库编程的相关类&#x2F;接口<br><code>java.awt</code>—-包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。  </p><h3 id="8-2-import-导入"><a href="#8-2-import-导入" class="headerlink" title="8.2 import(导入)"></a>8.2 import(导入)</h3><p>为了使用定义在其它包中的Java类，需用import语句来显式引入指定包下所需要的类。相当于<code>import语句告诉编译器到哪里去寻找这个类</code>。</p><h4 id="8-2-1-语法格式"><a href="#8-2-1-语法格式" class="headerlink" title="8.2.1 语法格式"></a>8.2.1 语法格式</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">import 包名.类名<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="8-2-2-应用举例"><a href="#8-2-2-应用举例" class="headerlink" title="8.2.2 应用举例"></a>8.2.2 应用举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> pack1.pack2.Test;   <span class="hljs-comment">//import pack1.pack2.*;表示引入pack1.pack2包中的所有结构</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PackTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br><span class="hljs-type">Test</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();          <span class="hljs-comment">//Test类在pack1.pack2包中定义</span><br>t.display();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-2-3-注意事项"><a href="#8-2-3-注意事项" class="headerlink" title="8.2.3 注意事项"></a>8.2.3 注意事项</h4><ul><li><p>import语句，声明在包的声明和类的声明之间。</p></li><li><p>如果需要导入多个类或接口，那么就并列显式多个import语句即可</p></li><li><p>如果使用<code>a.*</code>导入结构，表示可以导入a包下的所有的结构。举例：可以使用java.util.*的方式，一次性导入util包下所有的类或接口。</p></li><li><p>如果导入的类或接口是java.lang包下的，或者是当前包下的，则可以省略此import语句。</p></li><li><p>如果已经导入java.a包下的类，那么如果需要使用a包的子包下的类的话，仍然需要导入。</p></li><li><p>如果在代码中使用不同包下的同名的类，那么就需要使用类的全类名的方式指明调用的是哪个类。</p></li><li><p>（了解）<code>import static</code>组合的使用：调用指定类或接口下的静态的属性或方法</p></li></ul><h2 id="9-面向对象特征一：封装性-encapsulation"><a href="#9-面向对象特征一：封装性-encapsulation" class="headerlink" title="9. 面向对象特征一：封装性(encapsulation)"></a>9. 面向对象特征一：封装性(encapsulation)</h2><h3 id="9-1-为什么需要封装？"><a href="#9-1-为什么需要封装？" class="headerlink" title="9.1 为什么需要封装？"></a>9.1 为什么需要封装？</h3><ul><li>我要用洗衣机，只需要按一下开关和洗涤模式就可以了。有必要了解洗衣机内部的结构吗？有必要碰电动机吗？</li><li>我要开车，我不需要懂离合、油门、制动等原理和维修也可以驾驶。</li></ul><ul><li>客观世界里每一个事物的内部信息都隐藏在其内部，外界无法直接操作和修改，只能通过指定的方式进行访问和修改。</li></ul><p>随着我们系统越来越复杂，类会越来越多，那么类之间的访问边界必须把握好，面向对象的开发原则要遵循“<code>高内聚、低耦合</code>”。</p><blockquote><p>高内聚、低耦合是软件工程中的概念，也是UNIX 操作系统设计的经典原则。</p><p>内聚，指一个模块内各个元素彼此结合的紧密程度；耦合指一个软件结构内不同模块之间互连程度的度量。内聚意味着重用和独立，耦合意味着多米诺效应牵一发动全身。</p></blockquote><p>而“高内聚，低耦合”的体现之一：</p><ul><li><code>高内聚</code>：类的内部数据操作细节自己完成，不允许外部干涉；</li><li><code>低耦合</code>：仅暴露少量的方法给外部使用，尽量方便外部调用。</li></ul><h3 id="9-2-何为封装性？"><a href="#9-2-何为封装性？" class="headerlink" title="9.2 何为封装性？"></a>9.2 何为封装性？</h3><p>所谓封装，就是把客观事物封装成抽象概念的类，并且类可以把自己的数据和方法只向可信的类或者对象开放，向没必要开放的类或者对象隐藏信息。</p><p><strong>通俗的讲，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</strong></p><h3 id="9-3-Java如何实现数据封装"><a href="#9-3-Java如何实现数据封装" class="headerlink" title="9.3 Java如何实现数据封装"></a>9.3 Java如何实现数据封装</h3><ul><li><p>实现封装就是控制类或成员的可见性范围。这就需要依赖访问控制修饰符，也称为权限修饰符来控制。</p></li><li><p>权限修饰符：<code>public</code>、<code>protected</code>、<code>缺省</code>、<code>private</code>。具体访问范围如下：</p></li></ul><table><thead><tr><th>修饰符</th><th>本类内部</th><th>本包内</th><th>其他包的子类</th><th>其他包非子类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>缺省</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><ul><li>具体修饰的结构：<ul><li>外部类：public、缺省</li><li>成员变量、成员方法、构造器、成员内部类：public、protected、缺省、private</li></ul></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459344_watermark.png" alt="image-20220321222327616" style="zoom:67%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459061_watermark.png" alt="image-20220617164042390" style="zoom:80%;" /><h3 id="9-4-封装性的体现"><a href="#9-4-封装性的体现" class="headerlink" title="9.4 封装性的体现"></a>9.4 封装性的体现</h3><h4 id="9-4-1-成员变量-属性私有化"><a href="#9-4-1-成员变量-属性私有化" class="headerlink" title="9.4.1 成员变量&#x2F;属性私有化"></a>9.4.1 成员变量&#x2F;属性私有化</h4><p><strong>概述：私有化类的成员变量，提供公共的get和set方法，对外暴露获取和修改属性的功能。</strong></p><p>实现步骤：</p><p><strong>①</strong> 使用 <code>private</code> 修饰成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> 数据类型 变量名 ；<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> marry;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>②</strong> 提供 <code>getXxx</code>方法 &#x2F; <code>setXxx</code> 方法，可以访问成员变量，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> marry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String n)</span> &#123;<br>name = n;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        age = a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMarry</span><span class="hljs-params">(<span class="hljs-type">boolean</span> m)</span>&#123;<br>        marry = m;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMarry</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> marry;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>③</strong> 测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><br>        <span class="hljs-comment">//实例变量私有化，跨类是无法直接使用的</span><br><span class="hljs-comment">/* p.name = &quot;张三&quot;;</span><br><span class="hljs-comment">        p.age = 23;</span><br><span class="hljs-comment">        p.marry = true;*/</span><br><br>        p.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;p.name = &quot;</span> + p.getName());<br><br>        p.setAge(<span class="hljs-number">23</span>);<br>        System.out.println(<span class="hljs-string">&quot;p.age = &quot;</span> + p.getAge());<br><br>        p.setMarry(<span class="hljs-literal">true</span>);<br>        System.out.println(<span class="hljs-string">&quot;p.marry = &quot;</span> + p.isMarry());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>成员变量封装的好处：</strong></p><ul><li>让使用者只能通过事先预定的方法来<code>访问数据</code>，从而可以在该方法里面加入控制逻辑，限制对成员变量的不合理访问。还可以进行数据检查，从而有利于保证对象信息的完整性。</li><li><code>便于修改</code>，提高代码的可维护性。主要说的是隐藏的部分，在内部修改了，如果其对外可以的访问方式不变的话，外部根本感觉不到它的修改。例如：Java8-&gt;Java9，String从char[]转为byte[]内部实现，而对外的方法不变，我们使用者根本感觉不到它内部的修改。</li></ul><p><strong>开心一笑：</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">A <span class="hljs-keyword">man</span> and woman are <span class="hljs-keyword">in</span> a computer programming lecture. The <span class="hljs-keyword">man</span> touches the woman&#x27;s breasts.<br><br><span class="hljs-string">&quot;Hey!&quot;</span> <span class="hljs-keyword">she</span> says. <span class="hljs-string">&quot;Those are private!&quot;</span><br><br>The <span class="hljs-keyword">man</span> says, <span class="hljs-string">&quot;But we&#x27;re in the same class!&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="9-4-2-私有化方法"><a href="#9-4-2-私有化方法" class="headerlink" title="9.4.2 私有化方法"></a>9.4.2 私有化方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 自定义的操作数组的工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康 Email:shkstart@126.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span></span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayUtil</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 求int型数组的最大值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">maxValue</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt; arr.length;i++)&#123;<br><span class="hljs-keyword">if</span>(maxValue &lt; arr[i])&#123;<br>maxValue = arr[i];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> maxValue;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 求int型数组的最小值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">minValue</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt; arr.length;i++)&#123;<br><span class="hljs-keyword">if</span>(minValue &gt; arr[i])&#123;<br>minValue = arr[i];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> minValue;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 求int型数组的总和</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>sum += arr[i];<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 求int型数组的元素的平均值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">avg</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">sumValue</span> <span class="hljs-operator">=</span> sum(arr);<br><span class="hljs-keyword">return</span> sumValue / arr.length;<br>&#125;<br><br><span class="hljs-comment">// 创建一系列重载的上述方法</span><br><span class="hljs-comment">// public double max(double[] arr)&#123;&#125;</span><br><span class="hljs-comment">// public float max(float[] arr)&#123;&#125;</span><br><span class="hljs-comment">// public byte max(byte[] arr)&#123;&#125;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 遍历数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>System.out.print(arr[i] + <span class="hljs-string">&quot;  &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 复制数组arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] copy(<span class="hljs-type">int</span>[] arr) &#123;<br><span class="hljs-type">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>arr1[i] = arr[i];<br>&#125;<br><span class="hljs-keyword">return</span> arr1;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 反转数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,j = arr.length - <span class="hljs-number">1</span>;i &lt; j;i++,j--)&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>arr[i] = arr[j];<br>arr[j] = temp;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 数组的排序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> desc 指明排序的方式。 ascend:升序    descend:降序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,String desc)</span> &#123;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;ascend&quot;</span>.equals(desc))&#123;<span class="hljs-comment">//if(desc.equals(&quot;ascend&quot;))&#123;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br><span class="hljs-comment">//int temp = arr[j];</span><br><span class="hljs-comment">//arr[j] = arr[j + 1];</span><br><span class="hljs-comment">//arr[j + 1] = temp;</span><br>swap(arr,j,j+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;descend&quot;</span>.equals(desc))&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[j] &lt; arr[j + <span class="hljs-number">1</span>]) &#123;<br><span class="hljs-comment">//int temp = arr[j];</span><br><span class="hljs-comment">//arr[j] = arr[j + 1];</span><br><span class="hljs-comment">//arr[j + 1] = temp;</span><br>swap(arr,j,j+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;您输入的排序方式有误！&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>arr[i] = arr[j];<br>arr[j] = temp;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 查找指定的value值在arr数组中出现的位置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回value值出现的位置 或 -1：未找到</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> value)</span> &#123;<br><span class="hljs-comment">//方法：线性查找</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br><span class="hljs-keyword">if</span>(value == arr[i])&#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> - <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>开发中，一般成员实例变量都习惯使用private修饰，再提供相应的public权限的get&#x2F;set方法访问。</p><p>对于final的实例变量，不提供set()方法。（后面final关键字的时候讲）</p><p>对于static final的成员变量，习惯上使用public修饰。</p></blockquote><h3 id="9-5-练习"><a href="#9-5-练习" class="headerlink" title="9.5 练习"></a>9.5 练习</h3><p>练习1：</p><p>创建程序：在其中定义两个类：Person和PersonTest类。定义如下：</p><p>用setAge()设置人的合法年龄(0~130)，用getAge()返回人的年龄。在PersonTest类中实例化Person类的对象b，调用setAge()和getAge()方法，体会Java的封装性。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459985_watermark.png" alt="image-20220321223633916" style="zoom:80%;" /><p>练习2：</p><p>自定义图书类。设定属性包括：书名bookName，作者author，出版社名publisher，价格price；方法包括：相应属性的get&#x2F;set方法，图书信息介绍等。</p><h2 id="10-类的成员之三：构造器-Constructor"><a href="#10-类的成员之三：构造器-Constructor" class="headerlink" title="10. 类的成员之三：构造器(Constructor)"></a>10. 类的成员之三：构造器(Constructor)</h2><p>我们new完对象时，所有成员变量都是默认值，如果我们需要赋别的值，需要挨个为它们再赋值，太麻烦了。我们能不能在new对象时，直接为当前对象的某个或所有成员变量直接赋值呢？</p><p>可以，Java给我们提供了<code>构造器（Constructor)</code>，也称为<code>构造方法</code>。</p><h3 id="10-1-构造器的作用"><a href="#10-1-构造器的作用" class="headerlink" title="10.1 构造器的作用"></a>10.1 构造器的作用</h3><p>new对象，并在new对象的时候为实例变量赋值。</p><p>举例：Person p &#x3D; new <code>Person(“Peter”,15)</code>;</p><p>解释：如同我们规定每个“人”一出生就必须先洗澡，我们就可以在“人”的构造器中加入完成“洗澡”的程序代码，于是每个“人”一出生就会自动完成“洗澡”，程序就不必再在每个人刚出生时一个一个地告诉他们要“洗澡”了。</p><h3 id="10-2-构造器的语法格式"><a href="#10-2-构造器的语法格式" class="headerlink" title="10.2 构造器的语法格式"></a>10.2 构造器的语法格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 类名&#123;<br>    [修饰符] 构造器名()&#123;<br>    <span class="hljs-comment">// 实例初始化代码</span><br>    &#125;<br>    [修饰符] 构造器名(参数列表)&#123;<br>        <span class="hljs-comment">// 实例初始化代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>构造器名必须与它所在的类名必须相同。</li><li>它没有返回值，所以不需要返回值类型，也不需要void。</li><li>构造器的修饰符只能是权限修饰符，不能被其他任何修饰。比如，不能被static、final、synchronized、abstract、native修饰，不能有return语句返回值。</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">// 无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String n,<span class="hljs-type">int</span> a)</span> &#123;<br>        name = n;<br>        age = a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String n)</span> &#123;<br>        name = n;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        age = a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span> + name +<span class="hljs-string">&quot;，年龄：&quot;</span> + age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//调用无参构造创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br>        <span class="hljs-comment">//调用有参构造创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>);<br><br>        System.out.println(s1.getInfo());<br>        System.out.println(s2.getInfo());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-3-使用说明"><a href="#10-3-使用说明" class="headerlink" title="10.3 使用说明"></a>10.3 使用说明</h3><ol><li><p>当我们没有显式的声明类中的构造器时，系统会默认提供一个无参的构造器并且该构造器的修饰符默认与类的修饰符相同</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459951_watermark.png" alt="image-20220524143937454"></p></li><li><p>当我们显式的定义类的构造器以后，系统就不再提供默认的无参的构造器了。</p></li><li><p>在类中，至少会存在一个构造器。</p></li><li><p>构造器是可以重载的。</p></li></ol><h3 id="10-4-练习"><a href="#10-4-练习" class="headerlink" title="10.4 练习"></a>10.4 练习</h3><p><strong>练习1：</strong>编写两个类，TriAngle和TriAngleTest，其中TriAngle类中声明私有的底边长base和高height，同时声明公共方法访问私有变量。此外，提供类必要的构造器。另一个类中使用这些公共方法，计算三角形的面积。</p><p><strong>练习2：</strong></p><p>(1)定义Student类,有4个属性：<br>  String name;<br>  int age;<br>  String school;<br>  String major;</p><p>(2)定义Student类的3个构造器:</p><ul><li>第一个构造器Student(String n, int a)设置类的name和age属性；</li><li>第二个构造器Student(String n, int a, String s)设置类的name, age 和school属性；</li><li>第三个构造器Student(String n, int a, String s, String m)设置类的name, age ,school和major属性；</li></ul><p>(3)在main方法中分别调用不同的构造器创建的对象，并输出其属性值。</p><p><strong>练习3：</strong></p><p>1、写一个名为Account的类模拟账户。该类的属性和方法如下图所示。</p><p>该类包括的属性：账号id，余额balance，年利率annualInterestRate；</p><p>包含的方法：访问器方法（getter和setter方法），取款方法withdraw()，存款方法deposit()。</p><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231500062_watermark.png" alt="image-20220321235241752"></p><p><strong>提示：</strong>在提款方法withdraw中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示。</p><ol start="2"><li>创建Customer类。</li></ol><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231500674_watermark.png" alt="image-20220321235324156"></p><p>a. 声明三个私有对象属性：firstName、lastName和account。<br>b. 声明一个公有构造器，这个构造器带有两个代表对象属性的参数（f和l）<br>c. 声明两个公有存取器来访问该对象属性，方法getFirstName和getLastName返回相应的属性。<br>d. 声明setAccount 方法来对account属性赋值。<br>e. 声明getAccount 方法以获取account属性。</p><p>3.写一个测试程序。</p><p>（1）创建一个Customer ，名字叫 Jane Smith, 他有一个账号为1000，余额为2000元，年利率为 1.23％ 的账户。<br>（2）对Jane Smith操作。<br>存入 100 元，再取出960元。再取出2000元。<br>打印出Jane Smith 的基本信息</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">成功存入 ：<span class="hljs-number">100.0</span><br>成功取出：<span class="hljs-number">960.0</span><br>余额不足，取款失败<br>Customer [Smith, Jane] has a account: <span class="hljs-built_in">id</span> <span class="hljs-keyword">is</span> <span class="hljs-number">1000</span>, annualInterestRate <span class="hljs-keyword">is</span> <span class="hljs-number">1.23</span>％, balance <span class="hljs-keyword">is</span> <span class="hljs-number">1140.0</span><br></code></pre></td></tr></table></figure><h2 id="11-阶段性知识补充"><a href="#11-阶段性知识补充" class="headerlink" title="11. 阶段性知识补充"></a>11. 阶段性知识补充</h2><h3 id="11-1-类中属性赋值过程"><a href="#11-1-类中属性赋值过程" class="headerlink" title="11.1 类中属性赋值过程"></a>11.1 类中属性赋值过程</h3><p><strong>1、在类的属性中，可以有哪些位置给属性赋值？</strong></p><p>① 默认初始化</p><p>② 显式初始化</p><p>③ 构造器中初始化</p><p>④ 通过”对象.属性”或”对象.方法”的方式，给属性赋值</p><p><strong>2、这些位置执行的先后顺序是怎样？</strong></p><p>顺序：① - ② - ③ - ④</p><p>3、说明：</p><ul><li>上述中的①、②、③在对象创建过程中，只执行一次。</li></ul><ul><li>④ 是在对象创建后执行的，可以根据需求多次执行。</li></ul><h3 id="11-2-JavaBean"><a href="#11-2-JavaBean" class="headerlink" title="11.2 JavaBean"></a>11.2 JavaBean</h3><ul><li><p>JavaBean是一种Java语言写成的可重用组件。</p><ul><li>好比你做了一个扳手，这个扳手会在很多地方被拿去用。这个扳手也提供多种功能(你可以拿这个扳手扳、锤、撬等等)，而这个扳手就是一个组件。</li></ul></li><li><p>所谓JavaBean，是指符合如下标准的Java类：</p><ul><li>类是公共的</li><li>有一个无参的公共的构造器</li><li>有属性，且有对应的get、set方法</li></ul></li><li><p>用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以用Java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。</p></li><li><p>《Think in Java》中提到，JavaBean最初是为Java GUI的可视化编程实现的。你拖动IDE构建工具创建一个GUI 组件（如多选框），其实是工具给你创建Java类，并提供将类的属性暴露出来给你修改调整，将事件监听器暴露出来。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBean</span> &#123;<br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 属性一般定义为private</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JavaBean</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        age = a;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String n)</span> &#123;<br>        name = n;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="11-3-UML类图"><a href="#11-3-UML类图" class="headerlink" title="11.3 UML类图"></a>11.3 UML类图</h3><ul><li><p>UML（Unified Modeling Language，统一建模语言），用来描述<code>软件模型</code>和<code>架构</code>的图形化语言。</p></li><li><p>常用的UML工具软件有<code>PowerDesinger</code>、<code>Rose</code>和<code>Enterprise Architect</code>。</p></li><li><p>UML工具软件不仅可以绘制软件开发中所需的各种图表，还可以生成对应的源代码。</p></li><li><p>在软件开发中，使用<code>UML类图</code>可以更加直观地描述类内部结构（类的属性和操作）以及类之间的关系（如关联、依赖、聚合等）。</p><ul><li>+表示 public 类型， - 表示 private 类型，#表示protected类型</li><li>方法的写法:<br>方法的类型(+、-)  方法名(参数名： 参数类型)：返回值类型</li><li>斜体表示抽象方法或类。</li></ul></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231500345_watermark.png" alt="image-20220321232230831" style="zoom:80%;" /><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231500229_watermark.png" alt="image-20220503111301602"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组</title>
    <link href="/2024/02/23/5.%20%E6%95%B0%E7%BB%84/"/>
    <url>/2024/02/23/5.%20%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="1-数组的概述"><a href="#1-数组的概述" class="headerlink" title="1. 数组的概述"></a>1. 数组的概述</h2><h3 id="1-1-为什么需要数组"><a href="#1-1-为什么需要数组" class="headerlink" title="1.1 为什么需要数组"></a>1.1 为什么需要数组</h3><p><strong>需求分析1：</strong></p><p>需要统计某公司50个员工的工资情况，例如计算平均工资、找到最高工资等。用之前知识，首先需要声明<code>50个变量</code>来分别记录每位员工的工资，这样会很麻烦。因此我们可以将所有的数据全部存储到一个容器中统一管理，并使用容器进行计算。</p><p><strong>需求分析2：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911112_watermark.jpeg" alt="snipaste_20220317_000101" style="zoom: 50%;" /><p>容器的概念：</p><ul><li><strong>生活中的容器：</strong>水杯（装水等液体），衣柜（装衣服等物品），集装箱（装货物等）。</li><li><strong>程序中的容器：</strong>将多个数据存储到一起，每个数据称为该容器的元素。</li></ul><h3 id="1-2-数组的概念"><a href="#1-2-数组的概念" class="headerlink" title="1.2 数组的概念"></a>1.2 数组的概念</h3><ul><li><p>数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</p></li><li><p>数组中的概念</p><ul><li>数组名</li><li>下标（或索引）</li><li>元素</li><li>数组的长度</li></ul></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911339_watermark.png" alt="image-20220317000952499"></p><p><strong>数组的特点：</strong></p><ul><li>数组本身是<code>引用数据类型</code>，而数组中的元素可以是<code>任何数据类型</code>，包括基本数据类型和引用数据类型。</li><li>创建数组对象会在内存中开辟一整块<code>连续的空间</code>。占据的空间的大小，取决于数组的长度和数组中元素的类型。</li><li>数组中的元素在内存中是依次紧密排列的，有序的。</li><li>数组，一旦初始化完成，其长度就是确定的。数组的<code>长度一旦确定，就不能修改</code>。</li><li>我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快。</li><li>数组名中引用的是这块连续空间的首地址。</li></ul><h3 id="1-3-数组的分类"><a href="#1-3-数组的分类" class="headerlink" title="1.3 数组的分类"></a>1.3 数组的分类</h3><p><strong>1、按照元素类型分：</strong></p><ul><li>基本数据类型元素的数组：每个元素位置存储基本数据类型的值</li><li>引用数据类型元素的数组：每个元素位置存储对象（本质是存储对象的首地址）（在面向对象部分讲解）</li></ul><p><strong>2、按照维度分：</strong></p><ul><li>一维数组：存储一组数据</li><li>二维数组：存储多组数据，相当于二维表，一行代表一组数据，只是这里的二维表每一行长度不要求一样。</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911881_watermark.png" alt="image-20211221164709624"></p><h2 id="2-一维数组的使用"><a href="#2-一维数组的使用" class="headerlink" title="2. 一维数组的使用"></a>2. 一维数组的使用</h2><h3 id="2-1-一维数组的声明"><a href="#2-1-一维数组的声明" class="headerlink" title="2.1 一维数组的声明"></a>2.1 一维数组的声明</h3><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//推荐</span><br>元素的数据类型[] 一维数组的名称;<br><br><span class="hljs-comment">//不推荐</span><br>元素的数据类型  一维数组名[];<br></code></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr;<br><span class="hljs-type">int</span> arr1[];<br><span class="hljs-type">double</span>[] arr2;<br>String[] arr3;  <span class="hljs-comment">//引用类型变量数组</span><br></code></pre></td></tr></table></figure><p><strong>数组的声明，需要明确：</strong></p><p>（1）数组的维度：在Java中数组的符号是[]，[]表示一维，[][]表示二维。</p><p>（2）数组的元素类型：即创建的数组容器可以存储什么数据类型的数据。元素的类型可以是任意的Java的数据类型。例如：int、String、Student等。</p><p>（3）数组名：就是代表某个数组的标识符，数组名其实也是变量名，按照变量的命名规范来命名。数组名是个引用数据类型的变量，因为它代表一组数据。</p><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//比如，要存储一个小组的成绩</span><br>        <span class="hljs-type">int</span>[] scores;<br>        <span class="hljs-type">int</span> grades[];<br><span class="hljs-comment">//        System.out.println(scores);//未初始化不能使用</span><br><br>        <span class="hljs-comment">//比如，要存储一组字母</span><br>        <span class="hljs-type">char</span>[] letters;<br><br>        <span class="hljs-comment">//比如，要存储一组姓名</span><br>        String[] names;<br><br>        <span class="hljs-comment">//比如，要存储一组价格</span><br>        <span class="hljs-type">double</span>[] prices;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：Java语言中声明数组时不能指定其长度(数组中元素的个数)。 例如： int a[5]; &#x2F;&#x2F;非法</p><h3 id="2-2-一维数组的初始化"><a href="#2-2-一维数组的初始化" class="headerlink" title="2.2 一维数组的初始化"></a>2.2 一维数组的初始化</h3><h4 id="2-2-1-静态初始化"><a href="#2-2-1-静态初始化" class="headerlink" title="2.2.1 静态初始化"></a>2.2.1 静态初始化</h4><ul><li><p>如果数组变量的初始化和数组元素的赋值操作同时进行，那就称为静态初始化。</p></li><li><p>静态初始化，本质是用静态数据（编译时已知）为数组初始化。此时数组的长度由静态数据的个数决定。</p></li><li><p><strong>一维数组声明和静态初始化格式1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 数组名 = <span class="hljs-keyword">new</span> 数据类型[]&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,元素<span class="hljs-number">3</span>,...&#125;;<br><br>或<br>    <br>数据类型[] 数组名;<br>数组名 = <span class="hljs-keyword">new</span> 数据类型[]&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,元素<span class="hljs-number">3</span>,...&#125;;<br></code></pre></td></tr></table></figure><ul><li>new：关键字，创建数组使用的关键字。因为数组本身是引用数据类型，所以要用new创建数组实体。</li></ul></li></ul><p>例如，定义存储1，2，3，4，5整数的数组容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//正确</span><br><span class="hljs-comment">//或</span><br><span class="hljs-type">int</span>[] arr;<br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//正确</span><br></code></pre></td></tr></table></figure><ul><li><strong>一维数组声明和静态初始化格式2：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 数组名 = &#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,元素<span class="hljs-number">3.</span>..&#125;;<span class="hljs-comment">//必须在一个语句中完成，不能分成两个语句写</span><br></code></pre></td></tr></table></figure><p>例如，定义存储1，2，3，4，5整数的数组容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//正确</span><br><br><span class="hljs-type">int</span>[] arr;<br>arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//右边不需要写new int[]</span><br><br>        <span class="hljs-type">int</span>[] nums;<br>        nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>&#125;; <span class="hljs-comment">//声明和初始化在两个语句完成，就不能使用new int[]</span><br><br>        <span class="hljs-type">char</span>[] word = &#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>&#125;;<br><br>        String[] heros = &#123;<span class="hljs-string">&quot;袁隆平&quot;</span>,<span class="hljs-string">&quot;邓稼先&quot;</span>,<span class="hljs-string">&quot;钱学森&quot;</span>&#125;;<br><br>        System.out.println(<span class="hljs-string">&quot;arr数组：&quot;</span> + arr);<span class="hljs-comment">//arr数组：[I@1b6d3586</span><br>        System.out.println(<span class="hljs-string">&quot;nums数组：&quot;</span> + nums);<span class="hljs-comment">//nums数组：[I@4554617c</span><br>        System.out.println(<span class="hljs-string">&quot;word数组：&quot;</span> + word);<span class="hljs-comment">//word数组：[C@74a14482</span><br>        System.out.println(<span class="hljs-string">&quot;heros数组：&quot;</span> + heros);<span class="hljs-comment">//heros数组：[Ljava.lang.String;@1540e19d</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-动态初始化"><a href="#2-2-2-动态初始化" class="headerlink" title="2.2.2 动态初始化"></a>2.2.2 动态初始化</h4><p>数组变量的初始化和数组元素的赋值操作分开进行，即为动态初始化。</p><p>动态初始化中，只确定了元素的个数（即数组的长度），而元素值此时只是默认值，还并未真正赋自己期望的值。真正期望的数据需要后续单独一个一个赋值。</p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">数组存储的元素的数据类型[] 数组名字 = <span class="hljs-keyword">new</span> 数组存储的元素的数据类型[长度];<br><br>或<br><br>数组存储的数据类型[] 数组名字;<br>数组名字 = <span class="hljs-keyword">new</span> 数组存储的数据类型[长度];<br></code></pre></td></tr></table></figure><ul><li><p>[长度]：数组的长度，表示数组容器中可以最多存储多少个元素。</p></li><li><p><strong>注意：数组有定长特性，长度一旦指定，不可更改。</strong>和水杯道理相同，买了一个2升的水杯，总容量就是2升是固定的。</p></li></ul><p><strong>举例1：正确写法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><br><span class="hljs-type">int</span>[] arr;<br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><br></code></pre></td></tr></table></figure><p><strong>举例2：错误写法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//错误的，后面有&#123;&#125;指定元素列表，就不需要在[]中指定元素个数了。</span><br></code></pre></td></tr></table></figure><h3 id="2-3-一维数组的使用"><a href="#2-3-一维数组的使用" class="headerlink" title="2.3 一维数组的使用"></a>2.3 一维数组的使用</h3><h4 id="2-3-1-数组的长度"><a href="#2-3-1-数组的长度" class="headerlink" title="2.3.1  数组的长度"></a>2.3.1  数组的长度</h4><ul><li>数组的元素总个数，即数组的长度</li><li>每个数组都有一个属性length指明它的长度，例如：arr.length 指明数组arr的长度(即元素个数)</li><li>每个数组都具有长度，而且一旦初始化，其长度就是确定，且是不可变的。</li></ul><h4 id="2-3-2-数组元素的引用"><a href="#2-3-2-数组元素的引用" class="headerlink" title="2.3.2 数组元素的引用"></a>2.3.2 数组元素的引用</h4><p><strong>如何表示数组中的一个元素？</strong></p><p>每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为<code>数组索引(index)或下标</code>，可以通过数组的索引&#x2F;下标访问到数组中的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数组名[索引/下标]<br></code></pre></td></tr></table></figure><p><strong>数组的下标范围？</strong></p><p>Java中数组的下标从[0]开始，下标范围是[0, 数组的长度-1]，即[0, 数组名.length-1]</p><p>数组元素下标可以是整型常量或整型表达式。如a[3] , b[i] , c[6*i];</p><p><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><br>        System.out.println(<span class="hljs-string">&quot;arr数组的长度：&quot;</span> + arr.length);<br>        System.out.println(<span class="hljs-string">&quot;arr数组的第1个元素：&quot;</span> + arr[<span class="hljs-number">0</span>]);<span class="hljs-comment">//下标从0开始</span><br>        System.out.println(<span class="hljs-string">&quot;arr数组的第2个元素：&quot;</span> + arr[<span class="hljs-number">1</span>]);<br>        System.out.println(<span class="hljs-string">&quot;arr数组的第3个元素：&quot;</span> + arr[<span class="hljs-number">2</span>]);<br>        System.out.println(<span class="hljs-string">&quot;arr数组的第4个元素：&quot;</span> + arr[<span class="hljs-number">3</span>]);<br>        System.out.println(<span class="hljs-string">&quot;arr数组的第5个元素：&quot;</span> + arr[<span class="hljs-number">4</span>]);<br><br>        <span class="hljs-comment">//修改第1个元素的值</span><br>        <span class="hljs-comment">//此处arr[0]相当于一个int类型的变量</span><br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br>        System.out.println(<span class="hljs-string">&quot;arr数组的第1个元素：&quot;</span> + arr[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-一维数组的遍历"><a href="#2-4-一维数组的遍历" class="headerlink" title="2.4 一维数组的遍历"></a>2.4 一维数组的遍历</h3><p>将数组中的每个元素分别获取出来，就是<code>遍历</code>。for循环与数组的遍历是绝配。</p><p><strong>举例1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-comment">//打印数组的属性，输出结果是5</span><br>        System.out.println(<span class="hljs-string">&quot;数组的长度：&quot;</span> + arr.length);<br><br>        <span class="hljs-comment">//遍历输出数组中的元素</span><br>        System.out.println(<span class="hljs-string">&quot;数组的元素有：&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><br>        System.out.println(<span class="hljs-string">&quot;arr数组的长度：&quot;</span> + arr.length);<br>        System.out.print(<span class="hljs-string">&quot;存储数据到arr数组之前：[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>                System.out.print(arr[i]);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.print(<span class="hljs-string">&quot;,&quot;</span> + arr[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;]&quot;</span>);<br><br>        <span class="hljs-comment">//初始化</span><br> <span class="hljs-comment">/* </span><br><span class="hljs-comment"> arr[0] = 2;</span><br><span class="hljs-comment">        arr[1] = 4;</span><br><span class="hljs-comment">        arr[2] = 6;</span><br><span class="hljs-comment">        arr[3] = 8;</span><br><span class="hljs-comment">        arr[4] = 10;</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            arr[i] = (i+<span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;<br>        &#125;<br><br>        System.out.print(<span class="hljs-string">&quot;存储数据到arr数组之后：[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>                System.out.print(arr[i]);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.print(<span class="hljs-string">&quot;,&quot;</span> + arr[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-数组元素的默认值"><a href="#2-5-数组元素的默认值" class="headerlink" title="2.5 数组元素的默认值"></a>2.5 数组元素的默认值</h3><p>数组是引用类型，当我们使用动态初始化方式创建数组时，元素值只是默认值。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest6</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String argv[])</span>&#123;<br><span class="hljs-type">int</span> a[]= <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>]; <br>System.out.println(a[<span class="hljs-number">3</span>]); <span class="hljs-comment">//a[3]的默认值为0</span><br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>对于基本数据类型而言，默认初始化值各有不同。</p><p>对于引用数据类型而言，默认初始化值为null（注意与0不同！)</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911970_watermark.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//存储26个字母</span><br>        <span class="hljs-type">char</span>[] letters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">26</span>];<br>        System.out.println(<span class="hljs-string">&quot;letters数组的长度：&quot;</span> + letters.length);<br>        System.out.print(<span class="hljs-string">&quot;存储字母到letters数组之前：[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; letters.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>                System.out.print(letters[i]);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.print(<span class="hljs-string">&quot;,&quot;</span> + letters[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;]&quot;</span>);<br><br>       <span class="hljs-comment">//存储5个姓名</span><br>        String[] names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;names数组的长度：&quot;</span> + names.length);<br>        System.out.print(<span class="hljs-string">&quot;存储姓名到names数组之前：[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; names.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>                System.out.print(names[i]);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.print(<span class="hljs-string">&quot;,&quot;</span> + names[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-一维数组内存分析"><a href="#3-一维数组内存分析" class="headerlink" title="3. 一维数组内存分析"></a>3. 一维数组内存分析</h2><h3 id="3-1-Java虚拟机的内存划分"><a href="#3-1-Java虚拟机的内存划分" class="headerlink" title="3.1 Java虚拟机的内存划分"></a>3.1 Java虚拟机的内存划分</h3><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911024_watermark.png" alt="JVM架构-简图"></p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td><code>虚拟机栈</code></td><td>用于存储正在执行的每个Java方法的局部变量表等。局部变量表存放了编译期可知长度<br/>的各种基本数据类型、对象引用，方法执行完，自动释放。</td></tr><tr><td><code>堆内存</code></td><td>存储对象（包括数组对象），new来创建的，都存储在堆内存。</td></tr><tr><td><code>方法区</code></td><td>存储已被虚拟机加载的类信息、常量、（静态变量）、即时编译器编译后的代码等数据。</td></tr><tr><td>本地方法栈</td><td>当程序中调用了native的本地方法时，本地方法执行期间的内存区域</td></tr><tr><td>程序计数器</td><td>程序计数器是CPU中的寄存器，它包含每一个线程下一条要执行的指令的地址</td></tr></tbody></table><h3 id="3-2-一维数组在内存中的存储"><a href="#3-2-一维数组在内存中的存储" class="headerlink" title="3.2 一维数组在内存中的存储"></a>3.2 一维数组在内存中的存储</h3><h4 id="1、一个一维数组内存图"><a href="#1、一个一维数组内存图" class="headerlink" title="1、一个一维数组内存图"></a>1、一个一维数组内存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>  System.out.println(arr);<span class="hljs-comment">//[I@5f150435</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911186_watermark.jpeg"></p><h4 id="2、数组下标为什么是0开始"><a href="#2、数组下标为什么是0开始" class="headerlink" title="2、数组下标为什么是0开始"></a>2、数组下标为什么是0开始</h4><p>因为第一个元素距离数组首地址间隔0个单元格。</p><h4 id="3、两个一维数组内存图"><a href="#3、两个一维数组内存图" class="headerlink" title="3、两个一维数组内存图"></a>3、两个一维数组内存图</h4><p>两个数组独立</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>    <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>    System.out.println(arr);<br>    System.out.println(arr2);<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911219_watermark.jpeg" style="zoom:67%;" /><h4 id="4、两个变量指向一个一维数组"><a href="#4、两个变量指向一个一维数组" class="headerlink" title="4、两个变量指向一个一维数组"></a>4、两个变量指向一个一维数组</h4><p>两个数组变量本质上代表同一个数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 定义数组，存储3个元素</span><br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>    <span class="hljs-comment">//数组索引进行赋值</span><br>    arr[<span class="hljs-number">0</span>] = <span class="hljs-number">5</span>;<br>    arr[<span class="hljs-number">1</span>] = <span class="hljs-number">6</span>;<br>    arr[<span class="hljs-number">2</span>] = <span class="hljs-number">7</span>;<br>    <span class="hljs-comment">//输出3个索引上的元素值</span><br>    System.out.println(arr[<span class="hljs-number">0</span>]);<br>    System.out.println(arr[<span class="hljs-number">1</span>]);<br>    System.out.println(arr[<span class="hljs-number">2</span>]);<br>    <span class="hljs-comment">//定义数组变量arr2，将arr的地址赋值给arr2</span><br>    <span class="hljs-type">int</span>[] arr2 = arr;<br>    arr2[<span class="hljs-number">1</span>] = <span class="hljs-number">9</span>;<br>    System.out.println(arr[<span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230912307_watermark.jpeg" style="zoom:67%;" /><h2 id="4-一维数组的应用"><a href="#4-一维数组的应用" class="headerlink" title="4. 一维数组的应用"></a>4. 一维数组的应用</h2><p><strong>案例1：</strong>升景坊单间短期出租4个月，550元&#x2F;月（水电煤公摊，网费35元&#x2F;月），空调、卫生间、厨房齐全。屋内均是IT行业人士，喜欢安静。所以要求来租者最好是同行或者刚毕业的年轻人，爱干净、安静。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest</span> &#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>&#125;;<br>      <span class="hljs-type">int</span>[] index = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125;;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">tel</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; index.length;i++)&#123;<br>            tel += arr[index[i]];<br>      &#125;<br>      System.out.println(<span class="hljs-string">&quot;联系方式：&quot;</span> + tel);<br>      &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>案例2：输出英文星期几</p><p>用一个数组，保存星期一到星期天的7个英语单词，从键盘输入1-7，显示对应的单词<br>{“Monday”,”Tuesday”,”Wednesday”,”Thursday”,”Friday”,”Saturday”,”Sunday”}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 14:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeekArrayTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//1. 声明并初始化星期的数组</span><br>        String[] weeks = &#123;<span class="hljs-string">&quot;Monday&quot;</span>,<span class="hljs-string">&quot;Tuesday&quot;</span>,<span class="hljs-string">&quot;Wednesday&quot;</span>,<span class="hljs-string">&quot;Thursday&quot;</span>,<span class="hljs-string">&quot;Friday&quot;</span>,<span class="hljs-string">&quot;Saturday&quot;</span>,<span class="hljs-string">&quot;Sunday&quot;</span>&#125;;<br><br>        <span class="hljs-comment">//2. 使用Scanner从键盘获取1-7范围的整数</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入[1-7]范围的整数：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-keyword">if</span>(number &lt; <span class="hljs-number">1</span> || number &gt; <span class="hljs-number">7</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;你输入的输入非法&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br><br>            <span class="hljs-comment">//3. 根据输入的整数，到数组中相应的索引位置获取指定的元素（即：星期几）</span><br>            System.out.println(<span class="hljs-string">&quot;对应的星期为：&quot;</span> + weeks[number - <span class="hljs-number">1</span>]);<br><br>        &#125;<br>        <br>        scanner.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>从键盘读入学生成绩，找出最高分，并输出学生成绩等级。</p><ul><li><p>成绩&gt;&#x3D;最高分-10  等级为’A’  </p></li><li><p>成绩&gt;&#x3D;最高分-20  等级为’B’</p></li><li><p>成绩&gt;&#x3D;最高分-30  等级为’C’  </p></li><li><p>其余            等级为’D’</p></li></ul><p>提示：先读入学生人数，根据人数创建int数组，存放学生成绩。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230913240_watermark.png" alt="image-20220317004637748" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 14:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScoreTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//1. 根据提示，获取学生人数</span><br>        System.out.print(<span class="hljs-string">&quot;请输入学生人数：&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-comment">//2. 根据学生人数，创建指定长度的数组 (使用动态初始化)</span><br>        <span class="hljs-type">int</span>[] scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[count];<br><br>        <span class="hljs-comment">//3. 使用循环，依次给数组的元素赋值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxScore</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//记录最高分</span><br>        System.out.println(<span class="hljs-string">&quot;请输入&quot;</span> + count + <span class="hljs-string">&quot;个成绩&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123;<br>            scores[i] = scanner.nextInt();<br>            <span class="hljs-comment">//4. 获取数组中元素的最大值，即为最高分</span><br>            <span class="hljs-keyword">if</span>(maxScore &lt; scores[i])&#123;<br>                maxScore = scores[i];<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;最高分是：&quot;</span> + maxScore);<br><br>        <span class="hljs-comment">//5. 遍历数组元素，输出各自的分数，并根据其分数与最高分的差值，获取各自的等级</span><br>        <span class="hljs-type">char</span> grade;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123;<br><br>            <span class="hljs-keyword">if</span>(scores[i] &gt;= maxScore - <span class="hljs-number">10</span>)&#123;<br>                grade = <span class="hljs-string">&#x27;A&#x27;</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scores[i] &gt;= maxScore - <span class="hljs-number">20</span>)&#123;<br>                grade = <span class="hljs-string">&#x27;B&#x27;</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scores[i] &gt;= maxScore - <span class="hljs-number">30</span>)&#123;<br>                grade = <span class="hljs-string">&#x27;C&#x27;</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                grade = <span class="hljs-string">&#x27;D&#x27;</span>;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;student &quot;</span> + i + <span class="hljs-string">&quot; socre is &quot;</span> + scores[i] + <span class="hljs-string">&quot;, grade is &quot;</span> + grade);<br>        &#125;<br>        <span class="hljs-comment">//关闭资源</span><br>        scanner.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-多维数组的使用"><a href="#5-多维数组的使用" class="headerlink" title="5. 多维数组的使用"></a>5. 多维数组的使用</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><ul><li><p>Java 语言里提供了支持多维数组的语法。</p></li><li><p>如果说可以把一维数组当成几何中的<code>线性图形</code>，那么二维数组就相当于是<code>一个表格</code>，像Excel中的表格、围棋棋盘一样。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230913509_watermark.png" alt="image-20220317004810263" style="zoom:80%;" /></li><li><p><strong>应用举例1：</strong></p><p>某公司2022年全年各个月份的销售额进行登记。按月份存储，可以使用一维数组。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] monthData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">23</span>,<span class="hljs-number">43</span>,<span class="hljs-number">22</span>,<span class="hljs-number">34</span>,<span class="hljs-number">55</span>,<span class="hljs-number">65</span>,<span class="hljs-number">44</span>,<span class="hljs-number">67</span>,<span class="hljs-number">45</span>,<span class="hljs-number">78</span>,<span class="hljs-number">67</span>,<span class="hljs-number">66</span>&#125;;<br></code></pre></td></tr></table></figure><p>如果改写为按<code>季度</code>为单位存储怎么办呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] quarterData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">23</span>,<span class="hljs-number">43</span>,<span class="hljs-number">22</span>&#125;,&#123;<span class="hljs-number">34</span>,<span class="hljs-number">55</span>,<span class="hljs-number">65</span>&#125;,&#123;<span class="hljs-number">44</span>,<span class="hljs-number">67</span>,<span class="hljs-number">45</span>&#125;,&#123;<span class="hljs-number">78</span>,<span class="hljs-number">67</span>,<span class="hljs-number">66</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><ul><li><strong>应用举例2：</strong></li></ul></li></ul><p>高一年级三个班级均由多个学生姓名构成一个个数组。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] class1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;段誉&quot;</span>,<span class="hljs-string">&quot;令狐冲&quot;</span>,<span class="hljs-string">&quot;任我行&quot;</span>&#125;;<br><br>String[] class2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;张三丰&quot;</span>,<span class="hljs-string">&quot;周芷若&quot;</span>&#125;;<br><br>String[] class3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;赵敏&quot;</span>,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;韦小宝&quot;</span>,<span class="hljs-string">&quot;杨过&quot;</span>&#125;;<br><br></code></pre></td></tr></table></figure><p>那从整个年级看，我们可以声明一个二维数组。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String[][] grade = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[][]&#123;&#123;<span class="hljs-string">&quot;段誉&quot;</span>,<span class="hljs-string">&quot;令狐冲&quot;</span>,<span class="hljs-string">&quot;任我行&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;张三丰&quot;</span>,<span class="hljs-string">&quot;周芷若&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;赵敏&quot;</span>,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;韦小宝&quot;</span>,<span class="hljs-string">&quot;杨过&quot;</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><ul><li><strong>应用举例3：</strong></li></ul><p>  <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230913788_watermark.png" alt="image-20220516095701345"></p><p>蓝框的几个元素，可以使用一维数组来存储。但现在发现每个元素下还有下拉框，其内部还有元素，那就需要使用二维数组来存储：</p><p>  <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914608_watermark.png" alt="image-20220516095829526"></p><ul><li><p>使用说明</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914165_watermark.png" alt="1561524724397"></p></li></ul><blockquote><ul><li>对于二维数组的理解，可以看成是一维数组array1又作为另一个一维数组array2的元素而存在。</li><li>其实，从数组底层的运行机制来看，其实没有多维数组。</li></ul></blockquote><h3 id="5-2-声明与初始化"><a href="#5-2-声明与初始化" class="headerlink" title="5.2 声明与初始化"></a>5.2 声明与初始化</h3><h4 id="5-2-1-声明"><a href="#5-2-1-声明" class="headerlink" title="5.2.1 声明"></a>5.2.1 声明</h4><p>二维数组声明的语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//推荐</span><br>元素的数据类型[][] 二维数组的名称;<br><br><span class="hljs-comment">//不推荐</span><br>元素的数据类型  二维数组名[][];<br><span class="hljs-comment">//不推荐</span><br>元素的数据类型[]  二维数组名[];<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test20TwoDimensionalArrayDefine</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//存储多组成绩</span><br>        <span class="hljs-type">int</span>[][] grades;<br><br>        <span class="hljs-comment">//存储多组姓名</span><br>        String[][] names;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>面试：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">int</span><span class="hljs-selector-attr">[]</span> <span class="hljs-selector-tag">x</span>, <span class="hljs-selector-tag">y</span><span class="hljs-selector-attr">[]</span>;<br><span class="hljs-comment">//x是一维数组，y是二维数组</span><br></code></pre></td></tr></table></figure><h4 id="5-2-2-静态初始化"><a href="#5-2-2-静态初始化" class="headerlink" title="5.2.2 静态初始化"></a>5.2.2 静态初始化</h4><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">7</span>&#125;,&#123;<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><p>定义一个名称为arr的二维数组，二维数组中有三个一维数组</p><ul><li>每一个一维数组中具体元素也都已初始化<ul><li>第一个一维数组 arr[0] &#x3D; {3,8,2};</li><li>第二个一维数组 arr[1] &#x3D; {2,7};</li><li>第三个一维数组 arr[2] &#x3D; {9,0,1,6};</li></ul></li><li>第三个一维数组的长度表示方式：arr[2].length;</li></ul><blockquote><ul><li>注意特殊写法情况：int[] x,y[]; x是一维数组，y是二维数组。</li></ul></blockquote><ul><li>举例1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;&#125;;<span class="hljs-comment">//声明与初始化必须在一句完成</span><br><br><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;&#125;;<br><br><span class="hljs-type">int</span>[][] arr;<br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;&#125;;<br><br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;&#125;;<span class="hljs-comment">//错误，静态初始化右边new 数据类型[][]中不能写数字</span><br></code></pre></td></tr></table></figure><ul><li>举例2：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TwoDimensionalArrayInitialize</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//存储多组成绩</span><br>        <span class="hljs-type">int</span>[][] grades = &#123;<br>                    &#123;<span class="hljs-number">89</span>,<span class="hljs-number">75</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>&#125;,<br>                    &#123;<span class="hljs-number">88</span>,<span class="hljs-number">96</span>,<span class="hljs-number">78</span>,<span class="hljs-number">63</span>,<span class="hljs-number">100</span>,<span class="hljs-number">86</span>&#125;,<br>                    &#123;<span class="hljs-number">56</span>,<span class="hljs-number">63</span>,<span class="hljs-number">58</span>&#125;,<br>                    &#123;<span class="hljs-number">99</span>,<span class="hljs-number">66</span>,<span class="hljs-number">77</span>,<span class="hljs-number">88</span>&#125;<br>                &#125;;<br><br>        <span class="hljs-comment">//存储多组姓名</span><br>        String[][] names = &#123;<br>            &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;赵六&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-string">&quot;诸葛亮&quot;</span>,<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-string">&quot;马超&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;曹丕&quot;</span>,<span class="hljs-string">&quot;曹植&quot;</span>,<span class="hljs-string">&quot;曹冲&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;孙权&quot;</span>,<span class="hljs-string">&quot;周瑜&quot;</span>,<span class="hljs-string">&quot;鲁肃&quot;</span>,<span class="hljs-string">&quot;黄盖&quot;</span>&#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-3-动态初始化"><a href="#5-2-3-动态初始化" class="headerlink" title="5.2.3 动态初始化"></a>5.2.3 动态初始化</h4><p>如果二维数组的每一个数据，甚至是每一行的列数，需要后期单独确定，那么就只能使用动态初始化方式了。动态初始化方式分为两种格式：</p><p><strong>格式1：规则二维表：每一行的列数是相同的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）确定行数和列数</span><br>元素的数据类型[][] 二维数组名 = <span class="hljs-keyword">new</span> 元素的数据类型[m][n];<br><span class="hljs-comment">//其中，m:表示这个二维数组有多少个一维数组。或者说一共二维表有几行</span><br><span class="hljs-comment">//其中，n:表示每一个一维数组的元素有多少个。或者说每一行共有一个单元格</span><br><br><span class="hljs-comment">//此时创建完数组，行数、列数确定，而且元素也都有默认值</span><br><br><span class="hljs-comment">//（2）再为元素赋新值</span><br>二维数组名[行下标][列下标] = 值;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br></code></pre></td></tr></table></figure><ul><li><p>定义了名称为arr的二维数组</p></li><li><p>二维数组中有3个一维数组</p></li><li><p>每一个一维数组中有2个元素</p></li><li><p>一维数组的名称分别为arr[0], arr[1], arr[2]</p></li><li><p>给第一个一维数组1脚标位赋值为78写法是：<code>arr[0][1] = 78;</code></p></li></ul><p><strong>格式2：不规则：每一行的列数不一样</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）先确定总行数</span><br>元素的数据类型[][] 二维数组名 = <span class="hljs-keyword">new</span> 元素的数据类型[总行数][];<br><br><span class="hljs-comment">//此时只是确定了总行数，每一行里面现在是null</span><br><br><span class="hljs-comment">//（2）再确定每一行的列数，创建每一行的一维数组</span><br>二维数组名[行下标] = <span class="hljs-keyword">new</span> 元素的数据类型[该行的总列数];<br><br><span class="hljs-comment">//此时已经new完的行的元素就有默认值了，没有new的行还是null</span><br><br><span class="hljs-comment">//(3)再为元素赋值</span><br>二维数组名[行下标][列下标] = 值;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][];<br></code></pre></td></tr></table></figure><ul><li>二维数组中有3个一维数组。</li><li>每个一维数组都是默认初始化值null (注意：区别于格式1）</li><li>可以对这个三个一维数组分别进行初始化：arr[0] &#x3D; new int[3];    arr[1] &#x3D; new int[1];   arr[2] &#x3D; new int[2];</li><li>注：<code>int[][]arr = new int[][3]; </code> &#x2F;&#x2F;非法</li></ul><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 1</span><br><span class="hljs-comment"> 2 2</span><br><span class="hljs-comment"> 3 3 3</span><br><span class="hljs-comment"> 4 4 4 4</span><br><span class="hljs-comment"> 5 5 5 5 5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test25DifferentElementCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//1、声明一个二维数组，并且确定行数</span><br>        <span class="hljs-comment">//因为每一行的列数不同，这里无法直接确定列数</span><br>        <span class="hljs-type">int</span>[][]  arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>][];<br><br>        <span class="hljs-comment">//2、确定每一行的列数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">arr[0] 的列数是1</span><br><span class="hljs-comment">arr[1] 的列数是2</span><br><span class="hljs-comment">arr[2] 的列数是3</span><br><span class="hljs-comment">arr[3] 的列数是4</span><br><span class="hljs-comment">arr[4] 的列数是5</span><br><span class="hljs-comment">*/</span><br>            arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i+<span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-comment">//3、确定元素的值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;arr[i].length; j++)&#123;<br>                arr[i][j] = i+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//4、遍历显示</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;arr[i].length; j++)&#123;<br>                System.out.print(arr[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-数组的长度和角标"><a href="#5-3-数组的长度和角标" class="headerlink" title="5.3 数组的长度和角标"></a>5.3 数组的长度和角标</h3><ul><li>二维数组的长度&#x2F;行数：二维数组名.length</li><li>二维数组的某一行：二维数组名[行下标]，此时相当于获取其中一组数据。它本质上是一个一维数组。行下标的范围：[0, 二维数组名.length-1]。此时把二维数组看成一维数组的话，元素是行对象。</li><li>某一行的列数：二维数组名[行下标].length，因为二维数组的每一行是一个一维数组。</li><li>某一个元素：二维数组名[行下标][列下标]，即先确定行&#x2F;组，再确定列。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test22TwoDimensionalArrayUse</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//存储3个小组的学员的成绩，分开存储，使用二维数组。</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">int[][] scores1;</span><br><span class="hljs-comment">int scores2[][];</span><br><span class="hljs-comment">int[] scores3[];*/</span><br><br>        <span class="hljs-type">int</span>[][] scores = &#123;<br>                &#123;<span class="hljs-number">85</span>,<span class="hljs-number">96</span>,<span class="hljs-number">85</span>,<span class="hljs-number">75</span>&#125;,<br>                &#123;<span class="hljs-number">99</span>,<span class="hljs-number">96</span>,<span class="hljs-number">74</span>,<span class="hljs-number">72</span>,<span class="hljs-number">75</span>&#125;,<br>                &#123;<span class="hljs-number">52</span>,<span class="hljs-number">42</span>,<span class="hljs-number">56</span>,<span class="hljs-number">75</span>&#125;<br>        &#125;;<br><br>        System.out.println(scores);<span class="hljs-comment">//[[I@15db9742</span><br>        System.out.println(<span class="hljs-string">&quot;一共有&quot;</span> + scores.length +<span class="hljs-string">&quot;组成绩.&quot;</span>);<br><br>        <span class="hljs-comment">//[[：代表二维数组，I代表元素类型是int</span><br>        System.out.println(scores[<span class="hljs-number">0</span>]);<span class="hljs-comment">//[I@6d06d69c</span><br>        <span class="hljs-comment">//[：代表一维数组，I代表元素类型是int</span><br>        System.out.println(scores[<span class="hljs-number">1</span>]);<span class="hljs-comment">//[I@7852e922</span><br>        System.out.println(scores[<span class="hljs-number">2</span>]);<span class="hljs-comment">//[I@4e25154f</span><br>        <span class="hljs-comment">//System.out.println(scores[3]);//ArrayIndexOutOfBoundsException: 3</span><br><br>        System.out.println(<span class="hljs-string">&quot;第1组有&quot;</span> + scores[<span class="hljs-number">0</span>].length +<span class="hljs-string">&quot;个学员.&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;第2组有&quot;</span> + scores[<span class="hljs-number">1</span>].length +<span class="hljs-string">&quot;个学员.&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;第3组有&quot;</span> + scores[<span class="hljs-number">2</span>].length +<span class="hljs-string">&quot;个学员.&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;第1组的每一个学员成绩如下：&quot;</span>);<br>        <span class="hljs-comment">//第一行的元素</span><br>        System.out.println(scores[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<span class="hljs-comment">//85</span><br>        System.out.println(scores[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<span class="hljs-comment">//96</span><br>        System.out.println(scores[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]);<span class="hljs-comment">//85</span><br>        System.out.println(scores[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>]);<span class="hljs-comment">//75</span><br>        <span class="hljs-comment">//System.out.println(scores[0][4]);//java.lang.ArrayIndexOutOfBoundsException: 4</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4-二维数组的遍历"><a href="#5-4-二维数组的遍历" class="headerlink" title="5.4 二维数组的遍历"></a>5.4 二维数组的遍历</h3><ul><li>格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;二维数组名.length; i++)&#123; <span class="hljs-comment">//二维数组对象.length</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;二维数组名[i].length; j++)&#123;<span class="hljs-comment">//二维数组行对象.length</span><br>        System.out.print(二维数组名[i][j]);<br>    &#125;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test23TwoDimensionalArrayIterate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//存储3个小组的学员的成绩，分开存储，使用二维数组。</span><br>        <span class="hljs-type">int</span>[][] scores = &#123;<br>                &#123;<span class="hljs-number">85</span>,<span class="hljs-number">96</span>,<span class="hljs-number">85</span>,<span class="hljs-number">75</span>&#125;,<br>                &#123;<span class="hljs-number">99</span>,<span class="hljs-number">96</span>,<span class="hljs-number">74</span>,<span class="hljs-number">72</span>,<span class="hljs-number">75</span>&#125;,<br>                &#123;<span class="hljs-number">52</span>,<span class="hljs-number">42</span>,<span class="hljs-number">56</span>,<span class="hljs-number">75</span>&#125;<br>        &#125;;<br><br>        System.out.println(<span class="hljs-string">&quot;一共有&quot;</span> + scores.length +<span class="hljs-string">&quot;组成绩.&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123;<br>            System.out.print(<span class="hljs-string">&quot;第&quot;</span> + (i+<span class="hljs-number">1</span>) +<span class="hljs-string">&quot;组有&quot;</span> + scores[i].length + <span class="hljs-string">&quot;个学员，成绩如下：&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; scores[i].length; j++) &#123;<br>                System.out.print(scores[i][j]+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-5-内存解析"><a href="#5-5-内存解析" class="headerlink" title="5.5 内存解析"></a>5.5 内存解析</h3><p>二维数组本质上是元素类型是一维数组的一维数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = &#123;<br>    &#123;<span class="hljs-number">1</span>&#125;,<br>    &#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>&#125;,<br>    &#123;<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125;,<br>    &#123;<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>&#125;,<br>    &#123;<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914775_watermark.png" alt="1562112672215"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、声明二维数组，并确定行数和列数</span><br><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>];<br><br><span class="hljs-comment">//2、确定元素的值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length; j++) &#123;<br>        arr[i][j] = i + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914424_watermark.png" alt="1562113179785"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、声明一个二维数组，并且确定行数</span><br><span class="hljs-comment">//因为每一行的列数不同，这里无法直接确定列数</span><br><span class="hljs-type">int</span>[][]  arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>][];<br><br><span class="hljs-comment">//2、确定每一行的列数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">arr[0] 的列数是1</span><br><span class="hljs-comment">arr[1] 的列数是2</span><br><span class="hljs-comment">arr[2] 的列数是3</span><br><span class="hljs-comment">arr[3] 的列数是4</span><br><span class="hljs-comment">arr[4] 的列数是5</span><br><span class="hljs-comment">*/</span><br>    arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i+<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-comment">//3、确定元素的值</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;arr[i].length; j++)&#123;<br>        arr[i][j] = i+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914152_watermark.png" alt="1562113981079"></p><h3 id="5-6-应用举例"><a href="#5-6-应用举例" class="headerlink" title="5.6 应用举例"></a>5.6 应用举例</h3><p><strong>案例1：</strong>获取arr数组中所有元素的和。</p><p>提示：使用for的嵌套循环即可。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914693_watermark.png" alt="image-20220317005436209"></p><p><strong>案例2：</strong>声明：int[] x,y[]; 在给x,y变量赋值以后，以下选项允许通过编译的是： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">声明：<span class="hljs-type">int</span>[] x,y[]; 在给x,y变量赋值以后，以下选项允许通过编译的是：<br>a)    x[<span class="hljs-number">0</span>] = y;                 <span class="hljs-comment">//no</span><br>b)    y[<span class="hljs-number">0</span>] = x;                 <span class="hljs-comment">//yes</span><br>c)    y[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = x;              <span class="hljs-comment">//no</span><br>d)    x[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = y;              <span class="hljs-comment">//no</span><br>e)    y[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = x[<span class="hljs-number">0</span>];           <span class="hljs-comment">//yes</span><br>f)    x = y;                    <span class="hljs-comment">//no</span><br><br>提示：<br>一维数组：<span class="hljs-type">int</span>[] x  或者<span class="hljs-type">int</span> x[]   <br>二维数组：<span class="hljs-type">int</span>[][] y 或者  <span class="hljs-type">int</span>[] y[]  或者 <span class="hljs-type">int</span>  y[][]<br><br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>使用二维数组打印一个 10 行杨辉三角。</p><p>提示：</p><ol><li><p>第一行有 1 个元素, 第 n 行有 n 个元素</p></li><li><p>每一行的第一个元素和最后一个元素都是 1</p></li><li><p>从第三行开始, 对于非第一个元素和最后一个元素的元素。即：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">yanghui<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = yanghui<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-1]</span> + yanghui<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>;<br></code></pre></td></tr></table></figure></li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914841_watermark.png" alt="image-20220317005549522"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 10:11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YangHuiTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//1. 动态初始化的方式创建二维数组</span><br>        <span class="hljs-type">int</span>[][] yangHui = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>][];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; yangHui.length; i++) &#123;<br>            yangHui[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i + <span class="hljs-number">1</span>];<br><br>            <span class="hljs-comment">//2. 给数组元素赋值</span><br>            <span class="hljs-comment">// 2.1 给外层数组元素中的首元素和末元素赋值</span><br>            yangHui[i][<span class="hljs-number">0</span>] = yangHui[i][i] = <span class="hljs-number">1</span>;<br><br>            <span class="hljs-comment">//2.2 给外层数组元素中的非首元素和非末元素赋值（难）</span><br>            <span class="hljs-comment">//if(i &gt; 1)&#123; //从 i == 2 开始执行</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt; yangHui[i].length - <span class="hljs-number">1</span>;j++)&#123; <span class="hljs-comment">//非首元素和非末元素的角标范围</span><br>                    yangHui[i][j] = yangHui[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] + yangHui[i-<span class="hljs-number">1</span>][j];<br><br>                &#125;<br>            <span class="hljs-comment">//&#125;</span><br>        &#125;<br><br><br><br>        <span class="hljs-comment">//3. 遍历二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; yangHui.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; yangHui[i].length; j++) &#123;<br>                System.out.print(yangHui[i][j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br><br>            System.out.println();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-数组的常见算法"><a href="#6-数组的常见算法" class="headerlink" title="6. 数组的常见算法"></a>6. 数组的常见算法</h2><h3 id="6-1-数值型数组特征值统计"><a href="#6-1-数值型数组特征值统计" class="headerlink" title="6.1 数值型数组特征值统计"></a>6.1 数值型数组特征值统计</h3><ul><li>这里的特征值涉及到：平均值、最大值、最小值、总和等</li></ul><p><strong>举例1：</strong>数组统计：求总和、均值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayElementSum</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-comment">//求总和、均值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//因为0加上任何数都不影响结果</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            sum += arr[i];<br>        &#125;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">avg</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)sum/arr.length;<br><br>        System.out.println(<span class="hljs-string">&quot;sum = &quot;</span> + sum);<br>        System.out.println(<span class="hljs-string">&quot;avg = &quot;</span> + avg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong>求数组元素的总乘积</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayElementMul</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br><br>        <span class="hljs-comment">//求总乘积</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//因为1乘以任何数都不影响结果</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            result *= arr[i];<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例3：</strong>求数组元素中偶数的个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayElementEvenCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-comment">//统计偶数个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">evenCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i]%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>                evenCount++;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;evenCount = &quot;</span> + evenCount);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例4：</strong>求数组元素的最大值</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914883_watermark.png" alt="1574577970893"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayMax</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-comment">//找最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;arr.length; i++)&#123;<span class="hljs-comment">//此处i从1开始，是max不需要与arr[0]再比较一次了</span><br>            <span class="hljs-keyword">if</span>(arr[i] &gt; max)&#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;max = &quot;</span> + max);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例5：</strong>找最值及其第一次出现的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMaxIndex</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-comment">//找最大值以及第一个最大值下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i] &gt; max)&#123;<br>                max = arr[i];<br>                index = i;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;max = &quot;</span> + max);<br>        System.out.println(<span class="hljs-string">&quot;index = &quot;</span> + index);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例6：</strong>找最值及其所有最值的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test13AllMaxIndex</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-comment">//找最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i] &gt; max)&#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;最大值是：&quot;</span> + max);<br>        System.out.print(<span class="hljs-string">&quot;最大值的下标有：&quot;</span>);<br><br>        <span class="hljs-comment">//遍历数组，看哪些元素和最大值是一样的</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(max == arr[i])&#123;<br>                System.out.print(i+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test13AllMaxIndex2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-comment">//找最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i] &gt; max)&#123;<br>                max = arr[i];<br>                index = i + <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[i] == max)&#123;<br>                index += <span class="hljs-string">&quot;,&quot;</span> + i;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;最大值是&quot;</span> + max);<br>        System.out.println(<span class="hljs-string">&quot;最大值的下标是[&quot;</span> + index+<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例7(难)：</strong>输入一个整形数组，数组里有正数也有负数。数组中连续的一个或多个整数组成一个子数组，每个子数组都有一个和。求所有子数组的和的最大值。要求时间复杂度为O(n)。<br>例如：输入的数组为1, -2, 3, -10, -4, 7, 2, -5，和最大的子数组为3, 10, -4, 7, 2，因此输出为该子数组的和18。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> getGreatestSum(arr);<br>System.out.println(i);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getGreatestSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">greatestSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(arr == <span class="hljs-literal">null</span> || arr.length == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> greatestSum;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>temp += arr[i];<br><br><span class="hljs-keyword">if</span>(temp &lt; <span class="hljs-number">0</span>)&#123;<br>temp = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(temp &gt; greatestSum)&#123;<br>greatestSum = temp;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(greatestSum == <span class="hljs-number">0</span>)&#123;<br>greatestSum = arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt; arr.length;i++)&#123;<br><span class="hljs-keyword">if</span>(greatestSum &lt; arr[i])&#123;<br>greatestSum = arr[i];<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> greatestSum;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例8：评委打分</strong></p><p>分析以下需求，并用代码实现：</p><p>（1）在编程竞赛中，有10位评委为参赛的选手打分，分数分别为：5，4，6，8，9，0，1，2，7，3</p><p>（2）求选手的最后得分（去掉一个最高分和一个最低分后其余8位评委打分的平均值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 10:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayExer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] scores = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> scores[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> scores[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; scores.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(max &lt; scores[i])&#123;<br>                max = scores[i];<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(min &gt; scores[i])&#123;<br>                min = scores[i];<br>            &#125;<br><br>            sum += scores[i];<br>        &#125;<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">avg</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)(sum - max - min) / (scores.length - <span class="hljs-number">2</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;选手去掉最高分和最低分之后的平均分为：&quot;</span> + avg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-数组元素的赋值与数组复制"><a href="#6-2-数组元素的赋值与数组复制" class="headerlink" title="6.2 数组元素的赋值与数组复制"></a>6.2 数组元素的赋值与数组复制</h3><p><strong>举例1：</strong>杨辉三角（见二维数组课后案例）</p><p><strong>举例2：</strong>使用简单数组</p><p>(1)创建一个名为ArrayTest的类，在main()方法中声明array1和array2两个变量，他们是int[]类型的数组。</p><p>(2)使用大括号{}，把array1初始化为8个素数：2,3,5,7,11,13,17,19。</p><p>(3)显示array1的内容。</p><p>(4)赋值array2变量等于array1，修改array2中的偶索引元素，使其等于索引值(如array[0]&#x3D;0,array[2]&#x3D;2)。打印出array1。 array2 &#x3D; array1;</p><p><strong>思考：</strong>array1和array2是什么关系？</p><p><strong>拓展：</strong>修改题目，实现array2对array1数组的复制</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914804_watermark.png" alt="image-20230613093213820" style="zoom:50%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914157_watermark.png" alt="image-20230613093256869" style="zoom:50%;" /><p><strong>举例3：</strong>一个数组，让数组的每个元素去除第一个元素，得到的商作为被除数所在位置的新值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">12</span>,<span class="hljs-number">43</span>,<span class="hljs-number">65</span>,<span class="hljs-number">3</span>,-<span class="hljs-number">8</span>,<span class="hljs-number">64</span>,<span class="hljs-number">2</span>&#125;;<br><br><span class="hljs-comment">//for(int i = 0;i &lt; arr.length;i++)&#123;</span><br><span class="hljs-comment">//arr[i] = arr[i] / arr[0];</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> arr.length -<span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i--)&#123;<br>arr[i] = arr[i] / arr[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-comment">//遍历arr</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例4：</strong>创建一个长度为6的int型数组，要求数组元素的值都在1-30之间，且是随机赋值。同时，要求元素的值各不相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br><span class="hljs-comment">// 5-67 Math.random() * 63 + 5;</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">6</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<span class="hljs-comment">// [0,1) [0,30) [1,31)</span><br>arr[i] = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">30</span>) + <span class="hljs-number">1</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[i] == arr[j]) &#123;<br>flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flag) &#123;<br>arr[i] = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">30</span>) + <span class="hljs-number">1</span>;<br>flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>System.out.println(arr[i]);<br>&#125;<br>&#125;<br><span class="hljs-comment">//更优的方法</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">6</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<span class="hljs-comment">// [0,1) [0,30) [1,31)</span><br>arr[i] = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">30</span>) + <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[i] == arr[j]) &#123;<br>i--;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>System.out.println(arr[i]);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>举例5：</strong>扑克牌</p><p>案例：遍历扑克牌</p><p>遍历扑克牌，效果如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914545_watermark.png" alt="pk" style="zoom:67%;" /><p>提示：使用两个字符串数组，分别保存花色和点数，再用一个字符串数组保存最后的扑克牌。 String[] hua &#x3D; {“黑桃”,”红桃”,”梅花”,”方片”}; String[] dian &#x3D; {“A”,”2”,”3”,”4”,”5”,”6”,”7”,”8”,”9”,”10”,”J”,”Q”,”K”};</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu3.common_algorithm.exer5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayExer05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] hua = &#123;<span class="hljs-string">&quot;黑桃&quot;</span>,<span class="hljs-string">&quot;红桃&quot;</span>,<span class="hljs-string">&quot;梅花&quot;</span>,<span class="hljs-string">&quot;方片&quot;</span>&#125;;<br>        String[] dian = &#123;<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;10&quot;</span>,<span class="hljs-string">&quot;J&quot;</span>,<span class="hljs-string">&quot;Q&quot;</span>,<span class="hljs-string">&quot;K&quot;</span>&#125;;<br><br><br>        String[] pai = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[hua.length * dian.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; hua.length;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j &lt; dian.length;j++)&#123;<br>                pai[k++] = hua[i] + dian[j];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pai.length; i++) &#123;<br>            System.out.print(pai[i] + <span class="hljs-string">&quot;  &quot;</span>);<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">13</span> == <span class="hljs-number">12</span>)&#123;<br>                System.out.println();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>拓展：在上述基础上，增加大王、小王。</p><p><strong>举例6：</strong>回形数</p><p>从键盘输入一个整数（1~20） ，则以该数字为矩阵的大小，把1,2,3…n*n 的数字按照顺时针螺旋的形式填入其中。</p><p>例如： 输入数字2，则程序输出： 1 2 4 3 </p><p>输入数字3，则程序输出： 1 2 3 8 9 4 7 6 5 输入数字4， 则程序输出： 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RectangleTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;输入一个数字&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len][len];<br><br><span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> len * len;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * k = 1:向右</span><br><span class="hljs-comment"> * k = 2:向下</span><br><span class="hljs-comment"> * k = 3:向左</span><br><span class="hljs-comment"> * k = 4:向上</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;m &lt;= s;m++)&#123;<br><span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(j &lt; len &amp;&amp; arr[i][j] == <span class="hljs-number">0</span>)&#123;<br>arr[i][j++] = m;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>k = <span class="hljs-number">2</span>;<br>i++;  <br>j--;<br>m--;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k == <span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">if</span>(i &lt; len &amp;&amp; arr[i][j] == <span class="hljs-number">0</span>)&#123;<br>arr[i++][j] = m;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>k = <span class="hljs-number">3</span>;<br>i--;<br>j--;<br>m--;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k == <span class="hljs-number">3</span>)&#123;<br><span class="hljs-keyword">if</span>(j &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[i][j] == <span class="hljs-number">0</span>)&#123;<br>arr[i][j--] = m;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>k = <span class="hljs-number">4</span>;<br>i--;<br>j++;<br>m--;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k == <span class="hljs-number">4</span>)&#123;<br><span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[i][j] == <span class="hljs-number">0</span>)&#123;<br>arr[i--][j] = m;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>k = <span class="hljs-number">1</span>;<br>i++;<br>j++;<br>m--;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//遍历</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;m &lt; arr.length;m++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;n &lt; arr[m].length;n++)&#123;<br>System.out.print(arr[m][n] + <span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//方式2</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">01 02 03 04 05 06 07 </span><br><span class="hljs-comment">24 25 26 27 28 29 08 </span><br><span class="hljs-comment">23 40 41 42 43 30 09 </span><br><span class="hljs-comment">22 39 48 49 44 31 10 </span><br><span class="hljs-comment">21 38 47 46 45 32 11 </span><br><span class="hljs-comment">20 37 36 35 34 33 12 </span><br><span class="hljs-comment">19 18 17 16 15 14 13 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RectangleTest1</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//要显示的数据</span><br><span class="hljs-type">int</span> <span class="hljs-variable">maxX</span> <span class="hljs-operator">=</span> n-<span class="hljs-number">1</span>; <span class="hljs-comment">//x轴的最大下标</span><br><span class="hljs-type">int</span> <span class="hljs-variable">maxY</span> <span class="hljs-operator">=</span> n-<span class="hljs-number">1</span>; <span class="hljs-comment">//Y轴的最大下标</span><br><span class="hljs-type">int</span> <span class="hljs-variable">minX</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//x轴的最小下标</span><br><span class="hljs-type">int</span> <span class="hljs-variable">minY</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//Y轴的最小下标</span><br><span class="hljs-keyword">while</span>(minX&lt;=maxX) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=minX;x&lt;=maxX;x++) &#123;<br>arr[minY][x] = ++count;<br>&#125;<br>minY++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> y=minY;y&lt;=maxY;y++) &#123;<br>arr[y][maxX] = ++count;<br>&#125;<br>maxX--;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=maxX;x&gt;=minX;x--) &#123;<br>arr[maxY][x] = ++count;<br>&#125;<br>maxY--;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> y=maxY;y&gt;=minY;y--) &#123;<br>arr[y][minX] = ++count;<br>&#125;<br>minX++;<br>&#125;<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length;j++) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">space</span> <span class="hljs-operator">=</span> (arr[i][j]+<span class="hljs-string">&quot;&quot;</span>).length()==<span class="hljs-number">1</span> ? <span class="hljs-string">&quot;0&quot;</span>:<span class="hljs-string">&quot;&quot;</span>;<br>System.out.print(space+arr[i][j]+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-3-数组元素的反转"><a href="#6-3-数组元素的反转" class="headerlink" title="6.3 数组元素的反转"></a>6.3 数组元素的反转</h3><p><strong>实现思想：</strong>数组对称位置的元素互换。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914986_watermark.png" alt="image-20230613093708530" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayReverse1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;反转之前：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><br>        <span class="hljs-comment">//反转</span><br>         <span class="hljs-comment">/*</span><br><span class="hljs-comment">        思路：首尾对应位置的元素交换</span><br><span class="hljs-comment">        （1）确定交换几次</span><br><span class="hljs-comment">           次数 = 数组.length / 2</span><br><span class="hljs-comment">        （2）谁和谁交换</span><br><span class="hljs-comment">        for(int i=0; i&lt;次数; i++)&#123;</span><br><span class="hljs-comment">             int temp = arr[i];</span><br><span class="hljs-comment">             arr[i] = arr[arr.length-1-i];</span><br><span class="hljs-comment">             arr[arr.length-1-i] = temp;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length/<span class="hljs-number">2</span>; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>            arr[i] = arr[arr.length-<span class="hljs-number">1</span>-i];<br>            arr[arr.length-<span class="hljs-number">1</span>-i] = temp;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;反转之后：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>或</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914731_watermark.png" alt="image-20230613093753449" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayReverse2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;反转之前：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><br>        <span class="hljs-comment">//反转</span><br>        <span class="hljs-comment">//左右对称位置交换</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=arr.length-<span class="hljs-number">1</span>; left&lt;right; left++,right--)&#123;<br>            <span class="hljs-comment">//首  与  尾交换</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[left];<br>            arr[left] = arr[right];<br>            arr[right] = temp;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;反转之后：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-4-数组的扩容与缩容"><a href="#6-4-数组的扩容与缩容" class="headerlink" title="6.4 数组的扩容与缩容"></a>6.4 数组的扩容与缩容</h3><p><strong>数组的扩容</strong></p><p>题目：现有数组 int[] arr &#x3D; new int[]{1,2,3,4,5}; ，现将数组长度扩容1倍，并将10,20,30三个数据添加到arr数组中，如何操作？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-type">int</span>[] newArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length &lt;&lt; <span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>            newArr[i] = arr[i];<br>        &#125;<br><br>        newArr[arr.length] = <span class="hljs-number">10</span>;<br>        newArr[arr.length + <span class="hljs-number">1</span>] = <span class="hljs-number">20</span>;<br>        newArr[arr.length + <span class="hljs-number">2</span>] = <span class="hljs-number">30</span>;<br><br>        arr = newArr;<br><br>        <span class="hljs-comment">//遍历arr</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>数组的缩容</strong></p><p>题目：现有数组 int[] arr&#x3D;{1,2,3,4,5,6,7}。现需删除数组中索引为4的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-comment">//删除数组中索引为4的元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">delIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-comment">//方案1：</span><br>        <span class="hljs-comment">/*//创建新数组</span><br><span class="hljs-comment">        int[] newArr = new int[arr.length - 1];</span><br><span class="hljs-comment">        for (int i = 0; i &lt; delIndex; i++) &#123;</span><br><span class="hljs-comment">            newArr[i] = arr[i];</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        for (int i = delIndex + 1; i &lt; arr.length; i++) &#123;</span><br><span class="hljs-comment">            newArr[i - 1] = arr[i];</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        arr = newArr;</span><br><span class="hljs-comment">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="hljs-comment">            System.out.println(arr[i]);</span><br><span class="hljs-comment">        &#125;*/</span><br>        <span class="hljs-comment">//方案2：</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> delIndex; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            arr[i] = arr[i + <span class="hljs-number">1</span>];<br>        &#125;<br>        arr[arr.length - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-5-数组的元素查找"><a href="#6-5-数组的元素查找" class="headerlink" title="6.5 数组的元素查找"></a>6.5 数组的元素查找</h3><p><strong>1、顺序查找</strong></p><p>顺序查找：挨个查看</p><p>要求：对数组元素的顺序没要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayOrderSearch</span> &#123;<br>    <span class="hljs-comment">//查找value第一次在数组中出现的index</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i] == value)&#123;<br>                index = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(index==-<span class="hljs-number">1</span>)&#123;<br>            System.out.println(value + <span class="hljs-string">&quot;不存在&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(value + <span class="hljs-string">&quot;的下标是&quot;</span> + index);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2、二分查找</strong></p><p>举例：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914669_watermark.png" alt="image-20230613094130589" style="zoom:50%;" /><p>实现步骤：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914746_watermark.png" alt="image-20230613094151435" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//二分法查找：要求此数组必须是有序的。</span><br><span class="hljs-type">int</span>[] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">99</span>,-<span class="hljs-number">54</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">33</span>,<span class="hljs-number">43</span>,<span class="hljs-number">256</span>,<span class="hljs-number">999</span>&#125;;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">256</span>;<br><span class="hljs-comment">//int value = 25;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//首索引位置</span><br><span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> arr3.length - <span class="hljs-number">1</span>;<span class="hljs-comment">//尾索引位置</span><br><span class="hljs-keyword">while</span>(head &lt;= end)&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> (head + end) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(arr3[middle] == value)&#123;<br>        System.out.println(<span class="hljs-string">&quot;找到指定的元素，索引为：&quot;</span> + middle);<br>        isFlag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr3[middle] &gt; value)&#123;<br>        end = middle - <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//arr3[middle] &lt; value</span><br>        head = middle + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(isFlag)&#123;<br>    System.out.println(<span class="hljs-string">&quot;未找打指定的元素&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-6-数组元素排序"><a href="#6-6-数组元素排序" class="headerlink" title="6.6 数组元素排序"></a>6.6 数组元素排序</h3><h4 id="6-6-1-算法概述"><a href="#6-6-1-算法概述" class="headerlink" title="6.6.1 算法概述"></a>6.6.1 算法概述</h4><ul><li><p><strong>定义</strong></p><ul><li><p>排序：假设含有n个记录的序列为{R1，R2，…,Rn},其相应的关键字序列为{K1，K2，…,Kn}。将这些记录重新排序为{Ri1,Ri2,…,Rin},使得相应的关键字值满足条Ki1&lt;&#x3D;Ki2&lt;&#x3D;…&lt;&#x3D;Kin,这样的一种操作称为排序。</p></li><li><p>​通常来说，排序的目的是快速查找。</p></li></ul></li><li><p><strong>衡量排序算法的优劣：</strong></p><ul><li><p>时间复杂度：分析关键字的比较次数和记录的移动次数</p></li><li><p>常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜…＜Ο(2n)＜Ο(n!)&lt;O(nn)</p></li><li><p>空间复杂度：分析排序算法中需要多少辅助内存</p><p>一个算法的空间复杂度S(n)定义为该算法所耗费的存储空间，它也是问题规模n的函数。</p></li><li><p>稳定性：若两个记录A和B的关键字值相等，但排序后A、B的先后次序保持不变，则称这种排序算法是稳定的。</p></li></ul></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914394_watermark.png" alt="image-20230613094421576" style="zoom:50%;" /><h4 id="6-6-2-排序算法概述"><a href="#6-6-2-排序算法概述" class="headerlink" title="6.6.2 排序算法概述"></a>6.6.2 排序算法概述</h4><ul><li><strong>排序算法分类：内部排序和外部排序</strong><ul><li>内部排序：整个排序过程不需要借助于外部存储器（如磁盘等），所有排序操作都在内存中完成。</li><li>外部排序：参与排序的数据非常多，数据量非常大，计算机无法把整个排序过程放在内存中完成，必须借助于外部存储器（如磁盘）。外部排序最常见的是多路归并排序。可以认为外部排序是由多次内部排序组成。</li></ul></li><li><strong>十大内部排序算法</strong></li></ul><p> 数组的排序算法很多，实现方式各不相同，时间复杂度、空间复杂度、稳定性也各不相同：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914475_watermark.png" alt="image-20211222111142684"></p><p>常见时间复杂度所消耗的时间从小到大排序：</p><p><strong>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</strong></p><p>注意，经常将以2为底n的对数简写成logn。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914468_watermark.png" alt="image-20220824003440106"></p><h4 id="6-6-3-冒泡排序（Bubble-Sort）"><a href="#6-6-3-冒泡排序（Bubble-Sort）" class="headerlink" title="6.6.3 冒泡排序（Bubble Sort）"></a>6.6.3 冒泡排序（Bubble Sort）</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914410_watermark.png" alt="image-20220516094637228" style="zoom:67%;" /><p><strong>排序思想：</strong></p><ol><li><p>比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。</p></li><li><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个。</p></li><li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较为止。</p></li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914191_watermark.png" alt="BubbleSort"></p><p><strong>动态演示：</strong><a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、冒泡排序（最经典）</span><br><span class="hljs-comment">思想：每一次比较“相邻（位置相邻）”元素，如果它们不符合目标顺序（例如：从小到大），</span><br><span class="hljs-comment">     就交换它们，经过多轮比较，最终实现排序。</span><br><span class="hljs-comment"> （例如：从小到大） 每一轮可以把最大的沉底，或最小的冒顶。</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">过程：arr&#123;6,9,2,9,1&#125;  目标：从小到大</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">第一轮：</span><br><span class="hljs-comment">第1次，arr[0]与arr[1]，6&gt;9不成立，满足目标要求，不交换</span><br><span class="hljs-comment">第2次，arr[1]与arr[2]，9&gt;2成立，不满足目标要求，交换arr[1]与arr[2] &#123;6,2,9,9,1&#125;</span><br><span class="hljs-comment">第3次，arr[2]与arr[3]，9&gt;9不成立，满足目标要求，不交换</span><br><span class="hljs-comment">第4次，arr[3]与arr[4]，9&gt;1成立，不满足目标要求，交换arr[3]与arr[4] &#123;6,2,9,1,9&#125;</span><br><span class="hljs-comment">第一轮所有元素&#123;6,9,2,9,1&#125;已经都参与了比较，结束。</span><br><span class="hljs-comment">第一轮的结果：第“一”最大值9沉底（本次是后面的9沉底），即到&#123;6,2,9,1,9&#125;元素的最右边</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">第二轮：</span><br><span class="hljs-comment">第1次，arr[0]与arr[1]，6&gt;2成立，不满足目标要求，交换arr[0]与arr[1] &#123;2,6,9,1,9&#125;</span><br><span class="hljs-comment">第2次，arr[1]与arr[2]，6&gt;9不成立，满足目标要求，不交换</span><br><span class="hljs-comment">第3次：arr[2]与arr[3]，9&gt;1成立，不满足目标要求，交换arr[2]与arr[3] &#123;2,6,1,9,9&#125;</span><br><span class="hljs-comment">第二轮未排序的所有元素 &#123;6,2,9,1&#125;已经都参与了比较，结束。</span><br><span class="hljs-comment">第二轮的结果：第“二”最大值9沉底（本次是前面的9沉底），即到&#123;2,6,1,9&#125;元素的最右边</span><br><span class="hljs-comment">第三轮：</span><br><span class="hljs-comment">第1次，arr[0]与arr[1]，2&gt;6不成立，满足目标要求，不交换</span><br><span class="hljs-comment">第2次，arr[1]与arr[2]，6&gt;1成立，不满足目标要求，交换arr[1]与arr[2] &#123;2,1,6,9,9&#125;</span><br><span class="hljs-comment">第三轮未排序的所有元素&#123;2,6,1&#125;已经都参与了比较，结束。</span><br><span class="hljs-comment">第三轮的结果：第三最大值6沉底，即到 &#123;2,1,6&#125;元素的最右边</span><br><span class="hljs-comment">第四轮：</span><br><span class="hljs-comment">第1次，arr[0]与arr[1]，2&gt;1成立，不满足目标要求，交换arr[0]与arr[1] &#123;1,2,6,9,9&#125;</span><br><span class="hljs-comment">第四轮未排序的所有元素&#123;2,1&#125;已经都参与了比较，结束。</span><br><span class="hljs-comment">第四轮的结果：第四最大值2沉底，即到&#123;1,2&#125;元素的最右边</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test19BubbleSort</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>&#125;;<br><br>        <span class="hljs-comment">//目标：从小到大</span><br>        <span class="hljs-comment">//冒泡排序的轮数 = 元素的总个数 - 1</span><br>        <span class="hljs-comment">//轮数是多轮，每一轮比较的次数是多次，需要用到双重循环，即循环嵌套</span><br>        <span class="hljs-comment">//外循环控制 轮数，内循环控制每一轮的比较次数和过程</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;arr.length; i++)&#123; <span class="hljs-comment">//循环次数是arr.length-1次/轮</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">假设arr.length=5</span><br><span class="hljs-comment">i=1,第1轮，比较4次</span><br><span class="hljs-comment">arr[0]与arr[1]</span><br><span class="hljs-comment">arr[1]与arr[2]</span><br><span class="hljs-comment">arr[2]与arr[3]</span><br><span class="hljs-comment">arr[3]与arr[4]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">arr[j]与arr[j+1]，int j=0;j&lt;4; j++</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">i=2,第2轮，比较3次</span><br><span class="hljs-comment">arr[0]与arr[1]</span><br><span class="hljs-comment">arr[1]与arr[2]</span><br><span class="hljs-comment">arr[2]与arr[3]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">arr[j]与arr[j+1]，int j=0;j&lt;3; j++</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">i=3,第3轮，比较2次</span><br><span class="hljs-comment">arr[0]与arr[1]</span><br><span class="hljs-comment">arr[1]与arr[2]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">arr[j]与arr[j+1]，int j=0;j&lt;2; j++</span><br><span class="hljs-comment">i=4,第4轮，比较1次</span><br><span class="hljs-comment">arr[0]与arr[1]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">arr[j]与arr[j+1]，int j=0;j&lt;1; j++</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">int j=0; j&lt;arr.length-i; j++</span><br><span class="hljs-comment">*/</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;arr.length-i; j++)&#123;<br>                <span class="hljs-comment">//希望的是arr[j] &lt; arr[j+1]</span><br>                <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-comment">//交换arr[j]与arr[j+1]</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                    arr[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//完成排序，遍历结果</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot;  &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>冒泡排序优化（选讲）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">思考：冒泡排序是否可以优化</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test19BubbleSort2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;;<br><br>        <span class="hljs-comment">//从小到大排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//假设数组已经是有序的</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-comment">//希望的是arr[j] &lt; arr[j+1]</span><br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-comment">//交换arr[j]与arr[j+1]</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br><br>                    flag = <span class="hljs-literal">false</span>;<span class="hljs-comment">//如果元素发生了交换，那么说明数组还没有排好序</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//完成排序，遍历结果</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot;  &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-6-4-快速排序"><a href="#6-6-4-快速排序" class="headerlink" title="6.6.4 快速排序"></a>6.6.4 快速排序</h4><p>快速排序（Quick Sort）由<code>图灵奖</code>获得者<code>Tony Hoare</code>发明，被列为<code>20世纪十大算法之一</code>，是迄今为止所有内排序算法中速度最快的一种，快速排序的时间复杂度为O(nlog(n))。</p><p>快速排序通常明显比同为O(nlogn)的其他算法更快，因此常被采用，而且快排采用了分治法的思想，所以在很多笔试面试中能经常看到快排的影子。</p><p>排序思想：</p><ol><li><p>从数列中挑出一个元素，称为”基准”（pivot），</p></li><li><p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p></li><li><p>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p></li><li><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p></li></ol><p><strong>动态演示：</strong><a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a></p><p>图示1：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914768_watermark.png" alt="image-20220317235922776"></p><p>图示2：</p><p>第一轮操作：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914583_watermark.png" alt="image-20221117205612230"></p><p>第二轮操作：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914352_watermark.png" alt="image-20221117205719427"></p><h4 id="6-6-5-内部排序性能比较与选择"><a href="#6-6-5-内部排序性能比较与选择" class="headerlink" title="6.6.5 内部排序性能比较与选择"></a>6.6.5 内部排序性能比较与选择</h4><ul><li><p>性能比较</p><ul><li><strong>从平均时间而言</strong>：快速排序最佳。但在最坏情况下时间性能不如堆排序和归并排序。</li><li><strong>从算法简单性看</strong>：由于直接选择排序、直接插入排序和冒泡排序的算法比较简单，将其认为是简单算法。对于Shell排序、堆排序、快速排序和归并排序算法，其算法比较复杂，认为是复杂排序。</li><li><strong>从稳定性看</strong>：直接插入排序、冒泡排序和归并排序时稳定的；而直接选择排序、快速排序、 Shell排序和堆排序是不稳定排序</li><li><strong>从待排序的记录数n的大小看</strong>，n较小时，宜采用简单排序；而n较大时宜采用改进排序。</li></ul></li><li><p>选择</p><ul><li>若n较小(如n≤50)，可采用直接插入或直接选择排序。<br>当记录规模较小时，直接插入排序较好；否则因为直接选择移动的记录数少于直接插入，应选直接选择排序为宜。</li><li>若文件初始状态基本有序(指正序)，则应选用直接插入、冒泡或随机的快速排序为宜；</li><li>若n较大，则应采用时间复杂度为O(nlgn)的排序方法：快速排序、堆排序或归并排序。</li></ul></li></ul><h2 id="7-Arrays工具类的使用"><a href="#7-Arrays工具类的使用" class="headerlink" title="7. Arrays工具类的使用"></a>7. Arrays工具类的使用</h2><p>java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比如排序和搜索）的各种方法。 比如：</p><ul><li><code>数组元素拼接</code><ul><li>static String toString(int[] a) ：字符串表示形式由数组的元素列表组成，括在方括号（”[]”）中。相邻元素用字符 “, “（逗号加空格）分隔。形式为：[元素1，元素2，元素3。。。]</li><li>static String toString(Object[] a) ：字符串表示形式由数组的元素列表组成，括在方括号（”[]”）中。相邻元素用字符 “, “（逗号加空格）分隔。元素将自动调用自己从Object继承的toString方法将对象转为字符串进行拼接，如果没有重写，则返回类型@hash值，如果重写则按重写返回的字符串进行拼接。</li></ul></li><li><code>数组排序</code><ul><li>static void sort(int[] a) ：将a数组按照从小到大进行排序</li><li>static void sort(int[] a, int fromIndex, int toIndex) ：将a数组的[fromIndex, toIndex)部分按照升序排列</li><li>static void sort(Object[] a) ：根据元素的自然顺序对指定对象数组按升序进行排序。</li><li>static <T> void sort(T[] a, Comparator&lt;? super T&gt; c) ：根据指定比较器产生的顺序对指定对象数组进行排序。</li></ul></li><li><code>数组元素的二分查找</code><ul><li>static int binarySearch(int[] a, int key)  、static int binarySearch(Object[] a, Object key) ：要求数组有序，在数组中查找key是否存在，如果存在返回第一次找到的下标，不存在返回负数。</li></ul></li><li><code>数组的复制</code><ul><li>static int[] copyOf(int[] original, int newLength)  ：根据original原数组复制一个长度为newLength的新数组，并返回新数组</li><li>static <T> T[] copyOf(T[] original,int newLength)：根据original原数组复制一个长度为newLength的新数组，并返回新数组</li><li>static int[] copyOfRange(int[] original, int from, int to) ：复制original原数组的[from,to)构成新数组，并返回新数组</li><li>static <T> T[] copyOfRange(T[] original,int from,int to)：复制original原数组的[from,to)构成新数组，并返回新数组</li></ul></li><li><code>比较两个数组是否相等</code><ul><li>static boolean equals(int[] a, int[] a2) ：比较两个数组的长度、元素是否完全相同</li><li>static boolean equals(Object[] a,Object[] a2)：比较两个数组的长度、元素是否完全相同</li></ul></li><li><code>填充数组</code><ul><li>static void fill(int[] a, int val) ：用val值填充整个a数组</li><li>static void fill(Object[] a,Object val)：用val对象填充整个a数组</li><li>static void fill(int[] a, int fromIndex, int toIndex, int val)：将a数组[fromIndex,toIndex)部分填充为val值</li><li>static void fill(Object[] a, int fromIndex, int toIndex, Object val) ：将a数组[fromIndex,toIndex)部分填充为val对象</li></ul></li></ul><p>举例：java.util.Arrays类的sort()方法提供了数组元素排序功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SortTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;排序前&quot;</span> + Arrays.toString(arr));<br>        Arrays.sort(arr);<br>        System.out.println(<span class="hljs-string">&quot;排序后&quot;</span> + Arrays.toString(arr));<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="8-数组中的常见异常"><a href="#8-数组中的常见异常" class="headerlink" title="8. 数组中的常见异常"></a>8. 数组中的常见异常</h2><h3 id="8-1-数组角标越界异常"><a href="#8-1-数组角标越界异常" class="headerlink" title="8.1 数组角标越界异常"></a>8.1 数组角标越界异常</h3><p>当访问数组元素时，下标指定超出[0, 数组名.length-1]的范围时，就会报数组下标越界异常：ArrayIndexOutOfBoundsException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayIndexOutOfBoundsException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>       <span class="hljs-comment">// System.out.println(&quot;最后一个元素：&quot; + arr[3]);//错误，下标越界</span><br>      <span class="hljs-comment">//  System.out.println(&quot;最后一个元素：&quot; + arr[arr.length]);//错误，下标越界</span><br>        System.out.println(<span class="hljs-string">&quot;最后一个元素：&quot;</span> + arr[arr.length-<span class="hljs-number">1</span>]);<span class="hljs-comment">//对</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>创建数组，赋值3个元素，数组的索引就是0，1，2，没有3索引，因此我们不能访问数组中不存在的索引，程序运行后，将会抛出 <code>ArrayIndexOutOfBoundsException</code>  数组越界异常。在开发中，数组的越界异常是<strong>不能出现</strong>的，一旦出现了，就必须要修改我们编写的代码。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914961_watermark.jpeg"></p><h3 id="8-2-空指针异常"><a href="#8-2-空指针异常" class="headerlink" title="8.2 空指针异常"></a>8.2 空指针异常</h3><p>观察一下代码，运行后会出现什么结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestNullPointerException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义数组</span><br>        <span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][];<br><br>        System.out.println(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<span class="hljs-comment">//NullPointerException</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为此时数组的每一行还未分配具体存储元素的空间，此时arr[0]是null，此时访问arr[0][0]会抛出<code>NullPointerException</code> 空指针异常。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914494_watermark.jpeg"></p><p><strong>空指针异常在内存图中的表现</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914088_watermark.png" alt="1572338767825"></p><p><strong>小结：空指针异常情况</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//举例一：</span><br><span class="hljs-comment">//int[] arr1 = new int[10];</span><br><span class="hljs-comment">//arr1 = null;</span><br><span class="hljs-comment">//System.out.println(arr1[9]);</span><br><br><span class="hljs-comment">//举例二：</span><br><span class="hljs-comment">//int[][] arr2 = new int[5][];</span><br><span class="hljs-comment">////arr2[3] = new int[10];</span><br><span class="hljs-comment">//System.out.println(arr2[3][3]);</span><br><br><span class="hljs-comment">//举例三：</span><br>String[] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">10</span>];<br>System.out.println(arr3[<span class="hljs-number">2</span>].toString());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IntelliJ IDEA 常用快捷键一览表</title>
    <link href="/2024/02/22/4.%20IntelliJ%20IDEA%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%80%E8%A7%88%E8%A1%A8/"/>
    <url>/2024/02/22/4.%20IntelliJ%20IDEA%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%80%E8%A7%88%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-IDEA的日常快捷键"><a href="#1-IDEA的日常快捷键" class="headerlink" title="1-IDEA的日常快捷键"></a>1-IDEA的日常快捷键</h2><h3 id="第1组：通用型"><a href="#第1组：通用型" class="headerlink" title="第1组：通用型"></a>第1组：通用型</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>复制代码-copy</td><td>ctrl + c</td></tr><tr><td>粘贴-paste</td><td>ctrl + v</td></tr><tr><td>剪切-cut</td><td>ctrl + x</td></tr><tr><td>撤销-undo</td><td>ctrl + z</td></tr><tr><td>反撤销-redo</td><td>ctrl + shift + z</td></tr><tr><td>保存-save all</td><td>ctrl + s</td></tr><tr><td>全选-select all</td><td>ctrl + a</td></tr></tbody></table><h3 id="第2组：提高编写速度（上）"><a href="#第2组：提高编写速度（上）" class="headerlink" title="第2组：提高编写速度（上）"></a>第2组：提高编写速度（上）</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>智能提示-edit</td><td>alt + enter</td></tr><tr><td>提示代码模板-insert live template</td><td>ctrl+j</td></tr><tr><td>使用xx块环绕-surround with …</td><td>ctrl+alt+t</td></tr><tr><td>调出生成getter&#x2F;setter&#x2F;构造器等结构-generate …</td><td>alt+insert</td></tr><tr><td>自动生成返回值变量-introduce variable …</td><td>ctrl+alt+v</td></tr><tr><td>复制指定行的代码-duplicate line or selection</td><td>ctrl+d</td></tr><tr><td>删除指定行的代码-delete line</td><td>ctrl+y</td></tr><tr><td>切换到下一行代码空位-start new line</td><td>shift + enter</td></tr><tr><td>切换到上一行代码空位-start new line before current</td><td>ctrl +alt+ enter</td></tr><tr><td>向上移动代码-move statement up</td><td>ctrl+shift+↑</td></tr><tr><td>向下移动代码-move statement down</td><td>ctrl+shift+↓</td></tr><tr><td>向上移动一行-move line up</td><td>alt+shift+↑</td></tr><tr><td>向下移动一行-move line down</td><td>alt+shift+↓</td></tr><tr><td>方法的形参列表提醒-parameter info</td><td>ctrl+p</td></tr></tbody></table><h3 id="第3组：提高编写速度（下）"><a href="#第3组：提高编写速度（下）" class="headerlink" title="第3组：提高编写速度（下）"></a>第3组：提高编写速度（下）</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>批量修改指定的变量名、方法名、类名等-rename</td><td>shift+f6</td></tr><tr><td>抽取代码重构方法-extract method …</td><td>ctrl+alt+m</td></tr><tr><td>重写父类的方法-override methods …</td><td>ctrl+o</td></tr><tr><td>实现接口的方法-implements methods …</td><td>ctrl+i</td></tr><tr><td>选中的结构的大小写的切换-toggle case</td><td>ctrl+shift+u</td></tr><tr><td>批量导包-optimize imports</td><td>ctrl+alt+o</td></tr></tbody></table><h3 id="第4组：类结构、查找和查看源码"><a href="#第4组：类结构、查找和查看源码" class="headerlink" title="第4组：类结构、查找和查看源码"></a>第4组：类结构、查找和查看源码</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>如何查看源码-go to class…</td><td>ctrl + 选中指定的结构 或 ctrl+n</td></tr><tr><td>显示当前类结构，支持搜索指定的方法、属性等-file structure</td><td>ctrl+f12</td></tr><tr><td>退回到前一个编辑的页面-back</td><td>ctrl+alt+←</td></tr><tr><td>进入到下一个编辑的页面-forward</td><td>ctrl+alt+→</td></tr><tr><td>打开的类文件之间切换-select previous&#x2F;next tab</td><td>alt+←&#x2F;→</td></tr><tr><td>光标选中指定的类，查看继承树结构-Type Hierarchy</td><td>ctrl+h</td></tr><tr><td>查看方法文档-quick documentation</td><td>ctrl+q</td></tr><tr><td>类的UML关系图-show uml popup</td><td>ctrl+alt+u</td></tr><tr><td>定位某行-go to line&#x2F;column</td><td>ctrl+g</td></tr><tr><td>回溯变量或方法的来源-go to implementation(s)</td><td>ctrl+alt+b</td></tr><tr><td>折叠方法实现-collapse all</td><td>ctrl+shift+ -</td></tr><tr><td>展开方法实现-expand all</td><td>ctrl+shift+ +</td></tr></tbody></table><h3 id="第5组：查找、替换与关闭"><a href="#第5组：查找、替换与关闭" class="headerlink" title="第5组：查找、替换与关闭"></a>第5组：查找、替换与关闭</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>查找指定的结构</td><td>ctlr+f</td></tr><tr><td>快速查找：选中的Word快速定位到下一个-find next</td><td>ctrl+l</td></tr><tr><td>查找与替换-replace</td><td>ctrl+r</td></tr><tr><td>直接定位到当前行的首位-move caret to line start</td><td>home</td></tr><tr><td>直接定位到当前行的末位 -move caret to line end</td><td>end</td></tr><tr><td>查询当前元素在当前文件中的引用，然后按 F3 可以选择</td><td>ctrl+f7</td></tr><tr><td>全项目搜索文本-find in path …</td><td>ctrl+shift+f</td></tr><tr><td>关闭当前窗口-close</td><td>ctrl+f4</td></tr></tbody></table><h3 id="第6组：调整格式"><a href="#第6组：调整格式" class="headerlink" title="第6组：调整格式"></a>第6组：调整格式</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>格式化代码-reformat code</td><td>ctrl+alt+l</td></tr><tr><td>使用单行注释-comment with line comment</td><td>ctrl + &#x2F;</td></tr><tr><td>使用&#x2F;取消多行注释-comment with block comment</td><td>ctrl + shift + &#x2F;</td></tr><tr><td>选中数行，整体往后移动-tab</td><td>tab</td></tr><tr><td>选中数行，整体往前移动-prev tab</td><td>shift + tab</td></tr></tbody></table><h2 id="2-Debug快捷键"><a href="#2-Debug快捷键" class="headerlink" title="2-Debug快捷键"></a>2-Debug快捷键</h2><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>单步调试（不进入函数内部）- step over</td><td>F8</td></tr><tr><td>单步调试（进入函数内部）- step into</td><td>F7</td></tr><tr><td>强制单步调试（进入函数内部） - force step into</td><td>alt+shift+f7</td></tr><tr><td>选择要进入的函数 - smart step into</td><td>shift + F7</td></tr><tr><td>跳出函数 - step out</td><td>shift + F8</td></tr><tr><td>运行到断点 - run to cursor</td><td>alt + F9</td></tr><tr><td>继续执行，进入下一个断点或执行完程序 - resume program</td><td>F9</td></tr><tr><td>停止 - stop</td><td>Ctrl+F2</td></tr><tr><td>查看断点 - view breakpoints</td><td>Ctrl+Shift+F8</td></tr><tr><td>关闭 - close</td><td>Ctrl+F4</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA的安装与使用（下）</title>
    <link href="/2024/02/22/4.%20IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/2024/02/22/4.%20IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="8-快捷键的使用"><a href="#8-快捷键的使用" class="headerlink" title="8. 快捷键的使用"></a>8. 快捷键的使用</h2><h3 id="8-1-查看快捷键"><a href="#8-1-查看快捷键" class="headerlink" title="8.1 查看快捷键"></a>8.1 查看快捷键</h3><h4 id="1、已知快捷键操作名，未知快捷键"><a href="#1、已知快捷键操作名，未知快捷键" class="headerlink" title="1、已知快捷键操作名，未知快捷键"></a>1、已知快捷键操作名，未知快捷键</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956581_watermark.png"></p><h4 id="2、已知快捷键，不知道对应的操作名"><a href="#2、已知快捷键，不知道对应的操作名" class="headerlink" title="2、已知快捷键，不知道对应的操作名"></a>2、已知快捷键，不知道对应的操作名</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956652_watermark.png"></p><h3 id="8-2-自定义快捷键"><a href="#8-2-自定义快捷键" class="headerlink" title="8.2 自定义快捷键"></a>8.2 自定义快捷键</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956820_watermark.png"></p><h3 id="8-3-使用其它平台快捷键"><a href="#8-3-使用其它平台快捷键" class="headerlink" title="8.3 使用其它平台快捷键"></a>8.3 使用其它平台快捷键</h3><p>苹果电脑或者是用惯Eclipse快捷的，可以选择其他快捷键插件。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956949_watermark.png"></p><h2 id="9-IDEA断点调试-Debug"><a href="#9-IDEA断点调试-Debug" class="headerlink" title="9. IDEA断点调试(Debug)"></a>9. IDEA断点调试(Debug)</h2><h3 id="9-1-为什么需要Debug"><a href="#9-1-为什么需要Debug" class="headerlink" title="9.1 为什么需要Debug"></a>9.1 为什么需要Debug</h3><p>编好的程序在执行过程中如果出现错误，该如何查找或定位错误呢？简单的代码直接就可以看出来，但如果代码比较复杂，就需要借助程序调试工具（Debug）来查找错误了。</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">运行编写好的程序时，可能出现的几种情况：<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">情况<span class="hljs-number">1</span>：没有任何bug,程序执行正确！</span><br><br>====================如果出现如下的三种情况，都又必要使用debug=============================<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">情况<span class="hljs-number">2</span>：运行以后，出现了错误或异常信息。但是通过日志文件或控制台，显示了异常信息的位置。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">情况<span class="hljs-number">3</span>：运行以后，得到了结果，但是结果不是我们想要的。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">情况<span class="hljs-number">4</span>：运行以后，得到了结果，结果大概率是我们想要的。但是多次运行的话，可能会出现不是我们想要的情况。</span><br>        比如：多线程情况下，处理线程安全问题。<br>        <br></code></pre></td></tr></table></figure><h3 id="9-2-Debug的步骤"><a href="#9-2-Debug的步骤" class="headerlink" title="9.2 Debug的步骤"></a>9.2 Debug的步骤</h3><p>Debug(调试)程序步骤如下：</p><p>1、添加断点</p><p>2、启动调试</p><p>3、单步执行</p><p>4、观察变量和执行流程，找到并解决问题</p><h4 id="1、添加断点"><a href="#1、添加断点" class="headerlink" title="1、添加断点"></a>1、添加断点</h4><p>在源代码文件中，在想要设置断点的代码行的前面的标记行处，单击鼠标左键就可以设置断点，在相同位置再次单击即可取消断点。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956740_watermark.png"></p><h4 id="2、启动调试"><a href="#2、启动调试" class="headerlink" title="2、启动调试"></a>2、启动调试</h4><p>IDEA提供多种方式来启动程序(Launch)的调试，分别是通过菜单(Run –&gt; Debug)、图标(“绿色臭虫”<img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956503_watermark.png">等等</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956367_watermark.png"></p><h4 id="3、单步调试工具介绍"><a href="#3、单步调试工具介绍" class="headerlink" title="3、单步调试工具介绍"></a>3、单步调试工具介绍</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956590_watermark.png"></p><p>或</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956328_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956801_watermark.png">：Step Over（F8)：进入下一步，如果当前行断点是调用一个方法，则不进入当前方法体内</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956135_watermark.png">：Step Into（F7)：进入下一步，如果当前行断点是调用一个自定义方法，则进入该方法体内</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956168_watermark.png">：Force Step Into（Alt +Shift  + F7)：进入下一步，如果当前行断点是调用一个核心类库方法，则进入该方法体内</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956581_watermark.png">：Step Out（Shift  + F8)：跳出当前方法体</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956830_watermark.png">：Run to Cursor（Alt + F9)：直接跳到光标处继续调试</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956480_watermark.png">：Resume Program（F9)：恢复程序运行，但如果该断点下面代码还有断点则停在下一个断点上</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956876_watermark.png">：Stop（Ctrl + F2）：结束调试</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956177_watermark.png">：View Breakpoints（Ctrl + Shift  + F8)：查看所有断点</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956496_watermark.png">：Mute Breakpoints：使得当前代码后面所有的断点失效， 一下执行到底 </p><blockquote><p>说明：在Debug过程中，可以动态的下断点。</p></blockquote><h3 id="9-3-多种Debug情况介绍"><a href="#9-3-多种Debug情况介绍" class="headerlink" title="9.3 多种Debug情况介绍"></a>9.3 多种Debug情况介绍</h3><h4 id="9-3-1-行断点"><a href="#9-3-1-行断点" class="headerlink" title="9.3.1 行断点"></a>9.3.1 行断点</h4><ul><li>断点打在代码所在的行上。执行到此行时，会停下来。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug01</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示1：行断点  &amp;  测试debug各个常见操作按钮</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 18:44</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;,n = &quot;</span> + n);<br>        swap(m, n);<br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;,n = &quot;</span> + n);<br><br>        <span class="hljs-comment">//2.</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        System.out.println(arr);<span class="hljs-comment">//地址值</span><br><br>        <span class="hljs-type">char</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[] &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>        System.out.println(arr1);<span class="hljs-comment">//abc</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> m;<br>        m = n;<br>        n = temp;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="9-3-2-方法断点"><a href="#9-3-2-方法断点" class="headerlink" title="9.3.2 方法断点"></a>9.3.2 方法断点</h4><ul><li>断点设置在方法的签名上，默认当进入时，断点可以被唤醒。</li><li>也可以设置在方法退出时，断点也被唤醒</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956836_watermark.png"></p><ul><li>在多态的场景下，在父类或接口的方法上打断点，会自动调入到子类或实现类的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug02</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示2： 方法断点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 21:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-type">Son</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        instance.test();<br>        <span class="hljs-comment">//2.</span><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        instance1.test();<br><br>        <span class="hljs-comment">//3.</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsumerImpl</span>();<br>        con.accept(<span class="hljs-string">&quot;atguigu&quot;</span>);<br><br>        <span class="hljs-comment">//4.</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>);<br>        map.put(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">11</span>);<br>        map.put(<span class="hljs-string">&quot;Tony&quot;</span>,<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Father : test&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Son : test&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Consumer</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String str)</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Consumer</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String str)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConsumerImple:&quot;</span> + str);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="9-3-3-字段断点"><a href="#9-3-3-字段断点" class="headerlink" title="9.3.3 字段断点"></a>9.3.3 字段断点</h4><ul><li>在类的属性声明上打断点，默认对属性的修改操作进行监控</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956288_watermark.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug03</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示3：字段断点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 21:34</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">3</span>);<br><br>        System.out.println(p1);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    &#123;<br>        id = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="9-3-4-条件断点"><a href="#9-3-4-条件断点" class="headerlink" title="9.3.4 条件断点"></a>9.3.4 条件断点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug04</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示4：条件断点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 21:49</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>&#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> arr[i];<br>            System.out.println(target);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>针对上述代码，在满足arr[i] % 3 &#x3D;&#x3D; 0的条件下，执行断点。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956854_watermark.png"></p><h4 id="9-3-5-异常断点（暂略）"><a href="#9-3-5-异常断点（暂略）" class="headerlink" title="9.3.5 异常断点（暂略）"></a>9.3.5 异常断点（暂略）</h4><ul><li>对异常进行跟踪。如果程序出现指定异常，程序就会执行断点，自动停住。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug05</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示5：异常断点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 22:01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> m / n;<br>        System.out.println(result);<br><br><br><span class="hljs-comment">//        Person p1 = new Person(1001);</span><br><span class="hljs-comment">//        System.out.println(p1.getName().toUpperCase());</span><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过下图的方式，对指定的异常进行监控：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956337_watermark.png"></p><h4 id="9-3-6-线程调试（暂略）"><a href="#9-3-6-线程调试（暂略）" class="headerlink" title="9.3.6 线程调试（暂略）"></a>9.3.6 线程调试（暂略）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug06</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示6：线程调试</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 22:46</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug06</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        test(<span class="hljs-string">&quot;Thread1&quot;</span>);<br>        test(<span class="hljs-string">&quot;Thread2&quot;</span>);<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String threadName)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<br>                () -&gt; System.out.println(Thread.currentThread().getName()),<br>                threadName<br>        ).start();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956697_watermark.png"></p><h4 id="9-3-7-强制结束"><a href="#9-3-7-强制结束" class="headerlink" title="9.3.7 强制结束"></a>9.3.7 强制结束</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug07</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示7：强制结束</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 23:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;获取请求的数据&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;调用写入数据库的方法&quot;</span>);<br>        insert();<br>        System.out.println(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;进入insert()方法&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;获取数据库连接&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;将数据写入数据表中&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;写出操作完成&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;断开连接&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956944_watermark.png"></p><h3 id="9-4-自定义调试数据视图（暂略）"><a href="#9-4-自定义调试数据视图（暂略）" class="headerlink" title="9.4 自定义调试数据视图（暂略）"></a>9.4 自定义调试数据视图（暂略）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug08</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示8：用户自定义数据视图</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 23:21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        HashMap&lt;Integer,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;高铁&quot;</span>);<br>        map.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;网购&quot;</span>);<br>        map.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;支付宝&quot;</span>);<br>        map.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;共享单车&quot;</span>);<br><br>        System.out.println(map);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>设置如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956442_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956864_watermark.png"></p><h3 id="9-5-常见问题"><a href="#9-5-常见问题" class="headerlink" title="9.5 常见问题"></a>9.5 常见问题</h3><p>问题：使用Step Into时，会出现无法进入源码的情况。如何解决？</p><p>方案1：使用 force step into 即可</p><p>方案2：点击Setting -&gt; Build,Execution,Deployment -&gt; Debugger -&gt; Stepping</p><p>把Do not step into the classess中的<code>java.*</code>、<code>javax.*</code> 取消勾选即可。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956608_watermark.png" alt="image-20220516200427750" style="zoom:75%;" /><p>小结：</p><blockquote><p>经验：初学者对于在哪里加断点，缺乏经验，这也是调试程序最麻烦的地方，需要一定的经验。</p><p>简单来说，在可能发生错误的代码的前面加断点。如果不会判断，就在程序执行的起点处加断点。</p></blockquote><h2 id="10-IDEA常用插件"><a href="#10-IDEA常用插件" class="headerlink" title="10. IDEA常用插件"></a>10. IDEA常用插件</h2><h3 id="推荐1：Alibaba-Java-Coding-Guidelines"><a href="#推荐1：Alibaba-Java-Coding-Guidelines" class="headerlink" title="推荐1：Alibaba Java Coding Guidelines"></a>推荐1：Alibaba Java Coding Guidelines</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956031_watermark.png"></p><p>阿里巴巴Java编码规范检查插件，检测代码是否存在问题，以及是否符合规范。</p><p>使用：在类中，右键，选择编码规约扫描，在下方显示扫描规约和提示。根据提示规范代码，提高代码质量。</p><h3 id="推荐2：jclasslib-bytecode-viewer"><a href="#推荐2：jclasslib-bytecode-viewer" class="headerlink" title="推荐2：jclasslib bytecode viewer"></a>推荐2：jclasslib bytecode viewer</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956697_watermark.png"></p><p>可视化的字节码查看器。</p><p>使用：</p><ol><li>在 IDEA 打开想研究的类。</li><li>编译该类或者直接编译整个项目（ 如果想研究的类在 jar 包中，此步可略过）。</li><li>打开“view” 菜单，选择“Show Bytecode With jclasslib” 选项。</li><li>选择上述菜单项后 IDEA 中会弹出 jclasslib 工具窗口。</li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957202_watermark.png" alt="image-20221023225239838"></p><p>英文设置：</p><p>在 Help -&gt; Edit Custom VM Options …，加上</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">-Duser.language</span>=en<br></code></pre></td></tr></table></figure><h3 id="推荐3：Translation"><a href="#推荐3：Translation" class="headerlink" title="推荐3：Translation"></a>推荐3：Translation</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957646_watermark.png"></p><p>注册翻译服务（有道智云、百度翻译开放平台、阿里云机器翻译）帐号，开通翻译服务并获取其应用ID和密钥<br>绑定应用ID和密钥：偏好设置（设置） &gt; 工具 &gt; 翻译 &gt; 常规 &gt; 翻译引擎 &gt; 配置…</p><p>使用：鼠标选中文本，点击右键即可自动翻译成多国语言。</p><p>注：请注意保管好你的应用密钥，防止其泄露。</p><h3 id="推荐4：GenerateAllSetter"><a href="#推荐4：GenerateAllSetter" class="headerlink" title="推荐4：GenerateAllSetter"></a>推荐4：GenerateAllSetter</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957057_watermark.png"></p><p>实际开发中还有一个非常常见的场景： 我们创建一个对象后，想依次调用 Setter 函数对属性赋值，如果属性较多很容易遗漏或者重复。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957557_watermark.png" alt="image-20221023230812560" style="zoom:80%;" /><p>可以使用这 GenerateAllSetter 提供的功能，快速生成对象的所有 Setter 函数（可填充默认值），然后自己再跟进实际需求设置属性值。</p><h3 id="插件5：Rainbow-Brackets"><a href="#插件5：Rainbow-Brackets" class="headerlink" title="插件5：Rainbow Brackets"></a>插件5：Rainbow Brackets</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957331_watermark.png"></p><p>给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957812_watermark.png"></p><h3 id="推荐6：CodeGlance-Pro"><a href="#推荐6：CodeGlance-Pro" class="headerlink" title="推荐6：CodeGlance Pro"></a>推荐6：CodeGlance Pro</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957419_watermark.png"></p><p>在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957993_watermark.png" alt="image-20221023231842846" style="zoom:80%;" /><h3 id="推荐7：Statistic"><a href="#推荐7：Statistic" class="headerlink" title="推荐7：Statistic"></a>推荐7：Statistic</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957425_watermark.png"></p><p>代码统计工具。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957003_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957497_watermark.png"></p><h3 id="推荐8：Presentation-Assistant"><a href="#推荐8：Presentation-Assistant" class="headerlink" title="推荐8：Presentation Assistant"></a>推荐8：Presentation Assistant</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957067_watermark.png"></p><p>显示快捷键操作的按键</p><h3 id="推荐9：Key-Promoter-X"><a href="#推荐9：Key-Promoter-X" class="headerlink" title="推荐9：Key Promoter X"></a>推荐9：Key Promoter X</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957499_watermark.png"></p><p>快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。</p><h3 id="推荐10：JavaDoc"><a href="#推荐10：JavaDoc" class="headerlink" title="推荐10：JavaDoc"></a>推荐10：JavaDoc</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957953_watermark.png"></p><p>按<code>alt+insert</code>，执行操作：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957359_watermark.png"></p><h3 id="推荐11：-LeetCode-Editor"><a href="#推荐11：-LeetCode-Editor" class="headerlink" title="推荐11： LeetCode Editor"></a>推荐11： LeetCode Editor</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957831_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957509_watermark.png"></p><p>在 IDEA 里刷力扣算法题</p><h3 id="推荐12：GsonFormatPlus"><a href="#推荐12：GsonFormatPlus" class="headerlink" title="推荐12：GsonFormatPlus"></a>推荐12：GsonFormatPlus</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957056_watermark.png"></p><p>根据 json 生成对象。</p><p>使用：使用alt + s 或 alt + insert调取。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957580_watermark.png"></p><p>举例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tom&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;18&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;man&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hometown&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;province&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;河北省&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;石家庄市&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;county&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;正定县&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="插件13：Material-Theme-UI"><a href="#插件13：Material-Theme-UI" class="headerlink" title="插件13：Material Theme UI"></a>插件13：Material Theme UI</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957975_watermark.png"></p><p>对于很多人而言，写代码时略显枯燥的，如果能够安装自己喜欢的主题将为开发工作带来些许乐趣。</p><p>IDEA 支持各种主题插件，其中最出名的当属 Material Theme UI。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957907_watermark.png"></p><p>安装后，可以从该插件内置的各种风格个选择自己最喜欢的一种。</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA的安装与使用（上）</title>
    <link href="/2024/02/22/4.%20IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/2024/02/22/4.%20IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-认识IntelliJ-IDEA"><a href="#1-认识IntelliJ-IDEA" class="headerlink" title="1. 认识IntelliJ IDEA"></a>1. 认识IntelliJ IDEA</h2><h3 id="1-1-JetBrains-公司介绍"><a href="#1-1-JetBrains-公司介绍" class="headerlink" title="1.1 JetBrains  公司介绍"></a>1.1 JetBrains  公司介绍</h3><p>IDEA，是 JetBrains (<a href="https://www.jetbrains.com/)%E5%85%AC%E5%8F%B8%E7%9A%84%E4%BA%A7%E5%93%81%EF%BC%8C%E8%AF%A5%E5%85%AC%E5%8F%B8%E6%88%90%E7%AB%8B%E4%BA%8E2000%E5%B9%B4%EF%BC%8C%E6%80%BB%E9%83%A8%E4%BD%8D%E4%BA%8E%E6%8D%B7%E5%85%8B%E7%9A%84%E5%B8%83%E6%8B%89%E6%A0%BC%EF%BC%8C%E8%87%B4%E5%8A%9B%E4%BA%8E%E4%B8%BA%E5%BC%80%E5%8F%91%E8%80%85%E6%89%93%E9%80%A0%E6%9C%80%E9%AB%98%E6%95%88%E6%99%BA%E8%83%BD%E7%9A%84%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E3%80%82">https://www.jetbrains.com/)公司的产品，该公司成立于2000年，总部位于捷克的布拉格，致力于为开发者打造最高效智能的开发工具。</a></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943460_watermark.png" alt="1576217376761" style="zoom:80%;" /><p>公司旗下还有其它产品，比如：</p><ul><li>WebStorm：用于开发 JavaScript、HTML5、CSS3 等前端技术</li><li>PyCharm：用于开发 python</li><li>PhpStorm：用于开发 PHP</li><li>RubyMine：用于开发 Ruby&#x2F;Rails</li><li>AppCode：用于开发 Objective - C&#x2F;Swift</li><li>CLion：用于开发 C&#x2F;C++</li><li>DataGrip：用于开发数据库和 SQL</li><li>Rider：用于开发.NET</li><li>GoLand：用于开发 Go</li></ul><p>用于开发 Android的Android Studio，也是Google 基于 IDEA 社区版进行迭代的。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943680_watermark.png"></p><h3 id="1-2-IntelliJ-IDEA-介绍"><a href="#1-2-IntelliJ-IDEA-介绍" class="headerlink" title="1.2 IntelliJ IDEA  介绍"></a>1.2 IntelliJ IDEA  介绍</h3><p>IDEA，全称 <code>IntelliJ IDEA</code>，是 Java 语言的集成开发环境，目前已经（基本）<code>代替</code>了Eclipse的使用。IDEA 在业界被公认为是最好的 Java 开发工具（之一），因其<code>功能强悍</code>、<code>设置人性化</code>，而深受Java、大数据、移动端程序员的喜爱。</p><p>IntelliJ IDEA 在 2015 年的官网上这样介绍自己：</p><blockquote><p>Excel at enterprise, mobile and web development with Java, Scala and Groovy,with all the latest modern technologies and frameworks available out of thebox.</p></blockquote><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943600_watermark.png"></p><h3 id="1-3-IDEA的主要优势：-vs-Eclipse"><a href="#1-3-IDEA的主要优势：-vs-Eclipse" class="headerlink" title="1.3 IDEA的主要优势：(vs Eclipse)"></a>1.3 IDEA的主要优势：(vs Eclipse)</h3><p><strong>功能强大：</strong></p><p>① 强大的整合能力。比如：Git、Maven、Spring等</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943546_watermark.png" alt="1576218068631" style="zoom: 67%;" /><p>② 开箱即用的体验（集成版本控制系统、多语言支持的框架随时可用，无需额外安装插件）</p><p><strong>符合人体工程学：</strong></p><p>① 高度智能（快速的智能代码补全、实时代码分析、可靠的重构工具）</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943891_watermark.png"></p><p>② 提示功能的快速、便捷、范围广</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943400_watermark.jpeg"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943956_watermark.png"></p><p>③ 好用的快捷键和代码模板</p><p>④ 精准搜索</p><h3 id="1-4-IDEA-的下载"><a href="#1-4-IDEA-的下载" class="headerlink" title="1.4 IDEA  的下载"></a>1.4 IDEA  的下载</h3><ul><li><p>下载网址： <a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a></p></li><li><p>IDEA 分为两个版本： <code>旗舰版(Ultimate)</code>和 <code>社区版(Community)</code>。</p></li><li><p>IDEA的大版本每年迭代一次，大版本下的小版本（如：2022.x）迭代时间不固定，一般每年3个小版本。</p></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943549_watermark.png" alt="image-20220606191620253"></p><p>两个不同版本的详细对比，可以参照官网：<br><a href="https://www.jetbrains.com/idea/features/editions_comparison_matrix.html">https://www.jetbrains.com/idea/features/editions_comparison_matrix.html</a></p><p>官网提供的详细使用文档：<br><a href="https://www.jetbrains.com/help/idea/meet-intellij-idea.html">https://www.jetbrains.com/help/idea/meet-intellij-idea.html</a></p><h2 id="2-卸载与安装"><a href="#2-卸载与安装" class="headerlink" title="2. 卸载与安装"></a>2. 卸载与安装</h2><h3 id="2-1-卸载过程"><a href="#2-1-卸载过程" class="headerlink" title="2.1 卸载过程"></a>2.1 卸载过程</h3><p>这里以卸载2022.1.2版本为例说明。在【控制面板】找到【卸载程序】</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943386_watermark.png" alt="image-20221019120032582" style="zoom: 80%;" /><p>右键点击或左键双击IntelliJ IDEA 2022.1.2进行卸载：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943944_watermark.png" alt="image-20221019121258294" style="zoom:80%;" /><p>如果需要保留下述数据，就不要打√。如果想彻底删除IDEA所有数据，那就打上√。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943598_watermark.png" alt="image-20221019122135368" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944198_watermark.png" alt="image-20221019122323575" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944700_watermark.png" alt="image-20221019122349195" style="zoom:80%;" /><p>软件卸载完以后，还需要删除其它几个位置的残留：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944085_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944867_watermark.png"></p><h3 id="2-2-安装前的准备"><a href="#2-2-安装前的准备" class="headerlink" title="2.2 安装前的准备"></a>2.2 安装前的准备</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944544_watermark.png"></p><ul><li>64 位 Microsoft Windows 11、10、8</li><li>最低 2 GB 可用 RAM，推荐 8 GB 系统总 RAM</li><li>2.5 GB 硬盘空间，推荐 SSD</li><li>最低屏幕分辨率 1024x768</li></ul><p>从安装上来看，IntelliJ IDEA 对硬件的要求<code>似乎不是很高</code>。可是在实际开发中并不是这样的，因为 IntelliJ IDEA 执行时会有大量的缓存、索引文件，所以如果你正在使用 Eclipse &#x2F; MyEclipse，想通过 IntelliJ IDEA 来解决计算机的卡、慢等问题，这基本上是不可能的，本质上你应该对自己的硬件设备进行升级。</p><h3 id="2-3-安装过程"><a href="#2-3-安装过程" class="headerlink" title="2.3 安装过程"></a>2.3 安装过程</h3><p>1、下载完安装包，双击直接安装<img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944078_watermark.png"></p><p>2、欢迎安装</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944982_watermark.png"></p><p>3、是否删除电脑上低版本的IDEA（如果有，可以选择忽略）</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944842_watermark.png"></p><ul><li><p>如果电脑上有低版本的IDEA，可以选择删除或保留。</p></li><li><p>这里没有卸载旧版本，如果需要卸载，记得勾选下面的保留旧的设置和配置。</p></li></ul><p>4、选择安装目录</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944476_watermark.png"></p><p>选择安装目录，目录中要避免中文和空格。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944212_watermark.png"></p><p>5、创建桌面快捷图标等</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944247_watermark.png"></p><p>确认是否与.java、.groovy、.kt 格式文件进行关联。这里建议不关联。</p><p>6、在【开始】菜单新建一个文件夹（这里需要确认文件夹的名称），来管理IDEA的相关内容。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944825_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944500_watermark.png"></p><p>7、完成安装</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944168_watermark.png"></p><p>重启以后，单击登录：<img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944886_watermark.png"></p><h3 id="2-4-注册"><a href="#2-4-注册" class="headerlink" title="2.4 注册"></a>2.4 注册</h3><p>首先，需要通过用户协议：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944759_watermark.png" alt="image-20221019170223226" style="zoom:80%;" /><p>是否同意发送用户数据（特性、使用的插件、硬件与软件配置等），建议选择：不发送。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944620_watermark.png" alt="image-20221019170301256" style="zoom:80%;" /><p>接着，会提示我们进行注册。</p><ul><li><p>选择1：试用30天。在IDEA2022.1.2版本中，需要先登录，才能开启试用。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944660_watermark.png" alt="image-20221019170638164" style="zoom:80%;" /></li><li><p>选择2：付费购买旗舰版</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944335_watermark.png" alt="image-20221019170740875" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944316_watermark.png" alt="image-20221019170820975" style="zoom:50%;" /></li></ul><h3 id="2-5-闪退问题"><a href="#2-5-闪退问题" class="headerlink" title="2.5 闪退问题"></a>2.5 闪退问题</h3><p>问题描述：2022.1启动不了，双击桌面图标，没有响应。</p><p>解决办法：</p><p>打开<code>C:\Users\songhk\AppData\Roaming\JetBrains\IntelliJIdea2022.1\idea64.exe.vmoptions</code> 这个文件。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944223_watermark.png"></p><p>内容如下所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944169_watermark.png"></p><p>删除红框的数据以后，再登录即可正常进入。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944911_watermark.png"></p><p>原因：之前使用过的比如2021.2.2版本，pojie了。新版IEDA太智能了，把现有的启运参数也都复制过去了。又因为最新的IDEA，不兼容pojie程序-javaagent:D:\develop_tools\IDEA\IntelliJ IDEA 2021.2.2\bin\jetbrains-agent.jar了，所以报错了，所以JVM结束了，所以没有启动画面，凉凉了。</p><h2 id="3-HelloWorld的实现"><a href="#3-HelloWorld的实现" class="headerlink" title="3. HelloWorld的实现"></a>3. HelloWorld的实现</h2><h3 id="3-1-新建Project-Class"><a href="#3-1-新建Project-Class" class="headerlink" title="3.1 新建Project - Class"></a>3.1 新建Project - Class</h3><p>选择”New Project”：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944533_watermark.png" alt="image-20221019174051967" style="zoom:80%;" /><p>指名工程名、使用的JDK版本等信息。如下所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944347_watermark.png"></p><p>接着创建Java类：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944009_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944892_watermark.png"></p><h3 id="3-2-编写代码"><a href="#3-2-编写代码" class="headerlink" title="3.2 编写代码"></a>3.2 编写代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-运行"><a href="#3-3-运行" class="headerlink" title="3.3 运行"></a>3.3 运行</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944389_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944654_watermark.png"></p><h2 id="4-JDK相关设置"><a href="#4-JDK相关设置" class="headerlink" title="4. JDK相关设置"></a>4. JDK相关设置</h2><h3 id="4-1-项目的JDK设置"><a href="#4-1-项目的JDK设置" class="headerlink" title="4.1 项目的JDK设置"></a>4.1 项目的JDK设置</h3><p><code>File--&gt;Project Structure...--&gt;Platform Settings --&gt;SDKs</code></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944177_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944932_watermark.png"></p><ul><li>注1：SDKs全称是Software Development Kit ，这里一定是选择JDK的安装根目录，不是JRE的目录。</li><li>注2：这里还可以从本地添加多个JDK。使用“+”即可实现。</li></ul><h3 id="4-2-out目录和编译版本"><a href="#4-2-out目录和编译版本" class="headerlink" title="4.2 out目录和编译版本"></a>4.2 out目录和编译版本</h3><p><code>File--&gt;Project Structure...--&gt;Project Settings --&gt;Project</code></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944449_watermark.png"></p><h2 id="5-详细设置"><a href="#5-详细设置" class="headerlink" title="5. 详细设置"></a>5. 详细设置</h2><h3 id="5-1-如何打开详细配置界面"><a href="#5-1-如何打开详细配置界面" class="headerlink" title="5.1 如何打开详细配置界面"></a>5.1 如何打开详细配置界面</h3><p>1、显示工具栏</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944125_watermark.png"></p><p>2、选择详细配置菜单或按钮</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944877_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945421_watermark.png"></p><h3 id="5-2-系统设置"><a href="#5-2-系统设置" class="headerlink" title="5.2 系统设置"></a>5.2 系统设置</h3><h4 id="1、默认启动项目配置"><a href="#1、默认启动项目配置" class="headerlink" title="1、默认启动项目配置"></a>1、默认启动项目配置</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945220_watermark.png"></p><p>启动IDEA时，默认自动打开上次开发的项目？还是自己选择？</p><p>如果去掉Reopen projects on startup前面的对勾，每次启动IDEA就会出现如下界面：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945994_watermark.png"></p><h4 id="2、取消自动更新"><a href="#2、取消自动更新" class="headerlink" title="2、取消自动更新"></a>2、取消自动更新</h4><p>Settings–&gt;Appearance &amp; Behavior-&gt;System Settings -&gt; Updates</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945449_watermark.png"></p><p>默认都打√了，建议检查IDE更新的√去掉，检查插件更新的√选上。</p><h3 id="5-3-设置整体主题"><a href="#5-3-设置整体主题" class="headerlink" title="5.3 设置整体主题"></a>5.3 设置整体主题</h3><h4 id="1、选择主题"><a href="#1、选择主题" class="headerlink" title="1、选择主题"></a>1、选择主题</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945795_watermark.png"></p><h4 id="2、设置菜单和窗口字体和大小"><a href="#2、设置菜单和窗口字体和大小" class="headerlink" title="2、设置菜单和窗口字体和大小"></a>2、设置菜单和窗口字体和大小</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945736_watermark.png"></p><h4 id="3、设置IDEA背景图"><a href="#3、设置IDEA背景图" class="headerlink" title="3、设置IDEA背景图"></a>3、设置IDEA背景图</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945901_watermark.png"></p><p>选择一张合适的图片作为背景，即可。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945114_watermark.png"></p><h3 id="5-4-设置编辑器主题样式"><a href="#5-4-设置编辑器主题样式" class="headerlink" title="5.4 设置编辑器主题样式"></a>5.4 设置编辑器主题样式</h3><h4 id="1、编辑器主题"><a href="#1、编辑器主题" class="headerlink" title="1、编辑器主题"></a>1、编辑器主题</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945741_watermark.png"></p><h4 id="2、字体大小"><a href="#2、字体大小" class="headerlink" title="2、字体大小"></a>2、字体大小</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945710_watermark.png"></p><p>更详细的字体与颜色如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945310_watermark.png"></p><blockquote><p>温馨提示：如果选择某个font字体，中文乱码，可以在fallback font（备选字体）中选择一个支持中文的字体。</p></blockquote><h4 id="3、注释的字体颜色"><a href="#3、注释的字体颜色" class="headerlink" title="3、注释的字体颜色"></a>3、注释的字体颜色</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945619_watermark.png"></p><ul><li>Block comment：修改多行注释的字体颜色</li><li>Doc Comment –&gt; Text：修改文档注释的字体颜色</li><li>Line comment：修改单行注释的字体颜色</li></ul><h3 id="5-5-显示行号与方法分隔符"><a href="#5-5-显示行号与方法分隔符" class="headerlink" title="5.5 显示行号与方法分隔符"></a>5.5 显示行号与方法分隔符</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945956_watermark.png"></p><h3 id="5-6-代码智能提示功能"><a href="#5-6-代码智能提示功能" class="headerlink" title="5.6 代码智能提示功能"></a>5.6 代码智能提示功能</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945813_watermark.png"></p><p>IntelliJ IDEA 的代码提示和补充功能有一个特性：<code>区分大小写</code>。 如果想不区分大小写的话，就把这个对勾去掉。<code>建议去掉勾选</code>。</p><h3 id="5-7-自动导包配置"><a href="#5-7-自动导包配置" class="headerlink" title="5.7 自动导包配置"></a>5.7 自动导包配置</h3><ul><li>默认需要自己手动导包，Alt+Enter快捷键</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945731_watermark.png"></p><ul><li>自动导包设置<ul><li>动态导入明确的包：Add unambiguous imports on the fly，该设置具有全局性；</li><li>优化动态导入的包：Optimize imports on the fly，该设置只对当前项目有效；</li></ul></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945757_watermark.png"></p><h3 id="5-8-设置项目文件编码（一定要改）"><a href="#5-8-设置项目文件编码（一定要改）" class="headerlink" title="5.8 设置项目文件编码（一定要改）"></a>5.8 设置项目文件编码（一定要改）</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945515_watermark.png"></p><p>说明： Transparent native-to-ascii conversion主要用于转换ascii，显式原生内容。一般都要勾选。</p><h3 id="5-9-设置控制台的字符编码"><a href="#5-9-设置控制台的字符编码" class="headerlink" title="5.9 设置控制台的字符编码"></a>5.9 设置控制台的字符编码</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945136_watermark.png"></p><h3 id="5-10-修改类头的文档注释信息"><a href="#5-10-修改类头的文档注释信息" class="headerlink" title="5.10 修改类头的文档注释信息"></a>5.10 修改类头的文档注释信息</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945852_watermark.png"></p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ClassName: $&#123;NAME&#125;</span><br><span class="hljs-comment">* Package: $&#123;PACKAGE_NAME&#125;</span><br><span class="hljs-comment">* Description: </span><br><span class="hljs-comment">* <span class="hljs-doctag">@Author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Create</span> $&#123;DATE&#125; $&#123;TIME&#125; </span><br><span class="hljs-comment">* <span class="hljs-doctag">@Version</span> 1.0   </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>常用的预设的变量，这里直接贴出官网给的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;PACKAGE_NAME&#125; - the name of the target <span class="hljs-keyword">package</span> where the <span class="hljs-keyword">new</span> <span class="hljs-title class_">class</span> or <span class="hljs-keyword">interface</span> <span class="hljs-title class_">will</span> be created. <br>$&#123;PROJECT_NAME&#125; - the name of the current project. <br>$&#123;FILE_NAME&#125; - the name of the PHP file that will be created. <br>$&#123;NAME&#125; - the name of the <span class="hljs-keyword">new</span> <span class="hljs-title class_">file</span> which you specify in the New File dialog box during the file creation. <br>$&#123;USER&#125; - the login name of the current user. <br>$&#123;DATE&#125; - the current system date. <br>$&#123;TIME&#125; - the current system time. <br>$&#123;YEAR&#125; - the current year. <br>$&#123;MONTH&#125; - the current month. <br>$&#123;DAY&#125; - the current day of the month. <br>$&#123;HOUR&#125; - the current hour. <br>$&#123;MINUTE&#125; - the current minute. <br>$&#123;PRODUCT_NAME&#125; - the name of the IDE in which the file will be created. <br>$&#123;MONTH_NAME_SHORT&#125; - the first <span class="hljs-number">3</span> letters of the month name. Example: Jan, Feb, etc. <br>$&#123;MONTH_NAME_FULL&#125; - full name of a month. Example: January, February, etc.<br><br></code></pre></td></tr></table></figure><h3 id="5-11-设置自动编译"><a href="#5-11-设置自动编译" class="headerlink" title="5.11 设置自动编译"></a>5.11 设置自动编译</h3><p><code>Settings--&gt;Build,Execution,Deployment--&gt;Compiler</code></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945536_watermark.png" alt="1655109415450" style="zoom: 67%;" /><h3 id="5-12-设置为省电模式-可忽略"><a href="#5-12-设置为省电模式-可忽略" class="headerlink" title="5.12 设置为省电模式 (可忽略)"></a>5.12 设置为省电模式 (可忽略)</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945170_watermark.png"></p><p>IntelliJ IDEA 有一种叫做<code>省电模式</code>的状态，开启这种模式之后 IntelliJ IDEA 会<code>关掉代码检查</code>和<code>代码提示</code>等功能。所以一般也可认为这是一种<code>阅读模式</code>，如果你在开发过程中遇到突然代码文件不能进行检查和提示，可以来看看这里是否有开启该功能。</p><h3 id="5-13-取消双击shift搜索"><a href="#5-13-取消双击shift搜索" class="headerlink" title="5.13 取消双击shift搜索"></a>5.13 取消双击shift搜索</h3><p>因为我们按shift切换中英文输入方式，经常被按到，总是弹出搜索框，太麻烦了。可以取消它。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945771_watermark.png" alt="1659191272699" style="zoom:80%;" /><ul><li>方式1：适用于IDEA 2022.1.2版本</li></ul><p>在2022.1版本中，采用如下方式消双击shift出现搜索框：搜索double即可，勾选Disable double modifier key shortcuts，禁用这个选项。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945200_watermark.png"></p><ul><li>方式2：适用于IDEA 2022.1.2之前版本</li></ul><p>双击shift 或 ctrl + shift + a，打开如下搜索窗口：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945951_watermark.png"></p><p>选择registry…，找到”ide.suppress.double.click.handler”，把复选框打上勾就可以取消双击shift出现搜索框了。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945804_watermark.png"></p><h2 id="6-工程与模块管理"><a href="#6-工程与模块管理" class="headerlink" title="6. 工程与模块管理"></a>6. 工程与模块管理</h2><h3 id="6-1-IDEA项目结构"><a href="#6-1-IDEA项目结构" class="headerlink" title="6.1 IDEA项目结构"></a>6.1 IDEA项目结构</h3><p><strong>层级关系：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">project</span>(工程) - <span class="hljs-built_in">module</span>(模块) - <span class="hljs-built_in">package</span>(包) - <span class="hljs-built_in">class</span>(类)<br></code></pre></td></tr></table></figure><p><strong>具体的：</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">一个project中可以创建多个<span class="hljs-keyword">module</span><br><br>一个<span class="hljs-keyword">module</span>中可以创建多个<span class="hljs-keyword">package</span><br><br>一个<span class="hljs-keyword">package</span>中可以创建多个<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><blockquote><p>这些结构的划分，是为了方便管理功能代码。</p></blockquote><h3 id="6-2-Project和Module的概念"><a href="#6-2-Project和Module的概念" class="headerlink" title="6.2 Project和Module的概念"></a>6.2 Project和Module的概念</h3><p>在 IntelliJ IDEA 中，提出了Project和Module这两个概念。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945054_watermark.png" alt="image-20220523014358169" style="zoom:80%;" /><p>在 IntelliJ IDEA 中Project是<code>最顶级的结构单元</code>，然后就是Module。目前，主流的大型项目结构基本都是多Module的结构，这类项目一般是<code>按功能划分</code>的，比如：user-core-module、user-facade-module和user-hessian-module等等，模块之间彼此可以<code>相互依赖</code>，有着不可分割的业务关系。因此，对于一个Project来说：</p><ul><li>当为单Module项目的时候，这个单独的Module实际上就是一个Project。</li><li>当为多Module项目的时候，多个模块处于同一个Project之中，此时彼此之间具有<code>互相依赖</code>的关联关系。</li><li>当然多个模块没有建立依赖关系的话，也可以作为单独一个“小项目”运行。</li></ul><h3 id="6-3-Module和Package"><a href="#6-3-Module和Package" class="headerlink" title="6.3 Module和Package"></a>6.3 Module和Package</h3><p>在一个module下，可以声明多个包（package），一般命名规范如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>.不要有中文<br><span class="hljs-number">2</span>.不要以数字开头<br><span class="hljs-number">3</span>.给包取名时一般都是公司域名倒着写,而且都是小写<br>  比如：尚硅谷网址是www<span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.com</span><br>  那么我们的package包名应该写成：com<span class="hljs-selector-class">.atguigu</span>.子名字。<br></code></pre></td></tr></table></figure><h3 id="6-4-创建Module"><a href="#6-4-创建Module" class="headerlink" title="6.4 创建Module"></a>6.4 创建Module</h3><p>建议创建“Empty空工程”，然后创建多模块，每一个模块可以独立运行，相当于一个小项目。JavaSE阶段不涉及到模块之间的依赖。后期再学习模块之间的依赖。</p><p>步骤：</p><p>（1）选择创建模块</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945543_watermark.png"></p><p>（2）选择模块类型：这里选择创建Java模块，给模块命名，确定存放位置</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945364_watermark.png"></p><p>（4）模块声明在工程下面</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946315_watermark.png"></p><h3 id="6-5-删除模块"><a href="#6-5-删除模块" class="headerlink" title="6.5 删除模块"></a>6.5 删除模块</h3><p>（1）移除模块</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946229_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946245_watermark.png"></p><p>（2）彻底删除模块</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946649_watermark.png"></p><h3 id="6-6-导入老师的模块"><a href="#6-6-导入老师的模块" class="headerlink" title="6.6 导入老师的模块"></a>6.6 导入老师的模块</h3><p>（1）将老师的模块<code>teacher_chapter04</code>整个的复制到自己IDEA项目的路径下</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946306_watermark.png"></p><p>接着打开自己IDEA的项目，会在项目目录下看到拷贝过来的module，只不过不是以模块的方式呈现。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946604_watermark.png"></p><p>（2）查看Project Structure，选择import module</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946568_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946599_watermark.png"></p><p>（3）选择要导入的module：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946293_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946054_watermark.png"></p><p>（4）接着可以一路Next下去，最后选择Overwrite</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946985_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946653_watermark.png"></p><p>最后点击OK即可了。</p><h3 id="6-7-同时打开两个IDEA项目工程"><a href="#6-7-同时打开两个IDEA项目工程" class="headerlink" title="6.7 同时打开两个IDEA项目工程"></a>6.7 同时打开两个IDEA项目工程</h3><h4 id="1、两个IDEA项目工程效果"><a href="#1、两个IDEA项目工程效果" class="headerlink" title="1、两个IDEA项目工程效果"></a>1、两个IDEA项目工程效果</h4><p>有些同学想要把上课练习代码和作业代码分开两个IDEA项目工程。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946384_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946014_watermark.png"></p><h4 id="2、新建一个IDEA项目"><a href="#2、新建一个IDEA项目" class="headerlink" title="2、新建一个IDEA项目"></a>2、新建一个IDEA项目</h4><p>注意：第一次需要新建，之后直接打开项目工程即可</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946470_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946835_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946798_watermark.png"></p><h4 id="3、打开两个IDEA项目"><a href="#3、打开两个IDEA项目" class="headerlink" title="3、打开两个IDEA项目"></a>3、打开两个IDEA项目</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946369_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946102_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946757_watermark.png"></p><h3 id="6-8-导入前几章非IDEA工程代码"><a href="#6-8-导入前几章非IDEA工程代码" class="headerlink" title="6.8 导入前几章非IDEA工程代码"></a>6.8 导入前几章非IDEA工程代码</h3><p><strong>1、创建chapter01、chapter02、chapter03等章节的module</strong></p><p>将相应章节的源文件粘贴到module的src下。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946320_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946790_watermark.png"></p><p>打开其中各个源文件，会发现有乱码。比如：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946490_watermark.png"></p><p><strong>2、设置编码</strong></p><p>当前项目是UTF-8。如果原来的.java文件都是GBK的（如果原来.java文件有的是GBK，有的是UTF-8就比较麻烦了）。</p><p>可以单独把这两个模块设置为GBK编码的。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946004_watermark.png"></p><p>改为GBK，确认即可。如图：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946364_watermark.png"></p><h2 id="7-代码模板的使用"><a href="#7-代码模板的使用" class="headerlink" title="7. 代码模板的使用"></a>7. 代码模板的使用</h2><h3 id="7-1-查看Postfix-Completion模板-后缀补全"><a href="#7-1-查看Postfix-Completion模板-后缀补全" class="headerlink" title="7.1 查看Postfix Completion模板(后缀补全)"></a>7.1 查看Postfix Completion模板(后缀补全)</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946298_watermark.png"></p><h3 id="7-2-查看Live-Templates模板-实时模板"><a href="#7-2-查看Live-Templates模板-实时模板" class="headerlink" title="7.2 查看Live Templates模板(实时模板)"></a>7.2 查看Live Templates模板(实时模板)</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946225_watermark.jpeg"></p><h3 id="7-3-常用代码模板"><a href="#7-3-常用代码模板" class="headerlink" title="7.3 常用代码模板"></a>7.3 常用代码模板</h3><h4 id="1、非空判断"><a href="#1、非空判断" class="headerlink" title="1、非空判断"></a>1、非空判断</h4><ul><li>变量.null：if(变量 &#x3D;&#x3D; null)</li><li>变量.nn：if(变量 !&#x3D; null) </li><li>变量.notnull：if(变量 !&#x3D; null) </li><li>ifn：if(xx  &#x3D;&#x3D; null)</li><li>inn：if(xx  !&#x3D; null)</li></ul><h4 id="2、遍历数组和集合"><a href="#2、遍历数组和集合" class="headerlink" title="2、遍历数组和集合"></a>2、遍历数组和集合</h4><ul><li>数组或集合变量.fori：for循环</li><li>数组或集合变量.for：增强for循环</li><li>数组或集合变量.forr：反向for循环</li><li>数组或集合变量.iter：增强for循环遍历数组或集合</li></ul><h4 id="3、输出语句"><a href="#3、输出语句" class="headerlink" title="3、输出语句"></a>3、输出语句</h4><ul><li>sout：相当于System.out.println</li><li>soutm：打印当前方法的名称</li><li>soutp：打印当前方法的形参及形参对应的实参值</li><li>soutv：打印方法中声明的最近的变量的值</li><li>变量.sout：打印当前变量值</li><li>变量.soutv：打印当前变量名及变量值</li></ul><h4 id="4、对象操作"><a href="#4、对象操作" class="headerlink" title="4、对象操作"></a>4、对象操作</h4><ul><li>创建对象<ul><li>Xxx.new  .var ：创建Xxx类的对象，并赋给相应的变量</li><li>Xxx.new  .field：会将方法内刚创建的Xxx对象抽取为一个属性</li></ul></li><li>强转<ul><li>对象.cast：将对象进行强转</li><li>对象.castvar：将对象强转后，并赋给一个变量</li></ul></li></ul><h4 id="5、静态常量声明"><a href="#5、静态常量声明" class="headerlink" title="5、静态常量声明"></a>5、静态常量声明</h4><ul><li>psf：public static final</li><li>psfi：public static final int</li><li>psfs：public static final String</li><li>prsf：private static final</li></ul><h3 id="7-4-自定义代码模板"><a href="#7-4-自定义代码模板" class="headerlink" title="7.4 自定义代码模板"></a>7.4 自定义代码模板</h3><h4 id="7-4-1-自定义后缀补全模板"><a href="#7-4-1-自定义后缀补全模板" class="headerlink" title="7.4.1 自定义后缀补全模板"></a>7.4.1 自定义后缀补全模板</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946866_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946462_watermark.png"></p><h4 id="7-4-2-自定义Live-Templates"><a href="#7-4-2-自定义Live-Templates" class="headerlink" title="7.4.2 自定义Live Templates"></a>7.4.2 自定义Live Templates</h4><p>例如：定义sop代表System.out.print();语句</p><p>①在Live Templates中增加模板</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946103_watermark.png"></p><p>②先定义一个模板的组，这样方便管理所有自定义的代码模板</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946859_watermark.png"></p><p>③在模板组里新建模板</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946819_watermark.png"></p><p>④定义模板（以输出语句为例）</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947459_watermark.png"></p><ul><li>Abbreviation：模板的缩略名称</li><li>Description：模板的描述</li><li>Template text：模板的代码片段</li><li>模板应用范围。比如点击Define。选择如下：应用在java代码中。</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947412_watermark.png"></p><p><strong>其它模板1：单元测试模板：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> test$var1$()&#123;<br>    $var2$<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947280_watermark.png"></p><p><strong>其它模板2：创建多线程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        $<span class="hljs-keyword">var</span>$<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947793_watermark.png"></p><p><strong>其它模板3：冒泡排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">$INDEX$</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; $INDEX$ &lt; $ARRAY$.length; $INDEX$++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">$INDEX2$</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; $INDEX2$ &lt; $ARRAY$.length-$INDEX$; $INDEX2$++) &#123;<br>        <span class="hljs-keyword">if</span>($ARRAY$[$INDEX2$] &gt; $ARRAY$[$INDEX2$+<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-type">$ELEMENT_TYPE$</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> $ARRAY$[$INDEX2$];<br>            $ARRAY$[$INDEX2$] = $ARRAY$[$INDEX2$+<span class="hljs-number">1</span>];<br>            $ARRAY$[$INDEX2$+<span class="hljs-number">1</span>] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947748_watermark.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流程控制语句</title>
    <link href="/2024/02/22/3.%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/02/22/3.%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1. 顺序结构"></a>1. 顺序结构</h2><p>顺序结构就是程序<code>从上到下逐行</code>地执行。表达式语句都是顺序执行的。并且上一行对某个变量的修改对下一行会产生影响。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732479_watermark.png" alt="image-20211218093256771"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatementTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>System.out.println(<span class="hljs-string">&quot;x = &quot;</span> + x);<br>        System.out.println(<span class="hljs-string">&quot;y = &quot;</span> + y);<br>        <span class="hljs-comment">//对x、y的值进行修改</span><br>        x++;<br>        y = <span class="hljs-number">2</span> * x + y;<br>        x = x * <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;x = &quot;</span> + x);<br>        System.out.println(<span class="hljs-string">&quot;y = &quot;</span> + y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java中定义变量时采用合法的<code>前向引用</code>。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num1 + <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>错误形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num1 + <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-分支语句"><a href="#2-分支语句" class="headerlink" title="2. 分支语句"></a>2. 分支语句</h2><h3 id="2-1-if-else条件判断结构"><a href="#2-1-if-else条件判断结构" class="headerlink" title="2.1 if-else条件判断结构"></a>2.1 if-else条件判断结构</h3><h4 id="2-1-1-基本语法"><a href="#2-1-1-基本语法" class="headerlink" title="2.1.1 基本语法"></a>2.1.1 基本语法</h4><p><strong>结构1：单分支条件判断：if</strong></p><p><code>格式：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(条件表达式)｛<br>  语句块;<br>｝<br></code></pre></td></tr></table></figure><p><code>说明：</code>条件表达式必须是布尔表达式（关系表达式或逻辑表达式）或 布尔变量。</p><p><code>执行流程：</code></p><ol><li>首先判断条件表达式看其结果是true还是false</li><li>如果是true就执行语句块</li><li>如果是false就不执行语句块</li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732538_watermark.png" alt="image-20220514160139926"></p><p><strong>结构2：双分支条件判断：if…else</strong></p><p><code>格式：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(条件表达式) &#123; <br>  语句块<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>  语句块<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>执行流程：</code></p><ol><li>首先判断条件表达式看其结果是true还是false</li><li>如果是true就执行语句块1</li><li>如果是false就执行语句块2</li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732497_watermark.png" alt="image-20220514160243421"></p><p><strong>结构3：多分支条件判断：if…else if…else</strong></p><p><code>格式：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;<br>  语句块<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>) &#123;<br>  语句块<span class="hljs-number">2</span>;<br>&#125;<br>...<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式n) &#123;<br> 语句块n;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  语句块n+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>说明：</code>一旦条件表达式为true，则进入执行相应的语句块。执行完对应的语句块之后，就跳出当前结构。</p><p><code>执行流程：</code></p><ol><li>首先判断关系表达式1看其结果是true还是false</li><li>如果是true就执行语句块1，然后结束当前多分支</li><li>如果是false就继续判断关系表达式2看其结果是true还是false</li><li>如果是true就执行语句块2，然后结束当前多分支</li><li>如果是false就继续判断关系表达式…看其结果是true还是false</li></ol><p>​    …</p><p>   n.  如果没有任何关系表达式为true，就执行语句块n+1，然后结束当前多分支。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732574_watermark.png" alt="image-20220514160538651"></p><h4 id="2-1-2-应用举例"><a href="#2-1-2-应用举例" class="headerlink" title="2.1.2 应用举例"></a>2.1.2 应用举例</h4><p><strong>案例1：</strong>成年人心率的正常范围是每分钟60-100次。体检时，如果心率不在此范围内，则提示需要做进一步的检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">heartBeats</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br><br>        <span class="hljs-keyword">if</span>(heartBeats &lt; <span class="hljs-number">60</span> || heartBeats &gt; <span class="hljs-number">100</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;你需要做进一步的检查&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;体检结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>定义一个整数，判定是偶数还是奇数    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-keyword">if</span>(a % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(a + <span class="hljs-string">&quot;是偶数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            System.out.println(a + <span class="hljs-string">&quot;是奇数&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">岳小鹏参加Java考试，他和父亲岳不群达成承诺：<br>如果：<br>成绩为<span class="hljs-number">100</span>分时，奖励一辆跑车；<br>成绩为(<span class="hljs-number">80</span>，<span class="hljs-number">99</span>]时，奖励一辆山地自行车；<br>当成绩为<span class="hljs-selector-attr">[60,80]</span>时，奖励环球影城一日游；<br>其它时，胖揍一顿。<br><br>说明：默认成绩是在<span class="hljs-selector-attr">[0,100]</span>范围内<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">67</span>;<span class="hljs-comment">//岳小鹏的期末成绩</span><br>        <span class="hljs-comment">//写法一：默认成绩范围为[0,100]</span><br>        <span class="hljs-keyword">if</span>(score == <span class="hljs-number">100</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励一辆跑车&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">80</span> &amp;&amp; score &lt;= <span class="hljs-number">99</span>)&#123;    <span class="hljs-comment">//错误的写法：&#125;else if(80 &lt; score &lt;= 99)&#123;</span><br>            System.out.println(<span class="hljs-string">&quot;奖励一辆山地自行车&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">60</span> &amp;&amp; score &lt;= <span class="hljs-number">80</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励环球影城玩一日游&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//else&#123;</span><br>        <span class="hljs-comment">//System.out.println(&quot;胖揍一顿&quot;);</span><br>        <span class="hljs-comment">//&#125;</span><br><br><br>        <span class="hljs-comment">//写法二：</span><br>        <span class="hljs-comment">// 默认成绩范围为[0,100]</span><br>        <span class="hljs-keyword">if</span>(score == <span class="hljs-number">100</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励一辆跑车&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">80</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励一辆山地自行车&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">60</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励环球影城玩一日游&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;胖揍一顿&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732610_watermark.png" alt="image-20221027185234087"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732592_watermark.png" alt="image-20221027185500389"></p><blockquote><p>当条件表达式之间是“<code>互斥</code>”关系时（即彼此没有交集），条件判断语句及执行语句间顺序无所谓。</p><p>当条件表达式之间是“<code>包含</code>”关系时，“<code>小上大下 / 子上父下</code>”，否则范围小的条件表达式将不可能被执行。</p></blockquote><h4 id="2-1-3-if…else嵌套"><a href="#2-1-3-if…else嵌套" class="headerlink" title="2.1.3 if…else嵌套"></a>2.1.3 if…else嵌套</h4><p>在 if 的语句块中，或者是在else语句块中，又包含了另外一个条件判断（可以是单分支、双分支、多分支），就构成了<code>嵌套结构</code>。</p><p><strong>执行的特点：</strong><br>（1）如果是嵌套在if语句块中的，只有当外部的if条件满足，才会去判断内部的条件<br>（2）如果是嵌套在else语句块中的，只有当外部的if条件不满足，进入else后，才会去判断内部的条件</p><p><strong>案例4：</strong>由键盘输入三个整数分别存入变量num1、num2、num3，对它们进行排序(使用 if-else if-else)，并且从小到大输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//声明num1,num2,num3三个变量并赋值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>,num2 = <span class="hljs-number">32</span>,num3 = <span class="hljs-number">12</span>;<br><br><span class="hljs-keyword">if</span>(num1 &gt;= num2)&#123;<br><br><span class="hljs-keyword">if</span>(num3 &gt;= num1)<br>System.out.println(num2 + <span class="hljs-string">&quot;-&quot;</span> + num1 + <span class="hljs-string">&quot;-&quot;</span> + num3);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num3 &lt;= num2)<br>System.out.println(num3 + <span class="hljs-string">&quot;-&quot;</span> + num2 + <span class="hljs-string">&quot;-&quot;</span> + num1);<br><span class="hljs-keyword">else</span><br>System.out.println(num2 + <span class="hljs-string">&quot;-&quot;</span> + num3 + <span class="hljs-string">&quot;-&quot;</span> + num1);<br>&#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//num1 &lt; num2</span><br><br><span class="hljs-keyword">if</span>(num3 &gt;= num2)&#123;<br>System.out.println(num1 + <span class="hljs-string">&quot;-&quot;</span> + num2 + <span class="hljs-string">&quot;-&quot;</span> + num3);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num3 &lt;= num1)&#123;<br>System.out.println(num3 + <span class="hljs-string">&quot;-&quot;</span> + num1 + <span class="hljs-string">&quot;-&quot;</span> + num2);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(num1 + <span class="hljs-string">&quot;-&quot;</span> + num3 + <span class="hljs-string">&quot;-&quot;</span> + num2);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-4-其它说明"><a href="#2-1-4-其它说明" class="headerlink" title="2.1.4 其它说明"></a>2.1.4 其它说明</h4><ul><li>语句块只有一条执行语句时，一对<code>&#123;&#125;可以省略</code>，但建议保留</li><li>当if-else结构是“多选一”时，最后的<code>else是可选的</code>，根据需要可以省略</li></ul><h4 id="2-1-5-练习"><a href="#2-1-5-练习" class="headerlink" title="2.1.5 练习"></a>2.1.5 练习</h4><p><strong>练习1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1)对下列代码，若有输出，指出输出结果。</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">2</span>) &#123;<br>       <span class="hljs-keyword">if</span> (y &gt; <span class="hljs-number">2</span>) <br>            System.out.println(x + y);<br>       System.out.println(<span class="hljs-string">&quot;atguigu&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span><br>       System.out.println(<span class="hljs-string">&quot;x is &quot;</span> + x);<br><br><br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//如果写成if(b=false)能编译通过吗？如果能，结果是？</span><br><span class="hljs-keyword">if</span>(b == <span class="hljs-literal">false</span>)  <span class="hljs-comment">//建议：if(!b)</span><br>System.out.println(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b)<br>System.out.println(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!b)<br>System.out.println(<span class="hljs-string">&quot;c&quot;</span>);<br><span class="hljs-keyword">else</span><br>System.out.println(<span class="hljs-string">&quot;d&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>练习3：</strong></p><p>定义两个整数，分别为small 和 big，如果第一个整数small大于第二个整数big，就交换。输出显示small和big变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">small</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">big</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br><br>        <span class="hljs-keyword">if</span> (small &gt; big) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> small;<br>            small = big;<br>            big = temp;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;small=&quot;</span> + small + <span class="hljs-string">&quot;,big=&quot;</span> + big);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习4：</strong>小明参加期末Java考试，通过考试成绩，判断其Java等级，成绩范围[0,100]</p><ul><li>90-100      优秀</li><li>80-89        好</li><li>70-79        良</li><li>60-69        及格</li><li>60以下    不及格</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-comment">//写法一：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;小明的期末Java成绩是：[0,100]&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br><br>        <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">0</span> || score &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩是错误的&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">90</span> &amp;&amp; score &lt;= <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于优秀&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">80</span> &amp;&amp; score &lt; <span class="hljs-number">90</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于好&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">70</span> &amp;&amp; score &lt; <span class="hljs-number">80</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于良&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span> &amp;&amp; score &lt; <span class="hljs-number">70</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于及格&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于不及格&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-comment">//写法二：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;小明的期末Java成绩是：[0,100]&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br><br>        <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">0</span> || score &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩是错误的&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">90</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于优秀&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">80</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于好&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">70</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于良&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于及格&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于不及格&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习5：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">编写程序，声明<span class="hljs-number">2</span>个<span class="hljs-built_in">int</span>型变量并赋值。判断两数之和，如果大于等于<span class="hljs-number">50</span>，打印“hello world!”<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer5</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>, num2 = <span class="hljs-number">32</span>;<br>        <br>        <span class="hljs-keyword">if</span> (num1 + num2 &gt;= <span class="hljs-number">50</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习6：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">编写程序，声明<span class="hljs-number">2</span>个<span class="hljs-built_in">double</span>型变量并赋值。判断第一个数大于<span class="hljs-number">10.0</span>，且第<span class="hljs-number">2</span>个数小于<span class="hljs-number">20.0</span>，打印两数之和。否则，打印两数的乘积。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer6</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">21.2</span>,d2 = <span class="hljs-number">12.3</span>;<br>        <br>        <span class="hljs-keyword">if</span>(d1 &gt; <span class="hljs-number">10.0</span> &amp;&amp; d2 &lt; <span class="hljs-number">20.0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;两数之和为：&quot;</span> + (d1 + d2));<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;两数乘积为：&quot;</span> + (d1 * d2));<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习7：判断水的温度</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">如果大于95℃，则打印“开水”；<br><br>如果大于70℃且小于等于95℃，则打印“热水”；<br><br>如果大于40℃且小于等于70℃，则打印“温水”；<br><br>如果小于等于40℃，则打印“凉水”。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer7</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">waterTemperature</span> <span class="hljs-operator">=</span> <span class="hljs-number">85</span>;<br>        <br>        <span class="hljs-keyword">if</span>(waterTemperature &gt; <span class="hljs-number">95</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;开水&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(waterTemperature &gt; <span class="hljs-number">70</span> &amp;&amp; waterTemperature &lt;= <span class="hljs-number">95</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;热水&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(waterTemperature &gt; <span class="hljs-number">40</span> &amp;&amp; waterTemperature &lt;= <span class="hljs-number">70</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;温水&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;凉水&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-switch-case选择结构"><a href="#2-2-switch-case选择结构" class="headerlink" title="2.2 switch-case选择结构"></a>2.2 switch-case选择结构</h3><h4 id="2-2-1-基本语法"><a href="#2-2-1-基本语法" class="headerlink" title="2.2.1 基本语法"></a>2.2.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>    <span class="hljs-keyword">case</span> 常量值<span class="hljs-number">1</span>:<br>        语句块<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//break;</span><br>    <span class="hljs-keyword">case</span> 常量值<span class="hljs-number">2</span>:<br>        语句块<span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//break; </span><br>    <span class="hljs-comment">// ...</span><br>   [<span class="hljs-keyword">default</span>:<br>        语句块n+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行流程图：</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221905701_watermark.png" alt="image-20240222190313948"></p><p><strong>执行过程：</strong></p><p>第1步：根据switch中表达式的值，依次匹配各个case。如果表达式的值等于某个case中的常量值，则执行对应case中的执行语句。</p><p>第2步：执行完此case的执行语句以后，<br>​              情况1：如果遇到break,则执行break并跳出当前的switch-case结构<br>​        情况2：如果没有遇到break，则会继续执行当前case之后的其它case中的执行语句。—&gt;case穿透<br>​         …<br>​        直到遇到break关键字或执行完所有的case及default的执行语句，跳出当前的switch-case结构</p><p><strong>使用注意点：</strong></p><ul><li><p>switch(表达式)中表达式的值必须是下述几种类型之一：byte，short，char，int，枚举 (jdk 5.0)，String (jdk 7.0)；</p></li><li><p>case子句中的值必须是常量，不能是变量名或不确定的表达式值或范围；</p></li><li><p>同一个switch语句，所有case子句中的常量值互不相同；</p></li><li><p>break语句用来在执行完一个case分支后使程序跳出switch语句块；</p><p>如果没有break，程序会顺序执行到switch结尾；</p></li><li><p>default子句是可选的。同时，位置也是灵活的。当没有匹配的case时，执行default语句。</p></li></ul><h4 id="2-2-2-应用举例"><a href="#2-2-2-应用举例" class="headerlink" title="2.2.2 应用举例"></a>2.2.2 应用举例</h4><p><strong>案例1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">switch</span>(num)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>System.out.println(<span class="hljs-string">&quot;zero&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>System.out.println(<span class="hljs-string">&quot;one&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>System.out.println(<span class="hljs-string">&quot;two&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>System.out.println(<span class="hljs-string">&quot;three&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;other&quot;</span>);<br><span class="hljs-comment">//break;</span><br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">season</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;summer&quot;</span>;<br>        <span class="hljs-keyword">switch</span> (season) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;spring&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;春暖花开&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;summer&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;夏日炎炎&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;autumn&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;秋高气爽&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;winter&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;冬雪皑皑&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;季节输入有误&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>错误举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">switch</span>(key)&#123;<br><span class="hljs-keyword">case</span> key &gt; <span class="hljs-number">0</span> :<br>        System.out.println(<span class="hljs-string">&quot;正数&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> key &lt; <span class="hljs-number">0</span>:<br>        System.out.println(<span class="hljs-string">&quot;负数&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;零&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>使用switch-case实现：对学生成绩大于60分的，输出“合格”。低于60分的，输出“不合格”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">67</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">写法1：极不推荐</span><br><span class="hljs-comment">switch(score)&#123;</span><br><span class="hljs-comment">case 0:</span><br><span class="hljs-comment">System.out.println(&quot;不及格&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 1:</span><br><span class="hljs-comment">System.out.println(&quot;不及格&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">//...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">case 60:</span><br><span class="hljs-comment">System.out.println(&quot;及格&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">//...略...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//写法2：</span><br><span class="hljs-keyword">switch</span>(score / <span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;输入的成绩有误&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">//写法3：</span><br><span class="hljs-keyword">switch</span>(score / <span class="hljs-number">60</span>)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;输入的成绩有误&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-3-利用case的穿透性"><a href="#2-2-3-利用case的穿透性" class="headerlink" title="2.2.3 利用case的穿透性"></a>2.2.3 利用case的穿透性</h4><p>在switch语句中，如果case的后面不写break，将出现穿透现象，也就是一旦匹配成功，不会在判断下一个case的值，直接向后运行，直到遇到break或者整个switch语句结束，执行终止。</p><p><strong>案例4：</strong>编写程序：从键盘上输入2023年的“month”和“day”，要求通过程序输出输入的日期为2023年的第几天。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>System.out.println(<span class="hljs-string">&quot;请输入2023年的month:&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>System.out.println(<span class="hljs-string">&quot;请输入2023年的day:&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br><span class="hljs-comment">//这里就不针对month和day进行合法性的判断了，以后可以使用正则表达式进行校验。</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">sumDays</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录总天数</span><br><br><span class="hljs-comment">//写法1 ：不推荐（存在冗余的数据）</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">switch(month)&#123;</span><br><span class="hljs-comment">case 1:</span><br><span class="hljs-comment">sumDays = day;</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 2:</span><br><span class="hljs-comment">sumDays = 31 + day;</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 3:</span><br><span class="hljs-comment">sumDays = 31 + 28 + day;</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">//....</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">case 12:</span><br><span class="hljs-comment">//sumDays = 31 + 28 + ... + 30 + day;</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//写法2：推荐</span><br><span class="hljs-keyword">switch</span>(month)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表11月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表10月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表9月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表8月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表7月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表6月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表5月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表4月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表3月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>sumDays += <span class="hljs-number">28</span>;<span class="hljs-comment">//这个28是代表2月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表1月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>sumDays += day;<span class="hljs-comment">//这个day是代表当月的第几天</span><br>&#125;<br><br>System.out.println(month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日是2023年的第&quot;</span> + sumDays + <span class="hljs-string">&quot;天&quot;</span>);<br>        <span class="hljs-comment">//关闭资源</span><br>scan.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>拓展：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">从键盘分别输入年、月、日，判断这一天是当年的第几天<br> <br>注：判断一年是否是闰年的标准：<br>   <span class="hljs-number">1</span>）可以被<span class="hljs-number">4</span>整除，但不可被<span class="hljs-number">100</span>整除<br>  或<br>   <span class="hljs-number">2</span>）可以被<span class="hljs-number">400</span>整除<br>   <br>例如：<span class="hljs-number">1900，2200</span>等能被<span class="hljs-number">4</span>整除，但同时能被<span class="hljs-number">100</span>整除，但不能被<span class="hljs-number">400</span>整除，不是闰年<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest04</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入year:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入month:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入day:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-comment">//判断这一天是当年的第几天==&gt;从1月1日开始，累加到xx月xx日这一天</span><br>        <span class="hljs-comment">//(1)[1,month-1]个月满月天数</span><br>        <span class="hljs-comment">//(2)单独考虑2月份是否是29天（依据是看year是否是闰年）</span><br>        <span class="hljs-comment">//(3)第month个月的day天</span><br><br>        <span class="hljs-comment">//声明一个变量days，用来存储总天数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sumDays</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//累加[1,month-1]个月满月天数</span><br>        <span class="hljs-keyword">switch</span> (month) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                <span class="hljs-comment">//累加的1-11月</span><br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表11月份的满月天数</span><br>                <span class="hljs-comment">//这里没有break，继续往下走</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                <span class="hljs-comment">//累加的1-10月</span><br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表10月的满月天数</span><br>                <span class="hljs-comment">//这里没有break，继续往下走</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//9月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//8月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//7月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//6月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//5月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//4月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//3月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                sumDays += <span class="hljs-number">28</span>;<span class="hljs-comment">//2月</span><br>                <span class="hljs-comment">//在这里考虑是否可能是29天</span><br>                <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;<br>                    sumDays++;<span class="hljs-comment">//多加1天</span><br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//1月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                sumDays += day;<span class="hljs-comment">//第month月的day天</span><br>        &#125;<br><br>        <span class="hljs-comment">//输出结果</span><br>        System.out.println(year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日是这一年的第&quot;</span> + sumDays + <span class="hljs-string">&quot;天&quot;</span>);<br><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例5：</strong>根据指定的月份输出对应季节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 需求：指定一个月份，输出该月份对应的季节。一年有四季:</span><br><span class="hljs-comment"> * 3,4,5春季</span><br><span class="hljs-comment"> * 6,7,8夏季</span><br><span class="hljs-comment"> * 9,10,11秋季</span><br><span class="hljs-comment"> * 12,1,2冬季</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入月份：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> input.nextInt();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">switch(month) &#123;</span><br><span class="hljs-comment">            case 1:</span><br><span class="hljs-comment">                System.out.println(&quot;冬季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 2:</span><br><span class="hljs-comment">                System.out.println(&quot;冬季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 3:</span><br><span class="hljs-comment">                System.out.println(&quot;春季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 4:</span><br><span class="hljs-comment">                System.out.println(&quot;春季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 5:</span><br><span class="hljs-comment">                System.out.println(&quot;春季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 6:</span><br><span class="hljs-comment">                System.out.println(&quot;夏季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 7:</span><br><span class="hljs-comment">                System.out.println(&quot;夏季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 8:</span><br><span class="hljs-comment">                System.out.println(&quot;夏季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 9:</span><br><span class="hljs-comment">                System.out.println(&quot;秋季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 10:</span><br><span class="hljs-comment">                System.out.println(&quot;秋季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 11:</span><br><span class="hljs-comment">                System.out.println(&quot;秋季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 12:</span><br><span class="hljs-comment">                System.out.println(&quot;冬季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            default:</span><br><span class="hljs-comment">                System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br>        <span class="hljs-comment">// 改进版</span><br>        <span class="hljs-keyword">switch</span>(month) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                System.out.println(<span class="hljs-string">&quot;冬季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(<span class="hljs-string">&quot;春季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                System.out.println(<span class="hljs-string">&quot;夏季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                System.out.println(<span class="hljs-string">&quot;秋季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;你输入的月份有误&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        input.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>常见错误实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(month)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>|<span class="hljs-number">4</span>|<span class="hljs-number">5</span>:<span class="hljs-comment">//3|4|5 用了位运算符，11 | 100 | 101结果是 111是7</span><br>        System.out.println(<span class="hljs-string">&quot;春季&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>|<span class="hljs-number">7</span>|<span class="hljs-number">8</span>:<span class="hljs-comment">//6|7|8用了位运算符，110 | 111 | 1000结果是1111是15</span><br>        System.out.println(<span class="hljs-string">&quot;夏季&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>|<span class="hljs-number">10</span>|<span class="hljs-number">11</span>:<span class="hljs-comment">//9|10|11用了位运算符，1001 | 1010 | 1011结果是1011是11</span><br>        System.out.println(<span class="hljs-string">&quot;秋季&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>|<span class="hljs-number">1</span>|<span class="hljs-number">2</span>:<span class="hljs-comment">//12|1|2 用了位运算符，1100 | 1 | 10 结果是1111，是15</span><br>        System.out.println(<span class="hljs-string">&quot;冬季&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;输入有误&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用if-else实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((month == <span class="hljs-number">1</span>) || (month == <span class="hljs-number">2</span>) || (month == <span class="hljs-number">12</span>)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;冬季&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((month == <span class="hljs-number">3</span>) || (month == <span class="hljs-number">4</span>) || (month == <span class="hljs-number">5</span>)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;春季&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((month == <span class="hljs-number">6</span>) || (month == <span class="hljs-number">7</span>) || (month == <span class="hljs-number">8</span>)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;夏季&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((month == <span class="hljs-number">9</span>) || (month == <span class="hljs-number">10</span>) || (month == <span class="hljs-number">11</span>)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;秋季&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;你输入的月份有误&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-4-if-else语句与switch-case语句比较"><a href="#2-2-4-if-else语句与switch-case语句比较" class="headerlink" title="2.2.4 if-else语句与switch-case语句比较"></a>2.2.4 if-else语句与switch-case语句比较</h4><ul><li><p>结论：凡是使用switch-case的结构都可以转换为if-else结构。反之，不成立。</p></li><li><p>开发经验：如果既可以使用switch-case，又可以使用if-else，建议使用switch-case。因为效率稍高。</p></li><li><p>细节对比：</p><ul><li>if-else语句优势<ul><li>if语句的条件是一个布尔类型值，if条件表达式为true则进入分支，可以用于范围的判断，也可以用于等值的判断，<code>使用范围更广</code>。</li><li>switch语句的条件是一个常量值（byte,short,int,char,枚举,String），只能判断某个变量或表达式的结果是否等于某个常量值，<code>使用场景较狭窄</code>。</li></ul></li><li>switch语句优势<ul><li>当条件是判断某个变量或表达式是否等于某个固定的常量值时，使用if和switch都可以，习惯上使用switch更多。因为<code>效率稍高</code>。当条件是区间范围的判断时，只能使用if语句。</li><li>使用switch可以利用<code>穿透性</code>，同时执行多个分支，而if…else没有穿透性。</li></ul></li></ul></li><li><p><strong>案例：只能使用 if-else</strong></p><p>从键盘输入一个整数，判断是正数、负数、还是零。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfOrSwitchDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.print(<span class="hljs-string">&quot;请输入整数：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> input.nextInt();<br><br>        <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(num + <span class="hljs-string">&quot;是正整数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(num + <span class="hljs-string">&quot;是负整数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(num + <span class="hljs-string">&quot;是零&quot;</span>);<br>        &#125;<br><br>        input.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-5-练习"><a href="#2-2-5-练习" class="headerlink" title="2.2.5 练习"></a>2.2.5 练习</h4><p><strong>练习1：</strong>从键盘输入星期的整数值，输出星期的英文单词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义指定的星期</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入星期值：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">weekday</span> <span class="hljs-operator">=</span> input.nextInt();<br><br>        <span class="hljs-comment">//switch语句实现选择</span><br>        <span class="hljs-keyword">switch</span>(weekday) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(<span class="hljs-string">&quot;Monday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(<span class="hljs-string">&quot;Tuesday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(<span class="hljs-string">&quot;Wednesday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                System.out.println(<span class="hljs-string">&quot;Thursday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(<span class="hljs-string">&quot;Friday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                System.out.println(<span class="hljs-string">&quot;Saturday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                System.out.println(<span class="hljs-string">&quot;Sunday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;你输入的星期值有误！&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        input.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">使用 <span class="hljs-keyword">switch</span> 把小写类型的 <span class="hljs-type">char</span>型转为大写。只转换 a, b, c, d, e. 其它的输出 “other”。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">char</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c&#x27;</span>;<br>        <span class="hljs-keyword">switch</span> (word) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;D&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;E&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span> :<br>                System.out.println(<span class="hljs-string">&quot;other&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习3：</strong></p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gml">编写程序：从键盘上读入一个学生成绩，存放在变量<span class="hljs-variable language_">score</span>中，根据<span class="hljs-variable language_">score</span>的值输出其对应的成绩等级：<br><br><span class="hljs-variable language_">score</span>&gt;=<span class="hljs-number">90</span>           等级:  A<br><span class="hljs-number">70</span>&lt;=<span class="hljs-variable language_">score</span>&lt;<span class="hljs-number">90</span>        等级:  B    <br><span class="hljs-number">60</span>&lt;=<span class="hljs-variable language_">score</span>&lt;<span class="hljs-number">70</span>        等级:  C<br><span class="hljs-variable language_">score</span>&lt;<span class="hljs-number">60</span>            等级:  D<br><br>方式一：使用<span class="hljs-keyword">if</span>-<span class="hljs-keyword">else</span><br>方式二：使用<span class="hljs-keyword">switch</span>-<span class="hljs-keyword">case</span>:  <span class="hljs-variable language_">score</span> / <span class="hljs-number">10</span>:   <span class="hljs-number">0</span> - <span class="hljs-number">10</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入学生成绩：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>        <span class="hljs-type">char</span> grade;<span class="hljs-comment">//记录学生等级</span><br>        <span class="hljs-comment">//方式1：</span><br><span class="hljs-comment">//        if(score &gt;= 90)&#123;</span><br><span class="hljs-comment">//            grade = &#x27;A&#x27;;</span><br><span class="hljs-comment">//        &#125;else if(score &gt;= 70 &amp;&amp; score &lt; 90)&#123;</span><br><span class="hljs-comment">//            grade = &#x27;B&#x27;;</span><br><span class="hljs-comment">//        &#125;else if(score &gt;= 60 &amp;&amp; score &lt; 70)&#123;</span><br><span class="hljs-comment">//            grade = &#x27;C&#x27;;</span><br><span class="hljs-comment">//        &#125;else&#123;</span><br><span class="hljs-comment">//            grade = &#x27;D&#x27;;</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//方式2：</span><br>        <span class="hljs-keyword">switch</span>(score / <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                grade = <span class="hljs-string">&#x27;A&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                grade = <span class="hljs-string">&#x27;B&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                grade = <span class="hljs-string">&#x27;C&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span> :<br>                grade = <span class="hljs-string">&#x27;D&#x27;</span>;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;学生成绩为&quot;</span> + score + <span class="hljs-string">&quot;,对应的等级为&quot;</span> + grade);<br><br>        scan.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习4：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">编写一个程序，为一个给定的年份找出其对应的中国生肖。中国的生肖基于12年一个周期，每年用一个动物代表：rat、ox、tiger、rabbit、dragon、snake、horse、sheep、monkey、rooster、dog、pig。<br><br>提示：2022年：虎  <span class="hljs-number"> 2022 </span>%<span class="hljs-number"> 12 </span>==<span class="hljs-number"> 6 </span><br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904482_watermark.png" alt="image-20220314005350344"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 18:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//从键盘输入一个年份</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入年份：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> input.nextInt();<br>        input.close();<br><br>        <span class="hljs-comment">//判断</span><br>        <span class="hljs-keyword">switch</span>(year % <span class="hljs-number">12</span>)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是猴年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是鸡年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是狗年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是猪年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是鼠年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是牛年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是虎年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是兔年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是龙年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是蛇年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是马年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是羊年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;输入错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习5：押宝游戏</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">随机产生<span class="hljs-number">3</span>个<span class="hljs-number">1</span><span class="hljs-number">-6</span>的整数，如果三个数相等，那么称为“豹子”，如果三个数之和大于<span class="hljs-number">9</span>，称为“大”，如果三个数之和小于等于<span class="hljs-number">9</span>，称为“小”，用户从键盘输入押的是“豹子”、“大”、“小”，并判断是否猜对了<br><br>提示：随机数  Math.<span class="hljs-built_in">random</span>()产生 [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)范围内的小数<br>     如何获取[<span class="hljs-keyword">a</span>,b]范围内的随机整数呢？(int)(Math.<span class="hljs-built_in">random</span>() * (b - <span class="hljs-keyword">a</span> + <span class="hljs-number">1</span>)) + <span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904463_watermark.png" alt="1659112038716"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1、随机产生3个1-6的整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">6</span> + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">6</span> + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">6</span> + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//2、押宝</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请押宝（豹子、大、小）：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ya</span> <span class="hljs-operator">=</span> input.next();<br>        input.close();<br><br>        <span class="hljs-comment">//3、判断结果</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//switch支持String类型</span><br>        <span class="hljs-keyword">switch</span> (ya)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;豹子&quot;</span>: result = a == b &amp;&amp; b == c; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;大&quot;</span>: result = a + b + c &gt; <span class="hljs-number">9</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;小&quot;</span>: result = a + b + c &lt;= <span class="hljs-number">9</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:System.out.println(<span class="hljs-string">&quot;输入有误！&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;a,b,c分别是：&quot;</span> + a +<span class="hljs-string">&quot;,&quot;</span> + b +<span class="hljs-string">&quot;,&quot;</span> + c );<br>        System.out.println(result ? <span class="hljs-string">&quot;猜中了&quot;</span> : <span class="hljs-string">&quot;猜错了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习6：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">使用<span class="hljs-keyword">switch</span>语句改写下列<span class="hljs-keyword">if</span>语句：<br><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-keyword">if</span>(a==<span class="hljs-number">1</span>)<br>x+=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a==<span class="hljs-number">2</span>)<br>x+=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a==<span class="hljs-number">3</span>)<br>x+=<span class="hljs-number">16</span>;<br><span class="hljs-keyword">else</span><br>x+=<span class="hljs-number">34</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">switch</span>(a)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        x += <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        x += <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        x += <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span> :<br>        x += <span class="hljs-number">34</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-循环语句"><a href="#3-循环语句" class="headerlink" title="3. 循环语句"></a>3. 循环语句</h2><ul><li><p>理解：循环语句具有在<code>某些条件</code>满足的情况下，<code>反复执行</code>特定代码的功能。</p></li><li><p>循环结构分类：</p><ul><li>for 循环</li><li>while 循环</li><li>do-while 循环</li></ul></li><li><p>循环结构<code>四要素</code>：</p><ul><li>初始化部分</li><li>循环条件部分</li><li>循环体部分</li><li>迭代部分</li></ul></li></ul><h3 id="3-1-for循环"><a href="#3-1-for循环" class="headerlink" title="3.1  for循环"></a>3.1  for循环</h3><h4 id="3-1-1-基本语法"><a href="#3-1-1-基本语法" class="headerlink" title="3.1.1 基本语法"></a>3.1.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (①初始化部分; ②循环条件部分; ④迭代部分)｛<br>         ③循环体部分;<br>｝<br></code></pre></td></tr></table></figure><p><strong>执行过程：</strong>①-②-③-④-②-③-④-②-③-④-…..-②</p><p><strong>图示：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904532_watermark.png" alt="image-20220315013023236" style="zoom:80%;" /><p><strong>说明：</strong></p><ul><li>for(;;)中的两个；不能多也不能少</li><li>①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔</li><li>②循环条件部分为boolean类型表达式，当值为false时，退出循环</li><li>④可以有多个变量更新，用逗号分隔</li></ul><h4 id="3-1-2-应用举例"><a href="#3-1-2-应用举例" class="headerlink" title="3.1.2 应用举例"></a>3.1.2 应用举例</h4><p><strong>案例1：使用for循环重复执行某些语句</strong></p><p>题目：输出5行HelloWorld</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//需求1：控制台输出5行Hello World!</span><br><span class="hljs-comment">//写法1：</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><br><span class="hljs-comment">//写法2：</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br>System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：格式的多样性</strong></p><p>题目：写出输出的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(System.out.print(<span class="hljs-string">&quot;a&quot;</span>);num &lt; <span class="hljs-number">3</span>;System.out.print(<span class="hljs-string">&quot;c&quot;</span>),num++)&#123;<br>            System.out.print(<span class="hljs-string">&quot;b&quot;</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：累加的思想</strong></p><p>题目：遍历1-100以内的偶数，并获取偶数的个数，获取所有的偶数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录偶数的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录偶数的和</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">100</span>;i++)&#123;<br><br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>                count++;<br>                sum += i;<br>            &#125;<br><br>            <span class="hljs-comment">//System.out.println(&quot;偶数的个数为：&quot; + count);</span><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;偶数的个数为：&quot;</span> + count);<br>        System.out.println(<span class="hljs-string">&quot;偶数的总和为：&quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例4：结合分支结构使用</strong></p><p>题目：输出所有的水仙花数，所谓水仙花数是指一个3位数，其各个位上数字立方和等于其本身。例如： <code>153 = 1*1*1 + 3*3*3 + 5*5*5</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//定义统计变量，初始化值是0</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//获取三位数，用for循环实现</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; x &lt; <span class="hljs-number">1000</span>; x++) &#123;<br><span class="hljs-comment">//获取三位数的个位，十位，百位</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> x % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> x / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> x / <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">//判断这个三位数是否是水仙花数，如果是，统计变量++</span><br><span class="hljs-keyword">if</span>((ge*ge*ge+shi*shi*shi+bai*bai*bai) == x) &#123;<br>                System.out.println(<span class="hljs-string">&quot;水仙花数：&quot;</span> + x);<br>count++;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//输出统计结果就可以了</span><br>System.out.println(<span class="hljs-string">&quot;水仙花数共有&quot;</span>+count+<span class="hljs-string">&quot;个&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拓展：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">打印出四位数字中“个位+百位”等于“十位+千位”并且个位数为偶数，千位数为奇数的数字，并打印符合条件的数字的个数。<br></code></pre></td></tr></table></figure><p><strong>案例5：结合break的使用</strong></p><p>说明：输入两个正整数m和n，求其最大公约数和最小公倍数。</p><p>比如：12和20的最大公约数是4，最小公倍数是60。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 17:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//需求1：最大公约数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>, n = <span class="hljs-number">20</span>;<br>        <span class="hljs-comment">//取出两个数中的较小值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> (m &lt; n) ? m : n;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> min; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<span class="hljs-comment">//for(int i = 1;i &lt;= min;i++)&#123;</span><br><br>            <span class="hljs-keyword">if</span> (m % i == <span class="hljs-number">0</span> &amp;&amp; n % i == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;最大公约数是：&quot;</span> + i); <span class="hljs-comment">//公约数</span><br><br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出当前循环结构</span><br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-comment">//需求2：最小公倍数</span><br>        <span class="hljs-comment">//取出两个数中的较大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> (m &gt; n) ? m : n;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> max; i &lt;= m * n; i++) &#123;<br><br>            <span class="hljs-keyword">if</span> (i % m == <span class="hljs-number">0</span> &amp;&amp; i % n == <span class="hljs-number">0</span>) &#123;<br><br>                System.out.println(<span class="hljs-string">&quot;最小公倍数是：&quot;</span> + i);<span class="hljs-comment">//公倍数</span><br><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：</p><p>1、我们可以在循环中使用break。一旦执行break，就跳出当前循环结构。</p><p>2、小结：如何结束一个循环结构？</p><p>​      结束情况1：循环结构中的循环条件部分返回false</p><p>​      结束情况2：循环结构中执行了break。</p><p>3、如果一个循环结构不能结束，那就是一个死循环！我们开发中要避免出现死循环。</p></blockquote><h4 id="3-1-3-练习"><a href="#3-1-3-练习" class="headerlink" title="3.1.3 练习"></a>3.1.3 练习</h4><p><strong>练习1：</strong>打印1~100之间所有奇数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForExer1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录奇数的和</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)&#123;<br>                sum += i;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;奇数总和为：&quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2：</strong>打印1~100之间所有是7的倍数的整数的个数及总和（体会设置计数器的思想）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForExer2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录总和</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录个数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>)&#123;<br>                sum += i;<br>                count++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;1~100之间所有是7的倍数的整数的和为：&quot;</span> + sum);<br>        System.out.println(<span class="hljs-string">&quot;1~100之间所有是7的倍数的整数的个数为：&quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习3：</strong></p><p>编写程序从1循环到150，并在每行打印一个值，另外在每个3的倍数行上打印出“foo”,在每个5的倍数行上打印“biz”,在每个7的倍数行上打印输出“baz”。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904553_watermark.png" alt="image-20220315013722962" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForExer3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">150</span>; i++) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.print(<span class="hljs-string">&quot;foo\t&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.print(<span class="hljs-string">&quot;biz\t&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.print(<span class="hljs-string">&quot;baz\t&quot;</span>);<br>            &#125;<br><br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-while循环"><a href="#3-2-while循环" class="headerlink" title="3.2 while循环"></a>3.2 while循环</h3><h4 id="3-2-1-基本语法"><a href="#3-2-1-基本语法" class="headerlink" title="3.2.1 基本语法"></a>3.2.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">①初始化部分<br><span class="hljs-keyword">while</span>(②循环条件部分)｛<br>    ③循环体部分;<br>    ④迭代部分;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行过程：</strong>①-②-③-④-②-③-④-②-③-④-…-②</p><p><strong>图示：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904532_watermark.png" alt="image-20220315013023236" style="zoom:80%;" /><p><strong>说明：</strong></p><ul><li>while(循环条件)中循环条件必须是boolean类型。</li><li>注意不要忘记声明④迭代部分。否则，循环将不能结束，变成死循环。</li><li>for循环和while循环可以相互转换。二者没有性能上的差别。实际开发中，根据具体结构的情况，选择哪个格式更合适、美观。</li><li>for循环与while循环的区别：初始化条件部分的作用域不同。</li></ul><h4 id="3-2-2-应用举例"><a href="#3-2-2-应用举例" class="headerlink" title="3.2.2 应用举例"></a>3.2.2 应用举例</h4><p><strong>案例1：</strong>输出5行HelloWorld!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WhileTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">5</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>i++;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WhileTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录1-100所有的偶数的和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录1-100之间偶数的个数</span><br><br><span class="hljs-keyword">while</span>(num &lt;= <span class="hljs-number">100</span>)&#123;<br><br><span class="hljs-keyword">if</span>(num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>System.out.println(num);<br>sum += num;<br>count++;<br>&#125;<br><br><span class="hljs-comment">//迭代条件</span><br>num++;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;偶数的总和为：&quot;</span> + sum);<br>System.out.println(<span class="hljs-string">&quot;偶数的个数为：&quot;</span> + count);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>猜数字游戏</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">随机生成一个<span class="hljs-number">100</span>以内的数，猜这个随机数是多少？<br><br>从键盘输入数，如果大了，提示大了；如果小了，提示小了；如果对了，就不再猜了，并统计一共猜了多少次。<br><br>提示：生成一个<span class="hljs-selector-attr">[a,b]</span> 范围的随机数的方式：(int)(Math<span class="hljs-selector-class">.random</span>() * (<span class="hljs-selector-tag">b</span> - <span class="hljs-selector-tag">a</span> + <span class="hljs-number">1</span>) + <span class="hljs-selector-tag">a</span>)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 16:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GuessNumber</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//获取一个随机数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//记录猜的次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//实例化Scanner</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入一个整数(1-100):&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">guess</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>        <span class="hljs-keyword">while</span> (guess != random) &#123;<br><br>            <span class="hljs-keyword">if</span> (guess &gt; random) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜大了&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (guess &lt; random) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜小了&quot;</span>);<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;请输入一个整数(1-100):&quot;</span>);<br>            guess = scan.nextInt();<br><span class="hljs-comment">//累加猜的次数</span><br>            count++;<br><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;猜中了！&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;一共猜了&quot;</span> + count + <span class="hljs-string">&quot;次&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例4：折纸珠穆朗玛峰</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">世界最高山峰是珠穆朗玛峰，它的高度是8848.86米，假如我有一张足够大的纸，它的厚度是0.1毫米。<br>请问，我折叠多少次，可以折成珠穆朗玛峰的高度?<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 19:08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZFTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义一个计数器，初始值为0</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//定义珠穆朗玛峰的高度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">zf</span> <span class="hljs-operator">=</span> <span class="hljs-number">8848860</span>;<span class="hljs-comment">//单位：毫米</span><br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">paper</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<span class="hljs-comment">//单位：毫米</span><br><br>        <span class="hljs-keyword">while</span>(paper &lt; zf)&#123;<br>            <span class="hljs-comment">//在循环中执行累加，对应折叠了多少次</span><br>            count++;<br>            paper *= <span class="hljs-number">2</span>;<span class="hljs-comment">//循环的执行过程中每次纸张折叠，纸张的厚度要加倍</span><br>        &#125;<br><br>        <span class="hljs-comment">//打印计数器的值</span><br>        System.out.println(<span class="hljs-string">&quot;需要折叠：&quot;</span> + count + <span class="hljs-string">&quot;次&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;折纸的高度为&quot;</span> + paper/<span class="hljs-number">1000</span> + <span class="hljs-string">&quot;米，超过了珠峰的高度&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-3-练习"><a href="#3-2-3-练习" class="headerlink" title="3.2.3 练习"></a>3.2.3 练习</h4><p><strong>练习：</strong>从键盘输入整数，输入0结束，统计输入的正数、负数的个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test05While</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">positive</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//记录正数的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">negative</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//记录负数的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//初始化为特殊值，使得第一次循环条件成立</span><br>        <span class="hljs-keyword">while</span>(num != <span class="hljs-number">0</span>)&#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入整数（0表示结束）：&quot;</span>);<br>            num = input.nextInt();<br><br>            <span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br>                positive++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">0</span>)&#123;<br>                negative++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;正数个数：&quot;</span> + positive);<br>        System.out.println(<span class="hljs-string">&quot;负数个数：&quot;</span> + negative);<br><br>        input.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-do-while循环"><a href="#3-3-do-while循环" class="headerlink" title="3.3 do-while循环"></a>3.3 do-while循环</h3><h4 id="3-3-1-基本语法"><a href="#3-3-1-基本语法" class="headerlink" title="3.3.1 基本语法"></a>3.3.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">①初始化部分;<br><span class="hljs-keyword">do</span>&#123;<br>③循环体部分<br>④迭代部分<br>&#125;<span class="hljs-keyword">while</span>(②循环条件部分); <br></code></pre></td></tr></table></figure><p><strong>执行过程：</strong>①-③-④-②-③-④-②-③-④-…-②</p><p><strong>图示：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221916418_watermark.png" alt="image-20220512165558698" style="zoom:80%;" /><p><strong>说明：</strong></p><ul><li>结尾while(循环条件)中循环条件必须是boolean类型</li><li>do{}while();最后有一个分号</li><li>do-while结构的循环体语句是至少会执行一次，这个和for和while是不一样的</li><li>循环的三个结构for、while、do-while三者是可以相互转换的。</li></ul><h4 id="3-3-2-应用举例"><a href="#3-3-2-应用举例" class="headerlink" title="3.3.2 应用举例"></a>3.3.2 应用举例</h4><p><strong>案例1：</strong>遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhileTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</span><br><span class="hljs-comment">//初始化部分</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录1-100所有的偶数的和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录1-100之间偶数的个数</span><br><br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-comment">//循环体部分</span><br><span class="hljs-keyword">if</span>(num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>System.out.println(num);<br>sum += num;<br>count++;<br>&#125;<br><br>num++;<span class="hljs-comment">//迭代部分</span><br><br><br>&#125;<span class="hljs-keyword">while</span>(num &lt;= <span class="hljs-number">100</span>); <span class="hljs-comment">//循环条件部分</span><br><br><br>System.out.println(<span class="hljs-string">&quot;偶数的总和为：&quot;</span> + sum);<br>System.out.println(<span class="hljs-string">&quot;偶数的个数为：&quot;</span> + count);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>体会do-while至少会执行一次循环体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhileTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//while循环:</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">while</span>(num1 &gt; <span class="hljs-number">10</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;hello:while&quot;</span>);<br>num1--;<br>&#125;<br><br><span class="hljs-comment">//do-while循环:</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">do</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello:do-while&quot;</span>);<br>num2--;<br>&#125;<span class="hljs-keyword">while</span>(num2 &gt; <span class="hljs-number">10</span>);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：ATM取款</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">声明变量balance并初始化为<span class="hljs-number">0</span>，用以表示银行账户的余额，下面通过ATM机程序实现存款，取款等功能。<br><br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>ATM<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br>   <span class="hljs-number">1</span>、存款<br>   <span class="hljs-number">2</span>、取款<br>   <span class="hljs-number">3</span>、显示余额<br>   <span class="hljs-number">4</span>、退出<br>请选择(<span class="hljs-number">1</span>-<span class="hljs-number">4</span>)：<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 19:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ATM</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//初始化条件</span><br><span class="hljs-type">double</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<span class="hljs-comment">//表示银行账户的余额</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//用于控制循环的结束</span><br><br><span class="hljs-keyword">do</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;=========ATM========&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\t1、存款&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\t2、取款&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\t3、显示余额&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\t4、退出&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;请选择(1-4)：&quot;</span>);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">selection</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br><span class="hljs-keyword">switch</span>(selection)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>System.out.print(<span class="hljs-string">&quot;要存款的额度为：&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">addMoney</span> <span class="hljs-operator">=</span> scan.nextDouble();<br><span class="hljs-keyword">if</span>(addMoney &gt; <span class="hljs-number">0</span>)&#123;<br>balance += addMoney;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>System.out.print(<span class="hljs-string">&quot;要取款的额度为：&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">minusMoney</span> <span class="hljs-operator">=</span> scan.nextDouble();<br><span class="hljs-keyword">if</span>(minusMoney &gt; <span class="hljs-number">0</span> &amp;&amp; balance &gt;= minusMoney)&#123;<br>balance -= minusMoney;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;您输入的数据非法或余额不足&quot;</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>System.out.println(<span class="hljs-string">&quot;当前的余额为：&quot;</span> + balance);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>System.out.println(<span class="hljs-string">&quot;欢迎下次进入此系统。^_^&quot;</span>);<br>isFlag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;请重新选择！&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<span class="hljs-keyword">while</span>(isFlag);<br><br><span class="hljs-comment">//资源关闭</span><br>scan.close();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-3-练习"><a href="#3-3-3-练习" class="headerlink" title="3.3.3 练习"></a>3.3.3 练习</h4><p><strong>练习1：</strong>随机生成一个100以内的数，猜这个随机数是多少？</p><p>从键盘输入数，如果大了提示，大了；如果小了，提示小了；如果对了，就不再猜了，并统计一共猜了多少次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhileExer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//随机生成一个100以内的整数</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Math.random() ==&gt; [0,1)的小数</span><br><span class="hljs-comment">Math.random()* 100 ==&gt; [0,100)的小数</span><br><span class="hljs-comment">(int)(Math.random()* 100) ==&gt; [0,100)的整数</span><br><span class="hljs-comment">*/</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()* <span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//System.out.println(num);</span><br><br>        <span class="hljs-comment">//声明一个变量，用来存储猜的次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> guess;<span class="hljs-comment">//提升作用域</span><br>        <span class="hljs-keyword">do</span>&#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入100以内的整数：&quot;</span>);<br>            guess = input.nextInt();<br><br>            <span class="hljs-comment">//输入一次，就表示猜了一次</span><br>            count++;<br><br>            <span class="hljs-keyword">if</span>(guess &gt; num)&#123;<br>                System.out.println(<span class="hljs-string">&quot;大了&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(guess &lt; num)&#123;<br>                System.out.println(<span class="hljs-string">&quot;小了&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">while</span>(num != guess);<br><br>        System.out.println(<span class="hljs-string">&quot;一共猜了：&quot;</span> + count+<span class="hljs-string">&quot;次&quot;</span>);<br><br>        input.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-对比三种循环结构"><a href="#3-4-对比三种循环结构" class="headerlink" title="3.4 对比三种循环结构"></a>3.4 对比三种循环结构</h3><ul><li><strong>三种循环结构都具有四个要素：</strong><ul><li>循环变量的初始化条件</li><li>循环条件</li><li>循环体语句块</li><li>循环变量的修改的迭代表达式</li></ul></li></ul><ul><li><strong>从循环次数角度分析</strong><ul><li>do-while循环至少执行一次循环体语句。</li><li>for和while循环先判断循环条件语句是否成立，然后决定是否执行循环体。</li></ul></li><li><strong>如何选择</strong><ul><li>遍历有明显的循环次数（范围）的需求，选择for循环</li><li>遍历没有明显的循环次数（范围）的需求，选择while循环</li><li>如果循环体语句块至少执行一次，可以考虑使用do-while循环</li><li>本质上：三种循环之间完全可以互相转换，都能实现循环的功能</li></ul></li></ul><h3 id="3-5-“无限”循环"><a href="#3-5-“无限”循环" class="headerlink" title="3.5 “无限”循环"></a>3.5 “无限”循环</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221917760_watermark.jpg" alt="类似：死循环"></p><h4 id="3-5-1-基本语法"><a href="#3-5-1-基本语法" class="headerlink" title="3.5.1 基本语法"></a>3.5.1 基本语法</h4><p><strong>语法格式：</strong></p><ul><li>最简单”无限”循环格式：<code>while(true)</code> , <code>for(;;)</code></li></ul><p><strong>适用场景：</strong></p><ul><li>开发中，有时并不确定需要循环多少次，需要根据循环体内部某些条件，来控制循环的结束（使用break）。</li><li>如果此循环结构不能终止，则构成了死循环！开发中要避免出现死循环。</li></ul><h4 id="3-5-2-应用举例"><a href="#3-5-2-应用举例" class="headerlink" title="3.5.2 应用举例"></a>3.5.2 应用举例</h4><p><strong>案例1：</strong>实现爱你到永远…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndlessFor1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;)&#123;<br>            System.out.println(<span class="hljs-string">&quot;我爱你！&quot;</span>);<br>        &#125;<br><span class="hljs-comment">//        System.out.println(&quot;end&quot;);//永远无法到达的语句，编译报错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndlessFor2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (; <span class="hljs-literal">true</span>;)&#123; <span class="hljs-comment">//条件永远成立，死循环</span><br>            System.out.println(<span class="hljs-string">&quot;我爱你！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndlessFor3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">10</span>; )&#123; <span class="hljs-comment">//循环变量没有修改，条件永远成立，死循环</span><br>            System.out.println(<span class="hljs-string">&quot;我爱你！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>思考：如下代码执行效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndlessFor4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">10</span>; )&#123; <span class="hljs-comment">//一次都不执行</span><br>            System.out.println(<span class="hljs-string">&quot;我爱你！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PositiveNegative</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <br><span class="hljs-type">int</span> <span class="hljs-variable">positiveNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//统计正数的个数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">negativeNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//统计负数的个数</span><br><span class="hljs-keyword">for</span>(;;)&#123;  <span class="hljs-comment">//while(true)&#123;</span><br>System.out.println(<span class="hljs-string">&quot;请输入一个整数：(输入为0时结束程序)&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br> positiveNumber++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">0</span>)&#123;<br> negativeNumber++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;程序结束&quot;</span>);<br><span class="hljs-keyword">break</span>; <br>            &#125;<br>         &#125;<br> System.out.println(<span class="hljs-string">&quot;正数的个数为：&quot;</span>+ positiveNumber);<br> System.out.println(<span class="hljs-string">&quot;负数的个数为：&quot;</span>+ negativeNumber);  <br>        <br>         scanner.close();<br>&#125; <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-6-嵌套循环（或多重循环）"><a href="#3-6-嵌套循环（或多重循环）" class="headerlink" title="3.6 嵌套循环（或多重循环）"></a>3.6 嵌套循环（或多重循环）</h3><h4 id="3-6-1-使用说明"><a href="#3-6-1-使用说明" class="headerlink" title="3.6.1 使用说明"></a>3.6.1 使用说明</h4><ul><li><strong>所谓嵌套循环</strong>，是指一个循环结构A的循环体是另一个循环结构B。比如，for循环里面还有一个for循环，就是嵌套循环。其中，for ,while ,do-while均可以作为外层循环或内层循环。<ul><li>外层循环：循环结构A</li><li>内层循环：循环结构B</li></ul></li><li>实质上，<code>嵌套循环就是把内层循环当成外层循环的循环体</code>。只有当内层循环的循环条件为false时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的外层循环。</li><li>设外层循环次数为<code>m</code>次，内层为<code>n</code>次，则内层循环体实际上需要执行<code>m*n</code>次。</li><li><strong>技巧：</strong>从二维图形的角度看，外层循环控制<code>行数</code>，内层循环控制<code>列数</code>。</li><li><strong>开发经验：</strong>实际开发中，我们最多见到的嵌套循环是两层。一般不会出现超过三层的嵌套循环。如果将要出现，一定要停下来重新梳理业务逻辑，重新思考算法的实现，控制在三层以内。否则，可读性会很差。</li></ul><p>例如：两个for嵌套循环格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化语句①; 循环条件语句②; 迭代语句⑦) &#123;<br>    <span class="hljs-keyword">for</span>(初始化语句③; 循环条件语句④; 迭代语句⑥) &#123;<br>      循环体语句⑤;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//执行过程：① - ② - ③ - ④ - ⑤ - ⑥ - ④ - ⑤ - ⑥ - ... - ④ - ⑦ - ② - ③ - ④ - ⑤ - ⑥ - ④..</span><br></code></pre></td></tr></table></figure><p><strong>执行特点：</strong>外层循环执行一次，内层循环执行一轮。</p><h4 id="3-6-2-应用举例"><a href="#3-6-2-应用举例" class="headerlink" title="3.6.2 应用举例"></a>3.6.2 应用举例</h4><p><strong>案例1：</strong>打印5行6个*</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">******</span><br><span class="hljs-comment">******</span><br><span class="hljs-comment">******</span><br><span class="hljs-comment">******</span><br><span class="hljs-comment">******</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= <span class="hljs-number">5</span>;j++)&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">6</span>;i++)&#123;<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>&#125;<br><br>System.out.println();<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>打印5行直角三角形</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">*</span><br><span class="hljs-comment">**</span><br><span class="hljs-comment">***</span><br><span class="hljs-comment">****</span><br><span class="hljs-comment">*****</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>打印5行倒直角三角形</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">*****</span><br><span class="hljs-comment">****</span><br><span class="hljs-comment">***</span><br><span class="hljs-comment">**</span><br><span class="hljs-comment">*</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= <span class="hljs-number">6</span> - i;j++)&#123;<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br><br>&#125;<br>System.out.println();<br><br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例4：打印”菱形”形状的图案</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">        * </span><br><span class="hljs-comment">      * * * </span><br><span class="hljs-comment">    * * * * * </span><br><span class="hljs-comment">  * * * * * * * </span><br><span class="hljs-comment">* * * * * * * * * </span><br><span class="hljs-comment">  * * * * * * * </span><br><span class="hljs-comment">    * * * * * </span><br><span class="hljs-comment">      * * * </span><br><span class="hljs-comment">        * </span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest4</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        上半部分im(表示-的个数)    n(表示*的个数)关系式：2*i + m = 10 --&gt; m = 10 - 2*i</span><br><span class="hljs-comment">    --------*   1   8   1n = 2 * i - 1</span><br><span class="hljs-comment">    ------* * *   2   6   3</span><br><span class="hljs-comment">    ----* * * * *   3   4   5</span><br><span class="hljs-comment">    --* * * * * * *   4   2       7</span><br><span class="hljs-comment">    * * * * * * * * *  5   0   9</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        下半部分         i      m                n              关系式： m = 2 * i</span><br><span class="hljs-comment">    --* * * * * * *    1       2                7                     n = 9 - 2 * i</span><br><span class="hljs-comment">    ----* * * * *      2       4                5</span><br><span class="hljs-comment">    ------* * *        3       6                3</span><br><span class="hljs-comment">    --------*          4       8                1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            */</span><br>        <span class="hljs-comment">//上半部分</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">//-</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">10</span> - <span class="hljs-number">2</span> * i; j++) &#123;<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//*</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>; k++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;* &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        <span class="hljs-comment">//下半部分</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-comment">//-</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span> * i; j++) &#123;<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//*</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">9</span> - <span class="hljs-number">2</span> * i; k++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;* &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例5：九九乘法表</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221917166_watermark.png" alt="image-20221113193013204"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                System.out.print(i + <span class="hljs-string">&quot;*&quot;</span> + j + <span class="hljs-string">&quot;=&quot;</span> + (i * j) + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-6-3-练习"><a href="#3-6-3-练习" class="headerlink" title="3.6.3 练习"></a>3.6.3 练习</h4><p><strong>练习1：</strong>将一天中的时间打印到控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;hour &lt; <span class="hljs-number">24</span> ;hour++ ) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; min &lt; <span class="hljs-number">60</span> ; min++) &#123;<br>System.out.println(hour + <span class="hljs-string">&quot;时&quot;</span> + min +<span class="hljs-string">&quot;分&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-关键字break和continue的使用"><a href="#4-关键字break和continue的使用" class="headerlink" title="4. 关键字break和continue的使用"></a>4. 关键字break和continue的使用</h2><h3 id="4-1-break和continue的说明"><a href="#4-1-break和continue的说明" class="headerlink" title="4.1 break和continue的说明"></a>4.1 break和continue的说明</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">适用范围在循环结构中使用的作用相同点<br><br><span class="hljs-keyword">break</span><span class="hljs-keyword">switch</span>-<span class="hljs-keyword">case</span><br>循环结构一旦执行，就结束(或跳出)当前循环结构    此关键字的后面，不能声明语句<br><br><span class="hljs-keyword">continue</span>循环结构一旦执行，就结束(或跳出)当次循环结构    此关键字的后面，不能声明语句<br></code></pre></td></tr></table></figure><p>此外，很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它，但使程序容易出错。Java中的break和continue是不同于goto的。</p><h3 id="4-2-应用举例"><a href="#4-2-应用举例" class="headerlink" title="4.2 应用举例"></a>4.2 应用举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakContinueTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br><br><span class="hljs-keyword">if</span>(i % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//break;//123</span><br><span class="hljs-keyword">continue</span>;<span class="hljs-comment">//123567910</span><br><span class="hljs-comment">//如下的语句不可能被执行，编译不通过</span><br><span class="hljs-comment">//System.out.println(&quot;今晚迪丽热巴要约我吃饭&quot;);</span><br>&#125;<br><br>System.out.print(i);<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;####&quot;</span>);<br><br><span class="hljs-comment">//嵌套循环中的使用</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">4</span>;i++)&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= <span class="hljs-number">10</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(j % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//break; //结束的是包裹break关键字的最近的一层循环！</span><br><span class="hljs-keyword">continue</span>;<span class="hljs-comment">//结束的是包裹break关键字的最近的一层循环的当次！</span><br>&#125;<br>System.out.print(j);<br>&#125;<br>System.out.println();<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-带标签的使用"><a href="#4-3-带标签的使用" class="headerlink" title="4.3 带标签的使用"></a>4.3 带标签的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">break</span>语句用于终止某个语句块的执行<br>&#123;    …… <br><span class="hljs-keyword">break</span>;<br> ……<br>&#125;<br><br><span class="hljs-keyword">break</span>语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块 <br>label1: &#123;   ……        <br>label2:     &#123;   ……<br>label3: &#123;   ……<br>           <span class="hljs-keyword">break</span> label2;<br>           ……<br> &#125;<br>     &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><ul><li><p>continue语句出现在多层嵌套的循环语句体中时，也可以通过标签指明要跳过的是哪一层循环。</p></li><li><p>标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面。</p></li><li><p>举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakContinueTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>l:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">4</span>;i++)&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= <span class="hljs-number">10</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(j % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//break l;</span><br><span class="hljs-keyword">continue</span> l;<br>&#125;<br>System.out.print(j);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-经典案例"><a href="#4-4-经典案例" class="headerlink" title="4.4 经典案例"></a>4.4 经典案例</h3><p><strong>题目：找出100以内所有的素数（质数）？100000以内的呢？</strong></p><p>目的：不同的代码的实现方式，可以效率差别很大。</p><p>分析：素数（质数）：只能被1和它本身整除的自然数。  —&gt; 从2开始，到这个数-1为止，此范围内没有这个数的约数。则此数是一个质数。<br>比如：2、3、5、7、11、13、17、19、23、…</p><p><strong>实现方式1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumberTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br><span class="hljs-comment">//boolean isFlag = true; //用于标识i是否被除尽过</span><br><br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">//记录当前时间距离1970-1-1 00:00:00的毫秒数</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录质数的个数</span><br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100000</span>;i++)&#123;  <span class="hljs-comment">//i</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//用于标识i是否被除尽过</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;j &lt;= i - <span class="hljs-number">1</span>;j++)&#123;<br><br><span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//表明i有约数</span><br>isFlag = <span class="hljs-literal">false</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//判断i是否是质数</span><br><span class="hljs-keyword">if</span>(isFlag)&#123; <span class="hljs-comment">//如果isFlag变量没有给修改过值，就意味着i没有被j除尽过。则i是一个质数</span><br><span class="hljs-comment">//System.out.println(i);</span><br>count++;<br>&#125;<br><br><span class="hljs-comment">//重置isFlag</span><br><span class="hljs-comment">//isFlag = true;</span><br><br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;质数的个数为：&quot;</span> + count);<br>System.out.println(<span class="hljs-string">&quot;执行此程序花费的毫秒数为：&quot;</span> + (end - start)); <span class="hljs-comment">//16628</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现方式2：</strong>针对实现方式1进行优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumberTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">//记录当前时间距离1970-1-1 00:00:00的毫秒数</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录质数的个数</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100000</span>;i++)&#123;  <span class="hljs-comment">//i</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//用于标识i是否被除尽过</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;j &lt;= Math.sqrt(i);j++)&#123; <span class="hljs-comment">//优化2：将循环条件中的i改为Math.sqrt(i)</span><br><br><span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//表明i有约数</span><br>isFlag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//优化1：主要针对非质数起作用</span><br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//判断i是否是质数</span><br><span class="hljs-keyword">if</span>(isFlag)&#123; <span class="hljs-comment">//如果isFlag变量没有给修改过值，就意味着i没有被j除尽过。则i是一个质数</span><br><span class="hljs-comment">//System.out.println(i);</span><br>count++;<br>&#125;<br><br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;质数的个数为：&quot;</span> + count);<br>System.out.println(<span class="hljs-string">&quot;执行此程序花费的毫秒数为：&quot;</span> + (end - start));<span class="hljs-comment">//1062</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现方式3（选做）：</strong>使用continue + 标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumberTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">//记录当前时间距离1970-1-1 00:00:00的毫秒数</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录质数的个数</span><br><br>label:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100000</span>;i++)&#123;  <span class="hljs-comment">//i</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;j &lt;= Math.sqrt(i);j++)&#123; <span class="hljs-comment">//优化2：将循环条件中的i改为Math.sqrt(i)</span><br><br><span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//表明i有约数</span><br><span class="hljs-keyword">continue</span> label;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//一旦程序能执行到此位置，说明i就是一个质数</span><br>System.out.println(i);<br>count++;<br>&#125;<br><br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;质数的个数为：&quot;</span> + count);<br>System.out.println(<span class="hljs-string">&quot;执行此程序花费的毫秒数为：&quot;</span> + (end - start));<span class="hljs-comment">//1062</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-练习"><a href="#4-5-练习" class="headerlink" title="4.5 练习"></a>4.5 练习</h3><p><strong>练习1：</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">生成 <span class="hljs-number">1</span><span class="hljs-number">-100</span> 之间的随机数，直到生成了 <span class="hljs-number">97</span> 这个数，看看一共用了几次？<br><br>提示：使用 (<span class="hljs-built_in">int</span>)(Math.<span class="hljs-built_in">random</span>() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberGuessTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录循环的次数（或生成随机数进行比较的次数）</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>            count++;<br>            <span class="hljs-keyword">if</span>(random == <span class="hljs-number">97</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;直到生成随机数97，一共比较了&quot;</span> + count + <span class="hljs-string">&quot;次&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-Scanner：键盘输入功能的实现"><a href="#5-Scanner：键盘输入功能的实现" class="headerlink" title="5. Scanner：键盘输入功能的实现"></a>5. Scanner：键盘输入功能的实现</h2><ul><li><p>如何从键盘获取不同类型（基本数据类型、String类型）的变量：使用Scanner类。</p></li><li><p>键盘输入代码的四个步骤：</p><ol><li>导包：<code>import java.util.Scanner;</code></li><li>创建Scanner类型的对象：<code>Scanner scan = new Scanner(System.in);</code></li><li>调用Scanner类的相关方法（<code>next() / nextXxx()</code>），来获取指定类型的变量</li><li>释放资源：<code>scan.close();</code></li></ol></li><li><p>注意：需要根据相应的方法，来输入指定类型的值。如果输入的数据类型与要求的类型不匹配时，会报异常 导致程序终止。</p></li></ul><h3 id="5-1-各种类型的数据输入"><a href="#5-1-各种类型的数据输入" class="headerlink" title="5.1 各种类型的数据输入"></a>5.1 各种类型的数据输入</h3><p><strong>案例：</strong>小明注册某交友网站，要求录入个人相关信息。如下：</p><p>请输入你的网名、你的年龄、你的体重、你是否单身、你的性别等情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//① 导包</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerTest1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//② 创建Scanner的对象</span><br>        <span class="hljs-comment">//Scanner是一个引用数据类型，它的全名称是java.util.Scanner</span><br>        <span class="hljs-comment">//scanner就是一个引用数据类型的变量了，赋给它的值是一个对象（对象的概念我们后面学习，暂时先这么叫）</span><br>        <span class="hljs-comment">//new Scanner(System.in)是一个new表达式，该表达式的结果是一个对象</span><br>        <span class="hljs-comment">//引用数据类型  变量 = 对象;</span><br>        <span class="hljs-comment">//这个等式的意思可以理解为用一个引用数据类型的变量代表一个对象，所以这个变量的名称又称为对象名</span><br>        <span class="hljs-comment">//我们也把scanner变量叫做scanner对象</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//System.in默认代表键盘输入</span><br>        <br>        <span class="hljs-comment">//③根据提示，调用Scanner的方法，获取不同类型的变量</span><br>        System.out.println(<span class="hljs-string">&quot;欢迎光临你好我好交友网站！&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;请输入你的网名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入你的年龄：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入你的体重：&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> scanner.nextDouble();<br><br>        System.out.print(<span class="hljs-string">&quot;你是否单身（true/false)：&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSingle</span> <span class="hljs-operator">=</span> scanner.nextBoolean();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入你的性别：&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> scanner.next().charAt(<span class="hljs-number">0</span>);<span class="hljs-comment">//先按照字符串接收，然后再取字符串的第一个字符（下标为0）</span><br><br>        System.out.println(<span class="hljs-string">&quot;你的基本情况如下：&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;网名：&quot;</span> + name + <span class="hljs-string">&quot;\n年龄：&quot;</span> + age + <span class="hljs-string">&quot;\n体重：&quot;</span> + weight + <br>                           <span class="hljs-string">&quot;\n单身：&quot;</span> + isSingle + <span class="hljs-string">&quot;\n性别：&quot;</span> + gender);<br>        <br>        <span class="hljs-comment">//④ 关闭资源</span><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-练习"><a href="#5-2-练习" class="headerlink" title="5.2 练习"></a>5.2 练习</h3><p><strong>练习1：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">大家都知道，男大当婚，女大当嫁。那么女方家长要嫁女儿，当然要提出一定的条件：高：<span class="hljs-number">180</span>cm以上；富：财富<span class="hljs-number">1</span>千万以上；帅：是。<br><br>如果这三个条件同时满足，则：“我一定要嫁给他!!!”<br>如果三个条件有为真的情况，则：“嫁吧，比上不足，比下有余。”<br>如果三个条件都不满足，则：“不嫁！”<br><br>提示：<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“身高: (cm));<br>scanner.nextInt();<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“财富: (千万));<br>scanner.nextDouble();<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“帅否: (<span class="hljs-keyword">true</span>/<span class="hljs-keyword">false</span>));   <br>scanner.nextBoolean();  <br><br><br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“帅否: (是/否));<br>scanner.next();   &quot;是&quot;.equals(str)  <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerExer1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>System.out.println(<span class="hljs-string">&quot;请输入你的身高：(cm)&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>System.out.println(<span class="hljs-string">&quot;请输入你的财富：(以千万为单位)&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">wealth</span> <span class="hljs-operator">=</span> scan.nextDouble();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">方式1：关于是否帅问题，我们使用boolean类型接收</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">System.out.println(&quot;帅否？(true/false)&quot;);</span><br><span class="hljs-comment">boolean isHandsome = scan.nextBoolean();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//判断</span><br><span class="hljs-comment">if(height &gt;= 180 &amp;&amp; wealth &gt;= 1.0 &amp;&amp; isHandsome)&#123; //不建议isHandsome == true</span><br><span class="hljs-comment">System.out.println(&quot;我一定要嫁给他!!!&quot;);</span><br><span class="hljs-comment">&#125;else if(height &gt;= 180 || wealth &gt;= 1.0 || isHandsome)&#123;</span><br><span class="hljs-comment">System.out.println(&quot;嫁吧，比上不足，比下有余。&quot;);</span><br><span class="hljs-comment">&#125;else&#123;</span><br><span class="hljs-comment">System.out.println(&quot;不嫁&quot;);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//方式2：关于是否帅问题，我们使用String类型接收</span><br>System.out.println(<span class="hljs-string">&quot;帅否？(是/否)&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">isHandsome</span> <span class="hljs-operator">=</span> scan.next();<br><br><span class="hljs-comment">//判断</span><br><span class="hljs-keyword">if</span>(height &gt;= <span class="hljs-number">180</span> &amp;&amp; wealth &gt;= <span class="hljs-number">1.0</span> &amp;&amp; isHandsome == <span class="hljs-string">&quot;是&quot;</span>)&#123;  <span class="hljs-comment">//知识点：判断两个字符串是否相等，使用String的equals()</span><br>System.out.println(<span class="hljs-string">&quot;我一定要嫁给他!!!&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(height &gt;= <span class="hljs-number">180</span> || wealth &gt;= <span class="hljs-number">1.0</span> || isHandsome == <span class="hljs-string">&quot;是&quot;</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;嫁吧，比上不足，比下有余。&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;不嫁&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//关闭资源</span><br>scan.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">我家的狗5岁了，5岁的狗相当于人类多大呢？其实，狗的前两年每一年相当于人类的10.5岁，之后每增加一年就增加四岁。那么5岁的狗相当于人类多少年龄呢？应该是：10.5 + 10.5 +<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 4 </span>= 33岁。<br><br>编写一个程序，获取用户输入的狗的年龄，通过程序显示其相当于人类的年龄。如果用户输入负数，请显示一个提示信息。<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerExer2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>System.out.println(<span class="hljs-string">&quot;请输入狗狗的年龄：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">dogAge</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br><span class="hljs-comment">//通过分支语句，判断狗狗相当于人的年龄</span><br><span class="hljs-keyword">if</span>(dogAge &lt; <span class="hljs-number">0</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;你输入的狗狗的年龄不合法&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dogAge &lt;= <span class="hljs-number">2</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;相当于人的年龄：&quot;</span> + (dogAge * <span class="hljs-number">10.5</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;相当于人的年龄：&quot;</span> + (<span class="hljs-number">2</span> * <span class="hljs-number">10.5</span> + (dogAge - <span class="hljs-number">2</span>) * <span class="hljs-number">4</span>));<br>&#125;<br><br><span class="hljs-comment">//关闭资源</span><br>scan.close();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-如何获取一个随机数"><a href="#6-如何获取一个随机数" class="headerlink" title="6. 如何获取一个随机数"></a>6. 如何获取一个随机数</h2><p>如何产生一个指定范围的随机整数？</p><p>1、Math类的random()的调用，会返回一个[0,1)范围的一个double型值</p><p>2、Math.random() * 100  —&gt;  [0,100)<br>      (int)(Math.random() * 100)—&gt; [0,99]<br>      (int)(Math.random() * 100) + 5  —-&gt; [5,104]</p><p>3、如何获取<code>[a,b]</code>范围内的随机整数呢？<code>(int)(Math.random() * (b - a + 1)) + a</code></p><p>4、举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MathRandomTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Math.random();<br>System.out.println(value);<br><br><span class="hljs-comment">//[1,6]</span><br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>; <span class="hljs-comment">//</span><br>System.out.println(number);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变量与运算符</title>
    <link href="/2024/02/21/2.%20%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2024/02/21/2.%20%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-关键字（keyword）"><a href="#1-关键字（keyword）" class="headerlink" title="1. 关键字（keyword）"></a>1. 关键字（keyword）</h2><ul><li>定义：<strong>被Java语言赋予了特殊含义，用做专门用途的字符串（或单词）</strong><ul><li>HelloWorld案例中，出现的关键字有 <code>class</code>、<code>public </code>  、 <code>static</code> 、  <code>void</code>  等，这些单词已经被Java定义好了。</li></ul></li><li>特点：全部关键字都是<code>小写字母</code>。</li><li>关键字比较多，不需要死记硬背，学到哪里记到哪里即可。</li><li>官方地址： <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730615_watermark.png" alt="image-20220310234414849"></p><blockquote><p> 说明：</p><ol><li>关键字一共<code>50个</code>，其中<code>const</code>和<code>goto</code>是<code>保留字</code>(reserved word)。</li><li><code>true</code>，<code>false</code>，<code>null</code>不在其中，它们看起来像关键字，其实是字面量，表示特殊的布尔值和空值。</li></ol></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730637_watermark.png" alt="image-20220310234557454" style="zoom: 67%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730666_watermark.png" alt="image-20220801143635356" style="zoom:66%;" /><h2 id="2-标识符-identifier"><a href="#2-标识符-identifier" class="headerlink" title="2. 标识符( identifier)"></a>2. 标识符( identifier)</h2><p>Java中变量、方法、类等要素命名时使用的字符序列，称为标识符。</p><p>技巧：凡是自己可以起名字的地方都叫标识符。</p><p><strong>标识符的命名规则</strong>（必须遵守的<code>硬性规定</code>）：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">由<span class="hljs-number">26</span>个英文字母大小写，<span class="hljs-number">0</span>-<span class="hljs-number">9</span> ，_或 $ 组成  </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">数字不可以开头。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">不可以使用关键字和保留字，但能包含关键字和保留字。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Java</span>中严格区分大小写，长度无限制。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">标识符不能包含空格。</span><br></code></pre></td></tr></table></figure><blockquote><p>练习：miles、Test、a++、 –a、4#R、$4、 #44、apps、class、public、int、x、y、radius</p></blockquote><p><strong>标识符的命名规范</strong>（建议遵守的<code>软性要求</code>，否则工作时容易被鄙视）:</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">包名：多单词组成时所有字母都小写：xxxyyyzzz。</span><br>  例如：java.lang、com.atguigu.bean<br>  <br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">类名、接口名：多单词组成时，所有单词的首字母大写：<span class="hljs-title class_">XxxYyyZzz</span></span><br>  例如：HelloWorld，String，System等<br>  <br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</span><br>  例如：age,name,bookName,main,binarySearch,getName<br>  <br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">常量名：所有字母都大写。多单词时每个单词用下划线连接：<span class="hljs-variable constant_">XXX_YYY_ZZZ</span></span><br>  例如：MAX_VALUE,PI,DEFAULT_CAPACITY<br></code></pre></td></tr></table></figure><p>注意：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</p><blockquote><p>更多细节详见《代码整洁之道_关于标识符.txt》《阿里巴巴Java开发手册-1.7.1-黄山版》</p></blockquote><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><h3 id="3-1-为什么需要变量"><a href="#3-1-为什么需要变量" class="headerlink" title="3.1 为什么需要变量"></a>3.1 为什么需要变量</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730698_watermark.png" alt="image-20220513235020527"></p><p>一花一世界，如果把一个程序看做一个世界或一个社会的话，那么变量就是程序世界的花花草草、万事万物。即，<strong>变量是程序中不可或缺的组成单位，最基本的存储单元</strong>。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730719_watermark.png" alt="image-20220513235828042"></p><h3 id="3-2-初识变量"><a href="#3-2-初识变量" class="headerlink" title="3.2 初识变量"></a>3.2 初识变量</h3><ul><li><p>变量的概念：</p><ul><li><p>内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化</p></li><li><p>变量的构成包含三个要素：<code>数据类型</code>、<code>变量名</code>、<code>存储的值</code></p></li><li><p>Java中变量声明的格式：<code>数据类型 变量名 = 变量值</code></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730756_watermark.png" alt="image-20220311000744867" style="zoom:67%;" /></li></ul></li><li><p>变量的作用：用于在内存中保存数据。</p></li><li><p>使用变量注意：</p><ul><li>Java中每个变量必须先声明，后使用。</li><li>使用变量名来访问这块区域的数据。</li><li>变量的作用域：其定义所在的一对{ }内。</li><li>变量只有在其<code>作用域</code>内才有效。出了作用域，变量不可以再被调用。</li><li>同一个作用域内，不能定义重名的变量。</li></ul></li></ul><h3 id="3-3-Java中变量的数据类型"><a href="#3-3-Java中变量的数据类型" class="headerlink" title="3.3 Java中变量的数据类型"></a>3.3 Java中变量的数据类型</h3><p>Java中变量的数据类型分为两大类：</p><ul><li><p><strong>基本数据类型</strong>：包括 <code>整数类型</code>、<code>浮点数类型</code>、<code>字符类型</code>、<code>布尔类型</code>。 </p></li><li><p><strong>引用数据类型</strong>：包括<code>数组</code>、 <code>类</code>、<code>接口</code>、<code>枚举</code>、<code>注解</code>、<code>记录</code>。 </p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730431_watermark.png" alt="Java的数据类型"></p></li></ul><h3 id="3-4-变量的使用"><a href="#3-4-变量的使用" class="headerlink" title="3.4 变量的使用"></a>3.4 变量的使用</h3><h4 id="3-4-1-步骤1：变量的声明"><a href="#3-4-1-步骤1：变量的声明" class="headerlink" title="3.4.1 步骤1：变量的声明"></a>3.4.1 步骤1：变量的声明</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">格式：数据类型  变量名<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//例如：</span><br><span class="hljs-comment">//存储一个整数类型的年龄</span><br><span class="hljs-type">int</span> age; <br><br><span class="hljs-comment">//存储一个小数类型的体重</span><br><span class="hljs-type">double</span> weight;<br><br><span class="hljs-comment">//存储一个单字符类型的性别 </span><br><span class="hljs-type">char</span> gender;<br><br><span class="hljs-comment">//存储一个布尔类型的婚姻状态</span><br><span class="hljs-type">boolean</span> marry;<br><br><span class="hljs-comment">//存储一个字符串类型的姓名</span><br>String name;<br><br><span class="hljs-comment">//声明多个同类型的变量</span><br><span class="hljs-type">int</span> a,b,c; <span class="hljs-comment">//表示a,b,c三个变量都是int类型。</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：变量的数据类型可以是基本数据类型，也可以是引用数据类型。</p></blockquote><h4 id="3-4-2-步骤2：变量的赋值"><a href="#3-4-2-步骤2：变量的赋值" class="headerlink" title="3.4.2 步骤2：变量的赋值"></a>3.4.2 步骤2：变量的赋值</h4><p>给变量赋值，就是把“值”存到该变量代表的内存空间中。同时，给变量赋的值类型必须与变量声明的类型一致或兼容。</p><p><strong>变量赋值的语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">变量名 = 值;<br></code></pre></td></tr></table></figure><p>举例1：可以使用合适类型的<code>常量值</code>给已经声明的变量赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">age = <span class="hljs-number">18</span>;<br>weight = <span class="hljs-number">109</span>;<br>gender = <span class="hljs-string">&#x27;女&#x27;</span>;<br></code></pre></td></tr></table></figure><p>举例2：可以使用其他<code>变量</code>或者<code>表达式</code>给变量赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> m;<br>        <br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * x + y;<br></code></pre></td></tr></table></figure><p>3：变量可以反复赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//先声明，后初始化</span><br><span class="hljs-type">char</span> gender;<br>gender = <span class="hljs-string">&#x27;女&#x27;</span>;<br><br><span class="hljs-comment">//给变量重新赋值，修改gender变量的值</span><br>gender = <span class="hljs-string">&#x27;男&#x27;</span>;<br>System.out.println(<span class="hljs-string">&quot;gender = &quot;</span> + gender);<span class="hljs-comment">//gender = 男</span><br></code></pre></td></tr></table></figure><p>举例4：也可以将变量的声明和赋值一并执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">isBeauty</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;迪丽热巴&quot;</span>;<br></code></pre></td></tr></table></figure><p>内存结构如图：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730922_watermark.png" alt="image-20220514152216148" style="zoom: 80%;" /><h2 id="4-基本数据类型介绍"><a href="#4-基本数据类型介绍" class="headerlink" title="4. 基本数据类型介绍"></a>4. 基本数据类型介绍</h2><h3 id="4-1-整数类型：byte、short、int、long"><a href="#4-1-整数类型：byte、short、int、long" class="headerlink" title="4.1 整数类型：byte、short、int、long"></a>4.1 整数类型：byte、short、int、long</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730306_watermark.png" alt="image-20220520111756274" style="zoom: 50%;" /><ul><li>Java各整数类型有固定的表数范围和字段长度，不受具体操作系统的影响，以保证Java程序的可移植性。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730366_watermark.png" alt="image-20220311001553945" style="zoom:80%;" /><ul><li><p>定义long类型的变量，赋值时需要以”<code>l</code>“或”<code>L</code>“作为后缀。</p></li><li><p>Java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long。</p></li><li><p>Java的整型<code>常量默认为 int 型</code>。</p></li></ul><h4 id="4-1-1-补充：计算机存储单位"><a href="#4-1-1-补充：计算机存储单位" class="headerlink" title="4.1.1 补充：计算机存储单位"></a>4.1.1 补充：计算机存储单位</h4><ul><li><p><strong>字节（Byte）：</strong>是计算机用于<code>计量存储容量</code>的<code>基本</code>单位，一个字节等于8 bit。</p></li><li><p><strong>位（bit）：</strong>是数据存储的<code>最小</code>单位。二进制数系统中，每个0或1就是一个位，叫做bit（比特），其中8 bit 就称为一个字节(Byte)。</p></li><li><p><strong>转换关系：</strong></p><ul><li>8 bit &#x3D; 1 Byte</li><li>1024 Byte &#x3D; 1 KB</li><li>1024 KB &#x3D; 1 MB</li><li>1024 MB &#x3D; 1 GB</li><li>1024 GB &#x3D; 1 TB</li></ul></li></ul><h3 id="4-2-浮点类型：float、double"><a href="#4-2-浮点类型：float、double" class="headerlink" title="4.2 浮点类型：float、double"></a>4.2 浮点类型：float、double</h3><ul><li>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730872_watermark.png" alt="image-20220311001749699" style="zoom:80%;" /><ul><li>浮点型常量有两种表示形式：<ul><li>十进制数形式。如：5.12       512.0f        .512   (必须有小数点）</li><li>科学计数法形式。如：5.12e2      512E2     100E-2</li></ul></li><li>float：<code>单精度</code>，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。    </li><li>double：<code>双精度</code>，精度是float的两倍。通常采用此类型。</li><li>定义float类型的变量，赋值时需要以”<code>f</code>“或”<code>F</code>“作为后缀。</li><li>Java 的浮点型<code>常量默认为double型</code>。</li></ul><h4 id="4-2-1-关于浮点型精度的说明"><a href="#4-2-1-关于浮点型精度的说明" class="headerlink" title="4.2.1 关于浮点型精度的说明"></a>4.2.1 关于浮点型精度的说明</h4><ul><li><p>并不是所有的小数都能可以精确的用二进制浮点数表示。二进制浮点数不能精确的表示0.1、0.01、0.001这样10的负次幂。</p></li><li><p>浮点类型float、double的数据不适合在<code>不容许舍入误差</code>的金融计算领域。如果需要<code>精确</code>数字计算或保留指定位数的精度，需要使用<code>BigDecimal类</code>。</p></li><li><p>测试用例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试1：（解释见章末企业真题：为什么0.1 + 0.2不等于0.3）</span><br>System.out.println(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>);<span class="hljs-comment">//0.30000000000000004</span><br><br><span class="hljs-comment">//测试2：</span><br><span class="hljs-type">float</span> <span class="hljs-variable">ff1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123123123f</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">ff2</span> <span class="hljs-operator">=</span> ff1 + <span class="hljs-number">1</span>;<br>System.out.println(ff1);<br>System.out.println(ff2);<br>System.out.println(ff1 == ff2);<br><br></code></pre></td></tr></table></figure><h4 id="4-2-2-应用举例"><a href="#4-2-2-应用举例" class="headerlink" title="4.2.2 应用举例"></a>4.2.2 应用举例</h4><p>案例1：定义圆周率并赋值为3.14，现有3个圆的半径分别为1.2、2.5、6，求它们的面积。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:36</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span>; <span class="hljs-comment">//圆周率</span><br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">radius1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">radius2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.5</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">radius3</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;第1个圆的面积：&quot;</span> + PI * radius1 * radius1);<br>        System.out.println(<span class="hljs-string">&quot;第2个圆的面积：&quot;</span> + PI * radius2 * radius2);<br>        System.out.println(<span class="hljs-string">&quot;第3个圆的面积：&quot;</span> + PI * radius3 * radius3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例2：小明要到美国旅游，可是那里的温度是以华氏度为单位记录的。<br>它需要一个程序将华氏温度（80度）转换为摄氏度，并以华氏度和摄氏度为单位分别显示该温度。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">℃ <span class="hljs-operator">=</span> (℉ - <span class="hljs-number">32</span>) / <span class="hljs-number">1.8</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:51</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">hua</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">she</span> <span class="hljs-operator">=</span> (hua-<span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span>;<br>        System.out.println(<span class="hljs-string">&quot;华氏度&quot;</span> + hua+<span class="hljs-string">&quot;℉转为摄氏度是&quot;</span> +she+<span class="hljs-string">&quot;℃&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-字符类型：char"><a href="#4-3-字符类型：char" class="headerlink" title="4.3 字符类型：char"></a>4.3 字符类型：char</h3><ul><li><p>char 型数据用来表示通常意义上“<code>字符</code>”（占2字节）</p></li><li><p>Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</p></li><li><p>字符型变量的三种表现形式：</p><ul><li><p><strong>形式1：</strong>使用单引号(‘ ‘)括起来的<code>单个字符</code>。</p><p>例如：char c1 &#x3D; ‘a’;   char c2 &#x3D; ‘中’; char c3 &#x3D;  ‘9’;</p></li><li><p><strong>形式2：</strong>直接使用 <code>Unicode值</code>来表示字符型常量：‘<code>\uXXXX</code>’。其中，XXXX代表一个十六进制整数。</p><p>例如：\u0023 表示 ‘#’。</p></li><li><p><strong>形式3：</strong>Java中还允许使用<code>转义字符‘\’</code>来将其后的字符转变为特殊字符型常量。</p><p>例如：char c3 &#x3D; ‘\n’;  &#x2F;&#x2F; ‘\n’表示换行符</p></li></ul><table><thead><tr><th align="center">转义字符</th><th align="center">说明</th><th align="center">Unicode表示方式</th></tr></thead><tbody><tr><td align="center"><code>\n</code></td><td align="center">换行符</td><td align="center">\u000a</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表符</td><td align="center">\u0009</td></tr><tr><td align="center"><code>\&quot;</code></td><td align="center">双引号</td><td align="center">\u0022</td></tr><tr><td align="center"><code>\&#39;</code></td><td align="center">单引号</td><td align="center">\u0027</td></tr><tr><td align="center"><code>\\</code></td><td align="center">反斜线</td><td align="center">\u005c</td></tr><tr><td align="center"><code>\b</code></td><td align="center">退格符</td><td align="center">\u0008</td></tr><tr><td align="center"><code>\r</code></td><td align="center">回车符</td><td align="center">\u000d</td></tr></tbody></table></li><li><p>char类型是可以进行运算的。因为它都对应有Unicode码，可以看做是一个数值。</p></li></ul><h3 id="4-4-布尔类型：boolean"><a href="#4-4-布尔类型：boolean" class="headerlink" title="4.4 布尔类型：boolean"></a>4.4 布尔类型：boolean</h3><ul><li><p>boolean 类型用来判断逻辑条件，一般用于流程控制语句中：</p><ul><li>if条件控制语句；                  </li><li>while循环控制语句；     </li><li>for循环控制语句；</li><li>do-while循环控制语句；</li></ul></li><li><p><strong>boolean类型数据只有两个值：true、false，无其它。</strong></p><ul><li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li><li>拓展：Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。——《java虚拟机规范 8版》</li></ul></li><li><p>举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">if</span>(isFlag)&#123;<br>    <span class="hljs-comment">//true分支</span><br>&#125;<span class="hljs-keyword">else</span>&#123;  <br>    <span class="hljs-comment">//false分支</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>经验之谈：</p><p>Less is More！建议不要这样写：if ( isFlag &#x3D; &#x3D; true )，只有新手才如此。关键也很容易写错成if(isFlag &#x3D; true)，这样就变成赋值isFlag为true而不是判断！<code>老鸟的写法</code>是if (isFlag)或者if ( !isFlag)。</p></blockquote><h2 id="5-基本数据类型变量间运算规则"><a href="#5-基本数据类型变量间运算规则" class="headerlink" title="5. 基本数据类型变量间运算规则"></a>5. 基本数据类型变量间运算规则</h2><p>在Java程序中，不同的基本数据类型（只有7种，不包含boolean类型）变量的值经常需要进行相互转换。</p><p>转换的方式有两种：<code>自动类型提升</code>和<code>强制类型转换</code>。</p><h3 id="5-1-自动类型提升"><a href="#5-1-自动类型提升" class="headerlink" title="5.1 自动类型提升"></a>5.1 自动类型提升</h3><p><strong>规则：将取值范围小（或容量小）的类型自动提升为取值范围大（或容量大）的类型 。</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730112_watermark.png" alt="image-20220523162200891" style="zoom:67%;" /><p>基本数据类型的转换规则如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731141_watermark.png" alt="image-20220311002543688"></p><p>（1）当把存储范围小的值（常量值、变量的值、表达式计算的结果值）赋值给了存储范围大的变量时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<span class="hljs-comment">//char自动升级为int，其实就是把字符的编码值赋值给i变量了</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//int自动升级为double</span><br><span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234567</span>; <span class="hljs-comment">//右边的整数常量值如果在int范围呢，编译和运行都可以通过，这里涉及到数据类型转换</span><br><br><span class="hljs-comment">//byte bigB = 130;//错误，右边的整数常量值超过byte范围</span><br><span class="hljs-type">long</span> <span class="hljs-variable">bigNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">12345678912L</span>;<span class="hljs-comment">//右边的整数常量值如果超过int范围，必须加L，显式表示long类型。否则编译不通过</span><br></code></pre></td></tr></table></figure><p>（2）当存储范围小的数据类型与存储范围大的数据类型变量一起混合运算时，会按照其中最大的类型运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>;<br><br><span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> i + b + d;<span class="hljs-comment">//混合运算，升级为double</span><br></code></pre></td></tr></table></figure><p>（3）当byte,short,char数据类型的变量进行算术运算时，按照int类型处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> b1 + b2;<span class="hljs-comment">//编译报错，b1 + b2自动升级为int</span><br><br><span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> c1 + c2;<span class="hljs-comment">//至少需要使用int类型来接收</span><br>System.out.println(c1 + c2);<span class="hljs-comment">//113 </span><br></code></pre></td></tr></table></figure><p><strong>练习：</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">设 x 为<span class="hljs-keyword">float</span>型变量，y为<span class="hljs-keyword">double</span>型变量，a为<span class="hljs-keyword">int</span>型变量，b为<span class="hljs-keyword">long</span>型变量，c为<span class="hljs-keyword">char</span>型变量，则表达式<br>x + y * a <span class="hljs-regexp">/ x + b /</span> y + c的值类型为：<br><br>A. <span class="hljs-keyword">int</span>   B. <span class="hljs-keyword">long</span>  C. <span class="hljs-keyword">double</span>  D. <span class="hljs-keyword">char</span><br></code></pre></td></tr></table></figure><h3 id="5-2-强制类型转换"><a href="#5-2-强制类型转换" class="headerlink" title="5.2 强制类型转换"></a>5.2 强制类型转换</h3><p>将<code>3.14</code> 赋值到<code>int</code> 类型变量会发生什么？产生编译失败，肯定无法赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span>; <span class="hljs-comment">// 编译报错</span><br></code></pre></td></tr></table></figure><p>想要赋值成功，只有通过<code>强制类型转换</code>，将<code>double</code> 类型强制转换成<code>int</code> 类型才能赋值。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731346_watermark.png" alt="image-20220523162407722" style="zoom:67%;" /><p><strong>规则：将取值范围大（或容量大）的类型强制转换成取值范围小（或容量小）的类型。</strong></p><blockquote><p>自动类型提升是Java自动执行的，而强制类型转换是自动类型提升的逆运算，需要我们自己手动执行。</p></blockquote><p><strong>转换格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型<span class="hljs-number">1</span> 变量名 = (数据类型<span class="hljs-number">1</span>)被强转数据值;  <span class="hljs-comment">//()中的数据类型必须&lt;=变量值的数据类型</span><br></code></pre></td></tr></table></figure><p>（1）当把存储范围大的值（常量值、变量的值、表达式计算的结果值）强制转换为存储范围小的变量时，可能会<code>损失精度</code>或<code>溢出</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">3.14</span>;<span class="hljs-comment">//损失精度</span><br><br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)d;<span class="hljs-comment">//损失精度</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i;<span class="hljs-comment">//溢出</span><br></code></pre></td></tr></table></figure><p>（2）当某个值想要提升数据类型时，也可以使用强制类型转换。这种情况的强制类型转换是<code>没有风险</code>的，通常省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">bigger</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)(i/j);<br></code></pre></td></tr></table></figure><p>（3）声明long类型变量时，可以出现省略后缀的情况。float则不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123L</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<span class="hljs-comment">//如何理解呢？ 此时可以看做是int类型的123自动类型提升为long类型</span><br><br><span class="hljs-comment">//long l3 = 123123123123; //报错，因为123123123123超出了int的范围。</span><br><span class="hljs-type">long</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-number">123123123123L</span>;<br><br><br><span class="hljs-comment">//float f1 = 12.3; //报错，因为12.3看做是double，不能自动转换为float类型</span><br><span class="hljs-type">float</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3F</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)<span class="hljs-number">12.3</span>;<br></code></pre></td></tr></table></figure><p><strong>练习：判断是否能通过编译</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>）<span class="hljs-type">short</span>  <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>   s = s-<span class="hljs-number">2</span>;                     <span class="hljs-comment">//判断：no</span><br><span class="hljs-number">2</span>） <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    b = b + <span class="hljs-number">4</span>;                  <span class="hljs-comment">//判断：no</span><br>    b = (<span class="hljs-type">byte</span>)(b+<span class="hljs-number">4</span>);            <span class="hljs-comment">//判断：yes</span><br><span class="hljs-number">3</span>）<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ‘a’;<br>   <span class="hljs-type">int</span>  <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>   <span class="hljs-type">float</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">.314F</span>;<br>   <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> c+i+d;       <span class="hljs-comment">//判断：yes</span><br><span class="hljs-number">4</span>） <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-type">short</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> s + b;            <span class="hljs-comment">//判断：no</span><br><br></code></pre></td></tr></table></figure><p><strong>问答：为什么标识符的声明规则里要求不能数字开头？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果允许数字开头，则如下的声明编译就可以通过：</span><br><span class="hljs-type">int</span> <span class="hljs-number">123L</span> = <span class="hljs-number">12</span>;<br><span class="hljs-comment">//进而，如下的声明中l的值到底是123？还是变量123L对应的取值12呢？ 出现歧义了。</span><br><span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">123L</span>;<br></code></pre></td></tr></table></figure><h3 id="5-3-基本数据类型与String的运算"><a href="#5-3-基本数据类型与String的运算" class="headerlink" title="5.3 基本数据类型与String的运算"></a>5.3 基本数据类型与String的运算</h3><h4 id="5-3-1-字符串类型：String"><a href="#5-3-1-字符串类型：String" class="headerlink" title="5.3.1 字符串类型：String"></a>5.3.1 字符串类型：String</h4><ul><li>String不是基本数据类型，属于引用数据类型</li><li>使用一对<code>&quot;&quot;</code>来表示一个字符串，内部可以包含0个、1个或多个字符。</li><li>声明方式与基本数据类型类似。例如：String str &#x3D; “尚硅谷”;</li></ul><h4 id="5-3-2-运算规则"><a href="#5-3-2-运算规则" class="headerlink" title="5.3.2 运算规则"></a>5.3.2 运算规则</h4><p>1、任意八种基本数据类型的数据与String类型只能进行连接“+”运算，且结果一定也是String类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;&quot;</span> + <span class="hljs-number">1</span> + <span class="hljs-number">2</span>);<span class="hljs-comment">//12</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> s1 + num + b1;<br>System.out.println(s2);<span class="hljs-comment">//abc10true</span><br><br><span class="hljs-comment">//String s3 = num + b1 + s1;//编译不通过，因为int类型不能与boolean运算</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> num + (b1 + s1);<span class="hljs-comment">//编译通过</span><br></code></pre></td></tr></table></figure><p>2、String类型不能通过强制类型()转换，转为其他的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)str;<span class="hljs-comment">//错误的</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(str);<span class="hljs-comment">//正确的，后面才能讲到，借助包装类的方法才能转</span><br></code></pre></td></tr></table></figure><h4 id="5-3-3-案例与练习"><a href="#5-3-3-案例与练习" class="headerlink" title="5.3.3 案例与练习"></a>5.3.3 案例与练习</h4><p><strong>案例：公安局身份登记</strong></p><p>要求填写自己的姓名、年龄、性别、体重、婚姻状况（已婚用true表示，单身用false表示）、联系方式等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Info</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;康师傅&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">37</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> <span class="hljs-number">145.6</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isMarried</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phoneNumber</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;13112341234&quot;</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;年龄：&quot;</span> + age);<br>        System.out.println(<span class="hljs-string">&quot;性别：&quot;</span> + gender);<br>        System.out.println(<span class="hljs-string">&quot;体重：&quot;</span> + weight);<br>        System.out.println(<span class="hljs-string">&quot;婚否：&quot;</span> + isMarried);<br>        System.out.println(<span class="hljs-string">&quot;电话：&quot;</span> + phoneNumber);<br><span class="hljs-comment">//或者</span><br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name + <span class="hljs-string">&quot;,age = &quot;</span> + age + <span class="hljs-string">&quot;，gender = &quot;</span> + <br>                           gender + <span class="hljs-string">&quot;,weight = &quot;</span> + weight + <span class="hljs-string">&quot;,isMarried = &quot;</span> + isMarried +<br>                           <span class="hljs-string">&quot;,phoneNumber = &quot;</span> + phoneNumber);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习：</strong></p><p>练习1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;                       <span class="hljs-comment">//判断对错：</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.5f</span> + <span class="hljs-string">&quot;&quot;</span>;               <span class="hljs-comment">//判断str2对错：</span><br>System.out.println(str2);              <span class="hljs-comment">//输出：</span><br>System.out .println(<span class="hljs-number">3</span>+<span class="hljs-number">4</span>+<span class="hljs-string">&quot;Hello!&quot;</span>);     <span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;Hello!&quot;</span>+<span class="hljs-number">3</span>+<span class="hljs-number">4</span>);      <span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>+<span class="hljs-string">&quot;Hello!&quot;</span>);    <span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>+<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>);     <span class="hljs-comment">//输出：</span><br></code></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;*    *&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;*\t*&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span> + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//输出：</span><br></code></pre></td></tr></table></figure><h2 id="6-计算机底层如何存储数据"><a href="#6-计算机底层如何存储数据" class="headerlink" title="6. 计算机底层如何存储数据"></a>6. 计算机底层如何存储数据</h2><p>计算机世界中只有二进制，所以计算机中存储和运算的<code>所有数据</code>都要转为<code>二进制</code>。包括数字、字符、图片、声音、视频等。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731332_watermark.jpg" alt="010101" style="zoom: 33%;" /><p><strong>世界上有10种人 ，认识和不认识二进制的。</strong></p><h3 id="6-1-进制的分类"><a href="#6-1-进制的分类" class="headerlink" title="6.1 进制的分类"></a>6.1 进制的分类</h3><ul><li><p><strong>十进制（decimal）</strong></p><ul><li>数字组成：0-9</li><li>进位规则：满十进一</li></ul></li><li><p><strong>二进制（binary）</strong></p><ul><li>数字组成：0-1</li><li>进位规则：满二进一，以<code>0b</code>或<code>0B</code>开头</li></ul></li><li><p><strong>八进制（octal）：很少使用</strong></p><ul><li>数字组成：0-7</li><li>进位规则：满八进一，以数字<code>0</code>开头表示</li></ul></li><li><p><strong>十六进制</strong></p><ul><li>数字组成：0-9，a-f</li><li>进位规则：满十六进一，以<code>0x</code>或<code>0X</code>开头表示。此处的 a-f 不区分大小写</li></ul></li></ul><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<span class="hljs-comment">//十进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0b101</span>;<span class="hljs-comment">//二进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0127</span>;<span class="hljs-comment">//八进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num4</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x12aF</span>;<span class="hljs-comment">//十六进制</span><br><br>System.out.println(num1);<br>System.out.println(num2);<br>System.out.println(num3);<br>System.out.println(num4);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-进制的换算举例"><a href="#6-2-进制的换算举例" class="headerlink" title="6.2 进制的换算举例"></a>6.2 进制的换算举例</h3><table><thead><tr><th>十进制</th><th>二进制</th><th>八进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td><td>2</td><td>2</td></tr><tr><td>3</td><td>11</td><td>3</td><td>3</td></tr><tr><td>4</td><td>100</td><td>4</td><td>4</td></tr><tr><td>5</td><td>101</td><td>5</td><td>5</td></tr><tr><td>6</td><td>110</td><td>6</td><td>6</td></tr><tr><td>7</td><td>111</td><td>7</td><td>7</td></tr><tr><td>8</td><td>1000</td><td>10</td><td>8</td></tr><tr><td>9</td><td>1001</td><td>11</td><td>9</td></tr><tr><td>10</td><td>1010</td><td>12</td><td>a或A</td></tr><tr><td>11</td><td>1011</td><td>13</td><td>b或B</td></tr><tr><td>12</td><td>1100</td><td>14</td><td>c或C</td></tr><tr><td>13</td><td>1101</td><td>15</td><td>d或D</td></tr><tr><td>14</td><td>1110</td><td>16</td><td>e或E</td></tr><tr><td>15</td><td>1111</td><td>17</td><td>f或F</td></tr><tr><td>16</td><td>10000</td><td>20</td><td>10</td></tr></tbody></table><h3 id="6-3-二进制的由来"><a href="#6-3-二进制的由来" class="headerlink" title="6.3 二进制的由来"></a>6.3 二进制的由来</h3><p>二进制，是计算技术中广泛采用的一种数制，由德国数理哲学大师<code>莱布尼茨</code>于1679年发明。</p><p>二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“<code>逢二进一</code>”。</p><p>二进制广泛应用于我们生活的方方面面。比如，广泛使用的摩尔斯电码（Morse Code），它由两种基本信号组成：短促的点信号“<code>·</code>”，读“<code>滴</code>”；保持一定时间的长信号“<code>—</code>”，读“<code>嗒</code>”。然后，组成了26个字母，从而拼写出相应的单词。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731940_watermark.png" alt="image-20220520105721126" style="zoom:67%;" /><p>记忆技巧：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731734_watermark.jpg" alt="morsecode" style="zoom:50%;" /><p>我们偶尔会看到的：SOS，即为：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731140_watermark.png" alt="image-20220520110206899"></p><h3 id="6-4-二进制转十进制"><a href="#6-4-二进制转十进制" class="headerlink" title="6.4 二进制转十进制"></a>6.4 二进制转十进制</h3><p><strong>二进制如何表示整数？</strong></p><ul><li><p>计算机数据的存储使用二进制<code>补码</code>形式存储，并且<code>最高位是符号位</code>。</p><ul><li>正数：<code>最高位是0</code></li><li>负数：<code>最高位是1</code></li></ul></li><li><p>规 定</p><ul><li>正数的补码与反码、原码一样，称为<code>三码合一</code></li><li>负数的补码与反码、原码不一样：<ul><li>负数的<code>原码</code>：把十进制转为二进制，然后最高位设置为1</li><li>负数的<code>反码</code>：在原码的基础上，最高位不变，其余位取反（0变1,1变0）</li><li>负数的<code>补码</code>：反码+1</li></ul></li></ul></li></ul><p><strong>二进制转十进制：权相加法</strong></p><p>针对于byte数据举例来说：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731663_watermark.png" alt="image-20220523114701881"></p><ul><li><p>例如：byte类型（1个字节，8位）</p><p>25 &#x3D;&#x3D;&gt; 原码  0001 1001 &#x3D;&#x3D;&gt; 反码  0001 1001 –&gt;补码  0001 1001</p><p>-25 &#x3D;&#x3D;&gt;原码  1001 1001 &#x3D;&#x3D;&gt; 反码1110 0110 &#x3D;&#x3D;&gt;补码 1110 0111</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">整数：<br>正数：<span class="hljs-number">25</span>   <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000000</span> <span class="hljs-number">00011001</span>（原码）<br>正数：<span class="hljs-number">25</span>   <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000000</span> <span class="hljs-number">00011001</span>（反码）<br>正数：<span class="hljs-number">25</span>   <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000000</span> <span class="hljs-number">00011001</span>（补码）<br><br>负数：-<span class="hljs-number">25</span>  <span class="hljs-number">10000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000000</span> <span class="hljs-number">00011001</span>（原码）<br>负数：-<span class="hljs-number">25</span>  <span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">111111111</span> <span class="hljs-number">11100110</span>（反码）<br>负数：-<span class="hljs-number">25</span>  <span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">111111111</span> <span class="hljs-number">11100111</span>（补码）<br></code></pre></td></tr></table></figure><p><strong>一个字节可以存储的整数范围是多少？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1个字节：8位</span><br><br><span class="hljs-number">0000</span> <span class="hljs-number">0001</span>  ~  <span class="hljs-number">0111</span> <span class="hljs-number">111</span> ==&gt; <span class="hljs-number">1</span>~<span class="hljs-number">127</span><br><br><span class="hljs-number">1000</span> <span class="hljs-number">0001</span> ~ <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> ==&gt; -<span class="hljs-number">127</span> ~ -<span class="hljs-number">1</span><br><br><span class="hljs-number">0000</span> <span class="hljs-number">0000</span> ==&gt;<span class="hljs-number">0</span><br><br><span class="hljs-number">1000</span> <span class="hljs-number">0000</span> ==&gt; -<span class="hljs-number">128</span>（特殊规定）=-<span class="hljs-number">127</span>-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="6-5-十进制转二进制"><a href="#6-5-十进制转二进制" class="headerlink" title="6.5 十进制转二进制"></a>6.5 十进制转二进制</h3><p>十进制转二进制：<code>除2取余的逆</code></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731997_watermark.png" alt="image-20220312000042595" style="zoom:67%;" /><h3 id="6-6-二进制与八进制、十六进制间的转换"><a href="#6-6-二进制与八进制、十六进制间的转换" class="headerlink" title="6.6 二进制与八进制、十六进制间的转换"></a>6.6 二进制与八进制、十六进制间的转换</h3><p><strong>二进制转八进制</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731408_watermark.png" alt="image-20220312000233863" style="zoom:80%;" /><p><strong>二进制转十六进制</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731222_watermark.png" alt="image-20220312000251113" style="zoom:80%;" /><p><strong>八进制、十六进制转二进制</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731430_watermark.png" alt="image-20220312000341297" style="zoom: 67%;" /><h3 id="6-7-各进制间的转换"><a href="#6-7-各进制间的转换" class="headerlink" title="6.7 各进制间的转换"></a>6.7 各进制间的转换</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731977_watermark.png" alt="image-20220312000143438" style="zoom:80%;" /><p><strong>练习：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>.将以下十进制数转换为十六进制和二进制<br><span class="hljs-symbol">123 </span> <span class="hljs-number">256</span>  <span class="hljs-number">87</span>  <span class="hljs-number">62</span><br><br><br><span class="hljs-number">2</span>.将以下十六进制数转换为十进制和二进制<br><span class="hljs-number">0</span>x123   <span class="hljs-number">0</span>x25F  <span class="hljs-number">0</span>x38  <span class="hljs-number">0</span>x62<br></code></pre></td></tr></table></figure><h2 id="7-运算符（Operator）"><a href="#7-运算符（Operator）" class="headerlink" title="7. 运算符（Operator）"></a>7. 运算符（Operator）</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><p>运算符的分类：</p><ul><li>按照<code>功能</code>分为：算术运算符、赋值运算符、比较(或关系)运算符、逻辑运算符、位运算符、条件运算符、Lambda运算符</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">算术运算符（7个）</td><td align="center">+、-、*、&#x2F;、%、++、–</td></tr><tr><td align="center">赋值运算符（12个）</td><td align="center">&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、&gt;&gt;&#x3D;、&lt;&lt;&#x3D;、&gt;&gt;&gt;&#x3D;、&amp;&#x3D;、|&#x3D;、^&#x3D;等</td></tr><tr><td align="center">比较(或关系)运算符（6个）</td><td align="center">&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、&#x3D;&#x3D;、!&#x3D;</td></tr><tr><td align="center">逻辑运算符（6个）</td><td align="center">&amp;、|、^、!、&amp;&amp;、||</td></tr><tr><td align="center">位运算符（7个）</td><td align="center">&amp;、|、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td></tr><tr><td align="center">条件运算符（1个）</td><td align="center">(条件表达式)?结果1:结果2</td></tr><tr><td align="center">Lambda运算符（1个）</td><td align="center">-&gt;（第18章时讲解）</td></tr></tbody></table><ul><li>按照<code>操作数个数</code>分为：一元运算符（单目运算符）、二元运算符（双目运算符）、三元运算符 （三目运算符）</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">一元运算符（单目运算符）</td><td align="center">正号（+）、负号（-）、++、–、!、~</td></tr><tr><td align="center">二元运算符（双目运算符）</td><td align="center">除了一元和三元运算符剩下的都是二元运算符</td></tr><tr><td align="center">三元运算符 （三目运算符）</td><td align="center">(条件表达式)?结果1:结果2</td></tr></tbody></table><h3 id="7-1-算术运算符"><a href="#7-1-算术运算符" class="headerlink" title="7.1 算术运算符"></a>7.1 算术运算符</h3><h4 id="7-1-1-基本语法"><a href="#7-1-1-基本语法" class="headerlink" title="7.1.1 基本语法"></a>7.1.1 基本语法</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731353_watermark.png" alt="image-20220312000848332"></p><p>举例1：加减乘除模</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><br>System.out.println(a + b);<span class="hljs-comment">// 7</span><br>System.out.println(a - b);<span class="hljs-comment">// -1</span><br>System.out.println(a * b);<span class="hljs-comment">// 12</span><br>System.out.println(a / b);<span class="hljs-comment">// 计算机结果是0，为什么不是0.75呢？</span><br>System.out.println(a % b);<span class="hljs-comment">// 3</span><br>        <br>        <span class="hljs-comment">//结果与被模数符号相同</span><br>        System.out.println(<span class="hljs-number">5</span>%<span class="hljs-number">2</span>);<span class="hljs-comment">//1</span><br>System.out.println(<span class="hljs-number">5</span>%-<span class="hljs-number">2</span>);<span class="hljs-comment">//1</span><br>System.out.println(-<span class="hljs-number">5</span>%<span class="hljs-number">2</span>);<span class="hljs-comment">//-1</span><br>System.out.println(-<span class="hljs-number">5</span>%-<span class="hljs-number">2</span>);<span class="hljs-comment">//-1</span><br><span class="hljs-comment">//商*除数 + 余数 = 被除数</span><br><span class="hljs-comment">//5%-2  ==&gt;商是-2，余数时1    (-2)*(-2)+1 = 5</span><br><span class="hljs-comment">//-5%2  ==&gt;商是-2，余数是-1   (-2)*2+(-1) = -4-1=-5</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例2：“+”号的两种用法</p><ul><li>第一种：对于<code>+</code>两边都是数值的话，<code>+</code>就是加法的意思</li><li>第二种：对于<code>+</code>两边至少有一边是字符串的话，<code>+</code>就是拼接的意思</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 字符串类型的变量基本使用</span><br><span class="hljs-comment">// 数据类型 变量名称 = 数据值;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>System.out.println(str1); <span class="hljs-comment">// Hello</span><br><br>System.out.println(<span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-string">&quot;World&quot;</span>); <span class="hljs-comment">// HelloWorld</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>;<br><span class="hljs-comment">// String + int --&gt; String</span><br>System.out.println(str2 + <span class="hljs-number">520</span>); <span class="hljs-comment">// Java520</span><br><span class="hljs-comment">// String + int + int</span><br><span class="hljs-comment">// String+ int</span><br><span class="hljs-comment">// String</span><br>System.out.println(str2 + <span class="hljs-number">5</span> + <span class="hljs-number">20</span>); <span class="hljs-comment">// Java520</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例3：自加自减运算</p><p>理解：<code>++</code>  运算，表示<code>自增1</code>。同理，<code>--</code> 运算，表示<code>自减1</code>，用法与++ 一致。</p><p>1、单独使用</p><ul><li>变量在单独运算的时候，变量<code>前++</code>和变量<code>后++</code>，是没有区别的。</li><li>变量<code>前++</code>   ：例如 <code>++a</code> 。</li><li>变量<code>后++</code>   ：例如 <code>a++</code> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticTest3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 定义一个int类型的变量a</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-comment">//++a;</span><br>a++;<br>        <span class="hljs-comment">// 无论是变量前++还是变量后++，结果都是4</span><br>System.out.println(a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、复合使用</p><ul><li>和<code>其他变量放在一起使用</code>或者和<code>输出语句放在一起使用</code>，<code>前++</code>和<code>后++</code>就产生了不同。</li></ul><ul><li>变量<code>前++</code> ：变量先自增1，然后再运算。</li><li>变量<code>后++</code> ：变量先运算，然后再自增1。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 其他变量放在一起使用</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-comment">//int y = ++x; // y的值是4，x的值是4，</span><br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> x++; <span class="hljs-comment">// y的值是3，x的值是4</span><br><br>System.out.println(x);<br>System.out.println(y);<br>System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);<br>        <br><span class="hljs-comment">// 和输出语句一起</span><br><span class="hljs-type">int</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-comment">//System.out.println(++z);// 输出结果是6，z的值也是6</span><br>System.out.println(z++);<span class="hljs-comment">// 输出结果是5，z的值是6</span><br>System.out.println(z);<br>        <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-1-2-案例与练习"><a href="#7-1-2-案例与练习" class="headerlink" title="7.1.2 案例与练习"></a>7.1.2 案例与练习</h4><p><strong>案例1：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs">随意给出一个整数，打印显示它的个位数，十位数，百位数的值。<br>格式如下：<br>数字xxx的情况如下：<br>个位数：<br>十位数：<br>百位数：<br><br>例如：<br>数字153的情况如下：<br>个位数：3<br>十位数：5<br>百位数：1<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">187</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> num / <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>;<span class="hljs-comment">//int shi = num / 10 % 10;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">10</span>;<br><br>System.out.println(<span class="hljs-string">&quot;百位为：&quot;</span> + bai);<br>System.out.println(<span class="hljs-string">&quot;十位为：&quot;</span> + shi);<br>System.out.println(<span class="hljs-string">&quot;个位为：&quot;</span> + ge);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拓展：获取一个四位数的个位，十位，百位，千位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String [] args)</span> &#123;<br>        <span class="hljs-comment">//1.定义一个变量，赋值为一个四位数整数，例如1234</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234</span>;<br><br>        <span class="hljs-comment">//2.通过运算操作求出个位，十位，百位，千位</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> num /<span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> num /<span class="hljs-number">100</span> % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">qian</span> <span class="hljs-operator">=</span> num / <span class="hljs-number">1000</span> % <span class="hljs-number">10</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;个位上的数字是：&quot;</span> + ge);<br>        System.out.println(<span class="hljs-string">&quot;十位上的数字是：&quot;</span> + shi);<br>        System.out.println(<span class="hljs-string">&quot;百位上的数字是：&quot;</span> + bai);<br>        System.out.println(<span class="hljs-string">&quot;千位上的数字是：&quot;</span> + qian);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>为抵抗洪水，战士连续作战89小时，编程计算共多少天零多少小时？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 17:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hours</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> hours / <span class="hljs-number">24</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> hours % <span class="hljs-number">24</span>;<br>        System.out.println(<span class="hljs-string">&quot;为抵抗洪水，战士连续作战89小时：&quot;</span>);<br>        System.out.println(hours + <span class="hljs-string">&quot;是&quot;</span> + day + <span class="hljs-string">&quot;天&quot;</span> + hour +<span class="hljs-string">&quot;小时&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习1：算术运算符：自加、自减</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer3</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> i1++;<br>        System.out.print(<span class="hljs-string">&quot;i=&quot;</span>+i); <span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;i1=&quot;</span>+i1);<span class="hljs-comment">//</span><br>        i = ++i1;<br>        System.out.print(<span class="hljs-string">&quot;i=&quot;</span>+i);<span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;i1=&quot;</span>+i1);<span class="hljs-comment">//</span><br>        i = i2--;<br>        System.out.print(<span class="hljs-string">&quot;i=&quot;</span>+i);<span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;i2=&quot;</span>+i2);<span class="hljs-comment">//</span><br>        i = --i2;<br>        System.out.print(<span class="hljs-string">&quot;i=&quot;</span>+i);<span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;i2=&quot;</span>+i2);<span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;5+5=&quot;</span> + <span class="hljs-number">5</span> + <span class="hljs-number">5</span>); <span class="hljs-comment">//打印结果是？ 5+5=55 ?</span><br></code></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">bb1</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>bb1++;<br>System.out.println(<span class="hljs-string">&quot;bb1 = &quot;</span> + bb1);<span class="hljs-comment">//-128</span><br></code></pre></td></tr></table></figure><p>练习4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i++ + ++i * i++;<br>System.out.println(<span class="hljs-string">&quot;j = &quot;</span> + j);<br></code></pre></td></tr></table></figure><p>练习5：（企业真题）写出下列程序的输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i++;<br>System.out.println(j);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>m = m++; <span class="hljs-comment">//(1)先取b的值“2”放操作数栈 (2)m再自增,m=3 (3)再把操作数栈中的&quot;2&quot;赋值给m,m=2</span><br>System.out.println(m);<br></code></pre></td></tr></table></figure><h3 id="7-2-赋值运算符"><a href="#7-2-赋值运算符" class="headerlink" title="7.2 赋值运算符"></a>7.2 赋值运算符</h3><h4 id="7-2-1-基本语法"><a href="#7-2-1-基本语法" class="headerlink" title="7.2.1 基本语法"></a>7.2.1 基本语法</h4><ul><li><p>符号：&#x3D; </p><ul><li>当“&#x3D;”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li><li>支持<code>连续赋值</code>。</li></ul></li><li><p>扩展赋值运算符： +&#x3D;、 -&#x3D;、*&#x3D;、 &#x2F;&#x3D;、%&#x3D;</p><table><thead><tr><th align="center">赋值运算符</th><th align="center">符号解释</th></tr></thead><tbody><tr><td align="center"><code>+=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相加</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>-=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相减</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>*=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相乘</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>/=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相除</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>%=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>取余</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr></tbody></table></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetValueTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> i1; <span class="hljs-comment">//自动类型转换</span><br><br><span class="hljs-type">byte</span> <span class="hljs-variable">bb1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i1; <span class="hljs-comment">//强制类型转换</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> i1;<br><br><span class="hljs-comment">//连续赋值的测试</span><br><span class="hljs-comment">//以前的写法</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//连续赋值的写法</span><br><span class="hljs-type">int</span> a2,b2;<br>a2 = b2 = <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>,b3 = <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">//举例说明+=  -=  *=  /=   %=  </span><br><span class="hljs-type">int</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>m1 += <span class="hljs-number">5</span>; <span class="hljs-comment">//类似于 m1 = m1 + 5的操作，但不等同于。</span><br>System.out.println(m1);<span class="hljs-comment">//15</span><br><br><span class="hljs-comment">//练习1：开发中，如何实现一个变量+2的操作呢？</span><br><span class="hljs-comment">// += 的操作不会改变变量本身的数据类型。其他拓展的运算符也如此。</span><br><span class="hljs-comment">//写法1：推荐</span><br><span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>s1 += <span class="hljs-number">2</span>; <span class="hljs-comment">//编译通过，因为在得到int类型的结果后，JVM自动完成一步强制类型转换，将int类型强转成short</span><br>System.out.println(s1);<span class="hljs-comment">//12</span><br><span class="hljs-comment">//写法2：</span><br><span class="hljs-type">short</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">//s2 = s2 + 2;//编译报错，因为将int类型的结果赋值给short类型的变量s时，可能损失精度</span><br>s2 = (<span class="hljs-type">short</span>)(s2 + <span class="hljs-number">2</span>);<br>System.out.println(s2);<br><br><br><span class="hljs-comment">//练习2：开发中，如何实现一个变量+1的操作呢？</span><br><span class="hljs-comment">//写法1：推荐</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num1++;<br>System.out.println(num1);<br><br><span class="hljs-comment">//写法2：</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num2 += <span class="hljs-number">1</span>;<br>System.out.println(num2);<br><br><span class="hljs-comment">//写法3：</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num3 = num3 + <span class="hljs-number">1</span>;<br>System.out.println(num3);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-2-练习"><a href="#7-2-2-练习" class="headerlink" title="7.2.2 练习"></a>7.2.2 练习</h4><p>练习1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; <br>s = s+<span class="hljs-number">2</span>;  <span class="hljs-comment">//① 编译报错</span><br>s += <span class="hljs-number">2</span>;   <span class="hljs-comment">//② 正常执行</span><br><br><span class="hljs-comment">//①和②有什么区别？ </span><br><br></code></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>i *= <span class="hljs-number">0.1</span>;<br>System.out.println(i);<span class="hljs-comment">//0</span><br>i++;<br>System.out.println(i);<span class="hljs-comment">//1</span><br><br></code></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>n *= m++; <span class="hljs-comment">//n = n * m++;</span><br>System.out.println(<span class="hljs-string">&quot;m=&quot;</span> + m);<span class="hljs-comment">//3</span><br>System.out.println(<span class="hljs-string">&quot;n=&quot;</span> + n);<span class="hljs-comment">//6</span><br><br></code></pre></td></tr></table></figure><p>练习4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>n += (n++) + (++n);  <span class="hljs-comment">//n = n + (n++) + (++n)</span><br>System.out.println(n);<span class="hljs-comment">//32</span><br><br></code></pre></td></tr></table></figure><p>练习5：你有几种办法实现变量值减1？变量值减2呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 16:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinusTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//练习①：变量值减1</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//方式1：</span><br>        <span class="hljs-comment">//s = (short)(s - 1);</span><br>        <span class="hljs-comment">//方式2：推荐</span><br>        s--; <span class="hljs-comment">//或者 --s</span><br>        <span class="hljs-comment">//方式3：</span><br>        s -= <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//练习②：变量值减2</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//方式1：</span><br>        <span class="hljs-comment">//s1 = (short)(s1 - 2);</span><br>        <span class="hljs-comment">//方式2：推荐</span><br>        s1 -= <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-比较-关系-运算符"><a href="#7-3-比较-关系-运算符" class="headerlink" title="7.3 比较(关系)运算符"></a>7.3 比较(关系)运算符</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731870_watermark.png" alt="image-20220312001742263"></p><ul><li><p>比较运算符的结果都是boolean型，也就是要么是true，要么是false。</p></li><li><p>&gt;   &lt;   &gt;&#x3D;  &lt;&#x3D; ：只适用于基本数据类型（除boolean类型之外）</p><p>&#x3D;&#x3D;   !&#x3D; ：适用于基本数据类型和引用数据类型</p></li><li><p>比较运算符“<code>==</code>”不能误写成“<code>=</code>”</p></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>System.out.println(i1 == i2);<span class="hljs-comment">//false</span><br>System.out.println(i1 != i2);<span class="hljs-comment">//true</span><br>System.out.println(i1 &gt;= i2);<span class="hljs-comment">//false</span><br><br><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>System.out.println(m == n);<span class="hljs-comment">//false</span><br>System.out.println(m = n);<span class="hljs-comment">//20</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>System.out.println(b1 == b2);<span class="hljs-comment">//false</span><br>System.out.println(b1 = b2);<span class="hljs-comment">//true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>思考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//区分好==和=的区别。</span><br><span class="hljs-keyword">if</span>(b1 == <span class="hljs-literal">true</span>)  <span class="hljs-comment">//if(b1 = true)</span><br>System.out.println(<span class="hljs-string">&quot;结果为真&quot;</span>);<br><span class="hljs-keyword">else</span><br>System.out.println(<span class="hljs-string">&quot;结果为假&quot;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="7-4-逻辑运算符"><a href="#7-4-逻辑运算符" class="headerlink" title="7.4 逻辑运算符"></a>7.4 逻辑运算符</h3><h4 id="7-4-1-基本语法"><a href="#7-4-1-基本语法" class="headerlink" title="7.4.1 基本语法"></a>7.4.1 基本语法</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731548_watermark.png" alt="image-20220312001943403" style="zoom: 67%;" /><ul><li><p>逻辑运算符，操作的都是boolean类型的变量或常量，而且运算得结果也是boolean类型的值。</p></li><li><p>运算符说明：</p><ul><li>&amp; 和 &amp;&amp;：表示”且”关系，当符号左右两边布尔值都是true时，结果才能为true。否则，为false。</li><li>| 和 || ：表示”或”关系，当符号两边布尔值有一边为true时，结果为true。当两边都为false时，结果为false</li><li>! ：表示”非”关系，当变量布尔值为true时，结果为false。当变量布尔值为false时，结果为true。</li><li>^ ：当符号左右两边布尔值不同时，结果为true。当两边布尔值相同时，结果为false。<ul><li>理解：<code>异或，追求的是“异”！</code></li></ul></li></ul></li><li><p>逻辑运算符用于连接布尔型表达式，在Java中不可以写成 3 &lt; x &lt; 6，应该写成x &gt; 3 &amp; x &lt; 6 。</p></li><li><p><strong>区分“&amp;”和“&amp;&amp;”：</strong></p><ul><li><p>相同点：如果符号左边是true，则二者都执行符号右边的操作</p></li><li><p>不同点：&amp; ： 如果符号左边是false,则继续执行符号右边的操作</p></li></ul><p>​                     &amp;&amp; ：如果符号左边是false,则不再继续执行符号右边的操作</p><ul><li>建议：开发中，推荐使用 &amp;&amp;</li></ul></li><li><p><strong>区分“|”和“||”：</strong></p><ul><li><p>相同点：如果符号左边是false，则二者都执行符号右边的操作</p></li><li><p>不同点：| ： 如果符号左边是true，则继续执行符号右边的操作</p><p>​               || ：如果符号左边是true，则不再继续执行符号右边的操作</p></li><li><p>建议：开发中，推荐使用 ||</p></li></ul></li></ul><p> 代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br><span class="hljs-comment">// &amp; 与，且；有false则false</span><br>System.out.println((a &gt; b) &amp; (a &gt; c)); <br>System.out.println((a &gt; b) &amp; (a &lt; c)); <br>System.out.println((a &lt; b) &amp; (a &gt; c)); <br>System.out.println((a &lt; b) &amp; (a &lt; c)); <br>System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);<br><span class="hljs-comment">// | 或；有true则true</span><br>System.out.println((a &gt; b) | (a &gt; c)); <br>System.out.println((a &gt; b) | (a &lt; c)); <br>System.out.println((a &lt; b) | (a &gt; c));<br>System.out.println((a &lt; b) | (a &lt; c));<br>System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);<br><span class="hljs-comment">// ^ 异或；相同为false，不同为true</span><br>System.out.println((a &gt; b) ^ (a &gt; c));<br>System.out.println((a &gt; b) ^ (a &lt; c)); <br>System.out.println((a &lt; b) ^ (a &gt; c)); <br>System.out.println((a &lt; b) ^ (a &lt; c)); <br>System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);<br><span class="hljs-comment">// ! 非；非false则true，非true则false</span><br>System.out.println(!<span class="hljs-literal">false</span>);<br>System.out.println(!<span class="hljs-literal">true</span>);<br>        <br>        <span class="hljs-comment">//&amp;和&amp;&amp;的区别</span><br>        System.out.println((a &gt; b) &amp; (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println((a &gt; b) &amp;&amp; (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println((a == b) &amp;&amp; (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        <br>        <span class="hljs-comment">//|和||的区别</span><br>        System.out.println((a &gt; b) | (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println((a &gt; b) || (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println((a == b) || (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-4-2-案例与练习"><a href="#7-4-2-案例与练习" class="headerlink" title="7.4.2 案例与练习"></a>7.4.2 案例与练习</h4><p><strong>案例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>. 定义类 CompareLogicExer<br><span class="hljs-number">2</span>. 定义 <span class="hljs-selector-tag">main</span>方法<br><span class="hljs-number">3</span>. 定义一个int类型变量<span class="hljs-selector-tag">a</span>,变量<span class="hljs-selector-tag">b</span>,都赋值为<span class="hljs-number">20</span><br><span class="hljs-number">4</span>. 定义boolean类型变量bo1 , 判断++<span class="hljs-selector-tag">a</span> 是否被<span class="hljs-number">3</span>整除,并且<span class="hljs-selector-tag">a</span>++ 是否被<span class="hljs-number">7</span>整除,将结果赋值给bo1<br><span class="hljs-number">5</span>. 输出<span class="hljs-selector-tag">a</span>的值,bo1的值<br><span class="hljs-number">6</span>. 定义boolean类型变量bo2 , 判断<span class="hljs-selector-tag">b</span>++ 是否被<span class="hljs-number">3</span>整除,并且++<span class="hljs-selector-tag">b</span> 是否被<span class="hljs-number">7</span>整除,将结果赋值给bo2<br><span class="hljs-number">7</span>. 输出<span class="hljs-selector-tag">b</span>的值,bo2的值<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareLogicExer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bo1</span> <span class="hljs-operator">=</span> ((++a % <span class="hljs-number">3</span>) == <span class="hljs-number">0</span>) &amp;&amp; ((a++ % <span class="hljs-number">7</span>) == <span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;bo1的值：&quot;</span> + bo1);<br>        System.out.println(<span class="hljs-string">&quot;a的值：&quot;</span> + a);<br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bo2</span> <span class="hljs-operator">=</span> ((b++ % <span class="hljs-number">3</span>) == <span class="hljs-number">0</span>) &amp;&amp; ((++b % <span class="hljs-number">7</span>) == <span class="hljs-number">0</span>); <br>        System.out.println(<span class="hljs-string">&quot;bo2的值：&quot;</span> + bo2);<br>        System.out.println(<span class="hljs-string">&quot;b的值：&quot;</span> + b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习1：</strong>区分 &amp; 和 &amp;&amp; </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(x++ == <span class="hljs-number">2</span> &amp; ++y == <span class="hljs-number">2</span>)&#123;<br>x = <span class="hljs-number">7</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x=&quot;</span> + x + <span class="hljs-string">&quot;,y=&quot;</span> + y);<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>,y = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(x++ == <span class="hljs-number">2</span> &amp;&amp; ++y == <span class="hljs-number">2</span>)&#123;<br>x =<span class="hljs-number">7</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x=&quot;</span>+x+<span class="hljs-string">&quot;,y=&quot;</span>+y);<br><br></code></pre></td></tr></table></figure><p><strong>练习2：</strong>区分 | 和 ||</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>,y = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(x++==<span class="hljs-number">1</span> | ++y==<span class="hljs-number">1</span>)&#123;<br>x =<span class="hljs-number">7</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x=&quot;</span>+x+<span class="hljs-string">&quot;,y=&quot;</span>+y);<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>,y = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(x++==<span class="hljs-number">1</span> || ++y==<span class="hljs-number">1</span>)&#123;<br>x =<span class="hljs-number">7</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x=&quot;</span>+x+<span class="hljs-string">&quot;,y=&quot;</span>+y);<br><br></code></pre></td></tr></table></figure><p><strong>练习3：</strong>程序输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Test</span>  &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String []  args)</span>  &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">42</span>;<br>        <br>        <span class="hljs-keyword">if</span> ((z++ == <span class="hljs-number">42</span>) &amp;&amp; (y = <span class="hljs-literal">true</span>)) &#123;<br>            z++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((x = <span class="hljs-literal">false</span>) || (++z == <span class="hljs-number">45</span>)) &#123;<br>            z++;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;z=&quot;</span> + z);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//结果为：</span><br><span class="hljs-comment">//z= 46</span><br></code></pre></td></tr></table></figure><h3 id="7-5-位运算符"><a href="#7-5-位运算符" class="headerlink" title="7.5 位运算符"></a>7.5 位运算符</h3><h4 id="7-5-1-基本语法"><a href="#7-5-1-基本语法" class="headerlink" title="7.5.1 基本语法"></a>7.5.1 基本语法</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731874_watermark.png" alt="image-20220313174721111" style="zoom:75%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731301_watermark.png" alt="image-20220312002506339" style="zoom:67%;" /><ul><li>位运算符的运算过程都是基于二进制的补码运算</li></ul><p><strong>（1）左移：&lt;&lt;</strong></p><p>运算规则：在一定范围内，数据每向左移动一位，相当于原数据*2。（正数、负数都适用）</p><p>【注意】当左移的位数n超过该数据类型的总位数时，相当于左移（n-总位数）位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">3</span>&lt;&lt;<span class="hljs-number">4</span>  类似于  <span class="hljs-number">3</span>*<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次幂 =&gt; <span class="hljs-number">3</span>*<span class="hljs-number">16</span> =&gt; <span class="hljs-number">48</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731941_watermark.png" alt="image-20200225113651675"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">3</span>&lt;&lt;<span class="hljs-number">4</span>  类似于  -<span class="hljs-number">3</span>*<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次幂 =&gt; -<span class="hljs-number">3</span>*<span class="hljs-number">16</span> =&gt; -<span class="hljs-number">48</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731211_watermark.png" alt="image-20200225114707524"></p><p><strong>（2）右移：&gt;&gt;</strong></p><p>运算规则：在一定范围内，数据每向右移动一位，相当于原数据&#x2F;2。（正数、负数都适用）</p><p>【注意】如果不能整除，<code>向下取整</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">69</span>&gt;&gt;<span class="hljs-number">4</span>  类似于  <span class="hljs-number">69</span>/<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次 = <span class="hljs-number">69</span>/<span class="hljs-number">16</span> =<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731662_watermark.png" alt="image-20200225115636844"></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">-69</span>&gt;&gt;4  类似于  <span class="hljs-string">-69</span>/2的4次 = <span class="hljs-string">-69</span>/16 = <span class="hljs-string">-5</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731142_watermark.png" alt="image-20200225120112188"></p><p><strong>（3）无符号右移：&gt;&gt;&gt;</strong></p><p>运算规则：往右移动后，左边空出来的位直接补0。（正数、负数都适用）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">69</span>&gt;&gt;&gt;<span class="hljs-number">4</span>  类似于  <span class="hljs-number">69</span>/<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次 = <span class="hljs-number">69</span>/<span class="hljs-number">16</span> =<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731824_watermark.png" alt="image-20200225121104734"></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-69&gt;&gt;&gt;4   结果：268435451</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731209_watermark.png" alt="image-20200225121244290"></p><p><strong>（4）按位与：&amp;</strong></p><p>运算规则：对应位都是1才为1，否则为0。</p><ul><li><p>1 &amp; 1 结果为1</p></li><li><p>1 &amp; 0 结果为0</p></li><li><p>0 &amp; 1 结果为0</p></li><li><p>0 &amp; 0 结果为0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">9</span> &amp; <span class="hljs-number">7</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731837_watermark.png" alt="image-20200225122440953"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">9</span> &amp; <span class="hljs-number">7</span> = <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731199_watermark.png" alt="image-20200225122221616"></p><p><strong>（5）按位或：|</strong></p><p>运算规则：对应位只要有1即为1，否则为0。</p><ul><li><p>1 | 1 结果为1</p></li><li><p>1 | 0 结果为1</p></li><li><p>0 | 1 结果为1</p></li><li><p>0 &amp; 0 结果为0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">9</span> | <span class="hljs-number">7</span>  <span class="hljs-comment">//结果： 15</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731532_watermark.png" alt="image-20200225122758851"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">9</span> | <span class="hljs-number">7</span> <span class="hljs-comment">//结果： -9</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731855_watermark.png" alt="image-20200225123409130"></p><p><strong>（6）按位异或：^</strong></p><p>运算规则：对应位一个为1一个为0，才为1，否则为0。</p><ul><li><p>1 ^ 1 结果为0</p></li><li><p>1 ^ 0 结果为1</p></li><li><p>0 ^ 1 结果为1</p></li><li><p>0 ^ 0 结果为0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">9</span> ^ <span class="hljs-number">7</span>  <span class="hljs-comment">//结果为14</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731050_watermark.png" alt="image-20200225123445305"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">9</span> ^ <span class="hljs-number">7</span> <span class="hljs-comment">//结果为-16</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731378_watermark.png" alt="image-20200225133145727"></p><p><strong>（7）按位取反：~</strong></p><p>运算规则：对应位为1，则结果为0；对应位为0，则结果为1。</p><ul><li><p>~0就是1  </p></li><li><p>~1就是0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">~<span class="hljs-number">9</span>  <span class="hljs-comment">//结果：-10</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731749_watermark.png" alt="image-20200225124112662"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">~-<span class="hljs-number">9</span>  <span class="hljs-comment">//结果：8</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731945_watermark.png" alt="image-20200225124156862"></p><h4 id="7-5-2-举例"><a href="#7-5-2-举例" class="headerlink" title="7.5.2 举例"></a>7.5.2 举例</h4><p><strong>举例1：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731320_watermark.jpg" alt="snipaste_20220312_002549" style="zoom: 67%;" /><p><strong>举例2：体会 m &#x3D; k ^ n &#x3D; (m ^ n) ^ n</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731177_watermark.png" alt="image-20220312002736157" style="zoom:67%;" /><h4 id="7-5-3-案例"><a href="#7-5-3-案例" class="headerlink" title="7.5.3 案例"></a>7.5.3 案例</h4><p><strong>案例1：</strong>高效的方式计算2 * 8的值（经典面试题）</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">答案：2 &lt;&lt;<span class="hljs-number"> 3 </span>、 <span class="hljs-number"> 8 </span> &lt;&lt; 1<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>如何交换两个int型变量的值？String呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 16:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BitExer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br><br><span class="hljs-comment">//（推荐）实现方式1：优点：容易理解，适用于不同数据类型    缺点：需要额外定义变量</span><br><span class="hljs-comment">//int temp = m;</span><br><span class="hljs-comment">//m = n;</span><br><span class="hljs-comment">//n = temp;</span><br><br><span class="hljs-comment">//实现方式2：优点：没有额外定义变量    缺点：可能超出int的范围；只能适用于数值类型</span><br><span class="hljs-comment">//m = m + n; //15 = 10 + 5</span><br><span class="hljs-comment">//n = m - n;//10 = 15 - 5</span><br><span class="hljs-comment">//m = m - n;//5 = 15 - 10</span><br><br><span class="hljs-comment">//实现方式3：优点：没有额外定义变量    缺点：不易理解；只能适用于数值类型</span><br>m = m ^ n; <br>n = m ^ n; <span class="hljs-comment">//(m ^ n) ^ n</span><br>m = m ^ n;<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-6-条件运算符"><a href="#7-6-条件运算符" class="headerlink" title="7.6 条件运算符"></a>7.6 条件运算符</h3><h4 id="7-6-1-基本语法"><a href="#7-6-1-基本语法" class="headerlink" title="7.6.1 基本语法"></a>7.6.1 基本语法</h4><ul><li>条件运算符格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(条件表达式)? 表达式<span class="hljs-number">1</span>:表达式<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li><p>说明：条件表达式是boolean类型的结果，根据boolean的值选择表达式1或表达式2</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731633_watermark.png" alt="image-20220312002841945" style="zoom:67%;" /></li><li><p>如果运算后的结果赋给新的变量，要求表达式1和表达式2为同种或兼容的类型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (<span class="hljs-number">1</span>==<span class="hljs-number">2</span> ? <span class="hljs-number">100</span> : <span class="hljs-number">200</span>);<br>    System.out.println(i);<span class="hljs-comment">//200</span><br>    <br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">marry</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>System.out.println(marry ? <span class="hljs-string">&quot;已婚&quot;</span> : <span class="hljs-string">&quot;未婚&quot;</span>  );<br>    <br>    <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> (m1 &gt; m2)? <span class="hljs-number">1</span> : <span class="hljs-number">2.0</span>;<br>System.out.println(d1);<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>    System.out.println(num &gt; <span class="hljs-number">0</span>? <span class="hljs-literal">true</span> : <span class="hljs-string">&quot;num非正数&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-6-2-案例"><a href="#7-6-2-案例" class="headerlink" title="7.6.2 案例"></a>7.6.2 案例</h4><p><strong>案例1：</strong>获取两个数中的较大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionExer1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//获取两个数的较大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max1</span> <span class="hljs-operator">=</span> (m1 &gt; m2)? m1 : m2;<br>        System.out.println(<span class="hljs-string">&quot;m1和m2中的较大值为&quot;</span> + max1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>获取三个数中的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionExer2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">33</span>;<br>        <span class="hljs-comment">//写法1：</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempMax</span> <span class="hljs-operator">=</span> (n1 &gt; n2)? n1:n2;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalMax</span> <span class="hljs-operator">=</span> (tempMax &gt; n3)? tempMax : n3;<br>        System.out.println(<span class="hljs-string">&quot;三个数中最大值为：&quot;</span> + finalMax);<br><br>        <span class="hljs-comment">//写法2：不推荐，可读性差</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalMax1</span> <span class="hljs-operator">=</span> (((n1 &gt; n2)? n1:n2) &gt; n3)? ((n1 &gt; n2)? n1:n2) : n3;<br>        System.out.println(<span class="hljs-string">&quot;三个数中最大值为：&quot;</span> + finalMax1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>今天是周2，10天以后是周几？</p><p>要求：控制台输出”今天是周2，10天以后是周x”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionExer3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        week += <span class="hljs-number">10</span>;<br>        week %= <span class="hljs-number">7</span>;<br>        System.out.println(<span class="hljs-string">&quot;今天是周2,10天以后是周&quot;</span> + (week == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;日&quot;</span> : week));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-6-3-与if-else的转换关系"><a href="#7-6-3-与if-else的转换关系" class="headerlink" title="7.6.3 与if-else的转换关系"></a>7.6.3 与if-else的转换关系</h4><ul><li><p>凡是可以使用条件运算符的地方，都可以改写为if-else结构。反之，不成立。</p></li><li><p>开发中，如果既可以使用条件运算符，又可以使用if-else，推荐使用条件运算符。因为执行效率稍高。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//if-else实现获取两个数的较大值</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br><span class="hljs-type">int</span> max;<span class="hljs-comment">//声明变量max，用于记录i1和i2的较大值</span><br><br><span class="hljs-keyword">if</span>(i1 &gt; i2)&#123;<br>    max = i1;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    max = i2;<br>&#125;<br><br>System.out.println(max);<br></code></pre></td></tr></table></figure><h3 id="7-7-运算符优先级"><a href="#7-7-运算符优先级" class="headerlink" title="7.7 运算符优先级"></a>7.7 运算符优先级</h3><p>运算符有不同的优先级，所谓优先级就是在表达式运算中的运算符顺序。</p><p>上一行中的运算符总是优先于下一行的。</p><table><thead><tr><th>优先级</th><th align="center">运算符说明</th><th align="center">Java运算符</th></tr></thead><tbody><tr><td>1</td><td align="center">括号</td><td align="center"><code>()</code>、<code>[]</code>、<code>&#123;&#125;</code></td></tr><tr><td>2</td><td align="center">正负号</td><td align="center"><code>+</code>、<code>-</code></td></tr><tr><td>3</td><td align="center">单元运算符</td><td align="center"><code>++</code>、<code>--</code>、<code>~</code>、<code>！</code></td></tr><tr><td>4</td><td align="center">乘法、除法、求余</td><td align="center"><code>*</code>、<code>/</code>、<code>%</code></td></tr><tr><td>5</td><td align="center">加法、减法</td><td align="center"><code>+</code>、<code>-</code></td></tr><tr><td>6</td><td align="center">移位运算符</td><td align="center"><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td></tr><tr><td>7</td><td align="center">关系运算符</td><td align="center"><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>&gt;</code>、<code>instanceof</code></td></tr><tr><td>8</td><td align="center">等价运算符</td><td align="center"><code>==</code>、<code>!=</code></td></tr><tr><td>9</td><td align="center">按位与</td><td align="center"><code>&amp;</code></td></tr><tr><td>10</td><td align="center">按位异或</td><td align="center"><code>^</code></td></tr><tr><td>11</td><td align="center">按位或</td><td align="center">&#96;</td></tr><tr><td>12</td><td align="center">条件与</td><td align="center"><code>&amp;&amp;</code></td></tr><tr><td>13</td><td align="center">条件或</td><td align="center">&#96;</td></tr><tr><td>14</td><td align="center">三元运算符</td><td align="center"><code>? :</code></td></tr><tr><td>15</td><td align="center">赋值运算符</td><td align="center"><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></td></tr><tr><td>16</td><td align="center">位赋值运算符</td><td align="center"><code>&amp;=</code>、&#96;</td></tr></tbody></table><blockquote><p>开发建议：</p><ol><li>不要过多的依赖运算的优先级来控制表达式的执行顺序，这样可读性太差，尽量<code>使用()来控制</code>表达式的执行顺序。</li><li>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，则把它<code>分成几步</code>来完成。例如：<br>​ (num1 + num2) * 2 &gt; num3 &amp;&amp; num2 &gt; num3 ? num3 : num1 + num2;</li></ol></blockquote><h2 id="8-【拓展】关于字符集"><a href="#8-【拓展】关于字符集" class="headerlink" title="8. 【拓展】关于字符集"></a>8. 【拓展】关于字符集</h2><h3 id="8-1-字符集"><a href="#8-1-字符集" class="headerlink" title="8.1 字符集"></a>8.1 字符集</h3><ul><li><strong>编码与解码</strong></li></ul><p>计算机中储存的信息都是用<code>二进制数</code>表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<code>编码</code> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<code>解码</code> 。</p><ul><li><p><strong>字符编码（Character Encoding）</strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p></li><li><p><strong>字符集</strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p></li></ul><h3 id="8-2-ASCII码"><a href="#8-2-ASCII码" class="headerlink" title="8.2 ASCII码"></a>8.2 ASCII码</h3><ul><li>ASCII码（American Standard Code for Information Interchange，美国信息交换标准代码）：上个世纪60年代，美国制定了一套字符编码，对<code>英语字符</code>与二进制位之间的关系，做了统一规定。这被称为ASCII码。</li><li>ASCII码用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符（最前面的1位统一规定为0），共<code>128个</code>字符。比如：空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。</li><li>缺点：不能表示所有字符。</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731034_watermark.png" alt="image-20220513095907601"></p><h3 id="8-3-ISO-8859-1字符集"><a href="#8-3-ISO-8859-1字符集" class="headerlink" title="8.3 ISO-8859-1字符集"></a>8.3 ISO-8859-1字符集</h3><ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰语、德语、意大利语、葡萄牙语等</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul><h3 id="8-4-GBxxx字符集"><a href="#8-4-GBxxx字符集" class="headerlink" title="8.4 GBxxx字符集"></a>8.4 GBxxx字符集</h3><ul><li>GB就是国标的意思，是为了<code>显示中文</code>而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同，即向下兼容ASCII码。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含<code>7000多个简体汉字</code>，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，这就是常说的”全角”字符，而原来在127号以下的那些符号就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了<code>双字节</code>编码方案，共收录了<code>21003个</code>汉字，完全兼容GB2312标准，同时支持<code>繁体汉字</code>以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字<code>70244个</code>，采用<code>多字节</code>编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul><h3 id="8-5-Unicode码"><a href="#8-5-Unicode码" class="headerlink" title="8.5 Unicode码"></a>8.5 Unicode码</h3><ul><li><p>Unicode编码为表达<code>任意语言的任意字符</code>而设计，也称为统一码、标准万国码。Unicode 将世界上所有的文字用<code>2个字节</code>统一进行编码，为每个字符设定唯一的二进制编码，以满足跨语言、跨平台进行文本处理的要求。</p></li><li><p>Unicode 的缺点：这里有三个问题：</p><ul><li>第一，英文字母只用一个字节表示就够了，如果用更多的字节存储是<code>极大的浪费</code>。</li><li>第二，如何才能<code>区别Unicode和ASCII</code>？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？</li><li>第三，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，<code>不够表示所有字符</code>。</li></ul></li><li><p>Unicode在很长一段时间内无法推广，直到互联网的出现，为解决Unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现。具体来说，有三种编码方案，UTF-8、UTF-16和UTF-32。</p></li></ul><h3 id="8-6-UTF-8"><a href="#8-6-UTF-8" class="headerlink" title="8.6 UTF-8"></a>8.6 UTF-8</h3><ul><li>Unicode是字符集，UTF-8、UTF-16、UTF-32是三种<code>将数字转换到程序数据</code>的编码方案。顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。其中，UTF-8 是在互联网上<code>使用最广</code>的一种 Unicode 的实现方式。</li><li>互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。UTF-8 是一种<code>变长的编码方式</code>。它可以使用 1-4 个字节表示一个符号它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul><ul><li>举例</li></ul><p>Unicode符号范围  | UTF-8编码方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">(十六进制)</span>           <span class="hljs-string">|</span> <span class="hljs-string">（二进制）</span><br><br><span class="hljs-string">————————————————————|—–—–—–—–—–—–—–—–—–—–—–—–—–—–</span><br><br><span class="hljs-number">0000 </span><span class="hljs-number">0000</span><span class="hljs-number">-0000</span> <span class="hljs-string">007F</span> <span class="hljs-string">|</span> <span class="hljs-string">0xxxxxxx（兼容原来的ASCII）</span><br><br><span class="hljs-number">0000 </span><span class="hljs-number">0080</span><span class="hljs-number">-0000</span> <span class="hljs-string">07FF</span> <span class="hljs-string">|</span> <span class="hljs-string">110xxxxx</span> <span class="hljs-string">10xxxxxx</span><br><br><span class="hljs-number">0000 </span><span class="hljs-number">0800</span><span class="hljs-number">-0000</span> <span class="hljs-string">FFFF</span> <span class="hljs-string">|</span> <span class="hljs-string">1110xxxx</span> <span class="hljs-string">10xxxxxx</span> <span class="hljs-string">10xxxxxx</span><br><br><span class="hljs-number">0001 </span><span class="hljs-number">0000</span><span class="hljs-number">-0010</span> <span class="hljs-string">FFFF</span> <span class="hljs-string">|</span> <span class="hljs-string">11110xxx</span> <span class="hljs-string">10xxxxxx</span> <span class="hljs-string">10xxxxxx</span> <span class="hljs-string">10xxxxxx</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731771_watermark.png" alt="image-20220525164636164"></p><h3 id="8-7-小结"><a href="#8-7-小结" class="headerlink" title="8.7 小结"></a>8.7 小结</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731059_watermark.jpg" alt="字符集"></p><blockquote><p>注意：在中文操作系统上，ANSI（美国国家标准学会、AMERICAN NATIONAL STANDARDS INSTITUTE: ANSI）编码即为GBK；在英文操作系统上，ANSI编码即为ISO-8859-1。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java语言概述</title>
    <link href="/2024/02/21/1.%20Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
    <url>/2024/02/21/1.%20Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Java语言概述"><a href="#1-Java语言概述" class="headerlink" title="1. Java语言概述"></a>1. Java语言概述</h2><h3 id="1-1-Java概述"><a href="#1-1-Java概述" class="headerlink" title="1.1 Java概述"></a>1.1 Java概述</h3><ul><li><p>是<code>SUN</code>(Stanford University Network，斯坦福大学网络公司 ) <code>1995年</code>推出的一门高级编程语言。</p></li><li><p>是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以在<code>Web浏览器</code>中运行。这些Java程序被称为<code>Java小程序</code>（applet），内嵌在HTML代码中。</p></li><li><p>伴随着互联网的迅猛发展，以及Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言。</p></li></ul><h3 id="1-2-Java语言简史"><a href="#1-2-Java语言简史" class="headerlink" title="1.2 Java语言简史"></a>1.2 Java语言简史</h3><p><strong>起步阶段：</strong></p><p>1991年，Sun公司的工程师小组想要设计一种语言，应用在<code>电视机</code>、<code>电话</code>、<code>闹钟</code>、<code>烤面包机</code>等家用电器的控制和通信。由于这些设备的<code>处理能力</code>和<code>内存</code>都很有限，并且不同的厂商会选择不同的中央处理器(CPU)，因此这种语言的关键是<code>代码短小</code>、<code>紧凑</code>且<code>与平台无关</code>（即不能与任何特定的体系结构捆绑在一起）。</p><p>Gosling团队率先创造了这个语言，并命名为“<code>Oak</code>“（起名的原因是因为他非常喜欢自己办公室外的橡树)。后因智能化家电的市场需求没有预期的高，Sun公司放弃了该项计划。</p><p>随着20世纪90年代互联网的发展，Sun公司发现该语言在互联网上应用的前景，于是改造了Oak，于1995年5月以Java的名称正式发布。（Java是印度尼西亚<code>爪哇岛</code>的英文名称，因盛产咖啡而闻名。）</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/Java%E5%9B%BE%E6%A0%87_watermark.png" alt="Java图标"></p><p><strong>发展阶段：</strong></p><table><thead><tr><th align="center">发行版本</th><th align="center">发行时间</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">Java 1.0</td><td align="center">1996.01.23</td><td align="center">Sun公司发布了Java的第一个开发工具包</td></tr><tr><td align="center">Java 1.1</td><td align="center">1997.02.19</td><td align="center">JavaOne会议召开，创当时全球同类会议规模之最。</td></tr><tr><td align="center">Java 1.2</td><td align="center">1998.12.08</td><td align="center">Java拆分成：J2SE（标准版）、J2EE（企业版）、J2ME（小型版）</td></tr><tr><td align="center">Java 1.3</td><td align="center">2000.05.08</td><td align="center"></td></tr><tr><td align="center">Java1.4</td><td align="center">2004.02.06</td><td align="center"></td></tr><tr><td align="center"><strong>Java 5.0</strong></td><td align="center"><strong>2004.09.30</strong></td><td align="center"><strong>①版本号从1.4直接更新至5.0；②平台更名为JavaSE、JavaEE、JavaME</strong></td></tr><tr><td align="center">Java 6.0</td><td align="center">2006.12.11</td><td align="center">2009.04.20 Oracle宣布收购SUN公司</td></tr><tr><td align="center"></td><td align="center">2009.04.20</td><td align="center">Oracle公司收购SUN，交易价格<code>74亿</code>美元。</td></tr><tr><td align="center">Java 7.0</td><td align="center">2011.07.02</td><td align="center"></td></tr><tr><td align="center"><strong>Java 8.0</strong></td><td align="center"><strong>2014.03.18</strong></td><td align="center"><strong>此版本是继Java 5.0以来变化最大的版本。是长期支持版本（LTS）</strong></td></tr><tr><td align="center">Java 9.0</td><td align="center">2017.09.22</td><td align="center">①此版本开始，<strong>每半年更新一次</strong>；②Java 9.0开始不再支持windows 32位系统</td></tr><tr><td align="center">Java 10.0</td><td align="center">2018.03.21</td><td align="center"></td></tr><tr><td align="center"><strong>Java 11.0</strong></td><td align="center"><strong>2018.09.25</strong></td><td align="center"><strong>JDK安装包取消独立JRE安装包，是长期支持版本（LTS）</strong></td></tr><tr><td align="center">Java 12.0</td><td align="center">2019.03.19</td><td align="center"></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center"></td></tr><tr><td align="center"><strong>Java17.0</strong></td><td align="center"><strong>2021.09</strong></td><td align="center"><strong>发布Java 17.0，版本号也称为21.9，是长期支持版本。</strong></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center"></td></tr><tr><td align="center">Java19.0</td><td align="center">2022.09</td><td align="center">发布Java19.0，版本号也称为22.9。</td></tr></tbody></table><h3 id="1-3-Java之父"><a href="#1-3-Java之父" class="headerlink" title="1.3 Java之父"></a>1.3 Java之父</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/Java%E4%B9%8B%E7%88%B6_watermark.png" alt="image-20220310152923961" style="zoom:67%;" /><ul><li><code>詹姆斯·高斯林(James Gosling)</code>先生以“Java 技术之父”而闻名于世。他是Java 技术的创始人，他亲手设计了Java语言，并开发了Java编译器和Java虚拟机，使Java成为了世界上最流行的开发语言。</li><li>James Gosling于1984 年加入Sun公司，并一直服务于Sun公司，直至2010年前后，Sun被Oracle并购而加入Oracle，担任客户端软件集团的首席技术官; 2010年4月从Oracle离职。</li></ul><h3 id="1-4-公司八卦"><a href="#1-4-公司八卦" class="headerlink" title="1.4 公司八卦"></a>1.4 公司八卦</h3><ul><li><strong>SUN 与 Oracle</strong></li></ul><blockquote><p>SUN是一家<code>极具创新能力</code>的公司，2001年 “9.11”以前，SUN公司市值<code>超过1000亿</code>美元。 但是没能利用Java构建一个强有力、可变现的生态系统，没打好Java这张牌。此后，互联网泡沫破裂，硬件需求大幅减少，它的市值在一个月之内跌幅超过90%。<strong>SUN公司的成长用了20年，而衰落只用了1年！</strong></p></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/sun%E4%B8%8E%E7%94%B2%E9%AA%A8%E6%96%87_watermark.png" alt="image-20220309230923533" style="zoom: 67%;" /><ul><li><strong>Oracle 与 Google</strong></li></ul><blockquote><p>Google和Oracle的侵权事件：</p><p>2010 年 8 月，Oracle 起诉 Google 的 Android 系统侵权，要求赔偿 26 亿美元。</p><ul><li>Oracle认为Google的代码中使用了Java的<code>37个API</code>，并且认为Google是故意为之，因为这样做的好处是可以让更多的Java程序员更容易接受Android的代码。</li><li>Oracle认为Android 中有<code>9行代码</code>直接抄袭了Java的实现。这9行牛气哄哄的代码都出自一人之手，他就是Java 大牛——<code>Joshua Bloch</code>。</li></ul><p>2018 年 3 月，美国联邦巡回上诉法院裁决，谷歌侵犯了甲骨文的版权，支付高达<code>88亿美元</code>的赔偿金。</p><p>2021 年 4 月，美国最高法院给出了最终裁决：谷歌胜诉，其代码属于“合理使用”的范畴。为期十多年的软件行业“第一版权案”落幕。</p></blockquote><blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Code In OpenJDK / Android ：</span><br><span class="hljs-number">1.</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rangeCheck</span><span class="hljs-params">(<span class="hljs-type">int</span> arrayLen, <span class="hljs-type">int</span> fromIndex, <span class="hljs-type">int</span> toIndex)</span> &#123;<br><span class="hljs-number">2.</span>    <span class="hljs-keyword">if</span> (fromIndex &gt; toIndex)<br><span class="hljs-number">3.</span>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;fromIndex(&quot;</span> + fromIndex +<br><span class="hljs-number">4.</span>                   <span class="hljs-string">&quot;) &gt; toIndex(&quot;</span> + toIndex+<span class="hljs-string">&quot;)&quot;</span>);<br><span class="hljs-number">5.</span>    <span class="hljs-keyword">if</span> (fromIndex &lt; <span class="hljs-number">0</span>)<br><span class="hljs-number">6.</span>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(fromIndex);<br><span class="hljs-number">7.</span>    <span class="hljs-keyword">if</span> (toIndex &gt; arrayLen)<br><span class="hljs-number">8.</span>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(toIndex);<br><span class="hljs-number">9.</span> &#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/Google%E4%B8%8EOracle_watermark.png" alt="image-20221027145908490"></p><h3 id="1-5-Java技术体系平台"><a href="#1-5-Java技术体系平台" class="headerlink" title="1.5 Java技术体系平台"></a>1.5 Java技术体系平台</h3><ul><li><strong>Java SE(Java Standard Edition)标准版</strong><ul><li>支持面向<code>桌面级应用</code>（如Windows下的应用程序）的Java平台，即定位个人计算机的应用开发。</li><li>包括用户界面接口AWT及Swing，网络功能与国际化、图像处理能力以及输入输出支持等。</li><li>此版本以前称为J2SE</li></ul></li><li><strong>Java EE(Java Enterprise Edition)企业版</strong><ul><li>为开发企业环境下的应用程序提供的一套解决方案，即定位<code>在服务器端的Web应用开发</code>。</li><li>JavaEE是JavaSE的扩展，增加了用于服务器开发的类库。如：Servlet能够延伸服务器的功能，通过请求-响应的模式来处理客户端的请求；JSP是一种可以将Java程序代码内嵌在网页内的技术。</li><li>版本以前称为J2EE</li></ul></li><li><strong>Java ME(Java Micro Edition)小型版</strong><ul><li>支持Java程序运行在<code>移动终端（手机、机顶盒）上的平台</code>，即定位在消费性电子产品的应用开发</li><li>JavaME是JavaSE的内伸，精简了JavaSE 的核心类库，同时也提供自己的扩展类。增加了适合微小装置的类库：javax.microedition.io.*等。</li><li>此版本以前称为J2ME</li></ul></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/EE%E3%80%81SE%E3%80%81ME%E5%85%B3%E8%81%94_watermark.png" alt="image-20211218093009884"></p><blockquote><p>注意：</p><p>Android开发不等同于Java ME的开发</p></blockquote><h2 id="2-Java开发环境搭建"><a href="#2-Java开发环境搭建" class="headerlink" title="2. Java开发环境搭建"></a>2. Java开发环境搭建</h2><h3 id="2-1-什么是JDK、JRE"><a href="#2-1-什么是JDK、JRE" class="headerlink" title="2.1 什么是JDK、JRE"></a>2.1 什么是JDK、JRE</h3><ul><li><strong>JDK</strong>  (Java Development Kit)：是Java程序开发工具包，包含<code>JRE</code> 和开发人员使用的工具。</li><li>**JRE ** (Java Runtime Environment) ：是Java程序的运行时环境，包含<code>JVM</code> 和运行时所需要的<code>核心类库</code>。</li></ul><p>如下是Java 8.0 Platform：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211115901_watermark.jpg"></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211115871_watermark.png" alt="image-20220310200731185" style="zoom:67%;" /><blockquote><p>小结：</p><p>JDK &#x3D; JRE + 开发工具集（例如Javac编译工具等）</p><p>JRE &#x3D; JVM + Java SE标准类库</p></blockquote><h3 id="2-2-JDK版本选择"><a href="#2-2-JDK版本选择" class="headerlink" title="2.2 JDK版本选择"></a>2.2 JDK版本选择</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211041655_watermark.png" alt="image-20221108221057540" style="zoom:80%;" /><hr><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211041706_watermark.png" alt="image-20220310201541841"></p><ul><li>自Java 8版本发布以来，其后的每次更新，都会有小伙伴高呼：<strong>Java8 YYDS！</strong></li><li>论坛的声音：“<code>你发任你发，我用Java 8！</code>”</li></ul><p><strong>数据说话1：</strong></p><p>JRebel 于2022年4月前后发布了《2022 年Java生态系统状况报告》，报告中提到使用Java11 的占比最多，Java 8 紧随其后，如下图。而此前2020年的报告显示，Java8占比达到了<code>84.48%</code>。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211041728_watermark.jpeg" alt="d315"></p><blockquote><p>我的分析：</p><p>G1是最受欢迎的GC算法。Java 11及更高版本的G1收集器是默认的GC，而Java 8中并不是。出于对G1的喜爱，很多开发者才会选择抛弃Java 8。</p></blockquote><p><strong>数据说话2：</strong></p><p>此外，某美国软件开发商在对近千名专业的Java开发者调研后，发布的《2022年Java开发者生产力报告》称：八年前发布的Java 8依然是Java中应用最广泛的版本，占比 <code>37%</code>，其次是 Java 11，占比<code>29%</code> 。</p><p><strong>高斯林说话：</strong></p><hr><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211041742_watermark.png" alt="image-20220428151952049" style="zoom: 67%;" /><p><strong>Spring框架说话：</strong></p><p>在Java 17正式发布之前，Java开发框架Spring率先在官博宣布，Spring Framework 6和Spring Boot 3计划在2022年第四季度实现总体可用性的高端基线：</p><ul><li><p>Java 17+(来自 Spring Framework 5.3.x 线中的 Java 8-17)</p></li><li><p>Jakarta EE 9+（来自Spring框架5.3.x 线中的 Java EE 7-8）</p></li></ul><p>Spring 官方说明：<code>https://spring.io/blog/2022/01/20/spring-boot-3-0-0-m1-is-now-available</code></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211041767_watermark.png" alt="image-20220527155439683"></p><blockquote><p>意味着：springboot3.0 是需要用java17和spring6.0为基础建设。如果从企业选型最新springboot3.0作为架构来说，它搭配jdk17肯定是标配了。</p></blockquote><h3 id="2-3-JDK的下载"><a href="#2-3-JDK的下载" class="headerlink" title="2.3 JDK的下载"></a>2.3 JDK的下载</h3><ul><li>下载网址（Oracle公司官网）：<a href="http://www.oracle.com/">www.oracle.com</a></li><li>下载步骤：如图所示，在官网底部选择Developers开发者</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043477_watermark.png" alt="1572254490435"></p><p>（1）在Developers页面中间的技术分类部分，选择<code>Java</code>，单击进入，如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043496_watermark.png" alt="image-20211019110551338" style="zoom: 50%;" /><p>（2）这里展示的是最新Java版本，例如Java17。单击<code>Download Java</code>，然后选择具体的版本下载。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043562_watermark.png" alt="image-20211019110843394" style="zoom:80%;" /><p>（3）选择Download Java按钮后</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043532_watermark.png" alt="image-20211019111110242"></p><p>（4）如果想安装Java8 可以选择如下位置：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043547_watermark.png" alt="image-20211019111150970" style="zoom:80%;" /><p>（5）选择Accept License Agreement，</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043583_watermark.png" alt="image-20211019111252989" style="zoom:80%;" /><p>（6）注册或登录后下载：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043653_watermark.png" alt="image-20211019111922387" style="zoom:50%;" /><p>（7）如果需要安装其它版本，可以选择Java archive：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043410_watermark.png" alt="image-20220801004606762" style="zoom: 67%;" /><p>接着进行选择下载即可：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043664_watermark.png" alt="image-20220801004648997" style="zoom:67%;" /><h3 id="2-4-JDK的安装"><a href="#2-4-JDK的安装" class="headerlink" title="2.4 JDK的安装"></a>2.4 JDK的安装</h3><ul><li>安装说明<ul><li>傻瓜式安装，下一步即可。</li><li><strong>建议：安装路径不要有中文或者空格等特殊符号。</strong></li><li><strong>本套课程会同时安装JDK8 和 JDK17，并以JDK17为默认版本进行讲解。</strong></li></ul></li></ul><ul><li>安装步骤：</li></ul><p>（1）双击<code>jdk-17_windows-x64_bin.exe</code>文件，并单击下一步，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043959_watermark.png" alt="image-20220303083718546"></p><p>（2）修改安装路径，单击更改，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043099_watermark.png" alt="image-20220303083759546"></p><p>（3）将安装路径修改为<code>D:\develop_tools\jdk\jdk-17.0.2\</code>，并单击下一步，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043059_watermark.png" alt="image-20220303083845794"></p><p>（4）稍后几秒，安装完成，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043752_watermark.png" alt="image-20220303083905277"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043507_watermark.png" alt="image-20220303083931309"></p><h3 id="2-5-配置path环境变量"><a href="#2-5-配置path环境变量" class="headerlink" title="2.5 配置path环境变量"></a>2.5 配置path环境变量</h3><h4 id="7-5-1-理解path环境变量"><a href="#7-5-1-理解path环境变量" class="headerlink" title="7.5.1 理解path环境变量"></a>7.5.1 理解path环境变量</h4><p><strong>什么是path环境变量？</strong></p><p>答：window操作系统执行命令时，所要搜寻的路径。</p><p><strong>为什么配置path？</strong></p><p>答：希望在命令行使用javac.exe等工具时，任意目录下都可以找到这个工具所在的目录。</p><p><strong>以JDK为例演示</strong></p><p>我们在<code>C:\Users\songhk</code>目录下使用javac命令，结果如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043254_watermark.png" alt="image-20220310223852720"></p><p>我们在JDK的安装目录的bin目录下使用javac命令，结果如下：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043093_watermark.png" alt="image-20220607113708022" style="zoom:75%;" /><p>我们不可能每次使用java.exe，javac.exe等工具的时候都进入到JDK的安装目录下，太麻烦了。这时就需要配置path环境变量。</p><h4 id="2-5-2-JDK8配置方案1：只配置path"><a href="#2-5-2-JDK8配置方案1：只配置path" class="headerlink" title="2.5.2 JDK8配置方案1：只配置path"></a>2.5.2 JDK8配置方案1：只配置path</h4><ul><li>步骤：</li></ul><p>（1）打开桌面上的计算机，进入后在左侧找到<code>此电脑</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043295_watermark.png" alt="image-20220310224844837"></p><p>（2）选择<code>高级系统设置</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043918_watermark.png" alt="image-20220310224912273"></p><p>（3）在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043018_watermark.png" alt="image-20220310224952745"></p><p>（4）在<code>系统变量</code>中，选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ,如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043974_watermark.png" alt="image-20220310225023208"></p><p>（5）点击<code>新建</code>，填入<code>D:\develop_tools\jdk\jdk1.8.0_271\bin</code>  ，并将此值<code>上移</code>到变量列表的首位。如图所示：</p><ul><li>编辑模式1：</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043297_watermark.png" alt="image-20220607114102135" style="zoom:80%;" /><ul><li>编辑模式2：（注意，结尾需要有英文模式下的;）</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043775_watermark.png" alt="image-20220929104547925"></p><p>（6）环境变量配置完成，<strong>重新开启</strong>DOS命令行，在任意目录下输入<code>javac</code> 或<code>java</code>命令或<code>java -version</code>，运行成功。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043034_watermark.png" alt="image-20220607114432286" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043332_watermark.png" alt="image-20220607114517652" style="zoom:90%;" /><h4 id="2-5-3-JDK8配置方案2：配置JAVA-HOME-path（推荐）"><a href="#2-5-3-JDK8配置方案2：配置JAVA-HOME-path（推荐）" class="headerlink" title="2.5.3 JDK8配置方案2：配置JAVA_HOME+path（推荐）"></a>2.5.3 JDK8配置方案2：配置JAVA_HOME+path（推荐）</h4><ul><li>步骤：</li></ul><p>（1）打开桌面上的计算机，进入后在左侧找到<code>计算机</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043295_watermark.png" alt="image-20220310224844837"></p><p>（2）选择<code>高级系统设置</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043918_watermark.png" alt="image-20220310224912273"></p><p>（3）在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043018_watermark.png" alt="image-20220310224952745"></p><p>（4）在<code>系统变量</code>中，单击<code>新建</code> ，创建新的环境变量，如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043318_watermark.png" alt="image-20220310225245208" style="zoom:90%;" /><p>（5）变量名输入<code>JAVA_HOME</code>，变量值输入 <code>D:\develop_tools\jdk\jdk1.8.0_271</code> ，单击<code>确定</code>，如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043901_watermark.png" alt="image-20220607114800372" style="zoom:80%;" /><p>（6）选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043974_watermark.png" alt="image-20220310225023208"></p><p>（7）在变量值的最前面，键入<code>%JAVA_HOME%\bin</code>。如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043283_watermark.png" alt="image-20220607114953758" style="zoom:80%;" /><blockquote><p>注意：强烈建议将%JAVA_HOME%\bin声明在path环境变量中所有变量的最前面！</p></blockquote><p>（8）环境变量配置完成，<strong>重启</strong>DOS命令行，在任意目录下输入<code>javac</code> 或<code>java</code>命令或<code>java -version</code>，运行成功。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043034_watermark.png" alt="image-20220607114432286" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043332_watermark.png" alt="image-20220607114517652" style="zoom:90%;" /><blockquote><p>我想说：</p><p>有的书籍、论坛、视频上还提到配置classpath，用于指名class文件识别的路径。其实是没必要的，反而建议大家如果配置了classpath环境变量，要删除。对于初学者，反而不友好。</p></blockquote><p><strong>小结如下：</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043619_watermark.png" alt="image-20220607115255562"></p><h4 id="2-5-4-JDK17配置方案：自动配置"><a href="#2-5-4-JDK17配置方案：自动配置" class="headerlink" title="2.5.4 JDK17配置方案：自动配置"></a>2.5.4 JDK17配置方案：自动配置</h4><p>不管大家有没有提前安装JDK8或其它版本JDK，在我们安装完JDK17之后，理应按JDK8的方式配置path环境变量。但是，我们发现在安装完JDK17以后，配置环境变量之前，执行CMD指令：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043768_watermark.png" alt="image-20220607115700870" style="zoom:80%;" /><p>竟然成功了！而且是17.0.2版本。因为JDK17在安装之后，自动进行了环境变量的配置。如下：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043747_watermark.png" alt="image-20220607115840388" style="zoom:80%;" /><p>这里建议，将JDK17安装的路径，设置为JAVA_HOME，并将<code>%JAVA_HOME%\bin</code>上移到首位。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043937_watermark.png" alt="image-20221110142710972" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043712_watermark.png" alt="image-20221110142734279" style="zoom:80%;" /><blockquote><p>思考：如果你仍然希望在JDK8下开发Java程序？如何做呢？</p></blockquote><h2 id="3-开发体验：HelloWorld（掌握）"><a href="#3-开发体验：HelloWorld（掌握）" class="headerlink" title="3. 开发体验：HelloWorld（掌握）"></a>3. 开发体验：HelloWorld（掌握）</h2><p>JDK安装完毕，我们就可以开发第一个Java程序了，习惯性的称为：HelloWorld。</p><h3 id="3-1-开发步骤"><a href="#3-1-开发步骤" class="headerlink" title="3.1 开发步骤"></a>3.1 开发步骤</h3><p>Java程序开发三步骤：<strong>编写</strong>、<strong>编译</strong>、<strong>运行</strong>。</p><ul><li>将 Java 代码<strong>编写</strong>到扩展名为 .java 的源文件中</li><li>通过 javac.exe 命令对该 java 文件进行<strong>编译</strong>，生成一个或多个字节码文件</li><li>通过 java.exe 命令对生成的 class 文件进行<strong>运行</strong></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043432_watermark.png" alt="image-20220310230210728"></p><h3 id="3-2-编写"><a href="#3-2-编写" class="headerlink" title="3.2 编写"></a>3.2 编写</h3><p>（1）在<code>D:\JavaSE\chapter01</code> 目录下新建文本文件，完整的文件名修改为<code>HelloWorld.java</code>，其中文件名为<code>HelloWorld</code>，后缀名必须为<code>.java</code>。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043146_watermark.png" alt="image-20220801010222222" style="zoom:90%;" /><p>（2）用记事本或editplus等文本编辑器打开（虽然记事本也可以，但是没有关键字颜色标识，不利于初学者学习）</p><p>（3）在文件中输入如下代码，并且保存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloChina</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;HelloWorld!!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>友情提示1：每个字母和符号必须与示例代码一模一样，包括大小写在内。</strong></p></li><li><p>友情提示2：</p></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043876_watermark.png" alt="image-20220310230618659" style="zoom:67%;" /><p>或</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043442_watermark.png" alt="image-20220521173215013" style="zoom:90%;" /><p>第一个<code>HelloWord</code> 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的<code>Java源文件</code> 编译成JVM可以看懂的<code>字节码文件</code> ，也就是<code>.class</code>文件。</p><h3 id="3-3-编译"><a href="#3-3-编译" class="headerlink" title="3.3 编译"></a>3.3 编译</h3><p>在DOS命令行中，进入<code>D:\JavaSE\chapter01</code>目录，使用<code>javac</code> 命令进行编译。</p><p>使用文件资源管理器打开<code>D:\JavaSE\chapter01</code>目录，然后在地址栏输入cmd。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043806_watermark.png" alt="image-20220801010435144" style="zoom:80%;" /><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javac Java源文件名.后缀名java<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">javac </span>HelloWorld.<span class="hljs-keyword">java</span><br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043528_watermark.png" alt="image-20220801010840640" style="zoom:80%;" /><p>编译成功后，命令行没有任何提示。打开<code>D:\JavaSE\chapter01</code>目录，发现产生了一个新的文件 <code>HelloChina.class</code>，该文件就是编译后的文件，是Java的可运行文件，称为<strong>字节码文件</strong>，有了字节码文件，就可以运行程序了。 </p><h3 id="3-4-运行"><a href="#3-4-运行" class="headerlink" title="3.4 运行"></a>3.4 运行</h3><p>在DOS命令行中，在字节码文件目录下，使用<code>java</code> 命令进行运行。</p><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java 主类名字<br></code></pre></td></tr></table></figure><p>主类是指包含main方法的类，main方法是Java程序的入口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">java HelloChina</span><br></code></pre></td></tr></table></figure><blockquote><p>错误演示：</p><p>java HelloChina.class</p></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043382_watermark.png" alt="image-20220801011104381" style="zoom:80%;" /><h2 id="4-Java开发工具"><a href="#4-Java开发工具" class="headerlink" title="4. Java开发工具"></a>4. Java开发工具</h2><h3 id="4-1-都有哪些开发Java的工具"><a href="#4-1-都有哪些开发Java的工具" class="headerlink" title="4.1 都有哪些开发Java的工具"></a>4.1 都有哪些开发Java的工具</h3><ul><li>级别一：文本开发工具</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043732_watermark.png" alt="image-20220513185907022" style="zoom:50%;" /><ul><li>级别二：集成开发环境（Integrated Development Environment，IDE）</li></ul><blockquote><p>把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。</p></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044877_watermark.png" alt="image-20220513190655773" style="zoom:50%;" /><h3 id="4-2-如何选择"><a href="#4-2-如何选择" class="headerlink" title="4.2 如何选择"></a>4.2 如何选择</h3><p>前期我们先使用文本开发工具，培养<code>代码感</code>，利于公司笔、面试。</p><p>后期我们使用IDE，提供<code>更强大的功能支持</code>。</p><h2 id="5-HelloWorld案例常见错误"><a href="#5-HelloWorld案例常见错误" class="headerlink" title="5. HelloWorld案例常见错误"></a>5. HelloWorld案例常见错误</h2><h3 id="5-1-拼写问题"><a href="#5-1-拼写问题" class="headerlink" title="5.1 拼写问题"></a>5.1 拼写问题</h3><ul><li><pre><code class="hljs">单词拼写问题</code></pre><ul><li>正确：class         错误：Class</li><li>正确：String                    错误：string</li><li>正确：System                  错误：system</li><li>正确：main         错误：mian</li></ul></li><li><pre><code class="hljs">Java语言是一门严格区分大小写的语言</code></pre></li><li><pre><code class="hljs">标点符号使用问题</code></pre><ul><li>不能用中文符号，英文半角的标点符号（正确）</li><li>括号问题，成对出现</li></ul></li></ul><h3 id="5-2-编译、运行路径问题"><a href="#5-2-编译、运行路径问题" class="headerlink" title="5.2 编译、运行路径问题"></a>5.2 编译、运行路径问题</h3><p>举例1：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044877_watermark.png" alt="image-20220310231657692" style="zoom:80%;" /><ul><li>源文件名不存在或者写错</li><li>当前路径错误</li><li>后缀名隐藏问题</li></ul><p>举例2：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044153_watermark.png" alt="image-20220310231717893" style="zoom:80%;" /><ul><li>类文件名写错，尤其文件名与类名不一致时，要小心</li><li>类文件不在当前路径下，或者不在classpath指定路径下</li></ul><h3 id="5-3-语法问题"><a href="#5-3-语法问题" class="headerlink" title="5.3 语法问题"></a>5.3 语法问题</h3><p>举例1：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044244_watermark.png" alt="image-20220310231746581" style="zoom:90%;" /><p>声明为public的类应与文件名一致，否知编译失败。</p><p>举例2：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044048_watermark.png" alt="image-20220310231815405" style="zoom:80%;" /><p>编译失败，注意错误出现的行数，再到源代码中指定位置改错</p><h3 id="5-4-字符编码问题"><a href="#5-4-字符编码问题" class="headerlink" title="5.4 字符编码问题"></a>5.4 字符编码问题</h3><p>当cmd命令行窗口的字符编码与.java源文件的字符编码不一致，如何解决？</p><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044745_watermark.png" alt="1557881223916"></p><p>解决方案一：</p><ul><li>在Notepad++等编辑器中，修改源文件的字符编码：</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044898_watermark.png" alt="1557881271819" style="zoom:80%;" /><ul><li>在EditPlus中可以将Java源文件另存为ANSI编码方式（中文操作系统下即为GBK字符集）</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044327_watermark.png" alt="1658810752424" style="zoom:80%;" /><p>解决方案二：</p><pre><code class="hljs">在使用javac命令式，可以指定源文件的字符编码</code></pre><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">javac -encoding utf-<span class="hljs-number">8</span> Review01.java<br></code></pre></td></tr></table></figure><h3 id="5-5-建议"><a href="#5-5-建议" class="headerlink" title="5.5 建议"></a>5.5 建议</h3><ul><li><p>注意缩进!</p><ul><li><p>一定要有缩进。缩进就像人得体的衣着一样！</p></li><li><p>只要遇到{}就缩进，缩进的快捷键tab键。</p></li></ul></li><li><p>必要的空格</p><ul><li>变量类型、变量、赋值符号、变量值之间填充相应空格，更美观。比如： int num &#x3D; 10;</li></ul></li></ul><h2 id="6-HelloWorld小结"><a href="#6-HelloWorld小结" class="headerlink" title="6. HelloWorld小结"></a>6. HelloWorld小结</h2><h3 id="6-1-Java程序的结构与格式"><a href="#6-1-Java程序的结构与格式" class="headerlink" title="6.1 Java程序的结构与格式"></a>6.1 Java程序的结构与格式</h3><p>结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">类&#123;<br>    方法&#123;<br>        语句;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>格式：</p><p>（1）每一级缩进一个Tab键</p><p>（2）{}的左半部分在行尾，右半部分单独一行，与和它成对的”{“的行首对齐</p><h3 id="6-2-Java程序的入口"><a href="#6-2-Java程序的入口" class="headerlink" title="6.2 Java程序的入口"></a>6.2 Java程序的入口</h3><p>Java程序的入口是main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-两种常见的输出语句"><a href="#6-3-两种常见的输出语句" class="headerlink" title="6.3 两种常见的输出语句"></a>6.3 两种常见的输出语句</h3><ul><li><p><strong>换行输出语句</strong>：输出内容，完毕后进行换行，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(输出内容);<br></code></pre></td></tr></table></figure></li><li><p><strong>直接输出语句</strong>：输出内容，完毕后不做任何处理，格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.print(输出内容);<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>注意事项：</p><p>​换行输出语句，括号内可以什么都不写，只做换行处理</p><p>​直接输出语句，括号内什么都不写的话，编译报错</p></blockquote><h3 id="6-4-源文件名与类名"><a href="#6-4-源文件名与类名" class="headerlink" title="6.4 源文件名与类名"></a>6.4 源文件名与类名</h3><p>（1）源文件名是否必须与类名一致？public呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">如果这个类不是<span class="hljs-keyword">public</span>，那么源文件名可以和类名不一致。但是不便于代码维护。<br><br>如果这个类是<span class="hljs-keyword">public</span>，那么要求源文件名必须与类名一致。否则编译报错。<br><br>我们建议大家，不管是否是<span class="hljs-keyword">public</span>，都与源文件名保持一致，而且一个源文件尽量只写一个类，目的是为了好维护。<br></code></pre></td></tr></table></figure><p>（2）一个源文件中是否可以有多个类？public呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">一个源文件中可以有多个类，编译后会生成多个.class字节码文件。<br><br>但是一个源文件只能有一个<span class="hljs-keyword">public</span>的类。<br></code></pre></td></tr></table></figure><h2 id="7-注释-comment"><a href="#7-注释-comment" class="headerlink" title="7. 注释(comment)"></a>7. 注释(comment)</h2><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044387_watermark.png" alt="image-20220610113151774" style="zoom: 67%;" /><ul><li><p>什么是注释？</p><ul><li>源文件中用于解释、说明程序的文字就是注释。</li></ul></li><li><p>注释是一个程序员必须要具有的良好编程习惯。实际开发中，程序员可以先将自己的<code>思想</code>通过注释整理出来，再用<code>代码</code>去体现。</p><blockquote><p>程序员最讨厌两件事：</p><p>一件是自己写代码被要求加注释</p><p>另一件是接手别人代码，发现没有注释</p></blockquote></li><li><p>不加注释的危害</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044750_watermark.gif"></p></li><li><p>Java中的注释类型：</p><ul><li><p>单行注释</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//注释文字</span><br></code></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">注释文字1 </span><br><span class="hljs-comment">注释文字2</span><br><span class="hljs-comment">注释文字3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p>文档注释 (Java特有)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  <span class="hljs-doctag">@author</span>  指定java程序的作者</span><br><span class="hljs-comment">  <span class="hljs-doctag">@version</span>  指定源文件的版本</span><br><span class="hljs-comment">*/</span> <br></code></pre></td></tr></table></figure></li></ul></li><li><p>注释的作用</p><ul><li>它提升了程序的可阅读性。（不加注释的危害性，见图。）</li><li>调试程序的重要方法。</li></ul></li><li><p><strong>具体使用1：单行注释、多行注释</strong></p><ul><li><p>对于单行和多行注释，被注释的文字，不会不会出现在字节码文件中，进而不会被JVM（java虚拟机）解释执行。</p></li><li><p>多行注释里面不允许有多行注释嵌套。</p></li><li><p>一个段子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">A：嘿 <span class="hljs-comment">//是什么意思啊？</span><br>B：嘿.<br>A：呃 我问你<span class="hljs-comment">//是什么意思？</span><br>B：问吧.<br>A：我刚才不是问了么？<br>B：啊？<br>A：你再看看记录...<br>B：看完了.<br>A：......所以<span class="hljs-comment">//是啥？</span><br>B：所以什么？<br>A：你存心耍我呢吧？<br>B：没有啊 你想问什么？<br>……<br>不断循环之后，A一气之下和B绝交，自己苦学程序。<br>N年之后，A终于修成正果，回想起B，又把聊天记录翻出来看，这时，他突然发现B没有耍他……<br>而他自己也不知道当年他问B的究竟是什么问题……<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>具体使用2：文档注释（Java特有）</strong></p><ul><li><p>文档注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。</p></li><li><p>操作方式。比如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">javadoc -d mydoc -author -<span class="hljs-built_in">version</span> HelloWorld.java<br></code></pre></td></tr></table></figure></li></ul></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044205_watermark.png" alt="image-20220310232527578" style="zoom:67%;" /><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//单行注释</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">文档注释演示。这是我的第一个Java程序！^_^</span><br><span class="hljs-comment"><span class="hljs-doctag">@author</span> songhk</span><br><span class="hljs-comment"><span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">Java程序的入口</span><br><span class="hljs-comment"><span class="hljs-doctag">@param</span> args main方法的命令参数</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-Java-API文档"><a href="#8-Java-API文档" class="headerlink" title="8. Java API文档"></a>8. Java API文档</h2><ul><li>API （Application Programming Interface，应用程序编程接口）是 Java 提供的基本编程接口。</li><li>Java语言提供了大量的基础类，因此 Oracle 也为这些基础类提供了相应的说明文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法。大多数Java书籍中的类的介绍都要参照它来完成，它是编程者经常查阅的资料。</li><li>Java API文档，即为JDK使用说明书、帮助文档。类似于：</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211111371_watermark.jpg" alt="新华字典" style="zoom:28%;" /><ul><li><p>下载API文档：</p><ul><li><p>在线看：<a href="https://docs.oracle.com/en/java/javase/17/docs/api/index.html">https://docs.oracle.com/en/java/javase/17/docs/api/index.html</a></p></li><li><p>离线下载：<a href="https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html">https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html</a></p></li></ul></li></ul><h2 id="9-Java核心机制：JVM"><a href="#9-Java核心机制：JVM" class="headerlink" title="9. Java核心机制：JVM"></a>9. Java核心机制：JVM</h2><h3 id="9-1-Java语言的优缺点"><a href="#9-1-Java语言的优缺点" class="headerlink" title="9.1 Java语言的优缺点"></a>9.1 Java语言的优缺点</h3><p>Java确实是从C语言和C++语言继承了许多成份，甚至可以将Java看成是类C语言发展和衍生的产物。“青出于蓝，而胜于蓝”。</p><h4 id="9-1-1-优点"><a href="#9-1-1-优点" class="headerlink" title="9.1.1 优点"></a>9.1.1 优点</h4><ul><li><strong>跨平台性：</strong>这是Java的核心优势。Java在最初设计时就很注重移植和跨平台性。比如：Java的int永远都是32位。不像C++可能是16，32，可能是根据编译器厂商规定的变化。</li><li>通过Java语言编写的应用程序在不同的系统平台上都可以运行。“<code>Write once , Run Anywhere</code>”。</li><li>原理：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (<code>J</code>VM ，Java <code>V</code>irtual <code>M</code>achine) 即可。由JVM来负责Java程序在该系统中的运行。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/JVM%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%80%A7-1666858570703_watermark.jpg" alt="JVM的跨平台性" style="zoom:70%;" /><ul><li><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044493_watermark.png" alt="image-20211217111217831"></p></li><li><p><strong>面向对象性：</strong></p><p>面向对象是一种程序设计技术，非常<code>适合大型软件的设计和开发</code>。面向对象编程支持封装、继承、多态等特性，让程序更好达到<code>高内聚</code>，<code>低耦合</code>的标准。</p></li><li><p><strong>健壮性：</strong>吸收了C&#x2F;C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制。</p></li><li><p><strong>安全性高：</strong></p><p>Java适合于网络&#x2F;分布式环境，需要提供一个安全机制以防恶意代码的攻击。如：<code>安全防范机制</code>（ClassLoader类加载器），可以分配不同的命名空间以防替代本地的同名类、字节代码检查。</p></li><li><p><strong>简单性：</strong></p><p>Java就是C++语法的<code>简化版</code>，我们也可以将Java称之为“<code>C++--</code>”。比如：头文件，指针运算，结构，联合，操作符重载，虚基类等。</p></li><li><p><strong>高性能：</strong></p><ul><li><p>Java最初发展阶段，总是被人诟病“<code>性能低</code>”；客观上，高级语言运行效率总是低于低级语言的，这个无法避免。Java语言本身发展中通过虚拟机的优化提升了<code>几十倍运行效率</code>。比如，通过JIT(JUST IN TIME)即时编译技术提高运行效率。</p></li><li><p><code>Java低性能的短腿，已经被完全解决了</code>。业界发展上，我们也看到很多C++应用转到Java开发，很多C++程序员转型为Java程序员。</p></li></ul></li></ul><h4 id="9-1-2-缺点"><a href="#9-1-2-缺点" class="headerlink" title="9.1.2 缺点"></a>9.1.2 缺点</h4><ul><li><code>语法过于复杂、严谨</code>，对程序员的约束比较多，与python、php等相比入门较难。但是一旦学会了，就业岗位需求量大，而且<code>薪资待遇节节攀升</code>。</li><li>一般适用于大型网站开发，<code>整个架构会比较重</code>，对于初创公司开发和维护人员的成本比较高（即薪资高），选择用Java语言开发网站或应用系统的需要一定的经济实力。</li><li><code>并非适用于所有领域</code>。比如，Objective C、Swift在iOS设备上就有着无可取代的地位。浏览器中的处理几乎完全由JavaScript掌控。Windows程序通常都用C++或C#编写。Java在服务器端编程和跨平台客户端应用领域则很有优势。</li></ul><h3 id="9-2-JVM功能说明"><a href="#9-2-JVM功能说明" class="headerlink" title="9.2 JVM功能说明"></a>9.2 JVM功能说明</h3><p><strong>JVM</strong>（<code>J</code>ava <code>V</code>irtual <code>M</code>achine ，Java虚拟机）：是一个虚拟的计算机，是Java程序的运行环境。JVM具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044323_watermark.png" alt="image-20220310165805739" style="zoom:67%;" /><h4 id="9-2-1-功能1：实现Java程序的跨平台性"><a href="#9-2-1-功能1：实现Java程序的跨平台性" class="headerlink" title="9.2.1 功能1：实现Java程序的跨平台性"></a>9.2.1 功能1：实现Java程序的跨平台性</h4><p>我们编写的Java代码，都运行在<strong>JVM</strong> 之上。正是因为有了JVM，才使得Java程序具备了跨平台性。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044107_watermark.png" alt="image-20220513191856727" style="zoom:50%;" /><p>使用JVM前后对比：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044094_watermark.png" alt="image-20220514151716805"></p><h4 id="9-2-2-功能2：自动内存管理-内存分配、内存回收"><a href="#9-2-2-功能2：自动内存管理-内存分配、内存回收" class="headerlink" title="9.2.2 功能2：自动内存管理(内存分配、内存回收)"></a>9.2.2 功能2：自动内存管理(内存分配、内存回收)</h4><ul><li>Java程序在运行过程中，涉及到运算的<code>数据的分配</code>、<code>存储</code>等都由JVM来完成</li><li>Java消除了程序员回收无用内存空间的职责。提供了一种系统级线程跟踪存储空间的分配情况，在内存空间达到相应阈值时，检查并释放可被释放的存储器空间。</li><li>GC的自动回收，提高了内存空间的利用效率，也提高了编程人员的效率，很大程度上<code>减少了</code>因为没有释放空间而导致的<code>内存泄漏</code>。</li></ul><blockquote><p>面试题：</p><p>Java程序还会出现内存溢出和内存泄漏问题吗？  Yes!</p></blockquote><h2 id="10-章节案例"><a href="#10-章节案例" class="headerlink" title="10. 章节案例"></a>10. 章节案例</h2><p><strong>案例1：个人信息输出</strong></p><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044000_watermark.png" alt="image-20220315221336038"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;姓名：康师傅&quot;</span>);<br>System.out.println();<span class="hljs-comment">//换行操作</span><br>System.out.println(<span class="hljs-string">&quot;性别：男&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;家庭住址：北京程序员聚集地：回龙观&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：输出：心形</strong> </p><p>结合\n(换行)，\t(制表符)，空格等在控制台打印出如下图所示的效果。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044165_watermark.png" alt="image-20220309004152219"> </p><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式一：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><span class="hljs-comment">//System.out.print(&quot;\t&quot;);</span><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;I love java&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;    &quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise3</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;I love Java&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java语言概述</title>
    <link href="/2024/02/02/7.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/"/>
    <url>/2024/02/02/7.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-关键字：this"><a href="#1-关键字：this" class="headerlink" title="1. 关键字：this"></a>1. 关键字：this</h2><h3 id="1-1-this是什么？"><a href="#1-1-this是什么？" class="headerlink" title="1.1 this是什么？"></a>1.1 this是什么？</h3><ul><li><p>在Java中，this关键字不算难理解，它的作用和其词义很接近。</p><ul><li>它在方法（准确的说是实例方法或非static的方法）内部使用，表示调用该方法的对象</li><li>它在构造器内部使用，表示该构造器正在初始化的对象。</li></ul></li><li><p>this可以调用的结构：成员变量、方法和构造器</p></li></ul><h3 id="1-2-什么时候使用this"><a href="#1-2-什么时候使用this" class="headerlink" title="1.2 什么时候使用this"></a>1.2 什么时候使用this</h3><h4 id="1-2-1-实例方法或构造器中使用当前对象的成员"><a href="#1-2-1-实例方法或构造器中使用当前对象的成员" class="headerlink" title="1.2.1 实例方法或构造器中使用当前对象的成员"></a>1.2.1 实例方法或构造器中使用当前对象的成员</h4><p>在实例方法或构造器中，如果使用当前类的成员变量或成员方法可以在其前面添加this，增强程序的可读性。不过，通常我们都习惯省略this。</p><p>但是，当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来表明该变量是类的成员变量。即：我们可以用this来区分<code>成员变量</code>和<code>局部变量</code>。比如：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613557_watermark.png" alt="image-20220503102947013" style="zoom:67%;" /><p>另外，使用this访问属性和方法时，如果在本类中未找到，会从父类中查找。这个在继承中会讲到。</p><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<span class="hljs-comment">// 定义Person类</span><br><span class="hljs-keyword">private</span> String name ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name ;   <br><span class="hljs-built_in">this</span>.age = age ;  <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + name) ;<br><span class="hljs-built_in">this</span>.speak();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span>&#123;<br>System.out.println(“年龄：” + <span class="hljs-built_in">this</span>.age);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-type">int</span> length;<br>    <span class="hljs-type">int</span> width;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.length * <span class="hljs-built_in">this</span>.width;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">perimeter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * (<span class="hljs-built_in">this</span>.length + <span class="hljs-built_in">this</span>.width);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">char</span> sign)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">this</span>.width; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-built_in">this</span>.length; j++) &#123;<br>                System.out.print(sign);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;长：&quot;</span> + <span class="hljs-built_in">this</span>.length + <span class="hljs-string">&quot;，宽：&quot;</span> + <span class="hljs-built_in">this</span>.width +<span class="hljs-string">&quot;，面积：&quot;</span> + <span class="hljs-built_in">this</span>.area() +<span class="hljs-string">&quot;，周长：&quot;</span> + <span class="hljs-built_in">this</span>.perimeter();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRectangle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Rectangle</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>();<br>        <span class="hljs-type">Rectangle</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>();<br><br>        System.out.println(<span class="hljs-string">&quot;r1对象：&quot;</span> + r1.getInfo());<br>        System.out.println(<span class="hljs-string">&quot;r2对象：&quot;</span> + r2.getInfo());<br><br>        r1.length = <span class="hljs-number">10</span>;<br>        r1.width = <span class="hljs-number">2</span>;<br>        System.out.println(<span class="hljs-string">&quot;r1对象：&quot;</span> + r1.getInfo());<br>        System.out.println(<span class="hljs-string">&quot;r2对象：&quot;</span> + r2.getInfo());<br><br>        r1.print(<span class="hljs-string">&#x27;#&#x27;</span>);<br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>        r1.print(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>        r2.print(<span class="hljs-string">&#x27;#&#x27;</span>);<br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>        r2.print(<span class="hljs-string">&#x27;%&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-2-同一个类中构造器互相调用"><a href="#1-2-2-同一个类中构造器互相调用" class="headerlink" title="1.2.2 同一个类中构造器互相调用"></a>1.2.2 同一个类中构造器互相调用</h4><p>this可以作为一个类中构造器相互调用的特殊格式。</p><ul><li>this()：调用本类的无参构造器</li><li>this(实参列表)：调用本类的有参构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">// 无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        this(&quot;&quot;,18);//调用本类有参构造器</span><br>    &#125;<br><br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>();<span class="hljs-comment">//调用本类无参构造器</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>(name);<span class="hljs-comment">//调用本类中有一个String参数的构造器</span><br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span> + name +<span class="hljs-string">&quot;，年龄：&quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>不能出现递归调用。比如，调用自身构造器。<ul><li>推论：如果一个类中声明了n个构造器，则最多有 n - 1个构造器中使用了”this(形参列表)”</li></ul></li><li>this()和this(实参列表)只能声明在构造器首行。<ul><li>推论：在类的一个构造器中，最多只能声明一个”this(参数列表)”</li></ul></li></ul><h3 id="1-3-练习"><a href="#1-3-练习" class="headerlink" title="1.3 练习"></a>1.3 练习</h3><p><strong>练习1：</strong>添加必要的构造器，综合应用构造器的重载，this关键字。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613536_watermark.png" alt="image-20220808191154534"></p><p><strong>练习2：</strong></p><p>（1）按照如下的UML类图，创建相应的类，提供必要的结构：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613847_watermark.png" alt="image-20220323211412409" style="zoom:50%;" /><p>在提款方法withdraw()中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示。deposit()方法表示存款。</p><p>（2）按照如下的UML类图，创建相应的类，提供必要的结构</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613178_watermark.png" alt="image-20220323211454372" style="zoom:50%;" /><p>（3）按照如下的UML类图，创建相应的类，提供必要的结构</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613620_watermark.png" alt="image-20220323211521808" style="zoom:50%;" /><ul><li><p>addCustomer 方法必须依照参数（姓，名）构造一个新的 Customer对象，然后把它放到 customer 数组中。还必须把 numberOfCustomer 属性的值加 1。</p></li><li><p>getNumOfCustomers 方法返回 numberofCustomers 属性值。</p></li><li><p>getCustomer方法返回与给出的index参数相关的客户。</p></li></ul><p>（4）创建BankTest类，进行测试。</p><p>内存解析图：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613967_watermark.png" alt="image-20220323211653907" style="zoom:80%;" /><h2 id="2-面向对象特征二：继承-Inheritance"><a href="#2-面向对象特征二：继承-Inheritance" class="headerlink" title="2. 面向对象特征二：继承(Inheritance)"></a>2. 面向对象特征二：继承(Inheritance)</h2><h3 id="2-1-继承的概述"><a href="#2-1-继承的概述" class="headerlink" title="2.1 继承的概述"></a>2.1 继承的概述</h3><h4 id="2-1-1-生活中的继承"><a href="#2-1-1-生活中的继承" class="headerlink" title="2.1.1 生活中的继承"></a>2.1.1 生活中的继承</h4><ul><li>财产继承：</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613826_watermark.png" alt="image-20220323215921441" style="zoom: 50%;" /><ul><li>绿化：前人栽树，后人乘凉</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613250_watermark.png" alt="image-20220520171727778" style="zoom: 50%;" /><p>“绿水青山，就是金山银山”</p><ul><li><p>样貌：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613862_watermark.png" alt="image-20220323220246746" style="zoom: 50%;" /></li><li><p>继承之外，是不是还可以”<code>进化</code>“：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613945_watermark.png" alt="image-20220323220537644" style="zoom: 50%;" /></li></ul><blockquote><p>继承有延续（下一代延续上一代的基因、财富）、扩展（下一代和上一代又有所不同）的意思。</p></blockquote><h4 id="2-1-2-Java中的继承"><a href="#2-1-2-Java中的继承" class="headerlink" title="2.1.2 Java中的继承"></a>2.1.2 Java中的继承</h4><p><strong>角度一：从上而下</strong></p><p>为描述和处理<strong>个人</strong>信息，定义类Person：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613656_watermark.png" alt="image-20220323220923386" style="zoom:67%;" /><p>为描述和处理<strong>学生</strong>信息，定义类Student：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613746_watermark.png" alt="image-20220323221001495" style="zoom:67%;" /><p>通过继承，简化Student类的定义：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613243_watermark.png" alt="image-20220323221050791" style="zoom:67%;" /><blockquote><p>说明：Student类继承了父类Person的所有属性和方法，并增加了一个属性school。Person中的属性和方法，Student都可以使用。</p></blockquote><p><strong>角度二：从下而上</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613710_watermark.jpeg"></p><p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类中无需再定义这些属性和行为，只需要和抽取出来的类构成<code>继承关系</code>。如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613089_watermark.jpeg" style="zoom: 67%;" /><p>再举例：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613378_watermark.png" alt="image-20220323221436571" style="zoom:67%;" /><h4 id="2-1-3-继承的好处"><a href="#2-1-3-继承的好处" class="headerlink" title="2.1.3 继承的好处"></a>2.1.3 继承的好处</h4><ul><li><p>继承的出现减少了代码冗余，提高了代码的复用性。</p></li><li><p>继承的出现，更有利于功能的扩展。</p></li><li><p>继承的出现让类与类之间产生了<code>is-a</code>的关系，为多态的使用提供了前提。</p><ul><li>继承描述事物之间的所属关系，这种关系是：<code>is-a</code> 的关系。可见，父类更通用、更一般，子类更具体。</li></ul></li></ul><blockquote><p>注意：不要仅为了获取其他类中某个功能而去继承！</p></blockquote><h3 id="2-2-继承的语法"><a href="#2-2-继承的语法" class="headerlink" title="2.2 继承的语法"></a>2.2 继承的语法</h3><h4 id="2-2-1-继承中的语法格式"><a href="#2-2-1-继承中的语法格式" class="headerlink" title="2.2.1 继承中的语法格式"></a>2.2.1 继承中的语法格式</h4><p>通过 <code>extends</code> 关键字，可以声明一个类B继承另外一个类A，定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 类A &#123;<br>...<br>&#125;<br><br>[修饰符] class 类B extends 类A &#123;<br>...<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-2-2-继承中的基本概念"><a href="#2-2-2-继承中的基本概念" class="headerlink" title="2.2.2 继承中的基本概念"></a>2.2.2 继承中的基本概念</h4><p>类B，称为子类、派生类(derived class)、SubClass</p><p>类A，称为父类、超类、基类(base class)、SuperClass</p><h3 id="2-3-代码举例"><a href="#2-3-代码举例" class="headerlink" title="2.3 代码举例"></a>2.3 代码举例</h3><p><strong>1、父类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.grammar;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 定义动物类Animal，做为父类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-comment">// 定义name属性</span><br>    String name;<br>    <span class="hljs-comment">// 定义age属性</span><br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">// 定义动物的吃东西方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(age + <span class="hljs-string">&quot;岁的&quot;</span><br>                + name + <span class="hljs-string">&quot;在吃东西&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>2、子类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.grammar;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 定义猫类Cat 继承 动物类Animal</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-type">int</span> count;<span class="hljs-comment">//记录每只猫抓的老鼠数量</span><br><br>    <span class="hljs-comment">// 定义一个猫抓老鼠的方法catchMouse</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">catchMouse</span><span class="hljs-params">()</span> &#123;<br>        count++;<br>        System.out.println(<span class="hljs-string">&quot;抓老鼠，已经抓了&quot;</span><br>                + count + <span class="hljs-string">&quot;只老鼠&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个猫类对象</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        <span class="hljs-comment">// 为该猫类对象的name属性进行赋值</span><br>        cat.name = <span class="hljs-string">&quot;Tom&quot;</span>;<br>        <span class="hljs-comment">// 为该猫类对象的age属性进行赋值</span><br>        cat.age = <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// 调用该猫继承来的eat()方法</span><br>        cat.eat();<br>        <span class="hljs-comment">// 调用该猫的catchMouse()方法</span><br>        cat.catchMouse();<br>        cat.catchMouse();<br>        cat.catchMouse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-继承性的细节说明"><a href="#2-4-继承性的细节说明" class="headerlink" title="2.4 继承性的细节说明"></a>2.4 继承性的细节说明</h3><p><strong>1、子类会继承父类所有的实例变量和实例方法</strong></p><p>从类的定义来看，类是一类具有相同特性的事物的抽象描述。父类是所有子类共同特征的抽象描述。而实例变量和实例方法就是事物的特征，那么父类中声明的实例变量和实例方法代表子类事物也有这个特征。</p><ul><li>当子类对象被创建时，在堆中给对象申请内存时，就要看子类和父类都声明了什么实例变量，这些实例变量都要分配内存。</li><li>当子类对象调用方法时，编译器会先在子类模板中看该类是否有这个方法，如果没找到，会看它的父类甚至父类的父类是否声明了这个方法，遵循<code>从下往上</code>找的顺序，找到了就停止，一直到根父类都没有找到，就会报编译错误。</li></ul><p>所以继承意味着子类的对象除了看子类的类模板还要看父类的类模板。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613859_watermark.png" alt="image-20211230090255997"></p><p><strong>2、子类不能直接访问父类中私有的(private)的成员变量和方法</strong></p><p>子类虽会继承父类私有(private)的成员变量，但子类不能对继承的私有成员变量直接进行访问，可通过继承的get&#x2F;set方法进行访问。如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613275_watermark.png" alt="image-20220323224757212"></p><p><strong>3、在Java 中，继承的关键字用的是“extends”，即子类不是父类的子集，而是对父类的“扩展”</strong></p><p>子类在继承父类以后，还可以定义自己特有的方法，这就可以看做是对父类功能上的扩展。</p><p><strong>4、Java支持多层继承(继承体系)</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613670_watermark.png" alt="image-20220323225441417" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：</p><ul><li><p>子类和父类是一种相对的概念</p></li><li><p>顶层父类是Object类。所有的类默认继承Object，作为父类。</p></li></ul></blockquote><p><strong>5、一个父类可以同时拥有多个子类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>6、Java只支持单继承，不支持多重继承</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613854_watermark.png" alt="image-20220514162507692" style="zoom:67%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614650_watermark.png" alt="image-20220523201405061" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><br><span class="hljs-comment">//一个类只能有一个父类，不可以有多个直接父类。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;&#125; <span class="hljs-comment">//ok</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>,B...<span class="hljs-comment">//error</span><br></code></pre></td></tr></table></figure><h3 id="2-5-练习"><a href="#2-5-练习" class="headerlink" title="2.5 练习"></a>2.5 练习</h3><p><strong>练习1：</strong>定义一个学生类Student，它继承自Person类</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614591_watermark.png" alt="image-20220323231804928" style="zoom:67%;" /><p><strong>练习2：</strong></p><p>(1)定义一个ManKind类，包括</p><ul><li><p>成员变量int sex和int salary；</p></li><li><p>方法void manOrWoman()：根据sex的值显示“man”(sex&#x3D;&#x3D;1)或者“woman”(sex&#x3D;&#x3D;0)；</p></li><li><p>方法void employeed()：根据salary的值显示“no job”(salary&#x3D;&#x3D;0)或者“ job”(salary!&#x3D;0)。</p></li></ul><p>(2)定义类Kids继承ManKind，并包括</p><ul><li>成员变量int yearsOld；</li><li>方法printAge()打印yearsOld的值。</li></ul><p>(3)定义类KidsTest，在类的main方法中实例化Kids的对象someKid，用该对象访问其父类的成员变量及方法。</p><p><strong>练习3：</strong>根据下图实现类。在CylinderTest类中创建Cylinder类的对象，设置圆柱的底面半径和高，并输出圆柱的体积。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614154_watermark.png" alt="image-20220323231942361" style="zoom:67%;" /><h2 id="3-方法的重写（override-overwrite）"><a href="#3-方法的重写（override-overwrite）" class="headerlink" title="3. 方法的重写（override&#x2F;overwrite）"></a>3. 方法的重写（override&#x2F;overwrite）</h2><p>父类的所有方法子类都会继承，但是当某个方法被继承到子类之后，子类觉得父类原来的实现不适合于自己当前的类，该怎么办呢？子类可以对从父类中继承来的方法进行改造，我们称为方法的<code>重写 (override、overwrite)</code>。也称为方法的<code>重置</code>、<code>覆盖</code>。</p><p>在程序执行时，子类的方法将覆盖父类的方法。</p><h3 id="3-1-方法重写举例"><a href="#3-1-方法重写举例" class="headerlink" title="3.1 方法重写举例"></a>3.1 方法重写举例</h3><p>比如新的手机增加来电显示头像的功能，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;发短信&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打电话&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showNum</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;来电显示号码&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.method;<br><br><span class="hljs-comment">//SmartPhone：智能手机</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-comment">//重写父类的来电显示功能的方法</span><br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showNum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//来电显示姓名和图片功能</span><br>        System.out.println(<span class="hljs-string">&quot;显示来电姓名&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;显示头像&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//重写父类的通话功能的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;语音通话 或 视频通话&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestOverride</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建子类对象</span><br>        <span class="hljs-type">SmartPhone</span> <span class="hljs-variable">sp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartPhone</span>();<br><br>        <span class="hljs-comment">// 调用父类继承而来的方法</span><br>        sp.call();<br><br>        <span class="hljs-comment">// 调用子类重写的方法</span><br>        sp.showNum();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@Override使用说明：</p><p>写在方法上面，用来检测是不是满足重写方法的要求。这个注解就算不写，只要满足要求，也是正确的方法覆盖重写。建议保留，这样编译器可以帮助我们检查格式，另外也可以让阅读源代码的程序员清晰的知道这是一个重写的方法。</p></blockquote><h3 id="3-2-方法重写的要求"><a href="#3-2-方法重写的要求" class="headerlink" title="3.2 方法重写的要求"></a>3.2 方法重写的要求</h3><ol><li><p>子类重写的方法<code>必须</code>和父类被重写的方法具有相同的<code>方法名称</code>、<code>参数列表</code>。</p></li><li><p>子类重写的方法的返回值类型<code>不能大于</code>父类被重写的方法的返回值类型。（例如：Student &lt; Person）。</p></li></ol><blockquote><p>注意：如果返回值类型是基本数据类型和void，那么必须是相同</p></blockquote><ol start="3"><li>子类重写的方法使用的访问权限<code>不能小于</code>父类被重写的方法的访问权限。（public &gt; protected &gt; 缺省 &gt; private）</li></ol><blockquote><p>注意：① 父类私有方法不能重写   ② 跨包的父类缺省的方法也不能重写</p></blockquote><ol start="4"><li>子类方法抛出的异常不能大于父类被重写方法的异常</li></ol><p>此外，子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)，或者同时声明为static的（不是重写）。因为static方法是属于类的，子类无法覆盖父类的方法。</p><h3 id="3-3-小结：方法的重载与重写"><a href="#3-3-小结：方法的重载与重写" class="headerlink" title="3.3 小结：方法的重载与重写"></a>3.3 小结：方法的重载与重写</h3><p>方法的重载：方法名相同，形参列表不同。不看返回值类型。</p><p>方法的重写：见上面。</p><p>（1）同一个类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestOverload</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span>&#123;<br>        <span class="hljs-keyword">return</span> max(max(a,b),c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）父子类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestOverloadOverride</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        s.method(<span class="hljs-number">1</span>);<span class="hljs-comment">//只有一个形式的method方法</span><br><br>        <span class="hljs-type">Daughter</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Daughter</span>();<br>        d.method(<span class="hljs-number">1</span>);<br>        d.method(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//有两个形式的method方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Father.method&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<span class="hljs-comment">//重写</span><br>        System.out.println(<span class="hljs-string">&quot;Son.method&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Daughter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span>&#123;<span class="hljs-comment">//重载</span><br>        System.out.println(<span class="hljs-string">&quot;Daughter.method&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-练习"><a href="#3-4-练习" class="headerlink" title="3.4 练习"></a>3.4 练习</h3><p><strong>练习1：</strong>如果现在父类的一个方法定义成private访问权限，在子类中将此方法声明为default访问权限，那么这样还叫重写吗？ (NO)</p><p><strong>练习2：</strong>修改继承内容的练习2中定义的类Kids，在Kids中重新定义employeed()方法，覆盖父类ManKind中定义的employeed()方法，输出“Kids should study and no job.”</p><h2 id="4-再谈封装性中的4种权限修饰"><a href="#4-再谈封装性中的4种权限修饰" class="headerlink" title="4. 再谈封装性中的4种权限修饰"></a>4. 再谈封装性中的4种权限修饰</h2><p>权限修饰符：public,protected,缺省,private</p><table><thead><tr><th>修饰符</th><th>本类</th><th>本包</th><th>其他包子类</th><th>其他包非子类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>缺省</td><td>√</td><td>√（本包子类非子类都可见）</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√（本包子类非子类都可见）</td><td>√（其他包仅限于子类中可见）</td><td>×</td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>外部类：public和缺省</p><p>成员变量、成员方法等：public,protected,缺省,private</p><p><strong>1、外部类要跨包使用必须是public，否则仅限于本包使用</strong></p><p>（1）外部类的权限修饰符如果缺省，本包使用没问题</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614841_watermark.png" alt="image-20211230093627763"></p><p>（2）外部类的权限修饰符如果缺省，跨包使用有问题</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614420_watermark.png" alt="image-20211230094236974"></p><p><strong>2、成员的权限修饰符问题</strong></p><p>（1）本包下使用：成员的权限修饰符可以是public、protected、缺省</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614141_watermark.png" alt="image-20211230095320646"></p><p>（2）跨包下使用：要求严格</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614581_watermark.png" alt="image-20211230095817784"></p><p>（3）跨包使用时，如果类的权限修饰符缺省，成员权限修饰符&gt;类的权限修饰符也没有意义</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614297_watermark.png" alt="image-20211230100219840"></p><h2 id="5-关键字：super"><a href="#5-关键字：super" class="headerlink" title="5. 关键字：super"></a>5. 关键字：super</h2><h3 id="5-1-super的理解"><a href="#5-1-super的理解" class="headerlink" title="5.1 super的理解"></a>5.1 super的理解</h3><p>在Java类中使用super来调用父类中的指定操作：</p><ul><li>super可用于访问父类中定义的属性</li><li>super可用于调用父类中定义的成员方法</li><li>super可用于在子类构造器中调用父类的构造器</li></ul><p>注意：</p><ul><li>尤其当子父类出现同名成员时，可以用super表明调用的是父类中的成员</li><li>super的追溯不仅限于直接父类</li><li>super和this的用法相像，this代表本类对象的引用，super代表父类的内存空间的标识</li></ul><h3 id="5-2-super的使用场景"><a href="#5-2-super的使用场景" class="headerlink" title="5.2 super的使用场景"></a>5.2 super的使用场景</h3><h4 id="5-2-1-子类中调用父类被重写的方法"><a href="#5-2-1-子类中调用父类被重写的方法" class="headerlink" title="5.2.1 子类中调用父类被重写的方法"></a>5.2.1 子类中调用父类被重写的方法</h4><ul><li>如果子类没有重写父类的方法，只要权限修饰符允许，在子类中完全可以直接调用父类的方法；</li><li>如果子类重写了父类的方法，在子类中需要通过<code>super.</code>才能调用父类被重写的方法，否则默认调用的子类重写的方法</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;发短信&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打电话&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showNum</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;来电显示号码&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//smartphone：智能手机</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-comment">//重写父类的来电显示功能的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showNum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//来电显示姓名和图片功能</span><br>        System.out.println(<span class="hljs-string">&quot;显示来电姓名&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;显示头像&quot;</span>);<br><br>        <span class="hljs-comment">//保留父类来电显示号码的功能</span><br>        <span class="hljs-built_in">super</span>.showNum();<span class="hljs-comment">//此处必须加super.，否则就是无限递归，那么就会栈内存溢出</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li><p><strong>方法前面没有super.和this.</strong></p><ul><li>先从子类找匹配方法，如果没有，再从直接父类找，再没有，继续往上追溯</li></ul></li><li><p><strong>方法前面有this.</strong></p><ul><li>先从子类找匹配方法，如果没有，再从直接父类找，再没有，继续往上追溯</li></ul></li><li><p><strong>方法前面有super.</strong></p><ul><li>从当前子类的直接父类找，如果没有，继续往上追溯</li></ul></li></ul><h4 id="5-2-2-子类中调用父类中同名的成员变量"><a href="#5-2-2-子类中调用父类中同名的成员变量" class="headerlink" title="5.2.2 子类中调用父类中同名的成员变量"></a>5.2.2 子类中调用父类中同名的成员变量</h4><ul><li>如果实例变量与局部变量重名，可以在实例变量前面加this.进行区别</li><li>如果子类实例变量和父类实例变量重名，并且父类的该实例变量在子类仍然可见，在子类中要访问父类声明的实例变量需要在父类实例变量前加super.，否则默认访问的是子类自己声明的实例变量</li><li>如果父子类实例变量没有重名，只要权限修饰符允许，在子类中完全可以直接访问父类中声明的实例变量，也可以用this.实例访问，也可以用super.实例变量访问</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//子类与父类的属性同名，子类对象中就有两个a</span><br>System.out.println(<span class="hljs-string">&quot;子类的a：&quot;</span> + a);<span class="hljs-comment">//20  先找局部变量找，没有再从本类成员变量找</span><br>        System.out.println(<span class="hljs-string">&quot;子类的a：&quot;</span> + <span class="hljs-built_in">this</span>.a);<span class="hljs-comment">//20   先从本类成员变量找</span><br>        System.out.println(<span class="hljs-string">&quot;父类的a：&quot;</span> + <span class="hljs-built_in">super</span>.a);<span class="hljs-comment">//10    直接从父类成员变量找</span><br><br><span class="hljs-comment">//子类与父类的属性不同名，是同一个b</span><br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<span class="hljs-comment">//11  先找局部变量找，没有再从本类成员变量找，没有再从父类找</span><br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">this</span>.b);<span class="hljs-comment">//11   先从本类成员变量找，没有再从父类找</span><br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">super</span>.b);<span class="hljs-comment">//11  直接从父类局部变量找</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-comment">//子类与父类的属性同名，子类对象中就有两个成员变量a，此时方法中还有一个局部变量a</span><br>System.out.println(<span class="hljs-string">&quot;局部变量的a：&quot;</span> + a);<span class="hljs-comment">//30  先找局部变量</span><br>        System.out.println(<span class="hljs-string">&quot;子类的a：&quot;</span> + <span class="hljs-built_in">this</span>.a);<span class="hljs-comment">//20  先从本类成员变量找</span><br>        System.out.println(<span class="hljs-string">&quot;父类的a：&quot;</span> + <span class="hljs-built_in">super</span>.a);<span class="hljs-comment">//10  直接从父类成员变量找</span><br><br>        System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<span class="hljs-comment">//13  先找局部变量</span><br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">this</span>.b);<span class="hljs-comment">//11  先从本类成员变量找</span><br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">super</span>.b);<span class="hljs-comment">//11  直接从父类局部变量找</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">son</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>son.test();<br>son.method(<span class="hljs-number">30</span>,<span class="hljs-number">13</span>);  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：起点不同（就近原则）</p><ul><li><p><strong>变量前面没有super.和this.</strong></p><ul><li>在构造器、代码块、方法中如果出现使用某个变量，先查看是否是当前块声明的<code>局部变量</code>，</li><li>如果不是局部变量，先从当前执行代码的<code>本类去找成员变量</code></li><li>如果从当前执行代码的本类中没有找到，会往上找<code>父类声明的成员变量</code>（权限修饰符允许在子类中访问的）</li></ul></li><li><p><strong>变量前面有this.</strong> </p><ul><li>通过this找成员变量时，先从当前执行代码的&#x3D;&#x3D;本类去找成员变量&#x3D;&#x3D;</li><li>如果从当前执行代码的本类中没有找到，会往上找&#x3D;&#x3D;父类声明的成员变量（&#x3D;&#x3D;权限修饰符允许在子类中访问的）</li></ul></li><li><p><strong>变量前面super.</strong> </p><ul><li>通过super找成员变量，直接从当前执行代码的直接父类去找成员变量（权限修饰符允许在子类中访问的）</li><li>如果直接父类没有，就去父类的父类中找（权限修饰符允许在子类中访问的）</li></ul></li></ul><p><strong><font color='red'>特别说明：应该避免子类声明和父类重名的成员变量</font></strong></p><p>在阿里的开发规范等文档中都做出明确说明：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614918_watermark.png" alt="image-20211230110411580"></p><h4 id="5-2-3-子类构造器中调用父类构造器"><a href="#5-2-3-子类构造器中调用父类构造器" class="headerlink" title="5.2.3 子类构造器中调用父类构造器"></a>5.2.3 子类构造器中调用父类构造器</h4><p>① 子类继承父类时，不会继承父类的构造器。只能通过“super(形参列表)”的方式调用父类指定的构造器。</p><p>② 规定：“super(形参列表)”，必须声明在构造器的首行。</p><p>③ 我们前面讲过，在构造器的首行可以使用”this(形参列表)”，调用本类中重载的构造器，<br>     结合②，结论：在构造器的首行，”this(形参列表)” 和 “super(形参列表)”只能二选一。</p><p>④ 如果在子类构造器的首行既没有显示调用”this(形参列表)”，也没有显式调用”super(形参列表)”，<br>​     则子类此构造器默认调用”super()”，即调用父类中空参的构造器。</p><p>⑤ 由③和④得到结论：子类的任何一个构造器中，要么会调用本类中重载的构造器，要么会调用父类的构造器。<br>     只能是这两种情况之一。</p><p>⑥ 由⑤得到：一个类中声明有n个构造器，最多有n-1个构造器中使用了”this(形参列表)”，则剩下的那个一定使用”super(形参列表)”。</p><blockquote><p>开发中常见错误：</p><p>如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有空参的构造器，则<code>编译出错</code>。</p></blockquote><p>情景举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//A类和B类都是默认有一个无参构造，B类的默认无参构造中还会默认调用A类的默认无参构造</span><br>        <span class="hljs-comment">//但是因为都是默认的，没有打印语句，看不出来</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>情景举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>A()&#123;<br>System.out.println(<span class="hljs-string">&quot;A类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//A类显示声明一个无参构造，</span><br><span class="hljs-comment">//B类默认有一个无参构造，</span><br><span class="hljs-comment">//B类的默认无参构造中会默认调用A类的无参构造</span><br>        <span class="hljs-comment">//可以看到会输出“A类无参构造器&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>情景举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>A()&#123;<br>System.out.println(<span class="hljs-string">&quot;A类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>B()&#123;<br>System.out.println(<span class="hljs-string">&quot;B类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//A类显示声明一个无参构造，</span><br><span class="hljs-comment">//B类显示声明一个无参构造，        </span><br><span class="hljs-comment">//B类的无参构造中虽然没有写super()，但是仍然会默认调用A类的无参构造</span><br>        <span class="hljs-comment">//可以看到会输出“A类无参构造器&quot;和&quot;B类无参构造器&quot;)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>情景举例4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>A()&#123;<br>System.out.println(<span class="hljs-string">&quot;A类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>B()&#123;<br>        <span class="hljs-built_in">super</span>();<br>System.out.println(<span class="hljs-string">&quot;B类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//A类显示声明一个无参构造，</span><br><span class="hljs-comment">//B类显示声明一个无参构造，        </span><br><span class="hljs-comment">//B类的无参构造中明确写了super()，表示调用A类的无参构造</span><br>        <span class="hljs-comment">//可以看到会输出“A类无参构造器&quot;和&quot;B类无参构造器&quot;)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>情景举例5：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>A(<span class="hljs-type">int</span> a)&#123;<br>System.out.println(<span class="hljs-string">&quot;A类有参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>B()&#123;<br>System.out.println(<span class="hljs-string">&quot;B类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test05</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//A类显示声明一个有参构造，没有写无参构造，那么A类就没有无参构造了</span><br><span class="hljs-comment">//B类显示声明一个无参构造，        </span><br><span class="hljs-comment">//B类的无参构造没有写super(...)，表示默认调用A类的无参构造</span><br>        <span class="hljs-comment">//编译报错，因为A类没有无参构造</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614852_watermark.png" alt="image-20200227141228450"></p><p>情景举例6：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>A(<span class="hljs-type">int</span> a)&#123;<br>System.out.println(<span class="hljs-string">&quot;A类有参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>B()&#123;<br><span class="hljs-built_in">super</span>();<br>System.out.println(<span class="hljs-string">&quot;B类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test06</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//A类显示声明一个有参构造，没有写无参构造，那么A类就没有无参构造了</span><br><span class="hljs-comment">//B类显示声明一个无参构造，        </span><br><span class="hljs-comment">//B类的无参构造明确写super()，表示调用A类的无参构造</span><br>        <span class="hljs-comment">//编译报错，因为A类没有无参构造</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614612_watermark.png" alt="image-20200303183542807"></p><p>情景举例7：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>A(<span class="hljs-type">int</span> a)&#123;<br>System.out.println(<span class="hljs-string">&quot;A类有参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>B(<span class="hljs-type">int</span> a)&#123;<br><span class="hljs-built_in">super</span>(a);<br>System.out.println(<span class="hljs-string">&quot;B类有参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test07</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//A类显示声明一个有参构造，没有写无参构造，那么A类就没有无参构造了</span><br><span class="hljs-comment">//B类显示声明一个有参构造，        </span><br><span class="hljs-comment">//B类的有参构造明确写super(a)，表示调用A类的有参构造</span><br>        <span class="hljs-comment">//会打印“A类有参构造器&quot;和&quot;B类有参构造器&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>情景举例8：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    A()&#123;<br>        System.out.println(<span class="hljs-string">&quot;A类无参构造器&quot;</span>);<br>    &#125;<br>A(<span class="hljs-type">int</span> a)&#123;<br>System.out.println(<span class="hljs-string">&quot;A类有参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    B()&#123;<br>        <span class="hljs-built_in">super</span>();<span class="hljs-comment">//可以省略，调用父类的无参构造</span><br>        System.out.println(<span class="hljs-string">&quot;B类无参构造器&quot;</span>);<br>    &#125;<br>B(<span class="hljs-type">int</span> a)&#123;<br><span class="hljs-built_in">super</span>(a);<span class="hljs-comment">//调用父类有参构造</span><br>System.out.println(<span class="hljs-string">&quot;B类有参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test8</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>(<span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-小结：this与super"><a href="#5-3-小结：this与super" class="headerlink" title="5.3 小结：this与super"></a>5.3 小结：this与super</h3><p><strong>1、this和super的意义</strong></p><p>this：当前对象</p><ul><li>在构造器和非静态代码块中，表示正在new的对象</li><li>在实例方法中，表示调用当前方法的对象</li></ul><p>super：引用父类声明的成员</p><p><strong>2、this和super的使用格式</strong></p><ul><li>this<ul><li>this.成员变量：表示当前对象的某个成员变量，而不是局部变量</li><li>this.成员方法：表示当前对象的某个成员方法，完全可以省略this.</li><li>this()或this(实参列表)：调用另一个构造器协助当前对象的实例化，只能在构造器首行，只会找本类的构造器，找不到就报错</li></ul></li><li>super<ul><li>super.成员变量：表示当前对象的某个成员变量，该成员变量在父类中声明的</li><li>super.成员方法：表示当前对象的某个成员方法，该成员方法在父类中声明的</li><li>super()或super(实参列表)：调用父类的构造器协助当前对象的实例化，只能在构造器首行，只会找直接父类的对应构造器，找不到就报错</li></ul></li></ul><h3 id="5-4-练习"><a href="#5-4-练习" class="headerlink" title="5.4 练习"></a>5.4 练习</h3><p><strong>练习1：</strong>修改方法重写的练习2中定义的类Kids中employeed()方法，在该方法中调用父类ManKind的employeed()方法，然后再输出“but Kids should study and no job.”</p><p><strong>练习2：</strong>修改继承中的练习3中定义的Cylinder类，在Cylinder类中覆盖findArea()方法，计算圆柱的表面积。考虑：findVolume方法怎样做相应的修改？</p><p>在CylinderTest类中创建Cylinder类的对象，设置圆柱的底面半径和高，并输出圆柱的表面积和体积。</p><p>附加题：在CylinderTest类中创建一个Circle类的对象，设置圆的半径，计算输出圆的面积。体会父类和子类成员的分别调用。</p><p><strong>练习3：</strong></p><p>1、写一个名为Account的类模拟账户。该类的属性和方法如下图所示。该类包括的属性：账号id，余额balance，年利率annualInterestRate；包含的方法：访问器方法（getter和setter方法），返回月利率的方法getMonthlyInterest()，取款方法withdraw()，存款方法deposit()。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614713_watermark.png" alt="image-20220324003430464"></p><p>写一个用户程序测试Account类。在用户程序中，创建一个账号为1122、余额为20000、年利率4.5%的Account对象。使用withdraw方法提款30000元，并打印余额。<br>再使用withdraw方法提款2500元，使用deposit方法存款3000元，然后打印余额和月利率。</p><p>提示：在提款方法withdraw中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示。<br>运行结果如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614481_watermark.png" alt="image-20220324003447242"></p><p>2、创建Account类的一个子类CheckAccount代表可透支的账户，该账户中定义一个属性overdraft代表可透支限额。在CheckAccount类中重写withdraw方法，其算法如下：</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bnf">如果（取款金额<span class="hljs-attribute">&lt;账户余额），</span><br><span class="hljs-attribute">可直接取款</span><br><span class="hljs-attribute">如果（取款金额&gt;</span>账户余额），<br>计算需要透支的额度<br>判断可透支额overdraft是否足够支付本次透支需要，如果可以<br>将账户余额修改为0，冲减可透支金额<br>如果不可以<br>提示用户超过可透支额的限额<br></code></pre></td></tr></table></figure><p>要求：写一个用户程序测试CheckAccount类。在用户程序中，创建一个账号为1122、余额为20000、年利率4.5%，可透支限额为5000元的CheckAccount对象。</p><p>使用withdraw方法提款5000元，并打印账户余额和可透支额。</p><p>再使用withdraw方法提款18000元，并打印账户余额和可透支额。</p><p>再使用withdraw方法提款3000元，并打印账户余额和可透支额。</p><p>提示：</p><p>（1）子类CheckAccount的构造方法需要将从父类继承的3个属性和子类自己的属性全部初始化。</p><p>（2）父类Account的属性balance被设置为private，但在子类CheckAccount的withdraw方法中需要修改它的值，因此应修改父类的balance属性，定义其为protected。</p><p>运行结果如下图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614860_watermark.png" alt="image-20220324003616767"></p><h2 id="6-子类对象实例化全过程"><a href="#6-子类对象实例化全过程" class="headerlink" title="6. 子类对象实例化全过程"></a>6. 子类对象实例化全过程</h2><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614755_watermark.png" alt="image-20220324003713230"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小花&quot;</span>,<span class="hljs-string">&quot;小红&quot;</span>);<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614281_watermark.png" alt="image-20220324003735416" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615015_watermark.png" alt="image-20220324003813163" style="zoom:67%;" /><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Creature</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Creature</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Creature无参数的构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Creature</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal带一个参数的构造器，该动物的name为&quot;</span> + name);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>(name);<br>        System.out.println(<span class="hljs-string">&quot;Animal带两个参数的构造器，其age为&quot;</span> + age);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;汪汪队阿奇&quot;</span>, <span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;Dog无参数的构造器&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-面向对象特征三：多态性"><a href="#7-面向对象特征三：多态性" class="headerlink" title="7. 面向对象特征三：多态性"></a>7. 面向对象特征三：多态性</h2><blockquote><p>一千个读者眼中有一千个哈姆雷特。</p></blockquote><h3 id="7-1-多态的形式和体现"><a href="#7-1-多态的形式和体现" class="headerlink" title="7.1 多态的形式和体现"></a>7.1 多态的形式和体现</h3><h4 id="7-1-1-对象的多态性"><a href="#7-1-1-对象的多态性" class="headerlink" title="7.1.1 对象的多态性"></a>7.1.1 对象的多态性</h4><p>多态性，是面向对象中最重要的概念，在Java中的体现：<strong>对象的多态性：父类的引用指向子类的对象</strong></p><p>格式：（父类类型：指子类继承的父类类型，或者实现的接口类型）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">父类类型 变量名 = 子类对象；<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//Object类型的变量o，指向Person类型的对象</span><br><br>o = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(); <span class="hljs-comment">//Object类型的变量o，指向Student类型的对象</span><br></code></pre></td></tr></table></figure><p>对象的多态：在Java中，子类的对象可以替代父类的对象使用。所以，一个引用类型变量可能指向(引用)多种不同类型的对象</p><h4 id="7-1-2-多态的理解"><a href="#7-1-2-多态的理解" class="headerlink" title="7.1.2 多态的理解"></a>7.1.2 多态的理解</h4><p>Java引用变量有两个类型：<code>编译时类型</code>和<code>运行时类型</code>。编译时类型由<code>声明</code>该变量时使用的类型决定，运行时类型由<code>实际赋给该变量的对象</code>决定。简称：<strong>编译时，看左边；运行时，看右边。</strong></p><ul><li>若编译时类型和运行时类型不一致，就出现了对象的多态性(Polymorphism)</li><li>多态情况下，“看左边”：看的是父类的引用（父类中不具备子类特有的方法）<br>“看右边”：看的是子类的对象（实际运行的是子类重写父类的方法）</li></ul><p>多态的使用前提：① 类的继承关系  ② 方法的重写</p><h4 id="7-1-3-举例"><a href="#7-1-3-举例" class="headerlink" title="7.1.3 举例"></a>7.1.3 举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123;<br>    <span class="hljs-keyword">private</span> String nickname; <span class="hljs-comment">//昵称</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNickname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> nickname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNickname</span><span class="hljs-params">(String nickname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nickname = nickname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(nickname + <span class="hljs-string">&quot;吃东西&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Pet</span> &#123;<br>    <span class="hljs-comment">//子类重写父类的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猫咪&quot;</span> + getNickname() + <span class="hljs-string">&quot;吃鱼仔&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//子类扩展的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">catchMouse</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;抓老鼠&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Pet</span> &#123;<br>    <span class="hljs-comment">//子类重写父类的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗子&quot;</span> + getNickname() + <span class="hljs-string">&quot;啃骨头&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//子类扩展的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">watchHouse</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;看家&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1、方法内局部变量的赋值体现多态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//多态引用</span><br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">pet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        pet.setNickname(<span class="hljs-string">&quot;小白&quot;</span>);<br><br>        <span class="hljs-comment">//多态的表现形式</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        编译时看父类：只能调用父类声明的方法，不能调用子类扩展的方法；</span><br><span class="hljs-comment">        运行时，看“子类”，如果子类重写了方法，一定是执行子类重写的方法体；</span><br><span class="hljs-comment">         */</span><br>        pet.eat();<span class="hljs-comment">//运行时执行子类Dog重写的方法</span><br><span class="hljs-comment">//      pet.watchHouse();//不能调用Dog子类扩展的方法</span><br><br>        pet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        pet.setNickname(<span class="hljs-string">&quot;雪球&quot;</span>);<br>        pet.eat();<span class="hljs-comment">//运行时执行子类Cat重写的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2、方法的形参声明体现多态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> Pet pet;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adopt</span><span class="hljs-params">(Pet pet)</span> &#123;<span class="hljs-comment">//形参是父类类型，实参是子类对象</span><br>        <span class="hljs-built_in">this</span>.pet = pet;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">()</span>&#123;<br>        pet.eat();<span class="hljs-comment">//pet实际引用的对象类型不同，执行的eat方法也不同</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        dog.setNickname(<span class="hljs-string">&quot;小白&quot;</span>);<br>        person.adopt(dog);<span class="hljs-comment">//实参是dog子类对象，形参是父类Pet类型</span><br>        person.feed();<br><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        cat.setNickname(<span class="hljs-string">&quot;雪球&quot;</span>);<br>        person.adopt(cat);<span class="hljs-comment">//实参是cat子类对象，形参是父类Pet类型</span><br>        person.feed();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、方法返回值类型体现多态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PetShop</span> &#123;<br>    <span class="hljs-comment">//返回值类型是父类类型，实际返回的是子类对象</span><br>    <span class="hljs-keyword">public</span> Pet <span class="hljs-title function_">sale</span><span class="hljs-params">(String type)</span>&#123;<br>        <span class="hljs-keyword">switch</span> (type)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Dog&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Cat&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPetShop</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">PetShop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PetShop</span>();<br><br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> shop.sale(<span class="hljs-string">&quot;Dog&quot;</span>);<br>        dog.setNickname(<span class="hljs-string">&quot;小白&quot;</span>);<br>        dog.eat();<br><br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> shop.sale(<span class="hljs-string">&quot;Cat&quot;</span>);<br>        cat.setNickname(<span class="hljs-string">&quot;雪球&quot;</span>);<br>        cat.eat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-为什么需要多态性-polymorphism-？"><a href="#7-2-为什么需要多态性-polymorphism-？" class="headerlink" title="7.2 为什么需要多态性(polymorphism)？"></a>7.2 为什么需要多态性(polymorphism)？</h3><p>开发中，有时我们在设计一个数组、或一个成员变量、或一个方法的形参、返回值类型时，无法确定它具体的类型，只能确定它是某个系列的类型。</p><p>案例：</p><p>（1）声明一个Dog类，包含public void eat()方法，输出“狗啃骨头”</p><p>（2）声明一个Cat类，包含public void eat()方法，输出“猫吃鱼仔”</p><p>（3）声明一个Person类，功能如下：</p><ul><li>包含宠物属性</li><li>包含领养宠物方法 public void adopt(宠物类型Pet)</li><li>包含喂宠物吃东西的方法 public void feed()，实现为调用宠物对象.eat()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗啃骨头&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫吃鱼仔&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> Dog dog;<br><br>    <span class="hljs-comment">//adopt：领养</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adopt</span><span class="hljs-params">(Dog dog)</span>&#123;<br>        <span class="hljs-built_in">this</span>.dog = dog;<br>    &#125;<br><br>    <span class="hljs-comment">//feed：喂食</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(dog != <span class="hljs-literal">null</span>)&#123;<br>            dog.eat();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    问题：</span><br><span class="hljs-comment">    1、从养狗切换到养猫怎么办？   </span><br><span class="hljs-comment">    修改代码把Dog修改为养猫？</span><br><span class="hljs-comment">    2、或者有的人养狗，有的人养猫怎么办？  </span><br><span class="hljs-comment">    3、要是还有更多其他宠物类型怎么办？</span><br><span class="hljs-comment">    如果Java不支持多态，那么上面的问题将会非常麻烦，代码维护起来很难，扩展性很差。</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-多态的好处和弊端"><a href="#7-3-多态的好处和弊端" class="headerlink" title="7.3 多态的好处和弊端"></a>7.3 多态的好处和弊端</h3><p><strong>好处</strong>：变量引用的子类对象不同，执行的方法就不同，实现动态绑定。代码编写更灵活、功能更强大，可维护性和扩展性更好了。</p><p><strong>弊端</strong>：一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加的属性和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>m.school = <span class="hljs-string">&quot;pku&quot;</span>; <span class="hljs-comment">//合法,Student类有school成员变量</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(); <br>e.school = <span class="hljs-string">&quot;pku&quot;</span>;<span class="hljs-comment">//非法,Person类没有school成员变量</span><br><br><span class="hljs-comment">// 属性是在编译时确定的，编译时e为Person类型，没有school成员变量，因而编译错误。</span><br></code></pre></td></tr></table></figure><blockquote><p>开发中：</p><p>使用父类做方法的形参，是多态使用最多的场合。即使增加了新的子类，方法也无需改变，提高了扩展性，符合开闭原则。</p><p>【开闭原则OCP】</p><ul><li>对扩展开放，对修改关闭</li><li>通俗解释：软件系统中的各种组件，如模块（Modules）、类（Classes）以及功能（Functions）等，应该在不修改现有代码的基础上，引入新功能</li></ul></blockquote><h3 id="7-4-虚方法调用-Virtual-Method-Invocation"><a href="#7-4-虚方法调用-Virtual-Method-Invocation" class="headerlink" title="7.4 虚方法调用(Virtual Method Invocation)"></a>7.4 虚方法调用(Virtual Method Invocation)</h3><p>在Java中虚方法是指在编译阶段不能确定方法的调用入口地址，在运行阶段才能确定的方法，即可能被重写的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>e.getInfo();<span class="hljs-comment">//调用Student类的getInfo()方法</span><br></code></pre></td></tr></table></figure><p>子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚方法，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。</p><p>举例：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615130_watermark.png" alt="image-20220324234208997"></p><p>前提：Person类中定义了welcome()方法，各个子类重写了welcome()。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615959_watermark.png" alt="image-20220324234214932"></p><p>执行：多态的情况下，调用对象的welcome()方法，实际执行的是子类重写的方法。</p><blockquote><p>拓展：</p><p><code>静态链接（或早起绑定）</code>：当一个字节码文件被装载进JVM内部时，如果被调用的目标方法在编译期可知，且运行期保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。那么调用这样的方法，就称为非虚方法调用。比如调用静态方法、私有方法、final方法、父类构造器、本类重载构造器等。</p><p><code>动态链接（或晚期绑定）</code>：如果被调用的方法在编译期无法被确定下来，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接。调用这样的方法，就称为虚方法调用。比如调用重写的方法（针对父类）、实现的方法（针对接口）。</p></blockquote><h3 id="7-5-成员变量没有多态性"><a href="#7-5-成员变量没有多态性" class="headerlink" title="7.5 成员变量没有多态性"></a>7.5 成员变量没有多态性</h3><ul><li><p>若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统将不可能把父类里的方法转移到子类中。</p></li><li><p>对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestVariable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Base</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        System.out.println(b.a);<br>        System.out.println(((Sub)b).a);<br><br>        <span class="hljs-type">Sub</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        System.out.println(s.a);<br>        System.out.println(((Base)s).a);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-6-向上转型与向下转型"><a href="#7-6-向上转型与向下转型" class="headerlink" title="7.6 向上转型与向下转型"></a>7.6 向上转型与向下转型</h3><p>首先，一个对象在new的时候创建是哪个类型的对象，它从头至尾都不会变。即这个对象的运行时类型，本质的类型用于不会变。但是，把这个对象赋值给不同类型的变量时，这些变量的编译时类型却不同。</p><h4 id="7-6-1-为什么要类型转换"><a href="#7-6-1-为什么要类型转换" class="headerlink" title="7.6.1 为什么要类型转换"></a>7.6.1 为什么要类型转换</h4><p>因为多态，就一定会有把子类对象赋值给父类变量的时候，这个时候，在<code>编译期间</code>，就会出现类型转换的现象。</p><p>但是，使用父类变量接收了子类对象之后，我们就<code>不能调用</code>子类拥有，而父类没有的方法了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做类型转换，使得<code>编译通过</code>。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615831_watermark.png" alt="image-20220324235337563" style="zoom:80%;" /><ul><li><p><strong>向上转型</strong>：当左边的变量的类型（父类） &gt; 右边对象&#x2F;变量的类型（子类），我们就称为向上转型</p><ul><li>此时，编译时按照左边变量的类型处理，就只能调用父类中有的变量和方法，不能调用子类特有的变量和方法了</li><li>但是，<strong>运行时，仍然是对象本身的类型</strong>，所以执行的方法是子类重写的方法体。</li><li>此时，一定是安全的，而且也是自动完成的</li></ul></li><li><p><strong>向下转型</strong>：当左边的变量的类型（子类）&lt;右边对象&#x2F;变量的编译时类型（父类），我们就称为向下转型</p><ul><li>此时，编译时按照左边变量的类型处理，就可以调用子类特有的变量和方法了</li><li>但是，<strong>运行时，仍然是对象本身的类型</strong></li><li>不是所有通过编译的向下转型都是正确的，可能会发生ClassCastException，为了安全，可以通过isInstanceof关键字进行判断</li></ul></li></ul><h4 id="7-6-2-如何向上或向下转型"><a href="#7-6-2-如何向上或向下转型" class="headerlink" title="7.6.2 如何向上或向下转型"></a>7.6.2 如何向上或向下转型</h4><p>向上转型：自动完成</p><p>向下转型：（子类类型）父类变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassCastTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//没有类型转换</span><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<span class="hljs-comment">//dog的编译时类型和运行时类型都是Dog</span><br><br>        <span class="hljs-comment">//向上转型</span><br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">pet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<span class="hljs-comment">//pet的编译时类型是Pet，运行时类型是Dog</span><br>        pet.setNickname(<span class="hljs-string">&quot;小白&quot;</span>);<br>        pet.eat();<span class="hljs-comment">//可以调用父类Pet有声明的方法eat，但执行的是子类重写的eat方法体</span><br><span class="hljs-comment">//        pet.watchHouse();//不能调用父类没有的方法watchHouse</span><br><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> (Dog) pet;<br>        System.out.println(<span class="hljs-string">&quot;d.nickname = &quot;</span> + d.getNickname());<br>        d.eat();<span class="hljs-comment">//可以调用eat方法</span><br>        d.watchHouse();<span class="hljs-comment">//可以调用子类扩展的方法watchHouse</span><br><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (Cat) pet;<span class="hljs-comment">//编译通过，因为从语法检查来说，pet的编译时类型是Pet，Cat是Pet的子类，所以向下转型语法正确</span><br>        <span class="hljs-comment">//这句代码运行报错ClassCastException，因为pet变量的运行时类型是Dog，Dog和Cat之间是没有继承关系的</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-6-3-instanceof关键字"><a href="#7-6-3-instanceof关键字" class="headerlink" title="7.6.3 instanceof关键字"></a>7.6.3 instanceof关键字</h4><p>为了避免ClassCastException的发生，Java提供了 <code>instanceof</code> 关键字，给引用变量做类型的校验。如下代码格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//检验对象a是否是数据类型A的对象，返回值为boolean型</span><br>对象a <span class="hljs-keyword">instanceof</span> 数据类型A <br></code></pre></td></tr></table></figure><ul><li>说明：<ul><li>只要用instanceof判断返回true的，那么强转为该类型就一定是安全的，不会报ClassCastException异常。</li><li>如果对象a属于类A的子类B，a instanceof A值也为true。</li><li>要求对象a所属的类与类A必须是子类和父类的关系，否则编译错误。</li></ul></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInstanceof</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Pet[] pets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>[<span class="hljs-number">2</span>];<br>        pets[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<span class="hljs-comment">//多态引用</span><br>        pets[<span class="hljs-number">0</span>].setNickname(<span class="hljs-string">&quot;小白&quot;</span>);<br>        pets[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<span class="hljs-comment">//多态引用</span><br>        pets[<span class="hljs-number">1</span>].setNickname(<span class="hljs-string">&quot;雪球&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pets.length; i++) &#123;<br>            pets[i].eat();<br><br>            <span class="hljs-keyword">if</span>(pets[i] <span class="hljs-keyword">instanceof</span> Dog)&#123;<br>                <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) pets[i];<br>                dog.watchHouse();<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pets[i] <span class="hljs-keyword">instanceof</span> Cat)&#123;<br>                <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) pets[i];<br>                cat.catchMouse();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-7-练习"><a href="#7-7-练习" class="headerlink" title="7.7 练习"></a>7.7 练习</h3><p><strong>练习1：笔试&amp;面试</strong></p><p>题目1：继承成员变量和继承方法的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FieldMethodTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Sub</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        System.out.println(s.count);<br>        s.display();<br>        <span class="hljs-type">Base</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> s;<br>        System.out.println(b == s);<br>        System.out.println(b.count);<br>        b.display();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>题目2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//考查多态的笔试题目：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterviewTest1</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Base</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>base.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-comment">//Sub s = (Sub)base;</span><br><span class="hljs-comment">//s.add(1,2,3);</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span>... arr)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;base&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span>[] arr)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;sub_1&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//public void add(int a, int b, int c) &#123;</span><br><span class="hljs-comment">//System.out.println(&quot;sub_2&quot;);</span><br><span class="hljs-comment">//&#125;</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>题目3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//getXxx()和setXxx()声明在哪个类中，内部操作的属性就是哪个类里的。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterviewTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Father</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>();<br><span class="hljs-type">Son</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>System.out.println(f.getInfo());<span class="hljs-comment">//atguigu</span><br>System.out.println(s.getInfo());<span class="hljs-comment">//尚硅谷</span><br>s.test();<span class="hljs-comment">//尚硅谷  atguigu</span><br>System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>);<br>s.setInfo(<span class="hljs-string">&quot;大硅谷&quot;</span>);<br>System.out.println(f.getInfo());<span class="hljs-comment">//atguigu</span><br>System.out.println(s.getInfo());<span class="hljs-comment">//大硅谷</span><br>s.test();<span class="hljs-comment">//大硅谷  atguigu</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInfo</span><span class="hljs-params">(String info)</span> &#123;<br><span class="hljs-built_in">this</span>.info = info;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> info;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;尚硅谷&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInfo</span><span class="hljs-params">(String info)</span> &#123;<br><span class="hljs-built_in">this</span>.info = info;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> info;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.getInfo());<br>System.out.println(<span class="hljs-built_in">super</span>.getInfo());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目4：多态是编译时行为还是运行时行为？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//证明如下：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>  &#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal eat food&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>  &#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;cat eat fish&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>  &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Dog eat bone&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>  &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Sheep eat grass&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterviewTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Animal  <span class="hljs-title function_">getInstance</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br><span class="hljs-keyword">switch</span> (key) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span> ();<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span> ();<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sheep</span> ();<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">3</span>);<br>System.out.println(key);<br><br><span class="hljs-type">Animal</span>  <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> getInstance(key);<br>animal.eat(); <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">protected</span> String name=<span class="hljs-string">&quot;person&quot;</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> age=<span class="hljs-number">50</span>;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Name: &quot;</span>+ name + <span class="hljs-string">&quot;\n&quot;</span> +<span class="hljs-string">&quot;age: &quot;</span>+ age;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">protected</span> String school=<span class="hljs-string">&quot;pku&quot;</span>;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;Name: &quot;</span>+ name + <span class="hljs-string">&quot;\nage: &quot;</span>+ age <br>          + <span class="hljs-string">&quot;\nschool: &quot;</span>+ school;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graduate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-keyword">public</span> String major=<span class="hljs-string">&quot;IT&quot;</span>;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;Name: &quot;</span>+ name + <span class="hljs-string">&quot;\nage: &quot;</span>+ age <br>          + <span class="hljs-string">&quot;\nschool: &quot;</span>+ school+<span class="hljs-string">&quot;\nmajor:&quot;</span>+major;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>建立InstanceTest 类，在类中定义方法method(Person e);<br>在method中:<br>(1)根据e的类型调用相应类的getInfo()方法。<br>(2)根据e的类型执行：<br>如果e为Person类的对象，输出：<br>“a person”;<br>如果e为Student类的对象，输出：<br>“a student”<br>“a person ”<br>如果e为Graduate类的对象，输出：<br>“a graduated student”<br>“a student”<br>“a person”</p><p><strong>练习3</strong>：定义三个类，父类GeometricObject代表几何形状，子类Circle代表圆形，MyRectangle代表矩形。定义一个测试类GeometricTest，编写equalsArea方法测试两个对象的面积是否相等（注意方法的参数类型，利用动态绑定技术），编写displayGeometricObject方法显示对象的面积（注意方法的参数类型，利用动态绑定技术）。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615150_watermark.png" alt="image-20220325000034619" style="zoom:67%;" /><h2 id="8-Object-类的使用"><a href="#8-Object-类的使用" class="headerlink" title="8. Object 类的使用"></a>8. Object 类的使用</h2><h3 id="8-1-如何理解根父类"><a href="#8-1-如何理解根父类" class="headerlink" title="8.1 如何理解根父类"></a>8.1 如何理解根父类</h3><p>类 <code>java.lang.Object</code>是类层次结构的根类，即所有其它类的父类。每个类都使用 <code>Object</code> 作为超类。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615885_watermark.png" alt="image-20220503104750655" style="zoom:67%;" /><ul><li><p>Object类型的变量与除Object以外的任意引用数据类型的对象都存在多态引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">method(Object obj)&#123;…&#125; <span class="hljs-comment">//可以接收任何类作为其参数</span><br><br><span class="hljs-type">Person</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();  <br>method(o);<br><br></code></pre></td></tr></table></figure></li><li><p>所有对象（包括数组）都实现这个类的方法。</p></li><li><p>如果一个类没有特别指定父类，那么默认则继承自Object类。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>...<br>&#125;<br><span class="hljs-comment">//等价于：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="8-2-Object类的方法"><a href="#8-2-Object类的方法" class="headerlink" title="8.2 Object类的方法"></a>8.2 Object类的方法</h3><p>根据JDK源代码及Object类的API文档，Object类当中包含的方法有11个。这里我们主要关注其中的6个：</p><h4 id="1、-重点-equals"><a href="#1、-重点-equals" class="headerlink" title="1、(重点)equals()"></a>1、(重点)equals()</h4><p><strong>&#x3D; &#x3D;：</strong> </p><ul><li><p>基本类型比较值:只要两个变量的值相等，即为true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a=<span class="hljs-number">5</span>; <br><span class="hljs-keyword">if</span>(a==<span class="hljs-number">6</span>)&#123;…&#125;<br></code></pre></td></tr></table></figure></li><li><p>引用类型比较引用(是否指向同一个对象)：只有指向同一个对象时，&#x3D;&#x3D;才返回true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Person p1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();      <br>Person p2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-keyword">if</span> (p1==p2)&#123;…&#125;<br></code></pre></td></tr></table></figure><ul><li>用“&#x3D;&#x3D;”进行比较时，符号两边的<code>数据类型必须兼容</code>(可自动转换的基本数据类型除外)，否则编译出错</li></ul></li></ul><p><strong>equals()：</strong>所有类都继承了Object，也就获得了equals()方法。还可以重写。</p><ul><li><p>只能比较引用类型，Object类源码中equals()的作用与“&#x3D;&#x3D;”相同：比较是否指向同一个对象。 </p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615593_watermark.png" alt="image-20220503104750655" style="zoom:67%;" /></li><li><p>格式:obj1.equals(obj2)</p></li><li><p>特例：当用equals()方法进行比较时，对类File、String、Date及包装类（Wrapper Class）来说，是比较类型及内容而不考虑引用的是否是同一个对象；</p><ul><li>原因：在这些类中重写了Object类的equals()方法。</li></ul></li><li><p>当自定义使用equals()时，可以重写。用于比较两个对象的“内容”是否都相等</p></li><li><p>重写equals()方法的原则</p><ul><li><p><code>对称性</code>：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。</p></li><li><p><code>自反性</code>：x.equals(x)必须返回是“true”。</p></li><li><p><code>传递性</code>：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</p></li><li><p><code>一致性</code>：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。</p></li><li><p>任何情况下，x.equals(null)，永远返回是“false”；</p><p>​    x.equals(和x不同类型的对象)永远返回是“false”。</p></li></ul></li><li><p>重写举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br><span class="hljs-keyword">private</span> String host;<br><span class="hljs-keyword">private</span> String username;<br><span class="hljs-keyword">private</span> String password;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String host, String username, String password)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.host = host;<br><span class="hljs-built_in">this</span>.username = username;<br><span class="hljs-built_in">this</span>.password = password;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">super</span>();<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHost</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> host;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHost</span><span class="hljs-params">(String host)</span> &#123;<br><span class="hljs-built_in">this</span>.host = host;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> username;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br><span class="hljs-built_in">this</span>.username = username;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> password;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br><span class="hljs-built_in">this</span>.password = password;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User [host=&quot;</span> + host + <span class="hljs-string">&quot;, username=&quot;</span> + username + <span class="hljs-string">&quot;, password=&quot;</span> + password + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (getClass() != obj.getClass())<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">User</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (User) obj;<br><span class="hljs-keyword">if</span> (host == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (other.host != <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!host.equals(other.host))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (password == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (other.password != <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!password.equals(other.password))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (username == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (other.username != <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!username.equals(other.username))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>面试题：</strong>&#x3D;&#x3D;和equals的区别</p><blockquote><p>从我面试的反馈，85%的求职者“理直气壮”的回答错误…</p></blockquote><ul><li><p>&#x3D;&#x3D; 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型就是比较内存地址</p></li><li><p>equals的话，它是属于java.lang.Object类里面的方法，如果该方法没有被重写过默认也是&#x3D;&#x3D;;我们可以看到String等类的equals方法是被重写过的，而且String类在日常开发中用的比较多，久而久之，形成了equals是比较值的错误观点。</p></li><li><p>具体要看自定义类里有没有重写Object的equals方法来判断。</p></li><li><p>通常情况下，重写equals方法，会比较类中的相应属性是否都相等。</p></li></ul><p><strong>练习1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> <span class="hljs-number">65</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">fl</span> <span class="hljs-operator">=</span> <span class="hljs-number">65.0f</span>;<br>System.out.println(“<span class="hljs-number">65</span>和<span class="hljs-number">65.0f</span>是否相等？” + (it == fl)); <span class="hljs-comment">//</span><br><br><span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>; <span class="hljs-type">char</span> <span class="hljs-variable">ch2</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>System.out.println(<span class="hljs-string">&quot;65和&#x27;A&#x27;是否相等？&quot;</span> + (it == ch1));<span class="hljs-comment">//</span><br>System.out.println(<span class="hljs-string">&quot;12和ch2是否相等？&quot;</span> + (<span class="hljs-number">12</span> == ch2));<span class="hljs-comment">//</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;str1和str2是否相等？&quot;</span>+ (str1 == str2));<span class="hljs-comment">//</span><br><br>System.out.println(<span class="hljs-string">&quot;str1是否equals str2？&quot;</span>+(str1.equals(str2)));<span class="hljs-comment">//</span><br><br>System.out.println(“hello” == <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Date()); <span class="hljs-comment">//</span><br><br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><p>编写Order类，有int型的orderId，String型的orderName，相应的getter()和setter()方法，两个参数的构造器，重写父类的equals()方法：public boolean equals(Object obj)，并判断测试类中创建的两个对象是否相等。</p><p><strong>练习3：</strong></p><p>请根据以下代码自行定义能满足需要的MyDate类,在MyDate类中覆盖equals方法，使其判断当两个MyDate类型对象的年月日都相同时，结果为true，否则为false。  public boolean equals(Object o)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EqualsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyDate</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1976</span>);<br>        <span class="hljs-type">MyDate</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1976</span>);<br>        <span class="hljs-keyword">if</span> (m1 == m2) &#123;<br>            System.out.println(<span class="hljs-string">&quot;m1==m2&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;m1!=m2&quot;</span>); <span class="hljs-comment">// m1 != m2</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (m1.equals(m2)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;m1 is equal to m2&quot;</span>);<span class="hljs-comment">// m1 is equal to m2</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;m1 is not equal to m2&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2、-重点-toString"><a href="#2、-重点-toString" class="headerlink" title="2、(重点)toString()"></a>2、(重点)toString()</h4><p>方法签名：public String toString()</p><p>① 默认情况下，toString()返回的是“对象的运行时类型 @ 对象的hashCode值的十六进制形式”</p><p>② 在进行String与其它类型数据的连接操作时，自动调用toString()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Date now=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>System.out.println(“now=”+now);  <span class="hljs-comment">//相当于</span><br>System.out.println(“now=”+now.toString()); <br></code></pre></td></tr></table></figure><p>③ 如果我们直接System.out.println(对象)，默认会自动调用这个对象的toString()</p><blockquote><p>因为Java的引用数据类型的变量中存储的实际上时对象的内存地址，但是Java对程序员隐藏内存地址信息，所以不能直接将内存地址显示出来，所以当你打印对象时，JVM帮你调用了对象的toString()。</p></blockquote><p>④ 可以根据需要在用户自定义类型中重写toString()方法<br>    如String 类重写了toString()方法，返回字符串的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">s1=<span class="hljs-string">&quot;hello&quot;</span>;<br>System.out.println(s1);<span class="hljs-comment">//相当于System.out.println(s1.toString());</span><br></code></pre></td></tr></table></figure><p>例如自定义的Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> + <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习</strong>：定义两个类，父类GeometricObject代表几何形状，子类Circle代表圆形。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615277_watermark.png" alt="image-20220325002959156" style="zoom:67%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615139_watermark.png" alt="image-20220325002932102" style="zoom:67%;" /><h4 id="3、clone"><a href="#3、clone" class="headerlink" title="3、clone()"></a>3、clone()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Object类的clone()的使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CloneTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Animal</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&quot;花花&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Animal</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> (Animal) a1.clone();<br>System.out.println(<span class="hljs-string">&quot;原始对象：&quot;</span> + a1);<br>a2.setName(<span class="hljs-string">&quot;毛毛&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;clone之后的对象：&quot;</span> + a2);<br>&#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">super</span>();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Animal [name=&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.clone();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、finalize"><a href="#4、finalize" class="headerlink" title="4、finalize()"></a>4、finalize()</h4><ul><li>当对象被回收时，系统自动调用该对象的 finalize() 方法。（不是垃圾回收器调用的，是本类对象调用的）<ul><li>永远不要主动调用某个对象的finalize方法，应该交给垃圾回收机制调用。</li></ul></li><li>什么时候被回收：当某个对象没有任何引用时，JVM就认为这个对象是垃圾对象，就会在之后不确定的时间使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用 finalize()方法。 </li><li>子类可以重写该方法，目的是在对象被清理之前执行必要的清理操作。比如，在方法内断开相关连接资源。<ul><li>如果重写该方法，让一个新的引用变量重新引用该对象，则会重新激活对象。</li></ul></li><li>在JDK 9中此方法已经被<code>标记为过时</code>的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalizeTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Peter&quot;</span>, <span class="hljs-number">12</span>);<br>System.out.println(p);<br>p = <span class="hljs-literal">null</span>;<span class="hljs-comment">//此时对象实体就是垃圾对象，等待被回收。但时间不确定。</span><br>System.gc();<span class="hljs-comment">//强制性释放空间</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">//子类重写此方法，可在释放对象前进行某些操作</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>System.out.println(<span class="hljs-string">&quot;对象被释放---&gt;&quot;</span> + <span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、getClass"><a href="#5、getClass" class="headerlink" title="5、getClass()"></a>5、getClass()</h4><p>public final Class&lt;?&gt; getClass()：获取对象的运行时类型</p><blockquote><p>因为Java有多态现象，所以一个引用数据类型的变量的编译时类型与运行时类型可能不一致，因此如果需要查看这个变量实际指向的对象的类型，需要用getClass()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>System.out.println(obj.getClass());<span class="hljs-comment">//运行时类型</span><br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.atguigu.java.Person<br></code></pre></td></tr></table></figure><h4 id="6、hashCode"><a href="#6、hashCode" class="headerlink" title="6、hashCode()"></a>6、hashCode()</h4><p>public int hashCode()：返回每个对象的hash值。(后续在集合框架章节重点讲解)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;AA&quot;</span>.hashCode());<span class="hljs-comment">//2080</span><br>    System.out.println(<span class="hljs-string">&quot;BB&quot;</span>.hashCode());<span class="hljs-comment">//2112</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-native关键字的理解"><a href="#8-3-native关键字的理解" class="headerlink" title="8.3 native关键字的理解"></a>8.3 native关键字的理解</h3><p>使用native关键字说明这个方法是原生函数，也就是这个方法是用<code>C/C++</code>等非Java语言实现的，并且<code>被编译成了DLL</code>，由Java去调用。</p><ul><li><p>本地方法是有方法体的，用c语言编写。由于本地方法的方法体源码没有对我们开源，所以我们看不到方法体</p></li><li><p>在Java中定义一个native方法时，并不提供实现体。</p></li></ul><p><strong>1. 为什么要用native方法</strong></p><p>Java使用起来非常方便，然而有些层次的任务用java实现起来不容易，或者我们对程序的效率很在意时，例如：Java需要与一些底层操作系统或某些硬件交换信息时的情况。native方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解Java应用之外的繁琐的细节。</p><p><strong>2. native声明的方法，对于调用者，可以当做和其他Java方法一样使用</strong></p><p>native method的存在并不会对其他类调用这些本地方法产生任何影响，实际上调用这些方法的其他类甚至不知道它所调用的是一个本地方法。JVM将控制调用本地方法的所有细节。</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
