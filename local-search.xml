<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL其他新特性</title>
    <link href="/2024/04/25/mysql/17%E3%80%81MySQL8%E5%85%B6%E5%AE%83%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    <url>/2024/04/25/mysql/17%E3%80%81MySQL8%E5%85%B6%E5%AE%83%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="1、MySQL8新特性概述"><a href="#1、MySQL8新特性概述" class="headerlink" title="1、MySQL8新特性概述"></a>1、MySQL8新特性概述</h2><p><code>MySQL从5.7版本直接跳跃发布了8.0版本</code> ，可见这是一个令人兴奋的里程碑版本。MySQL 8版本在功能上 做了显著的改进与增强，开发者对MySQL的源代码进行了重构，最突出的一点是多MySQL Optimizer优化 器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验。</p><h3 id="1-1-MySQL8-0-新增特性"><a href="#1-1-MySQL8-0-新增特性" class="headerlink" title="1.1 MySQL8.0 新增特性"></a>1.1 MySQL8.0 新增特性</h3><p><strong>1. 更简便的NoSQL支持</strong> NoSQL泛指非关系型数据库和数据存储。随着互联网平台的规模飞速发展，传统 的关系型数据库已经越来越不能满足需求。从5.6版本开始，MySQL就开始支持简单的NoSQL存储功能。 MySQL 8对这一功能做了优化，以更灵活的方式实现NoSQL功能，不再依赖模式（schema）。</p><p><strong>2. 更好的索引</strong> 在查询中，正确地使用索引可以提高查询的效率。MySQL 8中新增了 <code>隐藏索引</code>和 <code>降序索引</code>。隐藏索引可以用来测试去掉索引对查询性能的影响。在查询中混合存在多列索引时，使用降序索引 可以提高查询的性能。</p><p><strong>3.更完善的JSON支持</strong> MySQL从5.7开始支持原生JSON数据的存储，MySQL 8对这一功能做了优化，增加 了聚合函数 <code>JSON_ARRAYAGG()</code> 和 <code>JSON_OBJECTAGG()</code> ，将参数聚合为JSON数组或对象，新增了行内 操作符 -&gt;&gt;，是列路径运算符 -&gt;的增强，对JSON排序做了提升，并优化了JSON的更新操作。</p><p><strong>4.安全和账户管理</strong> MySQL 8中新增了 <code>caching_sha2_password</code> 授权插件、角色、密码历史记录和FIPS 模式支持，这些特性提高了数据库的安全性和性能，使数据库管理员能够更灵活地进行账户管理工作。</p><p><strong>5.InnoDB的变化</strong>  <code>InnoDB是MySQL默认的存储引擎</code> ，是事务型数据库的首选引擎，支持事务安全表 （ACID），支持行锁定和外键。在MySQL 8 版本中，InnoDB在自增、索引、加密、死锁、共享锁等方面 做了大量的 <code>改进和优化</code>，并且支持原子数据定义语言（DDL），提高了数据安全性，对事务提供更好的 支持。</p><p><strong>6.数据字典</strong> 在之前的MySQL版本中，字典数据都存储在元数据文件和非事务表中。从MySQL 8开始新增 了事务数据字典，在这个字典里存储着数据库对象信息，这些数据字典存储在内部事务表中。</p><p><strong>7. 原子数据定义语句</strong> MySQL 8开始支持原子数据定义语句（Automic DDL），即 <code>原子DDL</code> 。目前，只有 InnoDB存储引擎支持原子DDL。原子数据定义语句（DDL）将与DDL操作相关的数据字典更新、存储引擎 操作、二进制日志写入结合到一个单独的原子事务中，这使得即使服务器崩溃，事务也会提交或回滚。 使用支持原子操作的存储引擎所创建的表，在执行DROP TABLE、CREATE TABLE、ALTER TABLE、 RENAME TABLE、TRUNCATE TABLE、CREATE TABLESPACE、DROP TABLESPACE等操作时，都支持原子操 作，即事务要么完全操作成功，要么失败后回滚，不再进行部分提交。 对于从MySQL 5.7复制到MySQL 8 版本中的语句，可以添加 <code>IF EXISTS</code> 或 <code>IF NOT EXISTS</code> 语句来避免发生错误。</p><p><strong>8.资源管理</strong> MySQL 8开始支持创建和管理资源组，允许将服务器内运行的线程分配给特定的分组，以便 线程根据组内可用资源执行。组属性能够控制组内资源，启用或限制组内资源消耗。数据库管理员能够 根据不同的工作负载适当地更改这些属性。 目前，CPU时间是可控资源，由“虚拟CPU”这个概念来表 示，此术语包含CPU的核心数，超线程，硬件线程等等。服务器在启动时确定可用的虚拟CPU数量。拥有 对应权限的数据库管理员可以将这些CPU与资源组关联，并为资源组分配线程。 资源组组件为MySQL中的资源组管理提供了SQL接口。资源组的属性用于定义资源组。MySQL中存在两个默认组，系统组和用户 组，默认的组不能被删除，其属性也不能被更改。对于用户自定义的组，资源组创建时可初始化所有的 属性，除去名字和类型，其他属性都可在创建之后进行更改。 在一些平台下，或进行了某些MySQL的配 置时，资源管理的功能将受到限制，甚至不可用。例如，如果安装了线程池插件，或者使用的是macOS 系统，资源管理将处于不可用状态。在FreeBSD和Solaris系统中，资源线程优先级将失效。在Linux系统 中，只有配置了CAP_SYS_NICE属性，资源管理优先级才能发挥作用。</p><p><strong>9.字符集支持</strong> MySQL 8中默认的字符集由 <code>latin1</code> 更改为 <code>utf8mb4</code> ，并首次增加了日语所特定使用的集合，utf8mb4_ja_0900_as_cs。</p><p><strong>10.优化器增强</strong> MySQL优化器开始支持隐藏索引和降序索引。隐藏索引不会被优化器使用，验证索引的必 要性时不需要删除索引，先将索引隐藏，如果优化器性能无影响就可以真正地删除索引。降序索引允许 优化器对多个列进行排序，并且允许排序顺序不一致。</p><p><strong>11.公用表表达式</strong> 公用表表达式（Common Table Expressions）简称为CTE，MySQL现在支持递归和非递 归两种形式的CTE。CTE通过在SELECT语句或其他特定语句前 <code>使用WItd语句对临时结果集</code> 进行命名。</p><p>基础语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">WItd cte_name (col_name1,col_name2 ...) AS (Subquery)<br>SELECT * FROM cte_name;<br></code></pre></td></tr></table></figure><p>Subquery代表子查询，子查询前使用WItd语句将结果集命名为cte_name，在后续的查询中即可使用 cte_name进行查询。</p><p><strong>12.窗口函数</strong> MySQL 8开始支持窗口函数。在之前的版本中已存在的大部分 <code>聚合函数</code> 在MySQL 8中也可以 作为窗口函数来使用。</p><table><thead><tr><th>函数名称</th><th>描 述</th></tr></thead><tbody><tr><td>CUME_DIST()</td><td>累计的分布值</td></tr><tr><td>DENSE_RANK()</td><td>对当前记录不间断排序</td></tr><tr><td>FIRST_VALUE()</td><td>返回窗口首行记录的对应字段值</td></tr><tr><td>LAG()</td><td>返回对应字段的前 N 行记录</td></tr><tr><td>LAST_VALUE()</td><td>返回窗口尾行记录的对应字段值</td></tr><tr><td>LEAD()</td><td>返回对应字段的后 N 行记录</td></tr><tr><td>Ntd_VALUE()</td><td>返回第N条记录对应的字段值</td></tr><tr><td>NTILE()</td><td>将区划分为N组，并返回组的数量</td></tr><tr><td>PERCENT_RANK()</td><td>返回0到1之间的小数，表示某个字段值在数据分区中的排名</td></tr><tr><td>RANK()</td><td>返回分区内每条记录对应的排名</td></tr><tr><td>ROW_NUMBER()</td><td>返回每一条记录对应的序号，且不重复</td></tr></tbody></table><p><strong>13.正则表达式支持</strong> MySQL在8.0.4以后的版本中采用支持Unicode的国际化组件库实现正则表达式操作， 这种方式不仅能提供完全的Unicode支持，而且是多字节安全编码。MySQL增加了REGEXP_LIKE()、 EGEXP_INSTR()、REGEXP_REPLACE()和 REGEXP_SUBSTR()等函数来提升性能。另外，regexp_stack_limit和 regexp_time_limit 系统变量能够通过匹配引擎来控制资源消耗。</p><p><strong>14.内部临时表</strong>  <code>TempTable存储引擎取代MEMORY存储引擎成为内部临时表的默认存储引擎</code>。TempTable存储 引擎为VARCHAR和VARBINARY列提供高效存储。internal_tmp_mem_storage_engine会话变量定义了内部 临时表的存储引擎，可选的值有两个，TempTable和MEMORY，其中TempTable为默认的存储引擎。 temptable_max_ram系统配置项定义了TempTable存储引擎可使用的最大内存数量。</p><p><strong>15.日志记录</strong> 在MySQL 8中错误日志子系统由一系列MySQL组件构成。这些组件的构成由系统变量 log_error_services来配置，能够实现日志事件的过滤和写入。</p><p><strong>16.备份锁</strong> 新的备份锁允许在线备份期间执行数据操作语句，同时阻止可能造成快照不一致的操作。新 备份锁由 LOCK INSTANCE FOR BACKUP 和 UNLOCK INSTANCE 语法提供支持，执行这些操作需要备份管理 员特权。</p><p><strong>17.增强的MySQL复制</strong> MySQL 8复制支持对 <code>JSON文档</code> 进行部分更新的 <code>二进制日志记录</code>，该记录 <code>使用紧凑的二进制格式</code>，从而节省记录完整JSON文档的空间。当使用基于语句的日志记录时，这种紧凑的日志记 录会自动完成，并且可以通过将新的binlog_row_value_options系统变量值设置为PARTIAL_JSON来启用。</p><h3 id="1-2-MySQL8-0移除的旧特性"><a href="#1-2-MySQL8-0移除的旧特性" class="headerlink" title="1.2 MySQL8.0移除的旧特性"></a>1.2 MySQL8.0移除的旧特性</h3><p>在MySQL 5.7版本上开发的应用程序如果使用了MySQL8.0 移除的特性，语句可能会失败，或者产生不同 的执行结果。为了避免这些问题，对于使用了移除特性的应用，应当尽力修正避免使用这些特性，并尽 可能使用替代方法。</p><p><strong>1. 查询缓存</strong>  <code>查询缓存已被移除</code>，删除的项有： <strong>（1）语句</strong>：FLUSH QUERY CACHE和RESET QUERY CACHE。 <strong>（2）系统变量</strong>：query_cache_limit、query_cache_min_res_unit、query_cache_size、 query_cache_type、query_cache_wlock_invalidate。 <strong>（3）状态变量</strong>：Qcache_free_blocks、 Qcache_free_memory、Qcache_hits、Qcache_inserts、Qcache_lowmem_prunes、Qcache_not_cached、 Qcache_queries_in_cache、Qcache_total_blocks。 <strong>（4）线程状态</strong>：checking privileges on cached query、checking query cache for query、invalidating query cache entries、sending cached result to client、storing result in query cache、waiting for query cache lock。</p><p><strong>2.加密相关</strong> 删除的加密相关的内容有：ENCODE()、DECODE()、ENCRYPT()、DES_ENCRYPT()和 DES_DECRYPT()函数，配置项des-key-file，系统变量have_crypt，FLUSH语句的DES_KEY_FILE选项， HAVE_CRYPT CMake选项。 对于移除的ENCRYPT()函数，考虑使用SHA2()替代，对于其他移除的函数，使 用AES_ENCRYPT()和AES_DECRYPT()替代。</p><p><strong>3.空间函数相关</strong> 在MySQL 5.7版本中，多个空间函数已被标记为过时。这些过时函数在MySQL 8中都已被 移除，只保留了对应的ST_和MBR函数。</p><p><strong>4.\N和NULL</strong> 在SQL语句中，解析器不再将\N视为NULL，所以在SQL语句中应使用NULL代替\N。这项变化 不会影响使用LOAD DATA INFILE或者SELECT…INTO OUTFILE操作文件的导入和导出。在这类操作中，NULL 仍等同于\N。</p><p><strong>5. mysql_install_db</strong> 在MySQL分布中，已移除了mysql_install_db程序，数据字典初始化需要调用带着– initialize或者–initialize-insecure选项的mysqld来代替实现。另外，–bootstrap和INSTALL_SCRIPTDIR CMake也已被删除。</p><p><strong>6.通用分区处理程序</strong> 通用分区处理程序已从MySQL服务中被移除。为了实现给定表分区，表所使用的存 储引擎需要自有的分区处理程序。 提供本地分区支持的MySQL存储引擎有两个，即InnoDB和NDB，而在 MySQL 8中只支持InnoDB。</p><p><strong>7.系统和状态变量信息</strong> 在INFORMATION_SCHEMA数据库中，对系统和状态变量信息不再进行维护。 GLOBAL_VARIABLES、SESSION_VARIABLES、GLOBAL_STATUS、SESSION_STATUS表都已被删除。另外，系 统变量show_compatibility_56也已被删除。被删除的状态变量有Slave_heartbeat_period、 Slave_last_heartbeat,Slave_received_heartbeats、Slave_retried_transactions、Slave_running。以上被删除 的内容都可使用性能模式中对应的内容进行替代。</p><p><strong>8.mysql_plugin工具</strong> mysql_plugin工具用来配置MySQL服务器插件，现已被删除，可使用–plugin-load或–plugin-load-add选项在服务器启动时加载插件或者在运行时使用INSTALL PLUGIN语句加载插件来替代该 工具。</p><h2 id="2、新特性1：窗口函数"><a href="#2、新特性1：窗口函数" class="headerlink" title="2、新特性1：窗口函数"></a>2、新特性1：窗口函数</h2><h3 id="2-1-使用窗口函数前后对比"><a href="#2-1-使用窗口函数前后对比" class="headerlink" title="2.1 使用窗口函数前后对比"></a>2.1 使用窗口函数前后对比</h3><p>假设我现在有这样一个数据表，它显示了某购物网站在每个城市每个区的销售额：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE sales(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>city VARCHAR(15),<br>county VARCHAR(15),<br>sales_value DECIMAL<br><br>);<br><br>INSERT INTO sales(city,county,sales_value)<br>VALUES<br>(&#x27;北京&#x27;,&#x27;海淀&#x27;,10.00),<br>(&#x27;北京&#x27;,&#x27;朝阳&#x27;,20.00),<br>(&#x27;上海&#x27;,&#x27;黄埔&#x27;,30.00),<br>(&#x27;上海&#x27;,&#x27;长宁&#x27;,10.00);<br></code></pre></td></tr></table></figure><p>查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM sales;<br>+----+------+--------+-------------+<br>| id | city | county | sales_value |<br>+----+------+--------+-------------+<br>|  1 | 北京 | 海淀    |          10 |<br>|  2 | 北京 | 朝阳    |          20 |<br>|  3 | 上海 | 黄埔    |          30 |<br>|  4 | 上海 | 长宁    |          10 |<br>+----+------+--------+-------------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>需求：</strong>现在计算这个网站在每个城市的销售总额、在全国的销售总额、每个区的销售额占所在城市销售 额中的比率，以及占总销售额中的比率。</p><p>如果用分组和聚合函数，就需要分好几步来计算。</p><p>第一步，计算总销售金额，并存入临时表 a：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TEMPORARY TABLE a       -- 创建临时表<br>SELECT SUM(sales_value) AS sales_value -- 计算总计金额<br>FROM sales;<br></code></pre></td></tr></table></figure><p>查看一下临时表 a ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM a;<br>+-------------+<br>| sales_value |<br>+-------------+<br>|          70 |<br>+-------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>第二步，计算每个城市的销售总额并存入临时表 b：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TEMPORARY TABLE b    -- 创建临时表<br>SELECT city,SUM(sales_value) AS sales_value  -- 计算城市销售合计<br>FROM sales<br>GROUP BY city;<br></code></pre></td></tr></table></figure><p>查看临时表 b ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM b;<br>+------+-------------+<br>| city | sales_value |<br>+------+-------------+<br>| 北京 |          30 |<br>| 上海 |          40 |<br>+------+-------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>第三步，计算各区的销售占所在城市的总计金额的比例，和占全部销售总计金额的比例。我们可以通过 下面的连接查询获得需要的结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT s.city AS 城市,s.county AS 区,s.sales_value AS 区销售额,<br>-&gt; b.sales_value AS 市销售额,s.sales_value/b.sales_value AS 市比率,<br>-&gt; a.sales_value AS 总销售额,s.sales_value/a.sales_value AS 总比率<br>-&gt; FROM sales s<br>-&gt; JOIN b ON (s.city=b.city) -- 连接市统计结果临时表<br>-&gt; JOIN a                   -- 连接总计金额临时表<br>-&gt; ORDER BY s.city,s.county;<br>+------+------+----------+----------+--------+----------+--------+<br>| 城市  | 区   | 区销售额  | 市销售额   | 市比率  | 总销售额  | 总比率  |<br>+------+------+----------+----------+--------+----------+--------+<br>| 上海  | 长宁 |       10 |       40 | 0.2500 |       70 | 0.1429 |<br>| 上海  | 黄埔 |       30 |       40 | 0.7500 |       70 | 0.4286 |<br>| 北京  | 朝阳 |       20 |       30 | 0.6667 |       70 | 0.2857 |<br>| 北京  | 海淀 |       10 |       30 | 0.3333 |       70 | 0.1429 |<br>+------+------+----------+----------+--------+----------+--------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>结果显示：市销售金额、市销售占比、总销售金额、总销售占比都计算出来了。</p><p>同样的查询，如果用窗口函数，就简单多了。我们可以用下面的代码来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT city AS 城市,county AS 区,sales_value AS 区销售额,<br>-&gt; SUM(sales_value) OVER(PARTITION BY city) AS 市销售额,  -- 计算市销售额<br>-&gt; sales_value/SUM(sales_value) OVER(PARTITION BY city) AS 市比率,<br>-&gt; SUM(sales_value) OVER() AS 总销售额,   -- 计算总销售额<br>-&gt; sales_value/SUM(sales_value) OVER() AS 总比率<br>-&gt; FROM sales<br>-&gt; ORDER BY city,county;<br>+------+------+----------+----------+--------+----------+--------+<br>| 城市  | 区   | 区销售额  | 市销售额   | 市比率  | 总销售额  | 总比率  |<br>+------+------+----------+----------+--------+----------+--------+<br>| 上海  | 长宁 |       10 |       40 | 0.2500 |       70 | 0.1429 |<br>| 上海  | 黄埔 |       30 |       40 | 0.7500 |       70 | 0.4286 |<br>| 北京  | 朝阳 |       20 |       30 | 0.6667 |       70 | 0.2857 |<br>| 北京  | 海淀 |       10 |       30 | 0.3333 |       70 | 0.1429 |<br>+------+------+----------+----------+--------+----------+--------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>结果显示，我们得到了与上面那种查询同样的结果。</p><p>使用窗口函数，只用了一步就完成了查询。而且，由于没有用到临时表，执行的效率也更高了。很显然，<strong>在这种需要用到分组统计的结果对每一条记录进行计算的场景下，使用窗口函数更好</strong>。</p><h3 id="2-2-窗口函数分类"><a href="#2-2-窗口函数分类" class="headerlink" title="2.2 窗口函数分类"></a>2.2 窗口函数分类</h3><p>MySQL从8.0版本开始支持窗口函数。窗口函数的作用类似于在查询中对数据进行分组，不同的是，分组操作会把分组的结果聚合成一条记录，而窗口函数是将结果置于每一条数据记录中。</p><p>窗口函数可以分为 <code>静态窗口函数</code> 和 <code>动态窗口函数</code>。</p><ul><li>静态窗口函数的窗口大小是固定的，不会因为记录的不同而不同；</li><li>动态窗口函数的窗口大小会随着记录的不同而变化。</li></ul><p>MySQL官方网站窗口函数的网址为<a href="https://dev.mysql.com/doc/refman/8.0/en/window-function-descriptions.html#function_row-number">MySQL :: MySQL 8.0 Reference Manual :: 14.20.1 Window Function Descriptions</a></p><p>窗口函数总体上可以分为序号函数、分布函数、前后函数、首尾函数和其他函数，如下表：</p><table>  <tr>    <th>函数分类</th>    <th>函数</th>    <th>函数说明</th>  </tr>    <tr>    <td  rowspan="3">序号函数</td>    <td>ROW_NUMBER()</td>    <td>顺序排序</td>  </tr>    <tr>    <td>RANK()</td>    <td>并列排序，会跳过重复的序号，比如序号为1、1、3</td>  </tr>    <tr>    <td>DENSE_RANK()</td>    <td>并列排序，不会跳过重复的序号，比如序号为1、1、2</td>  </tr>    <tr>    <td  rowspan="2">分布函数</td>    <td>PERCENT_RANK()</td>    <td>等级值百分比</td>  </tr>    <tr>    <td>CUME_DIST()</td>    <td>累积分布值</td>  </tr>    <tr>    <td  rowspan="2">前后函数</td>    <td>LAG(expr, n)</td>    <td>返回当前行的前n行的expr的值</td>  </tr>    <tr>    <td>LEAD(expr,n)</td>    <td>返回当前行的后n行的expr的值</td>  </tr>    <tr>    <td  rowspan="2">首尾函数</td>    <td>FIRST_VALUE(expr)</td>    <td>返回第一个expr的值</td>  </tr>    <tr>    <td>LAST_VALUE(expr)</td>    <td>返回最后一个expr的值</td>  </tr>    <tr>    <td  rowspan="2">其他函数</td>    <td>Ntd_VALUE(expr, n)</td>    <td>返回第n个expr的值</td>  </tr>    <tr>    <td>NTILE(n)</td>    <td>将分区中的有序数据分为n个桶，记录桶编号</td>  </tr> </table><h3 id="2-3-语法结构"><a href="#2-3-语法结构" class="headerlink" title="2.3 语法结构"></a>2.3 语法结构</h3><p>窗口函数的语法结构是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">函数 OVER（[PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]）<br></code></pre></td></tr></table></figure><p>或者是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">函数 OVER 窗口名 … WINDOW 窗口名 AS （[PARTITION BY 字段名 ORDER BY 字段名 ASC|DESC]）<br></code></pre></td></tr></table></figure><ul><li>OVER 关键字指定函数窗口的范围。<ul><li>如果省略后面括号中的内容，则窗口会包含满足WHERE条件的所有记录，窗口函数会基于所 有满足WHERE条件的记录进行计算。</li><li>如果OVER关键字后面的括号不为空，则可以使用如下语法设置窗口。</li></ul></li><li>窗口名：为窗口设置一个别名，用来标识窗口。</li><li>PARTITION BY子句：指定窗口函数按照哪些字段进行分组。分组后，窗口函数可以在每个分组中分 别执行。</li><li>ORDER BY子句：指定窗口函数按照哪些字段进行排序。执行排序操作使窗口函数按照排序后的数据 记录的顺序进行编号。</li><li>FRAME子句：为分区中的某个子集定义规则，可以用来作为滑动窗口使用。</li></ul><h3 id="2-4-分类讲解"><a href="#2-4-分类讲解" class="headerlink" title="2.4 分类讲解"></a>2.4 分类讲解</h3><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE goods(<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>category_id INT,<br>category VARCHAR(15),<br>NAME VARCHAR(30),<br>price DECIMAL(10,2),<br>stock INT,<br>upper_time DATETIME<br>);<br></code></pre></td></tr></table></figure><p>添加数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO goods(category_id,category,NAME,price,stock,upper_time)<br>VALUES<br>(1, &#x27;女装/女士精品&#x27;, &#x27;T恤&#x27;, 39.90, 1000, &#x27;2020-11-10 00:00:00&#x27;),<br>(1, &#x27;女装/女士精品&#x27;, &#x27;连衣裙&#x27;, 79.90, 2500, &#x27;2020-11-10 00:00:00&#x27;),<br>(1, &#x27;女装/女士精品&#x27;, &#x27;卫衣&#x27;, 89.90, 1500, &#x27;2020-11-10 00:00:00&#x27;),<br>(1, &#x27;女装/女士精品&#x27;, &#x27;牛仔裤&#x27;, 89.90, 3500, &#x27;2020-11-10 00:00:00&#x27;),<br>(1, &#x27;女装/女士精品&#x27;, &#x27;百褶裙&#x27;, 29.90, 500, &#x27;2020-11-10 00:00:00&#x27;),<br>(1, &#x27;女装/女士精品&#x27;, &#x27;呢绒外套&#x27;, 399.90, 1200, &#x27;2020-11-10 00:00:00&#x27;),<br>(2, &#x27;户外运动&#x27;, &#x27;自行车&#x27;, 399.90, 1000, &#x27;2020-11-10 00:00:00&#x27;),<br>(2, &#x27;户外运动&#x27;, &#x27;山地自行车&#x27;, 1399.90, 2500, &#x27;2020-11-10 00:00:00&#x27;),<br>(2, &#x27;户外运动&#x27;, &#x27;登山杖&#x27;, 59.90, 1500, &#x27;2020-11-10 00:00:00&#x27;),<br>(2, &#x27;户外运动&#x27;, &#x27;骑行装备&#x27;, 399.90, 3500, &#x27;2020-11-10 00:00:00&#x27;),<br>(2, &#x27;户外运动&#x27;, &#x27;运动外套&#x27;, 799.90, 500, &#x27;2020-11-10 00:00:00&#x27;),<br>(2, &#x27;户外运动&#x27;, &#x27;滑板&#x27;, 499.90, 1200, &#x27;2020-11-10 00:00:00&#x27;);<br></code></pre></td></tr></table></figure><p>下面针对goods表中的数据来验证每个窗口函数的功能。</p><h4 id="1-序号函数"><a href="#1-序号函数" class="headerlink" title="1. 序号函数"></a>1. 序号函数</h4><p><strong>1．ROW_NUMBER()函数</strong></p><p>ROW_NUMBER()函数能够对数据中的序号进行顺序显示。</p><p>举例：查询 goods 数据表中每个商品分类下价格降序排列的各个商品信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT ROW_NUMBER() OVER(PARTITION BY category_id ORDER BY price DESC) AS <br>row_num,-&gt; id, category_id, category, NAME, price, stock-&gt; FROM goods;<br>+---------+----+-------------+---------------+------------+---------+-------+<br>| row_num | id | category_id | category      | NAME       | price   | stock |<br>+---------+----+-------------+---------------+------------+---------+-------+<br>|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套    |  399.90 |  1200 |<br>|       2 |  3 |           1 | 女装/女士精品   | 卫衣       |   89.90 |  1500  |<br>|       3 |  4 |           1 | 女装/女士精品   | 牛仔裤      |   89.90 |  3500 |<br>|       4 |  2 |           1 | 女装/女士精品   | 连衣裙      |   79.90 |  2500 |<br>|       5 |  1 |           1 | 女装/女士精品   | T恤        |   39.90 |  1000 |<br>|       6 |  5 |           1 | 女装/女士精品   | 百褶裙      |   29.90 |  500  |<br>|       1 |  8 |           2 | 户外运动       | 山地自行车   | 1399.90 |  2500 |<br>|       2 | 11 |           2 | 户外运动       | 运动外套     |  799.90 |   500 |<br>|       3 | 12 |           2 | 户外运动       | 滑板        |  499.90 |  1200 |<br>|       4 |  7 |           2 | 户外运动       | 自行车      |  399.90 |  1000 |<br>|       5 | 10 |           2 | 户外运动       | 骑行装备    |  399.90 |  3500 |<br>|       6 |  9 |          2 | 户外运动        | 登山杖      |   59.90 |  1500 |<br> +---------+----+-------------+---------------+------------+---------+-------+<br> 12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>举例：查询 goods 数据表中每个商品分类下价格最高的3种商品信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT *<br>-&gt; FROM (<br>    -&gt;  SELECT ROW_NUMBER() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num<br>-&gt;  id, category_id, category, NAME, price, stock<br>-&gt;  FROM goods) t<br>-&gt; WHERE row_num &lt;= 3<br><br>+---------+----+-------------+---------------+------------+---------+-------+<br>| row_num | id | category_id | category      | NAME       | price   | stock |<br>+---------+----+-------------+---------------+------------+---------+-------+<br>|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套    |  399.90  |  1200 |<br>|       2 |  3 |           1 | 女装/女士精品   | 卫衣       |   89.90  |  1500 |<br>|       3 |  4 |           1 | 女装/女士精品   | 牛仔裤      |  89.90   |  3500 |<br>|       1 |  8 |           2 | 户外运动       | 山地自行车   | 1399.90  |  2500 |<br>|       2 | 11 |           2 | 户外运动       | 运动外套     |  799.90  |   500 |<br>|       3 | 12 |           2 | 户外运动       | 滑板        |  499.90  |  1200 |<br>+---------+----+-------------+---------------+------------+----------+-------+<br> 6 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>在名称为“女装&#x2F;女士精品”的商品类别中，有两款商品的价格为89.90元，分别是卫衣和牛仔裤。两款商品 的序号都应该为2，而不是一个为2，另一个为3。此时，可以使用RANK()函数和DENSE_RANK()函数解决。</p><p><strong>2．RANK()函数</strong></p><p>使用RANK()函数能够对序号进行并列排序，并且会跳过重复的序号，比如序号为1、1、3。</p><p>举例：使用RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,<br>-&gt; id, category_id, category, NAME, price, stock<br>-&gt; FROM goods;<br>+---------+----+-------------+---------------+------------+---------+-------+<br>| row_num | id | category_id | category      | NAME       | price   | stock |<br>+---------+----+-------------+---------------+------------+---------+-------+<br>|       1 |  6 |            1| 女装/女士精品   | 呢绒外套    |  399.90 |  1200 |<br>|       2 |  3 |          1 | 女装/女士精品   | 卫衣       |    89.90 |  1500 |<br>|       2 |  4 |           1 | 女装/女士精品   | 牛仔裤     |    89.90 |  3500 |<br>|       4 |  2 |           1 | 女装/女士精品   | 连衣裙      |   79.90 |  2500 |<br>|       5 |  1 |           1 | 女装/女士精品   | T恤        |   39.90 |  1000 |<br>|       6 |  5 |           1 | 女装/女士精品   | 百褶裙      |   29.90 |   500 |<br>|       1 |  8 |           2 | 户外运动       | 山地自行车   | 1399.90 |  2500 |<br>|       2 | 11 |           2 | 户外运动       | 运动外套     |  799.90 |   500 |<br>|       3 | 12 |           2 | 户外运动       | 滑板        |  499.90 |  1200 |<br>|       4 |  7 |           2 | 户外运动       | 自行车       |  399.90 |  1000 |<br>|       4 | 10 |           2 | 户外运动       | 骑行装备     |  399.90 |  3500 |<br>|       6 |  9 |           2 | 户外运动       | 登山杖       |   59.90 |  1500 |<br>+---------+----+-------------+---------------+------------+---------+-------+<br> 12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>举例：使用RANK()函数获取 goods 数据表中类别为“女装&#x2F;女士精品”的价格最高的4款商品信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT *<br>-&gt; FROM(<br>    -&gt;  SELECT RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,<br>-&gt;  id, category_id, category, NAME, price, stock<br>-&gt;  FROM goods) t<br>-&gt; WHERE category_id = 1 AND row_num &lt;= 4;<br><br>+---------+----+-------------+---------------+----------+--------+-------+<br>| row_num | id | category_id | category      | NAME     | price  | stock |<br>+---------+----+-------------+---------------+----------+--------+-------+<br>|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套  | 399.90 |  1200 |<br>|       2 |  3 |           1 | 女装/女士精品   | 卫衣     |  89.90 |  1500 |<br>|       2 |  4 |     1 | 女装/女士精品   | 牛仔裤    |  89.90 |  3500 |<br>|       4 |  2 |           1 | 女装/女士精品   | 连衣裙    |  79.90 |  2500 |<br>+---------+----+-------------+---------------+----------+--------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>可以看到，使用RANK()函数得出的序号为1、2、2、4，相同价格的商品序号相同，后面的商品序号是不 连续的，跳过了重复的序号。</p><p><strong>3．DENSE_RANK()函数</strong></p><p>DENSE_RANK()函数对序号进行并列排序，并且不会跳过重复的序号，比如序号为1、1、2。 </p><p>举例：使用DENSE_RANK()函数获取 goods 数据表中各类别的价格从高到低排序的各商品信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT DENSE_RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,<br>-&gt; id, category_id, category, NAME, price, stock<br>-&gt; FROM goods;<br>+---------+----+-------------+---------------+------------+---------+-------+<br>| row_num | id | category_id | category      | NAME       | price   | stock |<br>+---------+----+-------------+---------------+------------+---------+-------+<br>|       1 |  6 |           1 | 女装/女士精品   | 呢绒外套    |  399.90  |  1200 |<br>|       2 |  3 |           1 | 女装/女士精品   | 卫衣       |   89.90  |  1500 |<br>|       2 |  4 |           1 | 女装/女士精品   | 牛仔裤      |   89.90 |  3500 |<br>|       3 |  2 |           1 | 女装/女士精品   | 连衣裙      |   79.90 |  2500 |<br>|       4 |  1 |           1 | 女装/女士精品   | T恤        |   39.90 |  1000 |<br>|       5 |  5 |           1 | 女装/女士精品   | 百褶裙      |  29.90  |   500 |<br>|       1 |  8 |           2 | 户外运动        | 山地自行车  | 1399.90 |  2500 |<br>|       2 | 11 |           2 | 户外运动       | 运动外套     |  799.90 |   500 |<br>|       3 | 12 |           2 | 户外运动       | 滑板         | 499.90 |  1200 |<br>|       4 |  7 |           2 | 户外运动       | 自行车       | 399.90 |  1000 |<br>|       4 | 10 |           2 | 户外运动        | 骑行装备    | 399.90  |  3500 |<br>|       5 |  9 |           2 | 户外运动        | 登山杖      | 59.90  |  1500 |<br>+---------+----+-------------+---------------+------------+---------+-------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>举例：使用DENSE_RANK()函数获取 goods 数据表中类别为“女装&#x2F;女士精品”的价格最高的4款商品信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT *<br>-&gt; FROM(<br>-&gt;  SELECT DENSE_RANK() OVER(PARTITION BY category_id ORDER BY price DESC) AS row_num,<br>-&gt;  id, category_id, category, NAME, price, stock<br>-&gt;  FROM goods) t<br>-&gt; WHERE category_id = 1 AND row_num &lt;= 3;<br><br> +---------+----+-------------+---------------+----------+--------+-------+<br> | row_num | id | category_id | category      | NAME     | price  | stock |<br> +---------+----+-------------+---------------+----------+--------+-------+<br> |       1 |  6 |           1 | 女装/女士精品   | 呢绒外套  | 399.90 |  1200 |<br> |       2 |  3 |           1 | 女装/女士精品   | 卫衣     |  89.90 |  1500 |<br> |       2 |  4 |           1 | 女装/女士精品   | 牛仔裤    |  89.90 |  3500 |<br> |       3 |  2 |           1 | 女装/女士精品   | 连衣裙    |  79.90 |  2500 |<br> +---------+----+-------------+---------------+----------+--------+-------+<br> 4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>可以看到，使用DENSE_RANK()函数得出的行号为1、2、2、3，相同价格的商品序号相同，后面的商品序 号是连续的，并且没有跳过重复的序号。</p><h4 id="2-分布函数"><a href="#2-分布函数" class="headerlink" title="2. 分布函数"></a>2. 分布函数</h4><p><strong>1．PERCENT_RANK()函数</strong></p><p>PERCENT_RANK()函数是等级值百分比函数。按照如下方式进行计算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">(rank - 1) / (rows - 1)<br></code></pre></td></tr></table></figure><p>其中，rank的值为使用RANK()函数产生的序号，rows的值为当前窗口的总记录数。</p><p>举例：计算 goods 数据表中名称为“女装&#x2F;女士精品”的类别下的商品的PERCENT_RANK值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#写法一：<br>SELECT RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS r,<br>PERCENT_RANK() OVER (PARTITION BY category_id ORDER BY price DESC) AS pr,<br>id, category_id, category, NAME, price, stock<br>FROM goods<br>WHERE category_id = 1;<br><br>#写法二：<br>mysql&gt; SELECT RANK() OVER w AS r,<br>-&gt; PERCENT_RANK() OVER w AS pr,<br>-&gt; id, category_id, category, NAME, price, stock<br>-&gt; FROM goods<br>-&gt; WHERE category_id = 1 WINDOW w AS (PARTITION BY category_id ORDER BY price DESC);<br><br>+---+-----+----+-------------+---------------+----------+--------+-------+<br>| r | pr  | id | category_id | category      | NAME     | price  | stock |<br>+---+-----+----+-------------+---------------+----------+--------+-------+<br>| 1 |   0 |  6 |           1 | 女装/女士精品   | 呢绒外套  | 399.90 |  1200 |<br>| 2 | 0.2 |  3 |           1 | 女装/女士精品   | 卫衣     |  89.90 |  1500 |<br>| 2 | 0.2 |  4 |           1 | 女装/女士精品   | 牛仔裤   |  89.90 |  3500  |<br>| 4 | 0.6 |  2 |           1 | 女装/女士精品   | 连衣裙   |  79.90 |  2500  |<br>| 5 | 0.8 |  1 |           1 | 女装/女士精品   | T恤      |  39.90 |  1000 |<br>| 6 |   1 |  5 |           1 | 女装/女士精品   | 百褶裙   |  29.90  |   500 |<br>+---+-----+----+-------------+---------------+----------+--------+-------+<br>6 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p> <strong>2．CUME_DIST()函数</strong></p><p>CUME_DIST()函数主要用于查询小于或等于某个值的比例。</p><p>举例：查询goods数据表中小于或等于当前价格的比例。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT CUME_DIST() OVER(PARTITION BY category_id ORDER BY price ASC) AS cd,<br>-&gt; id, category, NAME, price<br>-&gt; FROM good<br>+---------------------+----+---------------+------------+---------+<br>| cd                  | id | category      | NAME       | price   |<br>+---------------------+----+---------------+------------+---------+<br>| 0.16666666666666666 |  5 | 女装/女士精品   | 百褶裙      |   29.90 | <br>|  0.3333333333333333 |  1 | 女装/女士精品   | T恤        |   39.90 |        <br>|  0.5 |  2 | 女装/女士精品   | 连衣裙      |   79.90 |<br>|  0.8333333333333334 |  3 | 女装/女士精品   | 卫衣        |   89.90 |<br>|  0.8333333333333334 |  4 | 女装/女士精品   | 牛仔裤      |   89.90 |                <br>|       1 |  6 | 女装/女士精品   | 呢绒外套    |  399.90 |<br>| 0.16666666666666666 |  9 | 户外运动       | 登山杖      |   59.90 |<br>|                 0.5 |  7 | 户外运动       | 自行车      |  399.90 |<br>|                 0.5 | 10 | 户外运动       | 骑行装备     |  399.90 |<br>|  0.6666666666666666 | 12 | 户外运动       | 滑板        |  499.90 |<br>|  0.8333333333333334 | 11 | 户外运动       | 运动外套    |  799.90 |<br>|                   1 |  8 | 户外运动       | 山地自行车   | 1399.90 |<br>+---------------------+----+---------------+------------+---------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="3-前后函数"><a href="#3-前后函数" class="headerlink" title="3. 前后函数"></a>3. 前后函数</h4><p><strong>1．LAG(expr,n)函数</strong></p><p>LAG(expr,n)函数返回当前行的前n行的expr的值。</p><p>举例：查询goods数据表中前一个商品价格与当前商品价格的差值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT id, category, NAME, price, pre_price, price - pre_price AS diff_price<br>-&gt; FROM (<br>-&gt;  SELECT  id, category, NAME, price,LAG(price,1) OVER w AS pre_price<br>-&gt;  FROM goods<br>-&gt;  WINDOW w AS (PARTITION BY category_id ORDER BY price)) t<br>+----+---------------+------------+---------+-----------+------------+<br>| id | category      | NAME       | price   | pre_price | diff_price |<br>+----+---------------+------------+---------+-----------+------------+<br>|  5 | 女装/女士精品   | 百褶裙      |   29.90 |      NULL |       NULL |<br>|  1 | 女装/女士精品   | T恤        |   39.90 |     29.90 |      10.00 |<br>|  2 | 女装/女士精品   | 连衣裙      |   79.90 |     39.90 |      40.00 |<br>|  3 | 女装/女士精品   | 卫衣       |    89.90 |    79.90 |      10.00  |<br>|  4 | 女装/女士精品   | 牛仔裤      |   89.90 |     89.90 |       0.00 |<br>|  6 | 女装/女士精品   | 呢绒外套    |  399.90 |     89.90 |     310.00 |<br>|  9 | 户外运动       | 登山杖      |   59.90 |     NULL |       NULL  |<br>|  7 | 户外运动       | 自行车      |  399.90 |     59.99|       340.00|<br>| 10 | 户外运动       | 骑行装备    |  399.90 |    399.90 |        0.00 |<br>| 12 | 户外运动       | 滑板       |  499.90 |    399.90 |      100.00 |<br>| 11 | 户外运动        | 运动外套    |  799.90 |    499.90 |     300.00 |<br>|  8 | 户外运动        | 山地自行车  | 1399.90 |    799.90 |     600.00 |<br>+----+---------------+------------+---------+-----------+------------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>2．LEAD(expr,n)函数</strong></p><p>LEAD(expr,n)函数返回当前行的后n行的expr的值。</p><p>举例：查询goods数据表中后一个商品价格与当前商品价格的差值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT id, category, NAME, behind_price, price,behind_price - price AS diff_price<br>-&gt; FROM(<br>-&gt;  SELECT id, category, NAME, price,LEAD(price, 1) OVER w AS behind_price<br>-&gt;  FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price)) t;<br><br>+----+---------------+------------+--------------+---------+------------+<br>| id | category      | NAME       | behind_price | price   | diff_price |<br>+----+---------------+------------+--------------+---------+------------+<br>|  5 | 女装/女士精品   | 百褶裙      |        39.90 |   29.90 |      10.00 |<br>|  1 | 女装/女士精品   | T恤        |        79.90 |   39.90 |      40.00 |<br>|  2 | 女装/女士精品   | 连衣裙      |        89.90 |   79.90 |      10.00 |<br>|  3 | 女装/女士精品   | 卫衣        |        89.90 |   89.90 |      0.00 |<br>|  4 | 女装/女士精品   | 牛仔裤      |       399.90 |   89.90 |     310.00 |<br>|  6 | 女装/女士精品   | 呢绒外套     |        NULL |  399.90 |       NULL |<br>|  9 | 户外运动       | 登山杖       |      399.90 |   59.90 |     340.00 |<br>|  7 | 户外运动       | 自行车       |  399.90 |  399.90 |       0.00 |<br>| 10 | 户外运动       | 骑行装备     |       499.90 |  399.90 |     100.00 |<br>| 12 | 户外运动       | 滑板        |       799.90 |  499.90 |     300.00 |<br>| 11 | 户外运动       | 运动外套     |      1399.90 |  799.90 |     600.00 |<br>|  8 | 户外运动       | 山地自行车   |         NULL | 1399.90 |       NULL |<br>+----+---------------+------------+--------------+---------+------------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="4-首尾函数"><a href="#4-首尾函数" class="headerlink" title="4. 首尾函数"></a>4. 首尾函数</h4><p><strong>1．FIRST_VALUE(expr)函数</strong></p><p>FIRST_VALUE(expr)函数返回第一个expr的值。</p><p>举例：按照价格排序，查询第1个商品的价格信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT id, category, NAME, price, stock,FIRST_VALUE(price) OVER w AS first_price<br>-&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);<br><br>+----+---------------+------------+---------+-------+-------------+<br>| id | category      | NAME       | price   | stock | first_price |<br>+----+---------------+------------+---------+-------+-------------+<br>|  5 | 女装/女士精品   | 百褶裙      |   29.90 |   500 |       29.90 |<br>|  1 | 女装/女士精品   | T恤        |   39.90 |  1000 |       29.90 |<br>|  2 | 女装/女士精品   | 连衣裙      |   79.90 |  2500 |       29.90 |<br>|  3 | 女装/女士精品   | 卫衣       |   89.90 |  1500 |       29.90 |<br>|  4 | 女装/女士精品   | 牛仔裤      |   89.90 |  3500 |       29.90 |<br>|  6 | 女装/女士精品   | 呢绒外套    |  399.90 |  1200 |       29.90 |<br>|  9 | 户外运动       | 登山杖      |   59.90 |  1500 |       59.90 |<br>|  7 | 户外运动       | 自行车      |  399.90 |  1000 |       59.90 |<br>| 10 | 户外运动       | 骑行装备    |  399.90 |  3500 |       59.90 |<br>| 12 | 户外运动       | 滑板       |  499.90 |  1200 |       59.90 |<br>| 11 | 户外运动       | 运动外套    |  799.90 |   500 |       59.90 |<br>|  8 | 户外运动       | 山地自行车  | 1399.90 |  2500 |       59.90 |<br>+----+---------------+------------+---------+-------+-------------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>2．LAST_VALUE(expr)函数</strong></p><p>LAST_VALUE(expr)函数返回最后一个expr的值。</p><p>举例：按照价格排序，查询最后一个商品的价格信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT id, category, NAME, price, stock,LAST_VALUE(price) OVER w AS last_price<br>-&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);<br>+----+---------------+------------+---------+-------+------------+<br>| id | category      | NAME       | price   | stock | last_price |<br>+----+---------------+------------+---------+-------+------------+<br>|  5 | 女装/女士精品   | 百褶裙     |   29.90 |   500 |       29.90 |<br>|  1 | 女装/女士精品   | T恤        |   39.90 |  1000 |      39.90 |<br>|  2 | 女装/女士精品   | 连衣裙     |   79.90 |  2500 |       79.90 |<br>|  3 | 女装/女士精品   | 卫衣       |   89.90 |  1500 |       89.90 |<br>|  4 | 女装/女士精品   | 牛仔裤     |   89.90 |  3500 |       89.90 |<br>|  6 | 女装/女士精品   | 呢绒外套   |  399.90 |  1200 |      399.90 |<br>|  9 | 户外运动       | 登山杖     |   59.90 |  1500 |       59.90 |<br>|  7 | 户外运动       | 自行车     |  399.90 |  1000 |      399.90 |<br>| 10 | 户外运动       | 骑行装备   |  399.90 |  3500 |      399.90 |<br>| 12 | 户外运动       | 滑板       |  499.90 |  1200 |     499.90 |<br>| 11 | 户外运动       | 运动外套   |  799.90 |   500 |      799.90 |<br>|  8 | 户外运动       | 山地自行车 | 1399.90 |  2500 |     1399.90 |<br>+----+---------------+------------+---------+-------+------------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="5-其他函数"><a href="#5-其他函数" class="headerlink" title="5. 其他函数"></a>5. 其他函数</h4><p><strong>1．NTH_VALUE(expr,n)函数</strong></p><p>NTH_VALUE(expr,n)函数返回第n个expr的值。</p><p>举例：查询goods数据表中排名第2和第3的价格信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT id, category, NAME, price,NTH_VALUE(price,2) OVER w AS second_price,<br>-&gt; NTH_VALUE(price,3) OVER w AS third_price<br>-&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);<br><br>+----+---------------+------------+---------+--------------+-------------+<br>| id | category      | NAME       | price   | second_price | third_price |<br>+----+---------------+------------+---------+--------------+-------------+<br>|  5 | 女装/女士精品   | 百褶裙      |   29.90 |         NULL |        NULL |<br>|  1 | 女装/女士精品   | T恤        |   39.90 |        39.90 |        NULL |<br>|  2 | 女装/女士精品   | 连衣裙     |   79.90 |        39.90 |       79.90 |<br>|  3 | 女装/女士精品   | 卫衣       |   89.90 |        39.90 |       79.90 |<br>|  4 | 女装/女士精品   | 牛仔裤     |   89.90 |        39.90 |       79.90 |<br>|  6 | 女装/女士精品   | 呢绒外套   |  399.90 |        39.90 |        79.90 |<br>|  9 | 户外运动       | 登山杖     |   59.90 |         NULL |         NULL |<br>|  7 | 户外运动       | 自行车     |  399.90 |       399.90 |       399.90 |<br>| 10 | 户外运动       | 骑行装备   |  399.90 |       399.90 |       399.90 |<br>| 12 | 户外运动       | 滑板       |  499.90 |       399.90 |      399.90 |<br>| 11 | 户外运动       | 运动外套   |  799.90 |       399.90 |       399.90 |<br>|  8 | 户外运动       | 山地自行车  | 1399.90 |       399.90 |      399.90 |<br>+----+---------------+------------+---------+--------------+-------------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p> <strong>2．NTILE(n)函数</strong></p><p>NTILE(n)函数将分区中的有序数据分为n个桶，记录桶编号。</p><p>举例：将goods表中的商品按照价格分为3组。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT NTILE(3) OVER w AS nt,id, category, NAME, price<br>-&gt; FROM goods WINDOW w AS (PARTITION BY category_id ORDER BY price);<br><br>+----+----+---------------+------------+---------+<br>| nt | id | category      | NAME       | price   |<br>+----+----+---------------+------------+---------+<br>|  1 |  5 | 女装/女士精品   | 百褶裙      |   29.90 |<br>|  1 |  1 | 女装/女士精品   | T恤        |   39.90 |<br>|  2 |  2 | 女装/女士精品   | 连衣裙      |   79.90 |<br>|  2 |  3 | 女装/女士精品   | 卫衣        |   89.90 |<br>|  3 |  4 | 女装/女士精品   | 牛仔裤      |   89.90 |<br>|  3 |  6 | 女装/女士精品   | 呢绒外套    |  399.90 |<br>|  1 |  9 | 户外运动       | 登山杖      |   59.90 |<br>|  1 |  7 | 户外运动       | 自行车      |  399.90 |<br>|  2 | 10 | 户外运动       | 骑行装备     |  399.90 |<br>|  2 | 12 | 户外运动       | 滑板        |  499.90 |<br>|  3 | 11 | 户外运动       | 运动外套     |  799.90 |<br>|  3 |  8 | 户外运动       | 山地自行车   | 1399.90 |<br>+----+----+---------------+------------+---------+<br>12 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="2-5-小-结"><a href="#2-5-小-结" class="headerlink" title="2.5 小 结"></a>2.5 小 结</h3><p>窗口函数的特点是可以分组，而且可以在分组内排序。另外，窗口函数不会因为分组而减少原表中的行 数，这对我们在原表数据的基础上进行统计和排序非常有用。</p><h2 id="3-新特性2：公用表表达式"><a href="#3-新特性2：公用表表达式" class="headerlink" title="3. 新特性2：公用表表达式"></a>3. 新特性2：公用表表达式</h2><p>公用表表达式（或通用表表达式）简称为CTE（Common Table Expressions）。CTE是一个命名的临时结 果集，作用范围是当前语句。CTE可以理解成一个可以复用的子查询，当然跟子查询还是有点区别的， CTE可以引用其他CTE，但子查询不能引用其他子查询。所以，可以考虑代替子查询。</p><p>依据语法结构和执行方式的不同，公用表表达式分为 <code>普通公用表表达式</code> 和<code>递归公用表表达式</code> 2种。</p><h3 id="3-1-普通公用表表达式"><a href="#3-1-普通公用表表达式" class="headerlink" title="3.1 普通公用表表达式"></a>3.1 普通公用表表达式</h3><p>普通公用表表达式的语法结构是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">WITH CTE名称 <br>AS （子查询）<br>SELECT|DELETE|UPDATE 语句;<br></code></pre></td></tr></table></figure><p>普通公用表表达式类似于子查询，不过，跟子查询不同的是，它可以被多次引用，而且可以被其他的普 通公用表表达式所引用。</p><p>举例：查询员工所在的部门的详细信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM departments<br>-&gt; WHERE department_id IN (<br>-&gt;                  SELECT DISTINCT department_id<br>-&gt;                  FROM employees<br>-&gt;                  );<br><br>+---------------+------------------+------------+-------------+<br>| department_id | department_name  | manager_id | location_id |<br>+---------------+------------------+------------+-------------+<br>|            10 | Administration   |        200 |        1700 |<br>|            20 | Marketing        |        201 |        1800 |<br>|            30 | Purchasing       |        114 |        1700 |<br>|            40 | Human Resources  |        203 |        2400 |<br>|            50 | Shipping         |        121 |        1500 |<br>|            60 | IT               |        103 |        1400 |<br>|            70 | Public Relations |        204 |        2700 |<br>|            80 | Sales            |        145 |        2500 |<br>|            90 | Executive        |        100 |        1700 |<br>|           100 | Finance          |        108 |        1700 |<br>|           110 | Accounting       |        205 |        1700 |<br>+---------------+------------------+------------+-------------+<br>11 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>这个查询也可以用普通公用表表达式的方式完成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; WITH emp_dept_id<br>-&gt; AS (SELECT DISTINCT department_id FROM employees)<br>-&gt; SELECT *<br>-&gt; FROM departments d JOIN emp_dept_id e<br>-&gt; ON d.department_id = e.department<br><br>+---------------+------------------+------------+-------------+---------------+<br>| department_id | department_name  | manager_id | location_id | department_id |<br>+---------------+------------------+------------+-------------+---------------+<br>|            90 | Executive        |        100 |        1700 |            90 |<br>|            60 | IT               |        103 |        1400 |            60 |<br>|           100 | Finance          |        108 |        1700 |           100 |<br>|            30 | Purchasing       |        114 |        1700 |            30 |<br>|            50 | Shipping         |        121 |        1500 |            50 |<br>|            80 | Sales            |        145 |        2500 |            80 |<br>|            10 | Administration   |        200 |        1700 |            10 |<br>|            20 | Marketing        |        201 |        1800 |            20 |<br>|            40 | Human Resources  |        203 |        2400 |            40 |<br>|            70 | Public Relations |        204 |        2700 |            70 |<br>|           110 | Accounting       |        205 |        1700 |           100 |<br>+---------------+------------------+------------+-------------+---------------+<br>11 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>例子说明，公用表表达式可以起到子查询的作用。以后如果遇到需要使用子查询的场景，你可以在查询 之前，先定义公用表表达式，然后在查询中用它来代替子查询。而且，跟子查询相比，公用表表达式有 一个优点，就是定义过公用表表达式之后的查询，可以像一个表一样多次引用公用表表达式，而子查询 则不能。</p><h3 id="3-2-递归公用表表达式"><a href="#3-2-递归公用表表达式" class="headerlink" title="3.2 递归公用表表达式"></a>3.2 递归公用表表达式</h3><p>递归公用表表达式也是一种公用表表达式，只不过，除了普通公用表表达式的特点以外，它还有自己的 特点，就是<strong>可以调用自己</strong>。它的语法结构是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">WITH RECURSIVE<br>CTE名称 AS （子查询）<br>SELECT|DELETE|UPDATE 语句;<br></code></pre></td></tr></table></figure><p>递归公用表表达式由 2 部分组成，分别是种子查询和递归查询，中间通过关键字 UNION [ALL]进行连接。 这里的<strong>种子查询，意思就是获得递归的初始值</strong>。这个查询只会运行一次，以创建初始数据集，之后递归 查询会一直执行，直到没有任何新的查询数据产生，递归返回。</p><p><strong>案例</strong>：针对于我们常用的employees表，包含employee_id，last_name和manager_id三个字段。如果a是b 的管理者，那么，我们可以把b叫做a的下属，如果同时b又是c的管理者，那么c就是b的下属，是a的下下 属。</p><p>下面我们尝试用查询语句列出所有具有下下属身份的人员信息。</p><p>如果用我们之前学过的知识来解决，会比较复杂，至少要进行 4 次查询才能搞定：</p><ul><li>第一步，先找出初代管理者，就是不以任何别人为管理者的人，把结果存入临时表； </li><li>第二步，找出所有以初代管理者为管理者的人，得到一个下属集，把结果存入临时表； </li><li>第三步，找出所有以下属为管理者的人，得到一个下下属集，把结果存入临时表。 </li><li>第四步，找出所有以下下属为管理者的人，得到一个结果集。</li></ul><p>如果第四步的结果集为空，则计算结束，第三步的结果集就是我们需要的下下属集了，否则就必须继续 进行第四步，一直到结果集为空为止。比如上面的这个数据表，就需要到第五步，才能得到空结果集。 而且，最后还要进行第六步：把第三步和第四步的结果集合并，这样才能最终获得我们需要的结果集。</p><p>如果用递归公用表表达式，就非常简单了。我介绍下具体的思路。</p><ul><li>用递归公用表表达式中的种子查询，找出初代管理者。字段 n 表示代次，初始值为 1，表示是第一 代管理者。 </li><li>用递归公用表表达式中的递归查询，查出以这个递归公用表表达式中的人为管理者的人，并且代次 的值加 1。直到没有人以这个递归公用表表达式中的人为管理者了，递归返回。 </li><li>在最后的查询中，选出所有代次大于等于 3 的人，他们肯定是第三代及以上代次的下属了，也就是 下下属了。这样就得到了我们需要的结果集。</li></ul><p>这里看似也是 3 步，实际上是一个查询的 3 个部分，只需要执行一次就可以了。而且也不需要用临时表 保存中间结果，比刚刚的方法简单多了。</p><p><strong>代码实现：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">WITH RECURSIVE cte <br>AS <br>(<br>SELECT employee_id,last_name,manager_id,1 AS n FROM employees WHERE employee_id = 100 -- 种子查询，找到第一代导<br>UNION ALL<br>SELECT a.employee_id,a.last_name,a.manager_id,n+1 FROM employees AS a JOIN cte<br>ON (a.manager_id = cte.employee_id) -- 递归查询，找出以递归公用表表达式的人为领导的人<br>)<br>SELECT employee_id,last_name FROM cte WHERE n &gt;= 3;<br></code></pre></td></tr></table></figure><p>总之，递归公用表表达式对于查询一个有共同的根节点的树形结构数据，非常有用。它可以不受层级的 限制，轻松查出所有节点的数据。如果用其他的查询方式，就比较复杂了。</p><h3 id="3-3-小结"><a href="#3-3-小结" class="headerlink" title="3.3 小结"></a>3.3 小结</h3><p>公用表表达式的作用是可以替代子查询，而且可以被多次引用。递归公用表表达式对查询有一个共同根 节点的树形结构数据非常高效，可以轻松搞定其他查询方式难以处理的查询。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>触发器</title>
    <link href="/2024/04/23/mysql/16%E3%80%81%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <url>/2024/04/23/mysql/16%E3%80%81%E8%A7%A6%E5%8F%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<p>在实际开发中，我们经常会遇到这样的情况：有 2 个或者多个相互关联的表，如 <code>商品信息</code> 和 <code>库存信息</code> 分 别存放在 2 个不同的数据表中，我们在添加一条新商品记录的时候，为了保证数据的完整性，必须同时 在库存表中添加一条库存记录。</p><p>这样一来，我们就必须把这两个关联的操作步骤写到程序里面，而且要用 <code>事务</code> 包裹起来，确保这两个操 作成为一个 <code>原子操作</code>，要么全部执行，要么全部不执行。要是遇到特殊情况，可能还需要对数据进行手 动维护，这样就很 <code>容易忘记其中的一步</code>，导致数据缺失。</p><p>这个时候，咱们可以使用触发器。<strong>你可以创建一个触发器，让商品信息数据的插入操作自动触发库存数 据的插入操作</strong>。这样一来，就不用担心因为忘记添加库存数据而导致的数据缺失了。</p><h2 id="1、触发器概述"><a href="#1、触发器概述" class="headerlink" title="1、触发器概述"></a>1、触发器概述</h2><p>MySQL从 <code>5.0.2</code> 版本开始支持触发器。MySQL的触发器和存储过程一样，都是嵌入到MySQL服务器的一 段程序。</p><p>触发器是由 <code>事件来触发</code> 某个操作，这些事件包括 <code>INSERT</code> 、 <code>UPDATE</code> 、 <code>DELETE</code> 事件。所谓事件就是指 用户的动作或者触发某项行为。如果定义了触发程序，当数据库执行这些语句时候，就相当于事件发生 了，就会 <code>自动</code> 激发触发器执行相应的操作。</p><p>当对数据表中的数据执行插入、更新和删除操作，需要自动执行一些数据库逻辑时，可以使用触发器来 实现。</p><h2 id="2、触发器的创建"><a href="#2、触发器的创建" class="headerlink" title="2、触发器的创建"></a>2、触发器的创建</h2><h3 id="2-1-创建触发器语法"><a href="#2-1-创建触发器语法" class="headerlink" title="2.1 创建触发器语法"></a>2.1 创建触发器语法</h3><p>创建触发器的语法结构是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TRIGGER 触发器名称 <br>&#123;BEFORE|AFTER&#125; &#123;INSERT|UPDATE|DELETE&#125; ON 表名 <br>FOR EACH ROW <br>触发器执行的语句块;<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li><code>表名</code>：表示触发器监控的对象。</li><li><code>BEFORE|AFTER </code>：表示触发的时间。BEFORE 表示在事件之前触发；AFTER 表示在事件之后触发。</li><li><code>INSERT|UPDATE|DELETE</code> ：表示触发的事件。<ul><li>INSERT 表示插入记录时触发；</li><li>UPDATE 表示更新记录时触发；</li><li>DELETE 表示删除记录时触发。</li></ul></li><li><code>触发器执行的语句块</code>：可以是单条SQL语句，也可以是由BEGIN…END结构组成的复合语句块。</li></ul><h3 id="2-2-代码举例"><a href="#2-2-代码举例" class="headerlink" title="2.2 代码举例"></a>2.2 代码举例</h3><p><strong>举例1：</strong></p><p>1、创建数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_trigger (<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>t_note VARCHAR(30)<br>);<br><br>CREATE TABLE test_trigger_log (<br>id INT PRIMARY KEY AUTO_INCREMENT,<br>t_log VARCHAR(30)<br>);<br></code></pre></td></tr></table></figure><p>2、创建触发器：创建名称为before_insert的触发器，向test_trigger数据表插入数据之前，向 test_trigger_log数据表中插入before_insert的日志信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE TRIGGER before_insert<br>BEFORE INSERT ON test_trigger <br>FOR EACH ROW<br>BEGIN<br>INSERT INTO test_trigger_log (t_log)<br>VALUES(&#x27;before_insert&#x27;);<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p> 3、向test_trigger数据表中插入数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_trigger (t_note) VALUES (&#x27;测试 BEFORE INSERT 触发器&#x27;);<br></code></pre></td></tr></table></figure><p> 4、查看test_trigger_log数据表中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test_trigger_log;<br>+----+---------------+<br>| id | t_log         |<br>+----+---------------+<br>|  1 | before_insert |<br>+----+---------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong></p><p>1、创建名称为after_insert的触发器，向test_trigger数据表插入数据之后，向test_trigger_log数据表中插 入after_insert的日志信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE TRIGGER after_insert<br>AFTER INSERT ON test_trigger<br>FOR EACH ROW<br>BEGIN<br>INSERT INTO test_trigger_log (t_log)<br>VALUES(&#x27;after_insert&#x27;);<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p> 2、向test_trigger数据表中插入数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_trigger (t_note) VALUES (&#x27;测试 AFTER INSERT 触发器&#x27;);<br></code></pre></td></tr></table></figure><p> 3、查看test_trigger_log数据表中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test_trigger_log;<br>+----+---------------+<br>| id | t_log         |<br>+----+---------------+<br>|  1 | before_insert |<br>|  2 | before_insert |<br>|  3 | after_insert  |<br>+----+---------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>举例3：</strong>定义触发器“salary_check_trigger”，基于员工表“employees”的INSERT事件，在INSERT之前检查 将要添加的新员工薪资是否大于他领导的薪资，如果大于领导薪资，则报sqlstate_value为’HY000’的错 误，从而使得添加失败。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE TRIGGER salary_check_trigger<br>BEFORE INSERT ON employees FOR EACH ROW<br>BEGIN<br>DECLARE mgrsalary DOUBLE;<br>SELECT salary INTO mgrsalary FROM employees WHERE employee_id = NEW.manager_id;<br><br>IF NEW.salary &gt; mgrsalary THEN<br>SIGNAL SQLSTATE &#x27;HY000&#x27; SET MESSAGE_TEXT = &#x27;薪资高于领导薪资错误&#x27;;<br>END IF;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>上面触发器声明过程中的NEW关键字代表INSERT添加语句的新记录。</p><h2 id="3、查看、删除触发器"><a href="#3、查看、删除触发器" class="headerlink" title="3、查看、删除触发器"></a>3、查看、删除触发器</h2><h3 id="3-1-查看触发器"><a href="#3-1-查看触发器" class="headerlink" title="3.1 查看触发器"></a>3.1 查看触发器</h3><p>查看触发器是查看数据库中已经存在的触发器的定义、状态和语法信息等。</p><p>方式1：查看当前数据库的所有触发器的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW TRIGGERS\G<br></code></pre></td></tr></table></figure><p>方式2：查看当前数据库中某个触发器的定义</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CREATE TRIGGER 触发器名<br></code></pre></td></tr></table></figure><p>方式3：从系统库information_schema的TRIGGERS表中查询“salary_check_trigger”触发器的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM information_schema.TRIGGERS;<br></code></pre></td></tr></table></figure><h3 id="3-2-删除触发器"><a href="#3-2-删除触发器" class="headerlink" title="3.2 删除触发器"></a>3.2 删除触发器</h3><p>触发器也是数据库对象，删除触发器也用DROP语句，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TRIGGER  IF EXISTS 触发器名称;<br></code></pre></td></tr></table></figure><h2 id="4、触发器的优缺点"><a href="#4、触发器的优缺点" class="headerlink" title="4、触发器的优缺点"></a>4、触发器的优缺点</h2><h3 id="4-1-优点"><a href="#4-1-优点" class="headerlink" title="4.1 优点"></a>4.1 优点</h3><p><strong>1、触发器可以确保数据的完整性。</strong></p><p>假设我们用 <code>进货单头表</code>（demo.importhead）来保存进货单的总体信息，包括进货单编号、供货商编 号、仓库编号、总计进货数量、总计进货金额和验收日期。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404251053449.png" alt="image-20240425105350408"></p><p>用进 <code>货单明细表</code>（demo.importdetails）来保存进货商品的明细，包括进货单编号、商品编号、进货数 量、进货价格和进货金额。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404251054311.png" alt="image-20240425105422265"></p><p>每当我们录入、删除和修改一条进货单明细数据的时候，进货单明细表里的数据就会发生变动。这个时 候，在进货单头表中的总计数量和总计金额就必须重新计算，否则，进货单头表中的总计数量和总计金 额就不等于进货单明细表中数量合计和金额合计了，这就是数据不一致。</p><p>为了解决这个问题，我们就可以使用触发器，<strong>规定每当进货单明细表有数据插入、修改和删除的操作 时，自动触发 2 步操作：</strong></p><p>1）重新计算进货单明细表中的数量合计和金额合计；</p><p>2）用第一步中计算出来的值更新进货单头表中的合计数量与合计金额。</p><p>这样一来，进货单头表中的合计数量与合计金额的值，就始终与进货单明细表中计算出来的合计数量与 合计金额的值相同，数据就是一致的，不会互相矛盾。</p><p><strong>2、触发器可以帮助我们记录操作日志。</strong></p><p>利用触发器，可以具体记录什么时间发生了什么。比如，记录修改会员储值金额的触发器，就是一个很 好的例子。这对我们还原操作执行时的具体场景，更好地定位问题原因很有帮助。</p><p><strong>3、触发器还可以用在操作数据前，对数据进行合法性检查。</strong></p><p>比如，超市进货的时候，需要库管录入进货价格。但是，人为操作很容易犯错误，比如说在录入数量的 时候，把条形码扫进去了；录入金额的时候，看串了行，录入的价格远超售价，导致账面上的巨亏…… 这些都可以通过触发器，在实际插入或者更新操作之前，对相应的数据进行检查，及时提示错误，防止 错误数据进入系统。</p><h3 id="4-2-缺点"><a href="#4-2-缺点" class="headerlink" title="4.2 缺点"></a>4.2 缺点</h3><p><strong>1、触发器最大的一个问题就是可读性差。</strong></p><p>因为触发器存储在数据库中，并且由事件驱动，这就意味着触发器有可能 <code>不受应用层的控制</code> 。这对系统维护是非常有挑战的。</p><p>比如，创建触发器用于修改会员储值操作。如果触发器中的操作出了问题，会导致会员储值金额更新失 败。我用下面的代码演示一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; update demo.membermaster set memberdeposit=20 where memberid = 2;<br>ERROR 1054 (42S22): Unknown column &#x27;aa&#x27; in &#x27;field list&#x27;<br></code></pre></td></tr></table></figure><p>结果显示，系统提示错误，字段“aa”不存在。</p><p>这是因为，触发器中的数据插入操作多了一个字段，系统提示错误。可是，如果你不了解这个触发器， 很可能会认为是更新语句本身的问题，或者是会员信息表的结构出了问题。说不定你还会给会员信息表 添加一个叫“aa”的字段，试图解决这个问题，结果只能是白费力。</p><p><strong>2、相关数据的变更，可能会导致触发器出错。</strong></p><p>特别是数据表结构的变更，都可能会导致触发器出错，进而影响数据操作的正常运行。这些都会由于触 发器本身的隐蔽性，影响到应用中错误原因排查的效率。</p><h3 id="4-3-注意点"><a href="#4-3-注意点" class="headerlink" title="4.3 注意点"></a>4.3 注意点</h3><p>注意，如果在子表中定义了外键约束，并且外键指定了ON UPDATE&#x2F;DELETE CASCADE&#x2F;SET NULL子句，此 时修改父表被引用的键值或删除父表被引用的记录行时，也会引起子表的修改和删除操作，此时基于子 表的UPDATE和DELETE语句定义的触发器并不会被激活。</p><p>例如：基于子表员工表（t_employee）的DELETE语句定义了触发器t1，而子表的部门编号（did）字段定 义了外键约束引用了父表部门表（t_department）的主键列部门编号（did），并且该外键加了“ON DELETE SET NULL”子句，那么如果此时删除父表部门表（t_department）在子表员工表（t_employee） 有匹配记录的部门记录时，会引起子表员工表（t_employee）匹配记录的部门编号（did）修改为NULL，但是此时不会激活触发器t1。只有直接对子表员工表（t_employee）执行DELETE语句时才会激活触发器 t1。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储过程与函数</title>
    <link href="/2024/04/22/mysql/15%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%B8%B8%E6%A0%87/"/>
    <url>/2024/04/22/mysql/15%E3%80%81%E5%8F%98%E9%87%8F%E3%80%81%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E4%B8%8E%E6%B8%B8%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<h2 id="1、变量"><a href="#1、变量" class="headerlink" title="1、变量"></a>1、变量</h2><p>在MySQL数据库的存储过程和函数中，可以使用变量来存储查询或计算的中间结果数据，或者输出最终 的结果数据。</p><p>在 MySQL 数据库中，变量分为 <code>系统变量</code> 以及 <code>用户自定义变量</code>。</p><h3 id="1-1-系统变量"><a href="#1-1-系统变量" class="headerlink" title="1.1 系统变量"></a>1.1 系统变量</h3><h4 id="1-1-1-系统变量分类"><a href="#1-1-1-系统变量分类" class="headerlink" title="1.1.1 系统变量分类"></a>1.1.1 系统变量分类</h4><p>变量由系统定义，不是用户定义，属于 <code>服务器</code> 层面。启动MySQL服务，生成MySQL服务实例期间， MySQL将为MySQL服务器内存中的系统变量赋值，这些系统变量定义了当前MySQL服务实例的属性、特 征。这些系统变量的值要么是 <code>编译MySQL时参数</code> 的默认值，要么是 值。大家可以通过网址  <code>配置文件</code>（例如my.ini等）中的参数 <code>https://dev.mysql.com/doc/refman/8.0/en/server-system variables.html</code> 查看MySQL文档的系统变量。</p><p>系统变量分为全局系统变量（需要添加 <code>globa</code>l 关键字）以及会话系统变量（需要添加  <code>session</code> 关键 字），有时也把全局系统变量简称为全局变量，有时也把会话系统变量称为local变量。<strong>如果不写，默认会话级别</strong>。静态变量（在 MySQL 服务实例运行期间它们的值不能使用 set 动态修改）属于特殊的全局系统变量。</p><p>每一个MySQL客户机成功连接MySQL服务器后，都会产生与之对应的会话。会话期间，MySQL服务实例会在MySQL服务器内存中生成与该会话对应的会话系统变量，这些会话系统变量的初始值是全局系统变量值的复制。如下图：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404241659514.png" alt="image-20240424165900419" style="zoom:50%;" /><ul><li><p>全局系统变量针对于所有会话（连接）有效，但 <code>不能跨重启</code></p></li><li><p>会话系统变量仅针对于当前会话（连接）有效。会话期间，当前会话对某个会话系统变量值的修 改，不会影响其他会话同一个会话系统变量的值。</p></li><li><p>会话1对某个全局系统变量值的修改会导致会话2中同一个全局系统变量值的修改。</p></li></ul><p>在 MySQL中有些系统变量只能是全局的，例如 max_connections 用于限制服务器的最大连接数；有些系 统变量作用域既可以是全局又可以是会话，例如 character_set_client 用于设置客户端的字符集；有些系 统变量的作用域只能是当前会话，例如 pseudo_thread_id 用于标记当前会话的 MySQL 连接 ID。</p><h4 id="1-1-2-查看系统变量"><a href="#1-1-2-查看系统变量" class="headerlink" title="1.1.2 查看系统变量"></a>1.1.2 查看系统变量</h4><ul><li><strong>查看所有或部分系统变量</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看所有全局变量<br>SHOW GLOBAL VARIABLES;<br><br>#查看所有会话变量<br>SHOW SESSION VARIABLES;<br>或<br>SHOW VARIABLES;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看满足条件的部分系统变量。<br>SHOW GLOBAL VARIABLES LIKE &#x27;%标识符%&#x27;;<br><br>#查看满足条件的部分会话变量<br>SHOW SESSION VARIABLES LIKE &#x27;%标识符%&#x27;;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW GLOBAL VARIABLES LIKE &#x27;admin_%&#x27;;<br></code></pre></td></tr></table></figure><ul><li><strong>查看指定系统变量</strong></li></ul><p>作为 MySQL 编码规范，MySQL 中的系统变量以 <code>两个“@”</code> 开头，其中“@@global”仅用于标记全局系统变 量，“@@session”仅用于标记会话系统变量。“@@”首先标记会话系统变量，如果会话系统变量不存在， 则标记全局系统变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查看指定的系统变量的值<br>SELECT @@global.变量名;<br><br>#查看指定的会话变量的值<br>SELECT @@session.变量名;<br>#或者<br>SELECT @@变量名;<br></code></pre></td></tr></table></figure><ul><li><strong>修改系统变量的值</strong></li></ul><p>有些时候，数据库管理员需要修改系统变量的默认值，以便修改当前会话或者MySQL服务实例的属性、 特征。具体方法：</p><p>方式1：修改MySQL <code>配置文件</code>，继而修改MySQL系统变量的值（该方法需要重启MySQL服务）</p><p>方式2：在MySQL服务运行期间，使用“set”命令重新设置系统变量的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#为某个系统变量赋值<br>#方式1：<br>SET @@global.变量名=变量值;<br>#方式2：<br>SET GLOBAL 变量名=变量值;<br><br>#为某个会话变量赋值<br>#方式1：<br>SET @@session.变量名=变量值;<br>#方式2：<br>SET SESSION 变量名=变量值;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @@global.autocommit;<br>SET GLOBAL autocommit=0;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @@session.tx_isolation;<br>SET @@session.tx_isolation=&#x27;read-uncommitted&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET GLOBAL max_connections = 1000;<br>SELECT @@global.max_connections;<br></code></pre></td></tr></table></figure><h3 id="1-2-用户变量"><a href="#1-2-用户变量" class="headerlink" title="1.2 用户变量"></a>1.2 用户变量</h3><h4 id="1-2-1-用户变量分类"><a href="#1-2-1-用户变量分类" class="headerlink" title="1.2.1 用户变量分类"></a>1.2.1 用户变量分类</h4><p>用户变量是用户自己定义的，作为 MySQL 编码规范，MySQL 中的用户变量以 <code>一个“@” </code> 开头。根据作用范围不同，又分为 会话用户变量和 局部变量。</p><ul><li><p>会话用户变量：作用域和会话变量一样，只对 <code>当前连接</code>会话有效。</p></li><li><p>局部变量：只在 BEGIN 和 END 语句块中有效。局部变量只能在 <code>存储过程和函数</code> 中使用。</p></li></ul><h4 id="1-2-2-会话用户变量"><a href="#1-2-2-会话用户变量" class="headerlink" title="1.2.2 会话用户变量"></a>1.2.2 会话用户变量</h4><ul><li>变量的定义</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式1：“=”或“:=”<br>SET @用户变量 = 值;<br>SET @用户变量 := 值;<br><br>#方式2：“:=” 或 INTO关键字<br>SELECT @用户变量 := 表达式 [FROM 等子句];<br>SELECT 表达式 INTO @用户变量  [FROM 等子句];<br></code></pre></td></tr></table></figure><ul><li>查看用户变量的值 （查看、比较、运算等）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @用户变量<br></code></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET @a = 1;<br><br>SELECT @a;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @num := COUNT(*) FROM employees;<br> <br>SELECT @num;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT AVG(salary) INTO @avgsalary FROM employees;<br><br>SELECT @avgsalary;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT @big;  #查看某个未声明的变量时，将得到NULL值<br></code></pre></td></tr></table></figure><h4 id="1-2-3-局部变量"><a href="#1-2-3-局部变量" class="headerlink" title="1.2.3 局部变量"></a>1.2.3 局部变量</h4><p>定义：可以使用 <code>DECLARE</code> 语句定义一个局部变量</p><p>作用域：仅仅在定义它的 BEGIN … END 中有效</p><p>位置：只能放在 BEGIN … END 中，而且只能放在第一句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">BEGIN<br>#声明局部变量<br>DECLARE 变量名1 变量数据类型 [DEFAULT 变量默认值];<br>DECLARE 变量名2,变量名3,... 变量数据类型 [DEFAULT 变量默认值];<br><br>#为局部变量赋值<br>SET 变量名1 = 值;<br>SELECT 值 INTO 变量名2 [FROM 子句];<br><br>#查看局部变量的值<br>SELECT 变量1,变量2,变量3;<br>END<br></code></pre></td></tr></table></figure><p><strong>1.定义变量</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE 变量名 类型 [default 值];  # 如果没有DEFAULT子句，初始值为NULL<br></code></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE　myparam　INT　DEFAULT 100;<br></code></pre></td></tr></table></figure><p> <strong>2.变量赋值</strong></p><p>方式1：一般用于赋简单的值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET 变量名=值;<br>SET 变量名:=值;<br></code></pre></td></tr></table></figure><p>方式2：一般用于赋表中的字段值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 字段名或表达式 INTO 变量名 FROM 表;<br></code></pre></td></tr></table></figure><p> <strong>3.使用变量</strong>（查看、比较、运算等）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 局部变量名;<br></code></pre></td></tr></table></figure><p>举例1：声明局部变量，并分别赋值为employees表中employee_id为102的last_name和salary</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE set_value()<br>BEGIN<br>DECLARE emp_name VARCHAR(25);<br>DECLARE sal DOUBLE(10,2);<br><br>SELECT last_name,salary INTO emp_name,sal<br>FROM employees <br>WHERE employee_id = 102;<br><br>SELECT emp_name,sal;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例2：声明两个变量，求和并打印 （分别使用会话用户变量、局部变量的方式实现）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式1：使用用户变量<br>SET @m=1;<br>SET @n=1;<br>SET @sum=@m+@n;<br><br>SELECT @sum;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式2：使用局部变量<br>DELIMITER //<br><br>CREATE PROCEDURE add_value()<br>BEGIN<br>#局部变量<br>DECLARE m INT DEFAULT 1;<br>    DECLARE n INT DEFAULT 3;<br>DECLARE SUM INT;<br><br>SET SUM = m+n;<br>SELECT SUM;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例3：创建存储过程“different_salary”查询某员工和他领导的薪资差距，并用IN参数emp_id接收员工 id，用OUT参数dif_salary输出薪资差距结果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#声明<br>DELIMITER //<br><br>CREATE PROCEDURE different_salary(IN emp_id INT,OUT dif_salary DOUBLE)<br>BEGIN<br>#声明局部变量<br>DECLARE emp_sal,mgr_sal DOUBLE DEFAULT 0.0;<br>DECLARE mgr_id INT;<br><br>SELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;<br>SELECT manager_id INTO mgr_id FROM employees WHERE employee_id = emp_id;<br>SELECT salary INTO mgr_sal FROM employees WHERE employee_id = mgr_id;<br>SET dif_salary = mgr_sal - emp_sal;<br>END //<br><br>DELIMITER ;<br><br>#调用<br>SET @emp_id = 102;<br>CALL different_salary(@emp_id,@diff_sal);<br><br>#查看<br>SELECT @diff_sal;<br></code></pre></td></tr></table></figure><h4 id="1-2-4-对比会话用户变量与局部变量"><a href="#1-2-4-对比会话用户变量与局部变量" class="headerlink" title="1.2.4 对比会话用户变量与局部变量"></a>1.2.4 对比会话用户变量与局部变量</h4><table><thead><tr><th></th><th>作用域</th><th>定义位置</th><th>语法</th></tr></thead><tbody><tr><td>会话用户变量</td><td>当前会话</td><td>会话的任何地方</td><td>加@符号，不用指定类型</td></tr><tr><td>局部变量</td><td>定义它的BEGIN END中</td><td>BEGIN END的第一句话</td><td>一般不用加@,需要指定类型</td></tr></tbody></table><h2 id="2、定义条件与处理程序"><a href="#2、定义条件与处理程序" class="headerlink" title="2、定义条件与处理程序"></a>2、定义条件与处理程序</h2><p><code>定义条件</code> 是事先定义程序执行过程中可能遇到的问题， <code>处理程序</code> 定义了在遇到问题时应当采取的处理方 式，并且保证存储过程或函数在遇到警告或错误时能继续执行。这样可以增强存储程序处理问题的能 力，避免程序异常停止运行。</p><p>说明：定义条件和处理程序在存储过程、存储函数中都是支持的。</p><h3 id="2-1-案例分析"><a href="#2-1-案例分析" class="headerlink" title="2.1 案例分析"></a>2.1 案例分析</h3><p><strong>案例分析</strong>：创建一个名称为“UpdateDataNoCondition”的存储过程。代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE UpdateDataNoCondition()<br>BEGIN<br>SET @x = 1;<br>UPDATE employees SET email = NULL WHERE last_name = &#x27;Abel&#x27;;<br>SET @x = 2;<br>UPDATE employees SET email = &#x27;aabbel&#x27; WHERE last_name = &#x27;Abel&#x27;;<br>SET @x = 3;<br>END //<br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用存储过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CALL UpdateDataNoCondition();<br>ERROR 1048 (23000): Column &#x27;email&#x27; cannot be null<br><br>mysql&gt; SELECT @x;<br>+------+<br>| @x   |<br>+------+<br>|   1  |<br>+------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>可以看到，此时@x变量的值为1。结合创建存储过程的SQL语句代码可以得出：在存储过程中未定义条件 和处理程序，且当存储过程中执行的SQL语句报错时，MySQL数据库会抛出错误，并退出当前SQL逻辑， 不再向下继续执行。</p><h3 id="2-2-定义条件"><a href="#2-2-定义条件" class="headerlink" title="2.2 定义条件"></a>2.2 定义条件</h3><p>定义条件就是给MySQL中的错误码命名，这有助于存储的程序代码更清晰。它将一个 <code>错误名字</code>和 <code>指定的错误条件</code> 关联起来。这个名字可以随后被用在定义处理程序的 <code>DECLARE HANDLER </code> 语句中。</p><p>定义条件使用DECLARE语句，语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE 错误名称 CONDITION FOR 错误码（或错误条件）<br></code></pre></td></tr></table></figure><p>错误码的说明：</p><ul><li><code>MySQL_error_code</code> 和 <code>sqlstate_value</code> 都可以表示MySQL的错误。<ul><li>MySQL_error_code是数值类型错误代码。</li><li>sqlstate_value是长度为5的字符串类型错误代码。</li></ul></li><li>例如，在ERROR 1418 (HY000)中，1418是MySQL_error_code，’HY000’是sqlstate_value。</li><li>例如，在ERROR 1142（42000）中，1142是MySQL_error_code，’42000’是sqlstate_value。</li></ul><p><strong>举例1：</strong>定义“Field_Not_Be_NULL”错误名与MySQL中违反非空约束的错误类型是“ERROR 1048 (23000)”对 应。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#使用MySQL_error_code<br>DECLARE Field_Not_Be_NULL CONDITION FOR 1048;<br><br>#使用sqlstate_value<br>DECLARE Field_Not_Be_NULL CONDITION FOR SQLSTATE &#x27;23000&#x27;;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong>定义”ERROR 1148(42000)”错误，名称为command_not_allowed。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#使用MySQL_error_code<br>DECLARE command_not_allowed CONDITION FOR 1148;<br><br>#使用sqlstate_value<br>DECLARE command_not_allowed CONDITION FOR SQLSTATE &#x27;42000&#x27;;<br></code></pre></td></tr></table></figure><h3 id="2-3-定义处理程序"><a href="#2-3-定义处理程序" class="headerlink" title="2.3 定义处理程序"></a>2.3 定义处理程序</h3><p>可以为SQL执行过程中发生的某种类型的错误定义特殊的处理程序。定义处理程序时，使用DECLARE语句 的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE 处理方式 HANDLER FOR 错误类型 处理语句<br></code></pre></td></tr></table></figure><ul><li><p><strong>处理方式：</strong>处理方式有3个取值：CONTINUE、EXIT、UNDO。</p><ul><li><code>CONTINUE</code> ：表示遇到错误不处理，继续执行。</li><li><code>EXIT</code> ：表示遇到错误马上退出。</li><li><code>UNDO</code> ：表示遇到错误后撤回之前的操作。MySQL中暂时不支持这样的操作。</li></ul></li><li><p><strong>错误类型</strong>（即条件）可以有如下取值：</p><ul><li><code>SQLSTATE &#39; 字符串错误码&#39;</code> ：表示长度为5的sqlstate_value类型的错误代码；</li><li><code>MySQL_error_code</code> ：匹配数值类型错误代码；</li><li><code>错误名称</code>：表示DECLARE … CONDITION定义的错误条件名称。</li><li><code>SQLWARNING</code> ：匹配所有以01开头的SQLSTATE错误代码；</li><li><code>NOT FOUND</code> ：匹配所有以02开头的SQLSTATE错误代码；</li><li><code>SQLEXCEPTION</code> ：匹配所有没有被SQLWARNING或NOT FOUND捕获的SQLSTATE错误代码；</li></ul></li><li><p><strong>处理语句</strong>：如果出现上述条件之一，则采用对应的处理方式，并执行指定的处理语句。语句可以是像“ <code>SET 变量 = 值</code>”这样的简单语句，也可以是使用 <code>BEGIN ... END</code> 编写的复合语句。</p></li></ul><p>定义处理程序的几种方式，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方法1：捕获sqlstate_value<br>DECLARE CONTINUE HANDLER FOR SQLSTATE &#x27;42S02&#x27; SET @info = &#x27;NO_SUCH_TABLE&#x27;;<br><br>#方法2：捕获mysql_error_value<br>DECLARE CONTINUE HANDLER FOR 1146 SET @info = &#x27;NO_SUCH_TABLE&#x27;;<br><br>#方法3：先定义条件，再调用<br>DECLARE no_such_table CONDITION FOR 1146;<br>DECLARE CONTINUE HANDLER FOR NO_SUCH_TABLE SET @info = &#x27;NO_SUCH_TABLE&#x27;;<br><br>#方法4：使用SQLWARNING<br>DECLARE EXIT HANDLER FOR SQLWARNING SET @info = &#x27;ERROR&#x27;;<br><br>#方法5：使用NOT FOUND<br>DECLARE EXIT HANDLER FOR NOT FOUND SET @info = &#x27;NO_SUCH_TABLE&#x27;;<br><br>#方法6：使用SQLEXCEPTION<br>DECLARE EXIT HANDLER FOR SQLEXCEPTION SET @info = &#x27;ERROR&#x27;;<br></code></pre></td></tr></table></figure><h3 id="2-4-案例解决"><a href="#2-4-案例解决" class="headerlink" title="2.4 案例解决"></a>2.4 案例解决</h3><p>在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到MySQL_error_code值为1048时，执行 CONTINUE操作，并且将@proc_value的值设置为-1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE UpdateDataNoCondition()<br>BEGIN<br>#定义处理程序<br>DECLARE CONTINUE HANDLER FOR 1048 SET @proc_value = -1;<br>SET @x = 1;<br>UPDATE employees SET email = NULL WHERE last_name = &#x27;Abel&#x27;;<br>SET @x = 2;<br>UPDATE employees SET email = &#x27;aabbel&#x27; WHERE last_name = &#x27;Abel&#x27;;<br>SET @x = 3;<br>END //<br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CALL UpdateDataWithCondition();<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; SELECT @x,@proc_value;<br>+------+-------------+<br>| @x   | @proc_value |<br>+------+-------------+<br>|    3 |         -1  |<br>+------+-------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>举例：</p><p>创建一个名称为“InsertDataWithCondition”的存储过程，代码如下。</p><p>在存储过程中，定义处理程序，捕获sqlstate_value值，当遇到sqlstate_value值为23000时，执行EXIT操 作，并且将@proc_value的值设置为-1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#准备工作<br>CREATE TABLE departments<br>AS<br>SELECT * FROM atguigudb.`departments`;<br><br>ALTER TABLE departments<br>ADD CONSTRAINT uk_dept_name UNIQUE(department_id);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE InsertDataWithCondition()<br>BEGIN<br>DECLARE duplicate_entry CONDITION FOR SQLSTATE &#x27;23000&#x27; ;<br>DECLARE EXIT HANDLER FOR duplicate_entry SET @proc_value = -1;<br>SET @x = 1;<br>INSERT INTO departments(department_name) VALUES(&#x27;测试&#x27;);<br>SET @x = 2;<br>INSERT INTO departments(department_name) VALUES(&#x27;测试&#x27;);<br>SET @x = 3;<br>END //<br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用存储过程： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CALL InsertDataWithCondition();<br>Query OK, 0 rows affected (0.01 sec)<br><br>mysql&gt; SELECT @x,@proc_value;<br>+------+-------------+<br>| @x   | @proc_value |<br>+------+-------------+<br>|    2 |         -1  |<br>+------+-------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="3、流程控制"><a href="#3、流程控制" class="headerlink" title="3、流程控制"></a>3、流程控制</h2><p>解决复杂问题不可能通过一个 SQL 语句完成，我们需要执行多个 SQL 操作。流程控制语句的作用就是控 制存储过程中 SQL 语句的执行顺序，是我们完成复杂操作必不可少的一部分。只要是执行的程序，流程 就分为三大类：</p><ul><li>顺序结构：程序从上往下依次执行 </li><li>分支结构：程序按条件进行选择执行，从两条或多条路径中选择一条执行 </li><li>循环结构：程序满足一定条件下，重复执行一组语句</li></ul><p>针对于MySQL 的流程控制语句主要有 3 类。注意：只能用于存储程序。</p><ul><li>条件判断语句：IF 语句和 CASE 语句 </li><li>循环语句：LOOP、WHILE 和 REPEAT 语句 </li><li>跳转语句：ITERATE 和 LEAVE 语句</li></ul><h3 id="3-1-分支结构之-IF"><a href="#3-1-分支结构之-IF" class="headerlink" title="3.1 分支结构之 IF"></a>3.1 分支结构之 IF</h3><ul><li>IF 语句的语法结构是：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">IF 表达式1 THEN 操作1<br>[ELSEIF 表达式2 THEN 操作2]……<br>[ELSE 操作N]<br>END IF<br></code></pre></td></tr></table></figure><p>根据表达式的结果为TRUE或FALSE执行相应的语句。这里“[]”中的内容是可选的。</p><ul><li>特点：① 不同的表达式对应不同的操作 ② 使用在begin end中</li><li><strong>举例1：</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">IF val IS NULL <br>THEN SELECT &#x27;val is null&#x27;;<br>ELSE SELECT &#x27;val is not null&#x27;;<br><br>END IF;<br></code></pre></td></tr></table></figure><ul><li><strong>举例2：</strong>声明存储过程“update_salary_by_eid1”，定义IN参数emp_id，输入员工编号。判断该员工 薪资如果低于8000元并且入职时间超过5年，就涨薪500元；否则就不变。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_by_eid1(IN emp_id INT)<br>BEGIN<br>DECLARE emp_salary DOUBLE;<br>DECLARE hire_year DOUBLE;<br><br>SELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;<br><br>SELECT DATEDIFF(CURDATE(),hire_date)/365 INTO hire_year<br>FROM employees WHERE employee_id = emp_id;<br><br>IF emp_salary &lt; 8000 AND hire_year &gt; 5<br>THEN UPDATE employees SET salary = salary + 500 WHERE employee_id = emp_id;<br>END IF;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><ul><li><strong>举例3：</strong>声明存储过程“update_salary_by_eid2”，定义IN参数emp_id，输入员工编号。判断该员工 薪资如果低于9000元并且入职时间超过5年，就涨薪500元；否则就涨薪100元。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_by_eid2(IN emp_id INT)<br>BEGIN<br>DECLARE emp_salary DOUBLE;<br>DECLARE hire_year DOUBLE;<br><br>SELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;<br><br>SELECT DATEDIFF(CURDATE(),hire_date)/365 INTO hire_year<br>FROM employees WHERE employee_id = emp_id;<br><br>IF emp_salary &lt; 8000 AND hire_year &gt; 5<br>THEN UPDATE employees SET salary = salary + 500 WHERE employee_id = emp_id;<br>ELSE <br>UPDATE employees SET salary = salary + 100 WHERE employee_id = emp_id;<br>END IF;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><ul><li><strong>举例4：</strong>声明存储过程“update_salary_by_eid3”，定义IN参数emp_id，输入员工编号。判断该员工 薪资如果低于9000元，就更新薪资为9000元；薪资如果大于等于9000元且低于10000的，但是奖金 比例为NULL的，就更新奖金比例为0.01；其他的涨薪100元。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_by_eid3(IN emp_id INT)<br>BEGIN<br>DECLARE emp_salary DOUBLE;<br>DECLARE bonus DECIMAL(3,2);<br><br>SELECT salary INTO emp_salary FROM employees WHERE employee_id = emp_id;<br>SELECT commission_pct INTO bonus FROM employees WHERE employee_id = emp_id;<br><br>IF emp_salary &lt; 9000<br>THEN UPDATE employees SET salary = 9000 WHERE employee_id = emp_id;<br>ELSEIF emp_salary &lt; 10000 AND bonus IS NULL<br>THEN UPDATE employees SET commission_pct = 0.01 WHERE employee_id = emp_id;<br>ELSE<br>UPDATE employees SET salary = salary + 100 WHERE employee_id = emp_id;<br>END IF;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="3-2-分支结构之-CASE"><a href="#3-2-分支结构之-CASE" class="headerlink" title="3.2 分支结构之 CASE"></a>3.2 分支结构之 CASE</h3><p>CASE 语句的语法结构1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#情况一：类似于switch<br>CASE 表达式<br>WHEN 值1 THEN 结果1或语句1(如果是语句，需要加分号) <br>WHEN 值2 THEN 结果2或语句2(如果是语句，需要加分号)<br>...<br>ELSE 结果n或语句n(如果是语句，需要加分号)<br>END [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）<br></code></pre></td></tr></table></figure><p>CASE 语句的语法结构2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#情况二：类似于多重if<br>CASE <br>WHEN 条件1 THEN 结果1或语句1(如果是语句，需要加分号) <br>WHEN 条件2 THEN 结果2或语句2(如果是语句，需要加分号)<br>...<br>ELSE 结果n或语句n(如果是语句，需要加分号)<br>END [case]（如果是放在begin end中需要加上case，如果放在select后面不需要）<br></code></pre></td></tr></table></figure><ul><li><strong>举例1：</strong></li></ul><p>使用CASE流程控制语句的第1种格式，判断val值等于1、等于2，或者两者都不等。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CASE val<br>WHEN 1 THEN SELECT &#x27;val is 1&#x27;;<br>WHEN 2 THEN SELECT &#x27;val is 2&#x27;;<br>ELSE SELECT &#x27;val is not 1 or 2&#x27;;<br>END CASE;<br></code></pre></td></tr></table></figure><ul><li><strong>举例2：</strong></li></ul><p>使用CASE流程控制语句的第2种格式，判断val是否为空、小于0、大于0或者等于0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CASE<br>WHEN val IS NULL THEN SELECT &#x27;val is null&#x27;;<br>WHEN val &lt; 0 THEN SELECT &#x27;val is less than 0&#x27;;<br>WHEN val &gt; 0 THEN SELECT &#x27;val is greater than 0&#x27;;<br>ELSE SELECT &#x27;val is 0&#x27;;<br>END CASE;<br></code></pre></td></tr></table></figure><ul><li><strong>举例3：</strong>声明存储过程“update_salary_by_eid4”，定义IN参数emp_id，输入员工编号。判断该员工 薪资如果低于9000元，就更新薪资为9000元；薪资大于等于9000元且低于10000的，但是奖金比例 为NULL的，就更新奖金比例为0.01；其他的涨薪100元。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br>CREATE PROCEDURE update_salary_by_eid4(IN emp_id INT)<br>BEGIN<br>DECLARE emp_sal DOUBLE;<br>DECLARE bonus DECIMAL(3,2);<br><br>SELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;<br>SELECT commission_pct INTO bonus FROM employees WHERE employee_id = emp_id;<br><br>CASE<br>WHEN emp_sal&lt;9000<br>THEN UPDATE employees SET salary=9000 WHERE employee_id = emp_id;<br>WHEN emp_sal&lt;10000 AND bonus IS NULL<br>THEN UPDATE employees SET commission_pct=0.01 WHERE employee_id = emp_id;<br>ELSE<br>UPDATE employees SET salary=salary+100 WHERE employee_id = emp_id;<br>END CASE;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><ul><li>举例4：声明存储过程update_salary_by_eid5，定义IN参数emp_id，输入员工编号。判断该员工的 入职年限，如果是0年，薪资涨50；如果是1年，薪资涨100；如果是2年，薪资涨200；如果是3年， 薪资涨300；如果是4年，薪资涨400；其他的涨薪500。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_by_eid5(IN emp_id INT)<br>BEGIN<br>DECLARE emp_sal DOUBLE;<br>DECLARE hire_year DOUBLE;<br><br>SELECT salary INTO emp_sal FROM employees WHERE employee_id = emp_id;<br><br>SELECT ROUND(DATEDIFF(CURDATE(),hire_date)/365) INTO hire_year FROM employees <br>WHERE employee_id = emp_id;<br><br>CASE hire_year<br>WHEN 0 THEN UPDATE employees SET salary=salary+50 WHERE employee_id = emp_id;<br>WHEN 1 THEN UPDATE employees SET salary=salary+100 WHERE employee_id = emp_id;<br>WHEN 2 THEN UPDATE employees SET salary=salary+200 WHERE employee_id = emp_id;<br>WHEN 3 THEN UPDATE employees SET salary=salary+300 WHERE employee_id = emp_id;<br>WHEN 4 THEN UPDATE employees SET salary=salary+400 WHERE employee_id = emp_id;<br>ELSE UPDATE employees SET salary=salary+500 WHERE employee_id = emp_id;<br>END CASE;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="3-3-循环结构之LOOP"><a href="#3-3-循环结构之LOOP" class="headerlink" title="3.3 循环结构之LOOP"></a>3.3 循环结构之LOOP</h3><p>LOOP循环语句用来重复执行某些语句。LOOP内的语句一直重复执行直到循环被退出（使用LEAVE子 句），跳出循环过程。</p><p>LOOP语句的基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[loop_label:] LOOP<br>循环执行的语句<br>END LOOP [loop_label]<br></code></pre></td></tr></table></figure><p>其中，loop_label表示LOOP语句的标注名称，该参数可以省略。</p><p><strong>举例1：</strong></p><p>使用LOOP语句进行循环操作，id值小于10时将重复执行循环过程。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE id INT DEFAULT 0;<br>add_loop:LOOP<br>SET id = id +1;<br>IF id &gt;= 10 THEN LEAVE add_loop;<br>END IF;<br><br>END LOOP add_loop;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong>当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程 “update_salary_loop()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨为 原来的1.1倍。直到全公司的平均薪资达到12000结束。并统计循环次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_loop(OUT num INT)<br>BEGIN<br>DECLARE avg_salary DOUBLE;<br>DECLARE loop_count INT DEFAULT 0;<br><br>SELECT AVG(salary) INTO avg_salary FROM employees;<br><br>label_loop:LOOP<br>IF avg_salary &gt;= 12000 THEN LEAVE label_loop;<br>END IF;<br><br>UPDATE employees SET salary = salary * 1.1;<br>SET loop_count = loop_count + 1;<br>SELECT AVG(salary) INTO avg_salary FROM employees;<br>END LOOP label_loop;<br><br>SET num = loop_count;<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="3-4-循环结构之WHILE"><a href="#3-4-循环结构之WHILE" class="headerlink" title="3.4 循环结构之WHILE"></a>3.4 循环结构之WHILE</h3><p>WHILE语句创建一个带条件判断的循环过程。WHILE在执行语句执行时，先对指定的表达式进行判断，如 果为真，就执行循环内的语句，否则退出循环。WHILE语句的基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[while_label:] WHILE 循环条件  DO<br>循环体<br>END WHILE [while_label];<br></code></pre></td></tr></table></figure><p> while_label为WHILE语句的标注名称；如果循环条件结果为真，WHILE语句内的语句或语句群被执行，直 至循环条件为假，退出循环。</p><p><strong>举例1：</strong> </p><p>WHILE语句示例，i值小于10时，将重复执行循环过程，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE test_while()<br>BEGIN   <br>DECLARE i INT DEFAULT 0;<br><br>WHILE i &lt; 10 DO<br>SET i = i + 1;<br>END WHILE;<br><br>SELECT i;<br>END //<br><br>DELIMITER ;<br>#调用<br>CALL test_while();<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong>市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程 “update_salary_while()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家降薪，薪资降 为原来的90%。直到全公司的平均薪资达到5000结束。并统计循环次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_while(OUT num INT)<br>BEGIN<br>DECLARE avg_sal DOUBLE ;<br>DECLARE while_count INT DEFAULT 0;<br><br>SELECT AVG(salary) INTO avg_sal FROM employees;<br><br>WHILE avg_sal &gt; 5000 DO<br>UPDATE employees SET salary = salary * 0.9;<br><br>SET while_count = while_count + 1;<br><br>SELECT AVG(salary) INTO avg_sal FROM employees;<br>END WHILE;<br><br>SET num = while_count;<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="3-5-循环结构之REPEAT"><a href="#3-5-循环结构之REPEAT" class="headerlink" title="3.5 循环结构之REPEAT"></a>3.5 循环结构之REPEAT</h3><p>REPEAT语句创建一个带条件判断的循环过程。与WHILE循环不同的是，REPEAT 循环首先会执行一次循 环，然后在 UNTIL 中进行表达式的判断，如果满足条件就退出，即 END REPEAT；如果条件不满足，则会 就继续执行循环，直到满足退出条件为止。</p><p>REPEAT语句的基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">[repeat_label:] REPEAT<br>循环体的语句<br>UNTIL 结束循环的条件表达式<br>END REPEAT [repeat_label]<br></code></pre></td></tr></table></figure><p> repeat_label为REPEAT语句的标注名称，该参数可以省略；REPEAT语句内的语句或语句群被重复，直至 expr_condition为真。</p><p><strong>举例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE test_repeat()<br>BEGIN   <br>DECLARE i INT DEFAULT 0;<br><br>REPEAT <br>SET i = i + 1;<br>UNTIL i &gt;= 10<br>END REPEAT;<br><br>SELECT i;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong>当市场环境变好时，公司为了奖励大家，决定给大家涨工资。声明存储过程 “update_salary_repeat()”，声明OUT参数num，输出循环次数。存储过程中实现循环给大家涨薪，薪资涨 为原来的1.15倍。直到全公司的平均薪资达到13000结束。并统计循环次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE update_salary_repeat(OUT num INT)<br>BEGIN<br>DECLARE avg_sal DOUBLE ;<br>DECLARE repeat_count INT DEFAULT 0;<br><br>SELECT AVG(salary) INTO avg_sal FROM employees;<br><br>REPEAT<br>UPDATE employees SET salary = salary * 1.15;<br><br>SET repeat_count = repeat_count + 1;<br><br>SELECT AVG(salary) INTO avg_sal FROM employees;<br>UNTIL avg_sal &gt;= 13000<br>END REPEAT;<br><br>SET num = repeat_count;<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p><strong>对比三种循环结构：</strong></p><p>1、这三种循环都可以省略名称，但如果循环中添加了循环控制语句（LEAVE或ITERATE）则必须添加名 称。</p><p> 2、 LOOP：一般用于实现简单的”死”循环 WHILE：先判断后执行 REPEAT：先执行后判断，无条件 至少执行一次</p><h3 id="3-6-跳转语句之LEAVE语句"><a href="#3-6-跳转语句之LEAVE语句" class="headerlink" title="3.6 跳转语句之LEAVE语句"></a>3.6 跳转语句之LEAVE语句</h3><p>LEAVE语句：可以用在循环语句内，或者以 BEGIN 和 END 包裹起来的程序体内，表示跳出循环或者跳出 程序体的操作。如果你有面向过程的编程语言的使用经验，你可以把 LEAVE 理解为 break。</p><p>基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">LEAVE 标记名<br></code></pre></td></tr></table></figure><p>其中，label参数表示循环的标志。LEAVE和BEGIN … END或循环一起被使用。</p><p><strong>举例1：</strong>创建存储过程 “leave_begin()”，声明INT类型的IN参数num。给BEGIN…END加标记名，并在 BEGIN…END中使用IF语句判断num参数的值。</p><ul><li>如果num&lt;&#x3D;0，则使用LEAVE语句退出BEGIN…END；</li><li>如果num&#x3D;1，则查询“employees”表的平均薪资； </li><li>如果num&#x3D;2，则查询“employees”表的最低薪资； </li><li>如果num&gt;2，则查询“employees”表的最高薪资。</li></ul><p>IF语句结束后查询“employees”表的总人数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE leave_begin(IN num INT)<br><br>begin_label: BEGIN<br>IF num&lt;=0 <br>THEN LEAVE begin_label;<br>ELSEIF num=1 <br>THEN SELECT AVG(salary) FROM employees;<br>ELSEIF num=2 <br>THEN SELECT MIN(salary) FROM employees;<br>ELSE <br>SELECT MAX(salary) FROM employees;<br>END IF;<br><br>SELECT COUNT(*) FROM employees;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong> </p><p>当市场环境不好时，公司为了渡过难关，决定暂时降低大家的薪资。声明存储过程“leave_while()”，声明 OUT参数num，输出循环次数，存储过程中使用WHILE循环给大家降低薪资为原来薪资的90%，直到全公 司的平均薪资小于等于10000，并统计循环次数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br>CREATE PROCEDURE leave_while(OUT num INT)<br><br>BEGIN <br>#<br>DECLARE avg_sal DOUBLE;#记录平均工资<br>DECLARE while_count INT DEFAULT 0; #记录循环次数<br>   <br>SELECT AVG(salary) INTO avg_sal FROM employees; #① 初始化条件<br>    <br>while_label:WHILE TRUE DO  #② 循环条件<br>        <br> #③ 循环体<br>IF avg_sal &lt;= 10000 THEN<br>LEAVE while_label;<br>END IF;<br>        <br>UPDATE employees SET salary  = salary * 0.9;<br>SET while_count = while_count + 1;<br>        <br>#④ 迭代条件<br>SELECT AVG(salary) INTO avg_sal FROM employees;<br>    <br>END WHILE;<br>    <br>#赋值<br>SET num = while_count;<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="3-7-跳转语句之ITERATE语句"><a href="#3-7-跳转语句之ITERATE语句" class="headerlink" title="3.7 跳转语句之ITERATE语句"></a>3.7 跳转语句之ITERATE语句</h3><p>ITERATE语句：只能用在循环语句（LOOP、REPEAT和WHILE语句）内，表示重新开始循环，将执行顺序 转到语句段开头处。如果你有面向过程的编程语言的使用经验，你可以把 ITERATE 理解为 continue，意 思为“再次循环”。</p><p>语句基本格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ITERATE label<br></code></pre></td></tr></table></figure><p>label参数表示循环的标志。ITERATE语句必须跟在循环标志前面。</p><p><strong>举例：</strong> 定义局部变量num，初始值为0。循环结构中执行num + 1操作。</p><ul><li>如果num &lt; 10，则继续执行循环； </li><li>如果num &gt; 15，则退出循环结构；</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE test_iterate()<br><br>BEGIN<br>DECLARE num INT DEFAULT 0;<br>   <br>my_loop:LOOP<br>SET num = num + 1;<br>   <br>IF num &lt; 10 <br>THEN ITERATE my_loop;<br>ELSEIF num &gt; 15<br>THEN LEAVE my_loop;<br>END IF;<br><br>SELECT &#x27;尚硅谷：让天下没有难学的技术&#x27;;<br><br>END LOOP my_loop;<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h2 id="4、游标"><a href="#4、游标" class="headerlink" title="4、游标"></a>4、游标</h2><p>4.1 什么是游标（或光标）</p><p>虽然我们也可以通过筛选条件 WHERE 和 HAVING，或者是限定返回记录的关键字 LIMIT 返回一条记录， 但是，却无法在结果集中像指针一样，向前定位一条记录、向后定位一条记录，或者是 <code>随意定位到某一条记录</code>，并对记录的数据进行处理。</p><p>这个时候，就可以用到游标。游标，提供了一种灵活的操作方式，让我们能够对结果集中的每一条记录 进行定位，并对指向的记录中的数据进行操作的数据结构。<strong>游标让 SQL 这种面向集合的语言有了面向过 程开发的能力。</strong></p><p>在 SQL 中，游标是一种临时的数据库对象，可以指向存储在数据库表中的数据行指针。这里游标 <code>充当了 指针的作用</code>，我们可以通过操作游标来对数据行进行操作。</p><p>MySQL中游标可以在存储过程和函数中使用。</p><p>比如，我们查询了 employees 数据表中工资高于15000的员工都有哪些：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,last_name,salary FROM employees<br>WHERE salary &gt; 15000;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404251033272.png" alt="image-20240425103344173" style="zoom:80%;" /><p>这里我们就可以通过游标来操作数据行，如图所示此时游标所在的行是“108”的记录，我们也可以在结果 集上滚动游标，指向结果集中的任意一行。</p><h3 id="4-2-使用游标步骤"><a href="#4-2-使用游标步骤" class="headerlink" title="4.2 使用游标步骤"></a>4.2 使用游标步骤</h3><p>游标必须在声明处理程序之前被声明，并且变量和条件还必须在声明游标或处理程序之前被声明。</p><p>如果我们想要使用游标，一般需要经历四个步骤。不同的 DBMS 中，使用游标的语法可能略有不同。</p><p><strong>第一步，声明游标</strong></p><p>在MySQL中，使用DECLARE关键字来声明游标，其语法的基本形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE cursor_name CURSOR FOR select_statement;<br></code></pre></td></tr></table></figure><p>这个语法适用于 MySQL，SQL Server，DB2 和 MariaDB。如果是用 Oracle 或者 PostgreSQL，需要写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE cursor_name CURSOR IS select_statement;<br></code></pre></td></tr></table></figure><p>要使用 SELECT 语句来获取数据结果集，而此时还没有开始遍历数据，这里 select_statement 代表的是 SELECT 语句，返回一个用于创建游标的结果集。</p><p>比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE cur_emp CURSOR FOR <br>SELECT employee_id,salary FROM employees;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DECLARE cursor_fruit CURSOR FOR <br>SELECT f_name, f_price FROM fruits ;<br></code></pre></td></tr></table></figure><p><strong>第二步，打开游标</strong></p><p>打开游标的语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">OPEN cursor_name<br></code></pre></td></tr></table></figure><p>当我们定义好游标之后，如果想要使用游标，必须先打开游标。打开游标的时候 SELECT 语句的查询结 果集就会送到游标工作区，为后面游标的 <code>逐条读取</code> 结果集中的记录做准备。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">OPEN　cur_emp ;<br></code></pre></td></tr></table></figure><p><strong>第三步，使用游标（从游标中取得数据）</strong></p><p>语法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">FETCH cursor_name INTO var_name [, var_name] ...<br></code></pre></td></tr></table></figure><p>这句的作用是使用 cursor_name 这个游标来读取当前行，并且将数据保存到 var_name 这个变量中，游 标指针指到下一行。如果游标读取的数据行有多个列名，则在 INTO 关键字后面赋值给多个变量名即可。</p><p>注意：var_name必须在声明游标之前就定义好。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">FETCH　cur_emp INTO emp_id, emp_sal ;<br></code></pre></td></tr></table></figure><p>注意：<strong>游标的查询结果集中的字段数，必须跟 INTO 后面的变量数一致</strong>，否则，在存储过程执行的时 候，MySQL 会提示错误。</p><p><strong>第四步，关闭游标</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CLOSE cursor_name<br></code></pre></td></tr></table></figure><p>有 OPEN 就会有 CLOSE，也就是打开和关闭游标。当我们使用完游标后需要关闭掉该游标。因为游标会 <code>占用系统资源</code>，如果不及时关闭，<strong>游标会一直保持到存储过程结束</strong>，影响系统运行的效率。而关闭游标 的操作，会释放游标占用的系统资源。</p><p>关闭游标之后，我们就不能再检索查询结果中的数据行，如果需要检索只能再次打开游标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CLOSE　cur_emp;<br></code></pre></td></tr></table></figure><h3 id="4-3-举例"><a href="#4-3-举例" class="headerlink" title="4.3 举例"></a>4.3 举例</h3><p>创建存储过程“get_count_by_limit_total_salary()”，声明IN参数 limit_total_salary，DOUBLE类型；声明 OUT参数total_count，INT类型。函数的功能可以实现累加薪资最高的几个员工的薪资值，直到薪资总和 达到limit_total_salary参数的值，返回累加的人数给total_count。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE get_count_by_limit_total_salary(IN limit_total_salary DOUBLE,OUT total_count INT)<br><br>BEGIN<br>DECLARE sum_salary DOUBLE DEFAULT 0;  #记录累加的总工资<br>DECLARE cursor_salary DOUBLE DEFAULT 0; #记录某一个工资值<br>DECLARE emp_count INT DEFAULT 0; #记录循环个数<br>#定义游标<br>DECLARE emp_cursor CURSOR FOR SELECT salary FROM employees ORDER BY salary DESC;<br>#打开游标<br>OPEN emp_cursor;<br><br>REPEAT<br>#使用游标（从游标中获取数据）<br>FETCH emp_cursor INTO cursor_salary;<br>SET sum_salary = sum_salary + cursor_salary;<br>SET emp_count = emp_count + 1;<br><br>UNTIL sum_salary &gt;= limit_total_salary<br>END REPEAT;<br><br>SET total_count = emp_count;<br>#关闭游标<br>CLOSE emp_cursor;<br><br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h3 id="4-5-小结"><a href="#4-5-小结" class="headerlink" title="4.5 小结"></a>4.5 小结</h3><p>游标是 MySQL 的一个重要的功能，为 <code>逐条读取</code> 结果集中的数据，提供了完美的解决方案。跟在应用层 面实现相同的功能相比，游标可以在存储程序中使用，效率高，程序也更加简洁。</p><p>但同时也会带来一些性能问题，比如在使用游标的过程中，会对数据行进行 <code>加锁</code> 这样在业务并发量大的时候，不仅会影响业务之间的效率，还会 <code>消耗系统资源</code> ，造成内存不足，这是因为游标是在内存中进 行的处理。</p><p>建议：养成用完之后就关闭的习惯，这样才能提高系统的整体效率。</p><h2 id="补充：MySQL-8-0的新特性—全局变量的持久化"><a href="#补充：MySQL-8-0的新特性—全局变量的持久化" class="headerlink" title="补充：MySQL 8.0的新特性—全局变量的持久化"></a>补充：MySQL 8.0的新特性—全局变量的持久化</h2><p>在MySQL数据库中，全局变量可以通过SET GLOBAL语句来设置。例如，设置服务器语句超时的限制，可 以通过设置系统变量max_execution_time来实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET GLOBAL MAX_EXECUTION_TIME=2000;<br></code></pre></td></tr></table></figure><p>使用SET GLOBAL语句设置的变量值只会 <code>临时生效</code>。 <code>数据库重启</code>后，服务器又会从MySQL配置文件中读取 变量的默认值。 MySQL 8.0版本新增了 <code>SET PERSIST</code> 命令。例如，设置服务器的最大连接数为1000：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET PERSIST global max_connections = 1000;<br></code></pre></td></tr></table></figure><p>MySQL会将该命令的配置保存到数据目录下的 <code>mysqld-auto.cnf</code> 文件中，下次启动时会读取该文件，用 其中的配置来覆盖默认的配置文件。</p><p>举例：</p><p>查看全局变量max_connections的值，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#x27;%max_connections%&#x27;;<br>+------------------------+-------+<br>| Variable_name          | Value |<br>+------------------------+-------+<br>| max_connections        | 151   |<br>| mysqlx_max_connections | 100   |<br>+------------------------+-------+<br>2 rows in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><p>设置全局变量max_connections的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; set persist max_connections=1000;<br>Query OK, 0 rows affected (0.00 sec)<br></code></pre></td></tr></table></figure><p><code>重启MySQL服务器</code> ，再次查询max_connections的值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show variables like &#x27;%max_connections%&#x27;;<br>+------------------------+-------+<br>| Variable_name          | Value |<br>+------------------------+-------+<br>| max_connections        | 1000  |<br>| mysqlx_max_connections | 100   |<br>+------------------------+-------+<br>2 rows in set, 1 warning (0.00 sec<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>存储过程与函数</title>
    <link href="/2024/04/20/mysql/14%E3%80%81%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/"/>
    <url>/2024/04/20/mysql/14%E3%80%81%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>MySQL从5.0版本开始支持存储过程和函数。存储过程和函数能够将复杂的SQL逻辑封装在一起，应用程序无须关注存储过程和函数内部复杂的SQL逻辑，而只需要简单地调用存储过程和函数即可。</p><h2 id="1、存储过程概述"><a href="#1、存储过程概述" class="headerlink" title="1、存储过程概述"></a>1、存储过程概述</h2><h3 id="1-1-理解"><a href="#1-1-理解" class="headerlink" title="1.1 理解"></a>1.1 理解</h3><p><strong>含义</strong>：存储过程的英文是  <code>Stored Procedure</code> 。它的思想很简单，就是一组经过 <code>预先编译</code> 的 SQL 语句的封装。</p><p>执行过程：存储过程预先存储在 MySQL 服务器上，需要执行的时候，客户端只需要向服务器端发出调用 存储过程的命令，服务器端就可以把预先存储好的这一系列 SQL 语句全部执行。</p><p><strong>好处：</strong></p><p>1、简化操作，提高了sql语句的重用性，减少了开发程序员的压力</p><p>2、减少操作过程中的失误，提高效率</p><p>3、减少网络传输量（客户端不需要把所有的 SQL 语句通过网络发给服务器）</p><p>4、减少了 SQL 语句暴露在 网上的风险，也提高了数据查询的安全性</p><p><strong>和视图、函数的对比：</strong></p><p>它和视图有着同样的优点，清晰、安全，还可以减少网络传输量。不过它和视图不同，视图是 <code>虚拟表</code>， 通常不对底层数据表直接操作，而存储过程是程序化的 SQL，可以 <code>直接操作底层数据表</code> ，相比于面向集 合的操作方式，能够实现一些更复杂的数据处理。</p><p>一旦存储过程被创建出来，使用它就像使用函数一样简单，我们直接通过调用存储过程名即可。相较于 函数，存储过程是 <code>没有返回值</code>的。</p><h3 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2 分类"></a>1.2 分类</h3><p>存储过程的参数类型可以是IN、OUT和INOUT。根据这点分类如下：</p><p>1、没有参数（无参数无返回）</p><p>2、仅仅带 IN 类型（有参数无返回） </p><p>3、仅仅带 OUT 类型（无参数有返 回） </p><p>4、既带 IN 又带 OUT（有参数有返回） </p><p>5、带 INOUT（有参数有返回）</p><p>注意：IN、OUT、INOUT 都可以在一个存储过程中带多个。</p><h2 id="2、创建存储过程"><a href="#2、创建存储过程" class="headerlink" title="2、创建存储过程"></a>2、创建存储过程</h2><h3 id="2-1-语法分析"><a href="#2-1-语法分析" class="headerlink" title="2.1 语法分析"></a>2.1 语法分析</h3><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名 参数类型,...)<br>[characteristics ...]<br>BEGIN<br>存储过程体<br>END<br></code></pre></td></tr></table></figure><p>类似于Java中的方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">修饰符 返回类型 方法名(参数类型 参数名,...)&#123;<br>方法体;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><p>1、参数前面的符号的意思</p><ul><li><p><code>IN</code> ：当前参数为输入参数，也就是表示入参；</p><p>存储过程只是读取这个参数的值。如果没有定义参数种类，<code>默认就是 IN</code>，表示输入参数。</p></li><li><p><code>OUT</code> ：当前参数为输出参数，也就是表示出参；</p><p>执行完成之后，调用这个存储过程的客户端或者应用程序就可以读取这个参数返回的值了。</p></li><li><p><code>INOUT</code> ：当前参数既可以为输入参数，也可以为输出参数。</p></li></ul><p>2、形参类型可以是 MySQL数据库中的任意类型。</p><p>3、 <code>characteristics</code> 表示创建存储过程时指定的对存储过程的约束条件，其取值信息如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">LANGUAGE SQL<br>| [NOT] DETERMINISTIC<br>| &#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;<br>| SQL SECURITY &#123; DEFINER | INVOKER &#125;<br>| COMMENT &#x27;string&#x27;<br></code></pre></td></tr></table></figure><ul><li><code>LANGUAGE SQL</code> ：说明存储过程执行体是由SQL语句组成的，当前系统支持的语言为SQL。</li><li><code>[NOT] DETERMINISTIC</code> ：指明存储过程执行的结果是否确定。DETERMINISTIC表示结果是确定 的。每次执行存储过程时，相同的输入会得到相同的输出。NOT DETERMINISTIC表示结果是不确定 的，相同的输入可能得到不同的输出。如果没有指定任意一个值，默认为NOT DETERMINISTIC。</li><li><code>&#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;</code> ：指明子程序使 用SQL语句的限制。<ul><li>CONTAINS SQL表示当前存储过程的子程序包含SQL语句，但是并不包含读写数据的SQL语句；</li><li>NO SQL表示当前存储过程的子程序中不包含任何SQL语句；</li><li>READS SQL DATA表示当前存储过程的子程序中包含读数据的SQL语句；</li><li>MODIFIES SQL DATA表示当前存储过程的子程序中包含写数据的SQL语句。</li><li>默认情况下，系统会指定为CONTAINS SQL。</li></ul></li><li><code>SQL SECURITY &#123; DEFINER | INVOKER &#125;</code> ：执行当前存储过程的权限，即指明哪些用户能够执 行当前存储过程。<ul><li><code>DEFINER</code> 表示只有当前存储过程的创建者或者定义者才能执行当前存储过程；</li><li><code>INVOKER</code> 表示拥有当前存储过程的访问权限的用户能够执行当前存储过程。</li><li>如果没有设置相关的值，则MySQL默认指定值为DEFINER。</li></ul></li><li><code>COMMENT &#39;string&#39;</code> ：注释信息，可以用来描述存储过程。</li></ul><p>4、存储过程体中可以有多条 SQL 语句，如果仅仅一条SQL 语句，则可以省略 BEGIN 和 END </p><p>编写存储过程并不是一件简单的事情，可能存储过程中需要复杂的 SQL 语句。</p><blockquote><ol><li>BEGIN…END：BEGIN…END 中间包含了多个语句，每个语句都以（;）号为结束符。 </li><li>DECLARE：DECLARE 用来声明变量，使用的位置在于 BEGIN…END 语句中间，而且需要在其他语句使用之前进 行变量的声明。</li><li>SET：赋值语句，用于对变量进行赋值。 </li><li>SELECT… INTO：把从数据表中查询的结果存放到变量中，也就是为变量赋值。</li></ol></blockquote><p>5、需要设置新的结束标记</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER 新的结束标记<br></code></pre></td></tr></table></figure><p>因为MySQL默认的语句结束符号为分号‘;’。为了避免与存储过程中SQL语句结束符相冲突，需要使用 DELIMITER改变存储过程的结束符。</p><p>比如：“DELIMITER &#x2F;&#x2F;”语句的作用是将MySQL的结束符设置为&#x2F;&#x2F;，并以“END &#x2F;&#x2F;”结束存储过程。存储过程定 义完毕之后再使用“DELIMITER ;”恢复默认结束符。DELIMITER也可以指定其他符号作为结束符。</p><p>当使用DELIMITER命令时，应该避免使用反斜杠（‘\’）字符，因为反斜线是MySQL的转义字符。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER $<br>CREATE PROCEDURE 存储过程名(IN|OUT|INOUT 参数名  参数类型,...)<br>[characteristics ...]<br>BEGIN<br>sql语句1;<br>sql语句2;<br>END $<br></code></pre></td></tr></table></figure><h3 id="2-2-代码举例"><a href="#2-2-代码举例" class="headerlink" title="2.2 代码举例"></a>2.2 代码举例</h3><p>举例1：创建存储过程select_all_data()，查看 emps 表的所有数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER $<br><br>CREATE PROCEDURE select_all_data()<br>BEGIN<br> SELECT * FROM emps;<br>END $<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例2：创建存储过程avg_employee_salary()，返回所有员工的平均工资</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE avg_employee_salary ()<br>BEGIN<br> SELECT AVG(salary) AS avg_salary FROM emps;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例3：创建存储过程show_max_salary()，用来查看“emps”表的最高薪资值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE PROCEDURE show_max_salary()<br> LANGUAGE SQL<br> NOT DETERMINISTIC<br> CONTAINS SQL<br> SQL SECURITY DEFINER<br> COMMENT &#x27;查看最高薪资&#x27;<br> BEGIN<br> SELECT MAX(salary) FROM emps;<br> END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例4：创建存储过程show_min_salary()，查看“emps”表的最低薪资值。并将最低薪资通过OUT参数“ms” 输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE show_min_salary(OUT ms DOUBLE)<br> BEGIN<br> SELECT MIN(salary) INTO ms FROM emps;<br> END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例5：创建存储过程show_someone_salary()，查看“emps”表的某个员工的薪资，并用IN参数empname 输入员工姓名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE show_someone_salary(IN empname VARCHAR(20))<br> BEGIN<br> SELECT salary FROM emps WHERE ename = empname;<br> END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例6：创建存储过程show_someone_salary2()，查看“emps”表的某个员工的薪资，并用IN参数empname 输入员工姓名，用OUT参数empsalary输出员工薪资。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE show_someone_salary2(IN empname VARCHAR(20),OUT empsalary DOUBLE)<br> BEGIN<br> SELECT salary INTO empsalary FROM emps WHERE ename = empname;<br> END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>举例7：创建存储过程show_mgr_name()，查询某个员工领导的姓名，并用INOUT参数“empname”输入员 工姓名，输出领导的姓名。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">DELIMITER //<br><br>CREATE PROCEDURE show_mgr_name(INOUT empname VARCHAR(20))<br> BEGIN<br> SELECT ename INTO empname FROM emps<br> WHERE eid = (SELECT MID FROM emps WHERE ename=empname);<br> END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><h2 id="3、调用存储过程"><a href="#3、调用存储过程" class="headerlink" title="3、调用存储过程"></a>3、调用存储过程</h2><h3 id="3-1-调用格式"><a href="#3-1-调用格式" class="headerlink" title="3.1 调用格式"></a>3.1 调用格式</h3><p>存储过程有多种调用方法。存储过程必须使用CALL语句调用，并且存储过程和数据库相关，如果要执行 其他数据库中的存储过程，需要指定数据库名称，例如CALL dbname.procname。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CALL 存储过程名(实参列表)<br></code></pre></td></tr></table></figure><p><strong>格式：</strong></p><p>1、调用in模式的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CALL sp1(&#x27;值&#x27;);<br></code></pre></td></tr></table></figure><p> 2、调用out模式的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET @name;<br>CALL sp1(@name);<br>SELECT @name;<br></code></pre></td></tr></table></figure><p> 3、调用inout模式的参数：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET @name=值;<br>CALL sp1(@name);<br>SELECT @name;<br></code></pre></td></tr></table></figure><h3 id="3-2-代码举例"><a href="#3-2-代码举例" class="headerlink" title="3.2 代码举例"></a>3.2 代码举例</h3><p><strong>举例1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE PROCEDURE CountProc(IN sid INT,OUT num INT)<br>BEGIN<br> SELECT COUNT(*) INTO num FROM fruits <br> WHERE s_id = sid;<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用存储过程：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CALL CountProc (101, @num);<br>Query OK, 1 row affected (0.00 sec)<br></code></pre></td></tr></table></figure><p>查看返回结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT @num;<br></code></pre></td></tr></table></figure><p>该存储过程返回了指定 s_id&#x3D;101 的水果商提供的水果种类，返回值存储在num变量中，使用SELECT查 看，返回结果为3。</p><p><strong>举例2：</strong>创建存储过程，实现累加运算，计算 1+2+…+n 等于多少。具体的代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br>CREATE PROCEDURE `add_num`(IN n INT)<br>BEGIN<br>DECLARE i INT;<br>DECLARE sum INT;<br><br>SET i = 1;<br>SET sum = 0;<br>WHILE i &lt;= n DO<br>SET sum = sum + i;<br>SET i = i +1;<br>END WHILE;<br>SELECT sum;<br>END //<br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>如果你用的是 Navicat 工具，那么在编写存储过程的时候，Navicat 会自动设置 DELIMITER 为其他符号， 我们不需要再进行 DELIMITER 的操作。</p><p>直接使用  <code>CALL add_num(50);</code> 即可。这里我传入的参数为 50，也就是统计 1+2+…+50 的积累之和。</p><h3 id="3-3-如何调试"><a href="#3-3-如何调试" class="headerlink" title="3.3 如何调试"></a>3.3 如何调试</h3><p>在 MySQL 中，存储过程不像普通的编程语言（比如 VC++、Java 等）那样有专门的集成开发环境。因 此，你可以通过 SELECT 语句，把程序执行的中间结果查询出来，来调试一个 SQL 语句的正确性。调试 成功之后，把 SELECT 语句后移到下一个 SQL 语句之后，再调试下一个 SQL 语句。这样 <code>逐步推进</code> ，就可以完成对存储过程中所有操作的调试了。当然，你也可以把存储过程中的 SQL 语句复制出来，逐段单独 调试。</p><h2 id="4、存储函数的使用"><a href="#4、存储函数的使用" class="headerlink" title="4、存储函数的使用"></a>4、存储函数的使用</h2><p>前面学习了很多函数，使用这些函数可以对数据进行的各种处理操作，极大地提高用户对数据库的管理 效率。MySQL支持自定义函数，定义好之后，调用方式与调用MySQL预定义的系统函数一样。</p><h3 id="4-1-语法分析"><a href="#4-1-语法分析" class="headerlink" title="4.1 语法分析"></a>4.1 语法分析</h3><p>学过的函数：LENGTH、SUBSTR、CONCAT等</p><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">CREATE FUNCTION 函数名(参数名 参数类型,...) <br>RETURNS 返回值类型<br>[characteristics ...]<br>BEGIN<br>函数体   #函数体中肯定有 RETURN 语句<br>END<br></code></pre></td></tr></table></figure><p>说明：</p><p>1、参数列表：指定参数为IN、OUT或INOUT只对PROCEDURE是合法的，FUNCTION中总是默认为IN参数。</p><p>2、RETURNS type 语句表示函数返回数据的类型；</p><p>RETURNS子句只能对FUNCTION做指定，对函数而言这是 <code>强制</code> 的。它用来指定函数的返回类型，而且函数体必须包含一个 <code>RETURN value </code> 语句。</p><p>3、characteristic 创建函数时指定的对函数的约束。取值与创建存储过程时相同，这里不再赘述。</p><p>4、函数体也可以用BEGIN…END来表示SQL代码的开始和结束。如果函数体只有一条语句，也可以省略 BEGIN…END。</p><h3 id="4-2-调用存储函数"><a href="#4-2-调用存储函数" class="headerlink" title="4.2 调用存储函数"></a>4.2 调用存储函数</h3><p>在MySQL中，存储函数的使用方法与MySQL内部函数的使用方法是一样的。换言之，用户自己定义的存 储函数与MySQL内部函数是一个性质的。区别在于，存储函数是 <code>用户自己定义</code>的，而内部函数是MySQL的 <code>开发者定义</code> 的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT 函数名(实参列表)<br></code></pre></td></tr></table></figure><h3 id="4-3-代码举例"><a href="#4-3-代码举例" class="headerlink" title="4.3 代码举例"></a>4.3 代码举例</h3><p><strong>举例1：</strong></p><p>创建存储函数，名称为email_by_name()，参数定义为空，该函数查询Abel的email，并返回，数据类型为 字符串型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">DELIMITER //<br><br>CREATE FUNCTION email_by_name()<br>RETURNS VARCHAR(25)<br>DETERMINISTIC<br>CONTAINS SQL<br>BEGIN<br>RETURN (SELECT email FROM employees WHERE last_name = &#x27;Abel&#x27;);<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT email_by_name();<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong></p><p>创建存储函数，名称为email_by_id()，参数传入emp_id，该函数查询emp_id的email，并返回，数据类型 为字符串型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">DELIMITER //<br><br>CREATE FUNCTION email_by_id(emp_id INT)<br>RETURNS VARCHAR(25)<br>DETERMINISTIC<br>CONTAINS SQL<br>BEGIN<br>RETURN (SELECT email FROM employees WHERE employee_id = emp_id);<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SET @emp_id = 102;<br>SELECT email_by_id(102);<br></code></pre></td></tr></table></figure><p><strong>举例3：</strong></p><p>创建存储函数count_by_id()，参数传入dept_id，该函数查询dept_id部门的员工人数，并返回，数据类型为整型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELIMITER //<br><br>CREATE FUNCTION count_by_id(dept_id INT)<br>RETURNS INT<br>LANGUAGE SQL<br>NOT DETERMINISTIC<br>READS SQL DATA<br>SQL SECURITY DEFINER<br>COMMENT &#x27;查询部门平均工资&#x27;<br>BEGIN<br>RETURN (SELECT COUNT(*) FROM employees WHERE department_id = dept_id);<br>END //<br><br>DELIMITER ;<br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SET @dept_id = 50;<br>SELECT count_by_id(@dept_id);<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>若在创建存储函数中报错“ <code>you might want to use the less safe log_bin_trust_function_creators variable</code> ”，有两种处理方法：</p><ul><li>方式1：加上必要的函数特性“[NOT] DETERMINISTIC”和“{CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA}”</li><li>方式2：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SET GLOBAL log_bin_trust_function_creators = 1;<br></code></pre></td></tr></table></figure><h3 id="4-4-对比存储函数和存储过程"><a href="#4-4-对比存储函数和存储过程" class="headerlink" title="4.4 对比存储函数和存储过程"></a>4.4 对比存储函数和存储过程</h3><table><thead><tr><th></th><th>关键字</th><th>调用语法</th><th>返回值</th><th>应用场景</th></tr></thead><tbody><tr><td>存储过程</td><td>PROCEDURE</td><td>CALL 存储过程()</td><td>理解为有0个或多个</td><td>一般用于更新</td></tr><tr><td>存储函数</td><td>FUNCTION</td><td>SELECT 函数()</td><td>只能是一个</td><td>一般用于查询结果为一个值并返回时</td></tr></tbody></table><p>此外，<strong>存储函数可以放在查询语句中使用，存储过程不行</strong>。反之，存储过程的功能更加强大，包括能够 执行对表的操作（比如创建表，删除表等）和事务操作，这些功能是存储函数不具备的。</p><h2 id="5、存储过程和函数的查看、修改、删除"><a href="#5、存储过程和函数的查看、修改、删除" class="headerlink" title="5、存储过程和函数的查看、修改、删除"></a>5、存储过程和函数的查看、修改、删除</h2><h3 id="5-1-查看"><a href="#5-1-查看" class="headerlink" title="5.1 查看"></a>5.1 查看</h3><p>创建完之后，怎么知道我们创建的存储过程、存储函数是否成功了呢？</p><p>MySQL存储了存储过程和函数的状态信息，用户可以使用SHOW STATUS语句或SHOW CREATE语句来查 看，也可直接从系统的information_schema数据库中查询。这里介绍3种方法。</p><p><strong>1. 使用SHOW CREATE语句查看存储过程和函数的创建信息</strong></p><p>基本语法结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CREATE &#123;PROCEDURE | FUNCTION&#125; 存储过程名或函数名<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CREATE FUNCTION test_db.CountProc \G<br></code></pre></td></tr></table></figure><p> <strong>2. 使用SHOW STATUS语句查看存储过程和函数的状态信息</strong></p><p>基本语法结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW &#123;PROCEDURE | FUNCTION&#125; STATUS [LIKE &#x27;pattern&#x27;]<br></code></pre></td></tr></table></figure><p>这个语句返回子程序的特征，如数据库、名字、类型、创建者及创建和修改日期。</p><p>[LIKE ‘pattern’]：匹配存储过程或函数的名称，可以省略。当省略不写时，会列出MySQL数据库中存在的 所有存储过程或函数的信息。 举例：SHOW STATUS语句示例，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW PROCEDURE STATUS LIKE &#x27;SELECT%&#x27; \G <br>*************************** 1. row ***************************<br> Db: test_db<br> Name: SelectAllData<br> Type: PROCEDURE<br> Definer: root@localhost<br> Modified: 2021-10-16 15:55:07<br> Created: 2021-10-16 15:55:07<br> Security_type: DEFINER<br> Comment: <br>character_set_client: utf8mb4<br> collation_connection: utf8mb4_general_ci<br> Database Collation: utf8mb4_general_ci<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>3. 从information_schema.Routines表中查看存储过程和函数的信息</strong></p><p>MySQL中存储过程和函数的信息存储在information_schema数据库下的Routines表中。可以通过查询该表 的记录来查询存储过程和函数的信息。其基本语法形式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM information_schema.Routines<br>WHERE ROUTINE_NAME=&#x27;存储过程或函数的名&#x27; [AND ROUTINE_TYPE = &#123;&#x27;PROCEDURE|FUNCTION&#x27;&#125;];<br></code></pre></td></tr></table></figure><p>说明：如果在MySQL数据库中存在存储过程和函数名称相同的情况，最好指定ROUTINE_TYPE查询条件来 指明查询的是存储过程还是函数。</p><p>举例：从Routines表中查询名称为CountProc的存储函数的信息，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM information_schema.Routines<br>WHERE ROUTINE_NAME=&#x27;count_by_id&#x27;　AND　ROUTINE_TYPE = &#x27;FUNCTION&#x27; \G<br></code></pre></td></tr></table></figure><h3 id="5-2-修改"><a href="#5-2-修改" class="headerlink" title="5.2 修改"></a>5.2 修改</h3><p>修改存储过程或函数，不影响存储过程或函数功能，只是修改相关特性。使用ALTER语句实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER &#123;PROCEDURE | FUNCTION&#125; 存储过程或函数的名 [characteristic ...]<br></code></pre></td></tr></table></figure><p>其中，characteristic指定存储过程或函数的特性，其取值信息与创建存储过程、函数时的取值信息略有 不同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#123; CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA &#125;<br>| SQL SECURITY &#123; DEFINER | INVOKER &#125;<br>| COMMENT &#x27;string&#x27;<br></code></pre></td></tr></table></figure><ul><li><code>CONTAINS SQL</code> ，表示子程序包含SQL语句，但不包含读或写数据的语句。</li><li><code>NO SQL</code> ，表示子程序中不包含SQL语句。</li><li><code>READS SQL DATA</code> ，表示子程序中包含读数据的语句。</li><li><code>MODIFIES SQL DATA</code> ，表示子程序中包含写数据的语句。</li><li><code>SQL SECURITY &#123; DEFINER | INVOKER &#125;</code> ，指明谁有权限来执行。<ul><li><code>DEFINER</code> ，表示只有定义者自己才能够执行。</li><li><code>INVOKER</code> ，表示调用者可以执行。</li></ul></li><li><code>COMMENT &#39;string&#39;</code> ，表示注释信息。</li></ul><blockquote><p>修改存储过程使用ALTER PROCEDURE语句，修改存储函数使用ALTER FUNCTION语句。但是，这两 个语句的结构是一样的，语句中的所有参数也是一样的。</p></blockquote><p><strong>举例1：</strong></p><p>修改存储过程CountProc的定义。将读写权限改为MODIFIES SQL DATA，并指明调用者可以执行，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER　PROCEDURE　CountProc<br>MODIFIES SQL DATA<br>SQL SECURITY INVOKER ;<br></code></pre></td></tr></table></figure><p>查询修改后的信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT specific_name,sql_data_access,security_type<br>FROM information_schema.`ROUTINES`<br>WHERE routine_name = &#x27;CountProc&#x27; AND routine_type = &#x27;PROCEDURE&#x27;;<br></code></pre></td></tr></table></figure><p>结果显示，存储过程修改成功。从查询的结果可以看出，访问数据的权限（SQL_DATA_ ACCESS）已经变 成MODIFIES SQL DATA，安全类型（SECURITY_TYPE）已经变成INVOKER。</p><p><strong>举例2：</strong></p><p>修改存储函数CountProc的定义。将读写权限改为READS SQL DATA，并加上注释信息“FIND NAME”，代码 如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER　FUNCTION　CountProc<br>READS SQL DATA<br>COMMENT &#x27;FIND NAME&#x27; ;<br></code></pre></td></tr></table></figure><p>存储函数修改成功。从查询的结果可以看出，访问数据的权限（SQL_DATA_ACCESS）已经变成READS SQL DATA，函数注释（ROUTINE_COMMENT）已经变成FIND NAME。</p><h3 id="5-3-删除"><a href="#5-3-删除" class="headerlink" title="5.3 删除"></a>5.3 删除</h3><p>删除存储过程和函数，可以使用DROP语句，其语法结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP &#123;PROCEDURE | FUNCTION&#125; [IF EXISTS] 存储过程或函数的名<br></code></pre></td></tr></table></figure><p>IF EXISTS：如果程序或函数不存储，它可以防止发生错误，产生一个用SHOW WARNINGS查看的警告。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP PROCEDURE CountProc;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP FUNCTION CountProc;<br></code></pre></td></tr></table></figure><h2 id="6、关于存储过程使用的争议"><a href="#6、关于存储过程使用的争议" class="headerlink" title="6、关于存储过程使用的争议"></a>6、关于存储过程使用的争议</h2><p>尽管存储过程有诸多优点，但是对于存储过程的使用，<strong>一直都存在着很多争议</strong>，比如有些公司对于大型项目要求使用存储过程，而有些公司在手册中明确禁止使用存储过程，为什么这些公司对存储过程的使 用需求差别这么大呢？</p><h3 id="6-1-优点"><a href="#6-1-优点" class="headerlink" title="6.1 优点"></a>6.1 优点</h3><p><strong>1、存储过程可以一次编译多次使用。</strong>存储过程只在创建时进行编译，之后的使用都不需要重新编译， 这就提升了 SQL 的执行效率。</p><p><strong>2、可以减少开发工作量。</strong>将代码 <code>封装</code> 成模块，实际上是编程的核心思想之一，这样可以把复杂的问题 拆解成不同的模块，然后模块之间可以 <code>重复使用</code>，在减少开发工作量的同时，还能保证代码的结构清 晰。</p><p><strong>3、存储过程的安全性强。</strong>我们在设定存储过程的时候可以 <code>设置对用户的使用权限</code>，这样就和视图一样具 有较强的安全性。</p><p><strong>4、可以减少网络传输量。</strong>因为代码封装到存储过程中，每次使用只需要调用存储过程即可，这样就减 少了网络传输量。</p><p><strong>5、良好的封装性。</strong>在进行相对复杂的数据库操作时，原本需要使用一条一条的 SQL 语句，可能要连接 多次数据库才能完成的操作，现在变成了一次存储过程，只需要 <code>连接一次即可</code>。</p><h3 id="6-2-缺点"><a href="#6-2-缺点" class="headerlink" title="6.2 缺点"></a>6.2 缺点</h3><p>基于上面这些优点，不少大公司都要求大型项目使用存储过程，比如微软、IBM 等公司。但是国内的阿 里并不推荐开发人员使用存储过程，这是为什么呢？</p><blockquote><p>阿里开发规范</p><p>【强制】禁止使用存储过程，存储过程难以调试和扩展，更没有移植性。</p></blockquote><p>存储过程虽然有诸如上面的好处，但缺点也是很明显的。</p><p><strong>1、可移植性差。</strong>存储过程不能跨数据库移植，比如在 MySQL、Oracle 和 SQL Server 里编写的存储过 程，在换成其他数据库时都需要重新编写。</p><p><strong>2、调试困难。</strong>只有少数 DBMS 支持存储过程的调试。对于复杂的存储过程来说，开发和维护都不容 易。虽然也有一些第三方工具可以对存储过程进行调试，但要收费。</p><p><strong>3、存储过程的版本管理很困难。</strong>比如数据表索引发生变化了，可能会导致存储过程失效。我们在开发 软件的时候往往需要进行版本管理，但是存储过程本身没有版本控制，版本迭代更新的时候很麻烦。</p><p><strong>4、它不适合高并发的场景。</strong>高并发的场景需要减少数据库的压力，有时数据库会采用分库分表的方式，而且对可扩展性要求很高，在这种情况下，存储过程会变得难以维护， <code>增加数据库的压力</code>，显然就 不适用了。</p><p>小结：</p><p>存储过程既方便，又有局限性。尽管不同的公司对存储过程的态度不一，但是对于我们开发人员来说， 不论怎样，掌握存储过程都是必备的技能之一。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视图</title>
    <link href="/2024/04/18/mysql/13%E3%80%81%E8%A7%86%E5%9B%BE/"/>
    <url>/2024/04/18/mysql/13%E3%80%81%E8%A7%86%E5%9B%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="1、常见的数据库对象"><a href="#1、常见的数据库对象" class="headerlink" title="1、常见的数据库对象"></a>1、常见的数据库对象</h2><table><thead><tr><th>对象</th><th>描述</th></tr></thead><tbody><tr><td>表(TABLE)</td><td>表是存储数据的逻辑单元，以行和列的形式存在，列就是字段，行就是记录</td></tr><tr><td>数据字典</td><td>就是系统表，存放数据库相关信息的表。系统表的数据通常由数据库系统维护，程序员通常不应该修改，只可查看</td></tr><tr><td>约束 (CONSTRAINT)</td><td>执行数据校验的规则，用于保证数据完整性的规则</td></tr><tr><td>视图(VIEW)</td><td>一个或者多个数据表里的数据的逻辑显示，视图并不存储数据</td></tr><tr><td>索引(INDEX)</td><td>用于提高查询性能，相当于书的目录</td></tr><tr><td>存储过程 (PROCEDURE)</td><td>用于完成一次完整的业务处理，没有返回值，但可通过传出参数将多个值传给调用环境</td></tr><tr><td>存储函数 (FUNCTION)</td><td>用于完成一次特定的计算，具有一个返回值</td></tr><tr><td>触发器 (TRIGGER)</td><td>相当于一个事件监听器，当数据库发生特定事件后，触发器被触发，完成相应的处理</td></tr></tbody></table><h2 id="2、视图概述"><a href="#2、视图概述" class="headerlink" title="2、视图概述"></a>2、视图概述</h2><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404161936136.png" alt="image-20240416193643023" style="zoom:50%;" /><h3 id="2-1-为什么使用视图？"><a href="#2-1-为什么使用视图？" class="headerlink" title="2.1 为什么使用视图？"></a>2.1 为什么使用视图？</h3><p>视图一方面可以帮我们使用表的一部分而不是所有的表，另一方面也可以针对不同的用户制定不同的查 询视图。比如，针对一个公司的销售人员，我们只想给他看部分数据，而某些特殊的数据，比如采购的 价格，则不会提供给他。再比如，人员薪酬是个敏感的字段，那么只给某个级别以上的人员开放，其他 人的查询视图中则不提供这个字段。</p><p>刚才讲的只是视图的一个使用场景，实际上视图还有很多作用。最后，我们总结视图的优点。</p><h3 id="2-2-视图的理解"><a href="#2-2-视图的理解" class="headerlink" title="2.2 视图的理解"></a>2.2 视图的理解</h3><ul><li>视图是一种 <code>虚拟表</code>，本身是 <code>不具有数据</code> 的，占用很少的内存空间，它是 SQL 中的一个重要概念。</li><li><strong>视图建立在已有表的基础上</strong>, 视图赖以建立的这些表称为<strong>基表</strong>。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404161938292.png" alt="image-20240416193813251" style="zoom:50%;" /><ul><li>视图的创建和删除只影响视图本身，不影响对应的基表。但是当对视图中的数据进行增加、删除和 修改操作时，数据表中的数据会相应地发生变化，反之亦然。</li><li>向视图提供数据内容的语句为 SELECT 语句, 可以将视图理解为<strong>存储起来的 SELECT 语句</strong><ul><li>在数据库中，视图不会保存数据，数据真正保存在数据表中。当对视图中的数据进行增加、删 除和修改操作时，数据表中的数据会相应地发生变化；反之亦然。</li></ul></li><li>视图，是向用户提供基表数据的另一种表现形式。通常情况下，小型项目的数据库可以不使用视 图，但是在大型项目中，以及数据表比较复杂的情况下，视图的价值就凸显出来了，它可以帮助我 们把经常查询的结果集放到虚拟表中，提升使用效率。理解和使用起来都非常方便。</li></ul><h2 id="3、创建视图"><a href="#3、创建视图" class="headerlink" title="3、创建视图"></a>3、创建视图</h2><ul><li><strong>在 CREATE VIEW 语句中嵌入子查询</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE [OR REPLACE] <br>[ALGORITHM = &#123;UNDEFINED | MERGE | TEMPTABLE&#125;] <br>VIEW 视图名称 [(字段列表)]<br>AS 查询语句<br>[WITH [CASCADED|LOCAL] CHECK OPTION]<br></code></pre></td></tr></table></figure><ul><li>精简版</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE VIEW 视图名称 <br>AS 查询语句<br></code></pre></td></tr></table></figure><h3 id="3-1-创建单表视图"><a href="#3-1-创建单表视图" class="headerlink" title="3.1 创建单表视图"></a>3.1 创建单表视图</h3><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">CREATE VIEW empvu80<br>AS <br>SELECT  employee_id, last_name, salary<br>FROM    employees<br>WHERE   department_id = 80;<br></code></pre></td></tr></table></figure><p>查询视图：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT *<br>FROM    salvu80<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404161941753.png" alt="image-20240416194110700" style="zoom:50%;" /><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">CREATE VIEW emp_year_salary (ename,year_salary)<br>AS <br>SELECT ename,salary*12*(1+IFNULL(commission_pct,0))<br>FROM t_employee;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">CREATE VIEW salvu50<br>AS <br>SELECT  employee_id ID_NUMBER, last_name NAME,salary*12 ANN_SALARY<br>FROM    employees<br>WHERE   department_id = 50;<br></code></pre></td></tr></table></figure><p>说明1：实际上就是我们在 SQL 查询语句的基础上封装了视图 VIEW，这样就会基于 SQL 语句的结果集形 成一张虚拟表。</p><p>说明2：在创建视图时，没有在视图名后面指定字段列表，则视图中字段列表默认和SELECT语句中的字 段列表一致。如果SELECT语句中给字段取了别名，那么视图中的字段名和别名相同。</p><h3 id="3-2-创建多表联合视图"><a href="#3-2-创建多表联合视图" class="headerlink" title="3.2 创建多表联合视图"></a>3.2 创建多表联合视图</h3><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">CREATE VIEW empview <br>AS <br>SELECT employee_id emp_id,last_name NAME,department_name<br>FROM employees e,departments d<br>WHERE e.department_id = d.department_id;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">CREATE VIEW emp_dept<br>AS <br>SELECT ename,dname<br>FROM t_employee LEFT JOIN t_department<br>ON t_employee.did = t_department.did;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">CREATE VIEW dept_sum_vu<br>(name, minsal, maxsal, avgsal)<br>AS <br>SELECT d.department_name, MIN(e.salary), MAX(e.salary),AVG(e.salary)<br>FROM employees e, departments d<br>WHERE e.department_id = d.department_id <br>GROUP BY  d.department_name;<br></code></pre></td></tr></table></figure><ul><li><strong>利用视图对数据进行格式化</strong></li></ul><p>我们经常需要输出某个格式的内容，比如我们想输出员工姓名和对应的部门名，对应格式为 emp_name(department_name)，就可以使用视图来完成数据格式化的操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">CREATE VIEW emp_depart<br>AS<br>SELECT CONCAT(last_name,&#x27;(&#x27;,department_name,&#x27;)&#x27;) AS emp_dept<br>FROM employees e JOIN departments d<br>WHERE e.department_id = d.department_id<br></code></pre></td></tr></table></figure><h3 id="3-3-基于视图创建视图"><a href="#3-3-基于视图创建视图" class="headerlink" title="3.3 基于视图创建视图"></a>3.3 基于视图创建视图</h3><p>当我们创建好一张视图之后，还可以在它的基础上继续创建视图。</p><p>举例：联合“emp_dept”视图和“emp_year_salary”视图查询员工姓名、部门名称、年薪信息创建 “emp_dept_ysalary”视图。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">CREATE VIEW emp_dept_ysalary<br>AS <br>SELECT emp_dept.ename,dname,year_salary<br>FROM emp_dept INNER JOIN emp_year_salary<br>ON emp_dept.ename = emp_year_salary.ename;<br></code></pre></td></tr></table></figure><h2 id="4、查看视图"><a href="#4、查看视图" class="headerlink" title="4、查看视图"></a>4、查看视图</h2><p>语法1：查看数据库的表对象、视图对象</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW TABLES;<br></code></pre></td></tr></table></figure><p>语法2：查看视图的结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESC / DESCRIBE 视图名称;<br></code></pre></td></tr></table></figure><p>语法3：查看视图的属性信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MySQL"># 查看视图信息（显示数据表的存储引擎、版本、数据行数和数据大小等）<br>SHOW TABLE STATUS LIKE &#x27;视图名称&#x27;\G<br></code></pre></td></tr></table></figure><p>执行结果显示，注释Comment为VIEW，说明该表为视图，其他的信息为NULL，说明这是一个虚表。 </p><p>语法4：查看视图的详细定义信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SHOW CREATE VIEW 视图名称;<br></code></pre></td></tr></table></figure><h2 id="5、更新视图的数据"><a href="#5、更新视图的数据" class="headerlink" title="5、更新视图的数据"></a>5、更新视图的数据</h2><h3 id="5-1-一般情况"><a href="#5-1-一般情况" class="headerlink" title="5.1 一般情况"></a>5.1 一般情况</h3><p>MySQL支持使用INSERT、UPDATE和DELETE语句对视图中的数据进行插入、更新和删除操作。当视图中的 数据发生变化时，数据表中的数据也会发生变化，反之亦然。</p><p>举例：UPDATE操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT ename,tel FROM emp_tel WHERE ename = &#x27;孙洪亮&#x27;;<br>+---------+-------------+<br>| ename   | tel         |<br>+---------+-------------+<br>| 孙洪亮   | 13789098765 |<br>+---------+-------------+<br>1 row in set (0.01 sec)<br><br>mysql&gt; UPDATE emp_tel SET tel = &#x27;13789091234&#x27; WHERE ename = &#x27;孙洪亮&#x27;;<br>Query OK, 1 row affected (0.01 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT ename,tel FROM emp_tel WHERE ename = &#x27;孙洪亮&#x27;;<br>+---------+-------------+<br>| ename   | tel         |<br>+---------+-------------+<br>|   孙洪亮 | 13789091234 |<br>+---------+-------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT ename,tel FROM t_employee WHERE ename = &#x27;孙洪亮&#x27;;<br>+---------+-------------+<br>| ename   | tel         |<br>+---------+-------------+<br>| 孙洪亮   | 13789091234 |<br>+---------+-------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>举例：DELETE操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT ename,tel FROM emp_tel WHERE ename = &#x27;孙洪亮&#x27;;<br>+---------+-------------+<br>| ename     | tel       |<br>+---------+-------------+<br>| 孙洪亮   | 13789091234 |<br>+---------+-------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; DELETE FROM emp_tel  WHERE ename = &#x27;孙洪亮&#x27;;<br>Query OK, 1 row affected (0.01 sec)<br><br>mysql&gt; SELECT ename,tel FROM emp_tel WHERE ename = &#x27;孙洪亮&#x27;;<br>Empty set (0.00 sec)<br><br>mysql&gt; SELECT ename,tel FROM t_employee WHERE ename = &#x27;孙洪亮&#x27;;<br>Empty set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="5-2-不可更新的视图"><a href="#5-2-不可更新的视图" class="headerlink" title="5.2 不可更新的视图"></a>5.2 不可更新的视图</h3><p>要使视图可更新，视图中的行和底层基本表中的行之间必须存在 <code>一对一</code> 的关系。另外当视图定义出现如下情况时，视图不支持更新操作：</p><ul><li>在定义视图的时候指定了“ALGORITHM &#x3D; TEMPTABLE”，视图将不支持INSERT和DELETE操作；</li><li>视图中不包含基表中所有被定义为非空又未指定默认值的列，视图将不支持INSERT操作；</li><li>在定义视图的SELECT语句中使用了 <code>JOIN联合查询</code> ，视图将不支持INSERT和DELETE操作；</li><li>在定义视图的SELECT语句后的字段列表中使用了 <code>学表达式</code>或 <code>子查询</code>，视图将不支持INSERT，也 不支持UPDATE使用了数学表达式、子查询的字段值；</li><li>在定义视图的SELECT语句后的字段列表中使用 <code>DISTINCT</code> 、 <code>聚合函数</code>、 <code>GROUP BY</code> 、 <code>HAVING</code> 、 <code>UNION</code> 等，视图将不支持INSERT、UPDATE、DELETE；</li><li>视图定义基于一个 <code>不可更新视图</code>；</li><li>常量视图。</li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; CREATE OR REPLACE VIEW emp_dept<br>-&gt; (ename,salary,birthday,tel,email,hiredate,dname)<br>-&gt; AS SELECT ename,salary,birthday,tel,email,hiredate,dname<br>-&gt; FROM t_employee INNER JOIN t_department<br>-&gt; ON t_employee.did = t_department.did ;<br>Query OK, 0 rows affected (0.01 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; INSERT INTO emp_dept(ename,salary,birthday,tel,email,hiredate,dname)<br>-&gt; VALUES(&#x27;张三&#x27;,15000,&#x27;1995-01-08&#x27;,&#x27;18201587896&#x27;,<br>    -&gt; &#x27;zs@atguigu.com&#x27;,&#x27;2022-02-14&#x27;,&#x27;新部门&#x27;);<br>    <br>#ERROR 1393 (HY000): Can not modify more than one base table through a join view &#x27;atguigu_chapter9.emp_dept&#x27;<br></code></pre></td></tr></table></figure><p>从上面的SQL执行结果可以看出，在定义视图的SELECT语句中使用了JOIN联合查询，视图将不支持更新操作。</p><blockquote><p>虽然可以更新视图数据，但总的来说，视图作为 <code>虚拟表</code>，主要用于 <code>方便查询</code>，不建议更新视图的 数据。<strong>对视图数据的更改，都是通过对实际数据表里数据的操作来完成的</strong>。</p></blockquote><h2 id="6、修改、删除视图"><a href="#6、修改、删除视图" class="headerlink" title="6、修改、删除视图"></a>6、修改、删除视图</h2><h3 id="6-1-修改视图"><a href="#6-1-修改视图" class="headerlink" title="6.1 修改视图"></a>6.1 修改视图</h3><p>方式1：使用CREATE <strong>OR REPLACE</strong> VIEW 子句<strong>修改视图</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE OR REPLACE VIEW empvu80<br>(id_number, name, sal, department_id)<br>AS <br>SELECT  employee_id, first_name || &#x27; &#x27; || last_name, salary, department_id<br>FROM employees<br>WHERE department_id = 80;<br></code></pre></td></tr></table></figure><blockquote><p>说明：CREATE VIEW 子句中各列的别名应和子查询中各列相对应。</p></blockquote><p>方式2：ALTER VIEW</p><p>修改视图的语法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER VIEW 视图名称 <br>AS<br>查询语句<br></code></pre></td></tr></table></figure><h3 id="6-2-删除视图"><a href="#6-2-删除视图" class="headerlink" title="6.2 删除视图"></a>6.2 删除视图</h3><ul><li><p>删除视图只是删除视图的定义，并不会删除基表的数据。</p></li><li><p>删除视图的语法是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP VIEW IF EXISTS 视图名称;<br>DROP VIEW IF EXISTS 视图名称1,视图名称2,视图名称3,...;<br></code></pre></td></tr></table></figure></li><li><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP VIEW empvu80;<br></code></pre></td></tr></table></figure></li><li><p>说明：基于视图a、b创建了新的视图c，如果将视图a或者视图b删除，会导致视图c的查询失败。这 样的视图c需要手动删除或修改，否则影响使用。</p></li></ul><h2 id="7、总结"><a href="#7、总结" class="headerlink" title="7、总结"></a>7、总结</h2><h3 id="7-1-视图优点"><a href="#7-1-视图优点" class="headerlink" title="7.1 视图优点"></a>7.1 视图优点</h3><p><strong>1. 操作简单</strong></p><p>将经常使用的查询操作定义为视图，可以使开发人员不需要关心视图对应的数据表的结构、表与表之间 的关联关系，也不需要关心数据表之间的业务逻辑和查询条件，而只需要简单地操作视图即可，极大简 化了开发人员对数据库的操作。</p><p><strong>2. 减少数据冗余</strong></p><p>视图跟实际数据表不一样，它存储的是查询语句。所以，在使用的时候，我们要通过定义视图的查询语 句来获取结果集。而视图本身不存储数据，不占用数据存储的资源，减少了数据冗余。</p><p><strong>3. 数据安全</strong></p><p>MySQL将用户对数据的 <code>访问限制</code> 在某些数据的结果集上，而这些数据的结果集可以使用视图来实现。用户不必直接查询或操作数据表。这也可以理解为视图具有 <code>隔离性</code> 。视图相当于在用户和实际的数据表之间加了一层虚拟表。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404162002042.png" alt="image-20240416200235003" style="zoom:50%;" /><p>同时，MySQL可以根据权限将用户对数据的访问限制在某些视图上，<strong>用户不需要查询数据表，可以直接 通过视图获取数据表中的信息</strong>。这在一定程度上保障了数据表中数据的安全性。</p><p><strong>4. 适应灵活多变的需求</strong> 当业务系统的需求发生变化后，如果需要改动数据表的结构，则工作量相对较 大，可以使用视图来减少改动的工作量。这种方式在实际工作中使用得比较多。</p><p><strong>5. 能够分解复杂的查询逻辑</strong> 数据库中如果存在复杂的查询逻辑，则可以将问题进行分解，创建多个视图 获取数据，再将创建的多个视图结合起来，完成复杂的查询逻辑。</p><h3 id="7-2-视图不足"><a href="#7-2-视图不足" class="headerlink" title="7.2 视图不足"></a>7.2 视图不足</h3><p>如果我们在实际数据表的基础上创建了视图，那么，<strong>如果实际数据表的结构变更了，我们就需要及时对 相关的视图进行相应的维护</strong>。特别是嵌套的视图（就是在视图的基础上创建视图），维护会变得比较复杂， <code>可读性不好</code>，容易变成系统的潜在隐患。因为创建视图的 SQL 查询可能会对字段重命名，也可能包含复杂的逻辑，这些都会增加维护的成本。</p><p>实际项目中，如果视图过多，会导致数据库维护成本的问题。</p><p>所以，在创建视图的时候，你要结合实际项目需求，综合考虑视图的优点和不足，这样才能正确使用视 图，使系统整体达到最优。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>约束</title>
    <link href="/2024/04/16/mysql/12%E3%80%81%E7%BA%A6%E6%9D%9F/"/>
    <url>/2024/04/16/mysql/12%E3%80%81%E7%BA%A6%E6%9D%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="1、约束-constraint-概述"><a href="#1、约束-constraint-概述" class="headerlink" title="1、约束(constraint)概述"></a>1、约束(constraint)概述</h2><h3 id="1-1-为什么需要约束"><a href="#1-1-为什么需要约束" class="headerlink" title="1.1 为什么需要约束"></a>1.1 为什么需要约束</h3><p>数据完整性（Data Integrity）是指数据的精确性（Accuracy）和可靠性（Reliability）。它是防止数据库中 存在不符合语义规定的数据和防止因错误信息的输入输出造成无效操作或错误信息而提出的。</p><p>为了保证数据的完整性，SQL规范以约束的方式对<strong>表数据进行额外的条件限制</strong>。从以下四个方面考虑：</p><ul><li><code>实体完整性（Entity Integrity）</code> ：例如，同一个表中，不能存在两条完全相同无法区分的记录</li><li><code>域完整性（Domain Integrity）</code> ：例如：年龄范围0-120，性别范围“男&#x2F;女”</li><li><code>引用完整性（Referential Integrity）</code> ：例如：员工所在部门，在部门表中要能找到这个部门</li><li><code>用户自定义完整性（User-defined Integrity）</code> ：例如：用户名唯一、密码不能为空等，本部门 经理的工资不得高于本部门职工的平均工资的5倍。</li></ul><h3 id="1-2-什么是约束"><a href="#1-2-什么是约束" class="headerlink" title="1.2 什么是约束"></a>1.2 什么是约束</h3><p>约束是表级的强制规定。</p><p>可以在<strong>创建表时规定约束（通过 CREATE TABLE 语句）</strong>，或者在<strong>表创建之后通过 ALTER TABLE 语句规定约束</strong>。</p><h3 id="1-3-约束的分类"><a href="#1-3-约束的分类" class="headerlink" title="1.3 约束的分类"></a>1.3 约束的分类</h3><ul><li><strong>根据约束数据列的限制</strong>，约束可分为：<ul><li><strong>单列约束：</strong>每个约束只约束一列</li><li><strong>多列约束：</strong>每个约束可约束多列数据</li></ul></li><li><strong>根据约束的作用范围</strong>，约束可分为：<ul><li><strong>列级约束</strong>：只能作用在一个列上，跟在列的定义后面</li><li><strong>表级约束</strong>：可以作用在多个列上，不与列一起，而是单独定义</li></ul></li></ul><table><thead><tr><th></th><th>位置</th><th>支持的约束类型</th><th>是否可以起约束名</th></tr></thead><tbody><tr><td>列级约束：</td><td>列的后面</td><td>语法都支持，但外键没有效果</td><td>不可以</td></tr><tr><td>表级约束：</td><td>所有列的下面</td><td>默认和非空不支持，其他支持</td><td>可以（主键没有效果）</td></tr></tbody></table><ul><li>根据约束起的作用，约束可分为：<ul><li>NOT NULL 非空约束，规定某个字段不能为空</li><li>UNIQUE 唯一约束，规定某个字段在整个表中是唯一的</li><li>PRIMARY KEY 主键(非空且唯一)约束</li><li>FOREIGN KEY 外键约束</li><li>CHECK 检查约束</li><li>DEFAULT 默认值约束</li></ul></li></ul><blockquote><p>注意： MySQL不支持check约束，但可以使用check约束，而没有任何效果</p></blockquote><ul><li>查看某个表已有的约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#information_schema数据库名（系统库）<br>#table_constraints表名称（专门存储各个表的约束）<br>SELECT * FROM information_schema.table_constraints <br>WHERE table_name = &#x27;表名称&#x27;;<br></code></pre></td></tr></table></figure><h2 id="2、非空约束"><a href="#2、非空约束" class="headerlink" title="2、非空约束"></a>2、非空约束</h2><h3 id="2-1-作用"><a href="#2-1-作用" class="headerlink" title="2.1 作用"></a>2.1 作用</h3><p>限定某个字段&#x2F;某列的值不允许为空</p><img src="C:\Users\hangw\AppData\Roaming\Typora\typora-user-images\image-20240416144423000.png" alt="image-20240416144423000" style="zoom:67%;" /><h3 id="2-2-关键字"><a href="#2-2-关键字" class="headerlink" title="2.2 关键字"></a>2.2 关键字</h3><p>NOT NULL</p><h3 id="2-3-特点"><a href="#2-3-特点" class="headerlink" title="2.3 特点"></a>2.3 特点</h3><ul><li>默认，所有的类型的值都可以是NULL，包括INT、FLOAT等数据类型</li><li>非空约束只能出现在表对象的列上，只能某个列单独限定非空，不能组合非空</li><li>一个表可以有很多列都分别限定了非空</li><li>空字符串’’不等于NULL，0也不等于NULL</li></ul><h3 id="2-4-添加非空约束"><a href="#2-4-添加非空约束" class="headerlink" title="2.4 添加非空约束"></a>2.4 添加非空约束</h3><p>（1）建表时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE 表名称(<br>字段名  数据类型,<br>字段名  数据类型 NOT NULL,  <br>字段名  数据类型 NOT NULL<br>);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE emp(<br> id INT(10) NOT NULL,<br> NAME VARCHAR(20) NOT NULL,<br> sex CHAR NULL<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE student(<br> sid int,<br> sname varchar(20) not null,<br> tel char(11) ,<br> cardid char(18) not null<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student values(1,&#x27;张三&#x27;,&#x27;13710011002&#x27;,&#x27;110222198912032545&#x27;); #成功<br><br>insert into student values(2,&#x27;李四&#x27;,&#x27;13710011002&#x27;,null);#身份证号为空<br>ERROR 1048 (23000): Column &#x27;cardid&#x27; cannot be null<br><br>insert into student values(2,&#x27;李四&#x27;,null,&#x27;110222198912032546&#x27;);#成功，tel允许为空<br><br>insert into student values(3,null,null,&#x27;110222198912032547&#x27;);#失败<br>ERROR 1048 (23000): Column &#x27;sname&#x27; cannot be null<br></code></pre></td></tr></table></figure><p>（2）建表后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 not null;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE emp<br>MODIFY sex VARCHAR(30) NOT NULL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table student modify sname varchar(20) not null;<br></code></pre></td></tr></table></figure><h3 id="2-5-删除非空约束"><a href="#2-5-删除非空约束" class="headerlink" title="2.5 删除非空约束"></a>2.5 删除非空约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 NULL;#去掉not null，相当于修改某个非注解字段，该字段允许为空<br>或 <br>alter table 表名称 modify 字段名 数据类型;#去掉not null，相当于修改某个非注解字段，该字段允许为空<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE emp<br>MODIFY sex VARCHAR(30) NULL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE emp<br>MODIFY NAME VARCHAR(15) DEFAULT &#x27;abc&#x27; NULL;<br></code></pre></td></tr></table></figure><h2 id="3、唯一性约束"><a href="#3、唯一性约束" class="headerlink" title="3、唯一性约束"></a>3、唯一性约束</h2><h3 id="3-1-作用"><a href="#3-1-作用" class="headerlink" title="3.1 作用"></a>3.1 作用</h3><p>用来限制某个字段&#x2F;某列的值不能重复。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404161457176.png" alt="image-20240416145724125" style="zoom:67%;" /><h3 id="3-2-关键字"><a href="#3-2-关键字" class="headerlink" title="3.2 关键字"></a>3.2 关键字</h3><p>UNIQUE</p><h3 id="3-3-特点"><a href="#3-3-特点" class="headerlink" title="3.3 特点"></a>3.3 特点</h3><ul><li>同一个表可以有多个唯一约束。</li><li>唯一约束可以是某一个列的值唯一，也可以多个列组合的值唯一。</li><li>唯一性约束允许列值为空。</li><li>在创建唯一约束的时候，如果不给唯一约束命名，就默认和列名相同。</li><li><strong>MySQL会给唯一约束的列上默认创建一个唯一索引。</strong></li></ul><h3 id="3-4-添加唯一约束"><a href="#3-4-添加唯一约束" class="headerlink" title="3.4 添加唯一约束"></a>3.4 添加唯一约束</h3><p>（1）建表时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br> 字段名  数据类型,<br> 字段名  数据类型  unique,  <br> 字段名  数据类型  unique key,<br> 字段名  数据类型<br>);<br> <br>create table 表名称(<br>字段名  数据类型,<br>字段名  数据类型,  <br>字段名  数据类型,<br> [constraint 约束名] unique key(字段名)<br>);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student(<br> sid int,<br> sname varchar(20),<br> tel char(11) unique,<br> cardid char(18) unique key<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE t_course(<br> cid INT UNIQUE,<br> cname VARCHAR(100) UNIQUE,<br> description VARCHAR(200)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE USER(<br> id INT NOT NULL,<br> NAME VARCHAR(25),<br> PASSWORD VARCHAR(16),-- 使用表级约束语法<br> CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD)<br>);<br></code></pre></td></tr></table></figure><blockquote><p>表示用户名和密码组合不能重复</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student values(1,&#x27;张三&#x27;,&#x27;13710011002&#x27;,&#x27;101223199012015623&#x27;);<br>insert into student values(2,&#x27;李四&#x27;,&#x27;13710011003&#x27;,&#x27;101223199012015624&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from student;<br>+-----+-------+-------------+--------------------+<br>| sid | sname | tel         | cardid             |<br>+-----+-------+-------------+--------------------+<br>|   1 | 张三  | 13710011002 | 101223199012015623 |<br>|   2 | 李四  | 13710011003 | 101223199012015624 |<br>+-----+-------+-------------+--------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student values(3,&#x27;王五&#x27;,&#x27;13710011004&#x27;,&#x27;101223199012015624&#x27;); #身份证号重复<br>ERROR 1062 (23000): Duplicate entry &#x27;101223199012015624&#x27; for key &#x27;cardid&#x27;<br><br>insert into student values(3,&#x27;王五&#x27;,&#x27;13710011003&#x27;,&#x27;101223199012015625&#x27;); <br>ERROR 1062 (23000): Duplicate entry &#x27;13710011003&#x27; for key &#x27;tel&#x27;<br></code></pre></td></tr></table></figure><p>（2）建表后指定唯一键约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#字段列表中如果是一个字段，表示该列的值唯一。如果是两个或更多个字段，那么复合唯一，即多个字段的组合是唯一的<br>#方式1：<br>alter table 表名称 add unique key(字段列表); <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式2：<br>alter table 表名称 modify 字段名 字段类型 unique;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE USER <br>ADD UNIQUE(NAME,PASSWORD);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE USER <br>ADD CONSTRAINT uk_name_pwd UNIQUE(NAME,PASSWORD);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE USER <br>MODIFY NAME VARCHAR(20) UNIQUE;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table student(<br> sid int primary key,<br> sname varchar(20),<br> tel char(11) ,<br> cardid char(18) <br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table student add unique key(tel);<br>alter table student add unique key(cardid);<br></code></pre></td></tr></table></figure><h3 id="3-5-关于复合唯一约束"><a href="#3-5-关于复合唯一约束" class="headerlink" title="3.5 关于复合唯一约束"></a>3.5 关于复合唯一约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br> 字段名  数据类型,<br> 字段名  数据类型,  <br> 字段名  数据类型,<br> unique key(字段列表) #字段列表中写的是多个字段名，多个字段名用逗号分隔，表示那么是复合唯一，即多个字段的组合是唯一的<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#学生表<br>create table student(<br> sid int,    #学号<br> sname varchar(20),          #姓名<br> tel char(11) unique key,  #电话<br> cardid char(18) unique key #身份证号<br>);<br> <br>#课程表<br>create table course(<br> cid int,  #课程编号<br> cname varchar(20)     #课程名称<br>);<br> <br>#选课表<br>create table student_course(<br> id int,<br> sid int,<br> cid int,<br> score int,<br> unique key(sid,cid)  #复合唯一<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student values(1,&#x27;张三&#x27;,&#x27;13710011002&#x27;,&#x27;101223199012015623&#x27;);#成功<br>insert into student values(2,&#x27;李四&#x27;,&#x27;13710011003&#x27;,&#x27;101223199012015624&#x27;);#成功<br>insert into course values(1001,&#x27;Java&#x27;),(1002,&#x27;MySQL&#x27;);#成功<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from student;<br>+-----+-------+-------------+--------------------+<br>| sid | sname | tel         | cardid             |<br>+-----+-------+-------------+--------------------+<br>|   1 | 张三  | 13710011002 | 101223199012015623 |<br>|   2 | 李四  | 13710011003 | 101223199012015624 |<br>+-----+-------+-------------+--------------------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select * from course;<br>+------+-------+<br>| cid  | cname |<br>+------+-------+<br>| 1001 | Java  |<br>| 1002 | MySQL |<br>+------+-------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student_course values<br>(1, 1, 1001, 89),<br>(2, 1, 1002, 90),<br>(3, 2, 1001, 88),<br>(4, 2, 1002, 56);#成功<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from student_course;<br>+----+------+------+-------+<br>| id | sid  | cid  | score |<br>+----+------+------+-------+<br>|  1 |    1 | 1001 |    89 |<br>|  2 |    1 | 1002 |    90 |<br>|  3 |    2 | 1001 |    88 |<br>|  4 |    2 | 1002 |    56 |<br>+----+------+------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student_course values (5, 1, 1001, 88);#失败<br><br>#ERROR 1062 (23000): Duplicate entry &#x27;1-1001&#x27; for key &#x27;sid&#x27;   违反sid-cid的复合唯一<br></code></pre></td></tr></table></figure><h3 id="3-6-删除唯一约束"><a href="#3-6-删除唯一约束" class="headerlink" title="3.6 删除唯一约束"></a>3.6 删除唯一约束</h3><ul><li>添加唯一性约束的列上也会自动创建唯一索引。</li><li>删除唯一约束只能通过删除唯一索引的方式删除。</li><li>删除时需要指定唯一索引名，唯一索引名就和唯一约束名一样。</li><li>如果创建唯一约束时未指定名称，如果是单列，就默认和列名相同；如果是组合列，那么默认和() 中排在第一个的列名相同。也可以自定义唯一性约束名。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名&#x27;; #查看都有哪些约束<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE USER <br>DROP INDEX uk_name_pwd;<br></code></pre></td></tr></table></figure><blockquote><p>注意：可以通过  <code>show index from</code> 表名称; 查看表的索引</p></blockquote><h2 id="4、PRIMARY-KEY-约束"><a href="#4、PRIMARY-KEY-约束" class="headerlink" title="4、PRIMARY KEY 约束"></a>4、PRIMARY KEY 约束</h2><h3 id="4-1-作用"><a href="#4-1-作用" class="headerlink" title="4.1 作用"></a>4.1 作用</h3><p>用来唯一标识表中的一行记录。</p><h3 id="4-2-关键字"><a href="#4-2-关键字" class="headerlink" title="4.2 关键字"></a>4.2 关键字</h3><p>primary key</p><h3 id="4-3-特点"><a href="#4-3-特点" class="headerlink" title="4.3 特点"></a>4.3 特点</h3><ul><li>主键约束相当于<strong>唯一约束+非空约束的组合</strong>，主键约束列不允许重复，也不允许出现空值。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404161519144.png" alt="image-20240416151904085" style="zoom:67%;" /><ul><li>一个表最多只能有一个主键约束，建立主键约束可以在列级别创建，也可以在表级别上创建。</li><li>主键约束对应着表中的一列或者多列（复合主键）</li><li>如果是多列组合的复合主键约束，那么这些列都不允许为空值，并且组合的值不允许重复。</li><li><strong>MySQL的主键名总是PRIMARY</strong>，就算自己命名了主键约束名也没用。</li><li>当创建主键约束时，系统默认会在所在的列或列组合上建立对应的<strong>主键索引</strong>（能够根据主键查询 的，就根据主键查询，效率更高）。如果删除主键约束了，主键约束对应的索引就自动删除了。</li><li>需要注意的一点是，不要修改主键字段的值。因为主键是数据记录的唯一标识，如果修改了主键的 值，就有可能会破坏数据的完整性。</li></ul><h3 id="4-4-添加主键约束"><a href="#4-4-添加主键约束" class="headerlink" title="4.4 添加主键约束"></a>4.4 添加主键约束</h3><p>（1）建表时指定主键约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型  primary key, #列级模式<br>字段名  数据类型,  <br>字段名  数据类型  <br>);<br><br>create table 表名称(<br>字段名  数据类型,<br>字段名  数据类型,  <br>字段名  数据类型,<br>[constraint 约束名] primary key(字段名) #表级模式<br>);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table temp(<br> id int primary key,<br> name varchar(20)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc temp;<br>+-------+-------------+------+-----+---------+-------+<br>| Field | Type        | Null | Key | Default | Extra |<br>+-------+-------------+------+-----+---------+-------+<br>| id    | int(11)     | NO   | PRI | NULL    |       |<br>| name  | varchar(20) | YES  |     | NULL    |  |<br>+-------+-------------+------+-----+---------+-------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(1,&#x27;张三&#x27;);#成功<br>insert into temp values(2,&#x27;李四&#x27;);#成功<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from temp;<br>+----+------+<br>| id | name |<br>+----+------+<br>|  1 | 张三 |<br>|  2 | 李四 |<br>+----+------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(1,&#x27;张三&#x27;);#失败<br>ERROR 1062 (23000): Duplicate（重复） entry（键入，输入） &#x27;1&#x27; for key &#x27;PRIMARY&#x27;<br><br>insert into temp values(1,&#x27;王五&#x27;);#失败<br>ERROR 1062 (23000): Duplicate entry &#x27;1&#x27; for key &#x27;PRIMARY&#x27;<br><br>insert into temp values(3,&#x27;张三&#x27;);#成功<br><br>mysql&gt; select * from temp;<br>+----+------+<br>| id | name |<br>+----+------+<br>|  1 | 张三 |<br>|  2 | 李四 |<br>|  3 | 张三 |<br>+----+------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into temp values(4,null);#成功<br><br>insert into temp values(null,&#x27;李琦&#x27;);#失败<br>ERROR 1048 (23000): Column &#x27;id&#x27; cannot be null<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from temp;<br>+----+------+<br>| id | name |<br>+----+------+<br>|  1 | 张三 |<br>|  2 | 李四 |<br>|  3 | 张三 |<br>|  4 | NULL |<br>+----+------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#演示一个表建立两个主键约束<br>create table temp(<br> id int primary key,<br> name varchar(20) primary key<br> );<br>ERROR 1068 (42000): Multiple（多重的） primary key defined（定义）<br></code></pre></td></tr></table></figure><p>再举例：</p><ul><li>列级约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE emp4(<br> id INT PRIMARY KEY AUTO_INCREMENT ,<br> NAME VARCHAR(20)<br>);<br></code></pre></td></tr></table></figure><ul><li>表级约束</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE emp5(<br> id INT NOT NULL AUTO_INCREMENT,<br> NAME VARCHAR(20),<br> pwd VARCHAR(15),<br> CONSTRAINT emp5_id_pk PRIMARY KEY(id)<br>);<br></code></pre></td></tr></table></figure><p>（2）建表后增加主键约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名称 ADD PRIMARY KEY(字段列表); #字段列表可以是一个字段，也可以是多个字段，如果是多个字段的话，是复合主键<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE student ADD PRIMARY KEY (sid);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE emp5 ADD PRIMARY KEY(NAME,pwd);<br></code></pre></td></tr></table></figure><h3 id="4-5-关于复合主键"><a href="#4-5-关于复合主键" class="headerlink" title="4.5 关于复合主键"></a>4.5 关于复合主键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br> 字段名  数据类型,<br> 字段名  数据类型,  <br> 字段名  数据类型,<br> primary key(字段名1,字段名2)  #表示字段1和字段2的组合是唯一的，也可以有更多个字段<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#学生表<br>create table student(<br> sid int primary key,  #学号<br> sname varchar(20)     #学生姓名<br>);<br> <br>#课程表<br>create table course(<br> cid int primary key,  #课程编号<br> cname varchar(20)     #课程名称<br>);<br><br>#选课表<br>create table student_course(<br> sid int,<br> cid int,<br> score int,<br> primary key(sid,cid)  #复合主键<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student values(1,&#x27;张三&#x27;),(2,&#x27;李四&#x27;);<br>insert into course values(1001,&#x27;Java&#x27;),(1002,&#x27;MySQL&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from student;<br>+-----+-------+<br>| sid | sname |<br>+-----+-------+<br>|   1 | 张三  |<br>|   2 | 李四  |<br>+-----+-------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select * from course;<br>+------+-------+<br>| cid  | cname |<br>+------+-------+<br>| 1001 | Java  |<br>| 1002 | MySQL |<br>+------+-------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student_course values(1, 1001, 89),(1,1002,90),(2,1001,88),(2,1002,56);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from student_course;<br>+-----+------+-------+<br>| sid | cid  | score |<br>+-----+------+-------+<br>|   1 | 1001 |    89 |<br>|   1 | 1002 |    90 |<br>|   2 | 1001 |    88 |<br>|   2 | 1002 |    56 |<br>+-----+------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into student_course values(1, 1001, 100);<br>ERROR 1062 (23000): Duplicate entry &#x27;1-1001&#x27; for key &#x27;PRIMARY&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc student_course;<br>+-------+---------+------+-----+---------+-------+<br>| Field | Type    | Null | Key | Default | Extra |<br>+-------+---------+------+-----+---------+-------+<br>| sid   | int(11) | NO   | PRI | NULL    |       |<br>| cid   | int(11) | NO   | PRI | NULL    |       |<br>| score | int(11) | YES  |     | NULL    |       |<br>+-------+---------+------+-----+---------+-------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>再举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE emp6(<br> id INT NOT NULL,<br> NAME VARCHAR(20),<br> pwd VARCHAR(15),<br> CONSTRAINT emp7_pk PRIMARY KEY(NAME,pwd)<br>);<br></code></pre></td></tr></table></figure><h3 id="4-6-删除主键约束"><a href="#4-6-删除主键约束" class="headerlink" title="4.6 删除主键约束"></a>4.6 删除主键约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 drop primary key;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE student DROP PRIMARY KEY;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE emp5 DROP PRIMARY KEY;<br></code></pre></td></tr></table></figure><blockquote><p>说明：删除主键约束，不需要指定主键名，因为一个表只有一个主键，删除主键约束后，非空还存 在。</p></blockquote><h2 id="5、自增列：AUTO-INCREMENT"><a href="#5、自增列：AUTO-INCREMENT" class="headerlink" title="5、自增列：AUTO_INCREMENT"></a>5、自增列：AUTO_INCREMENT</h2><h3 id="5-1-作用"><a href="#5-1-作用" class="headerlink" title="5.1 作用"></a>5.1 作用</h3><p>某个字段的值自增</p><h3 id="5-2-关键字"><a href="#5-2-关键字" class="headerlink" title="5.2 关键字"></a>5.2 关键字</h3><p>auto_increment</p><h3 id="5-3-特点和要求"><a href="#5-3-特点和要求" class="headerlink" title="5.3 特点和要求"></a>5.3 特点和要求</h3><p>（1）一个表最多只能有一个自增长列</p><p>（2）当需要产生唯一标识符或顺序值时，可设置自增长</p><p>（3）自增长列约束的列必须是键列（主键列，唯一键列）</p><p>（4）自增约束的列的数据类型必须是整数类型</p><p>（5）如果自增列指定了 0 和 null，会在当前最大值的基础上自增；如果自增列手动指定了具体值，直接 赋值为具体值。</p><p>错误演示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br> eid int auto_increment,<br> ename varchar(20)<br>);<br># ERROR 1075 (42000): Incorrect table definition; there can be only one auto column and it must be defined as a key <br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br> eid int primary key,<br> ename varchar(20) unique key auto_increment<br>);<br># ERROR 1063 (42000): Incorrect column specifier for column &#x27;ename&#x27;  因为ename不是整数类型<br></code></pre></td></tr></table></figure><h3 id="5-4-如何指定自增约束"><a href="#5-4-如何指定自增约束" class="headerlink" title="5.4 如何指定自增约束"></a>5.4 如何指定自增约束</h3><p><strong>（1）建表时</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br> 字段名  数据类型  primary key auto_increment,<br> 字段名  数据类型  unique key not null,  <br> 字段名  数据类型  unique key,<br> 字段名  数据类型  not null default 默认值, <br>);<br><br>create table 表名称(<br> 字段名  数据类型 default 默认值 ,<br> 字段名  数据类型 unique key auto_increment,  <br> 字段名  数据类型 not null default 默认值,,<br> primary key(字段名)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br> eid int primary key auto_increment,<br> ename varchar(20)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+-------+-------------+------+-----+---------+----------------+<br>| Field | Type        | Null | Key | Default | Extra          |<br>+-------+-------------+------+-----+---------+----------------+<br>| eid   | int(11)     | NO   | PRI | NULL    | auto_increment |<br>| ename | varchar(20) | YES  |     | NULL    |                |<br>+-------+-------------+------+-----+---------+----------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>（2）建表后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 auto_increment;<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br> eid int primary key ,<br> ename varchar(20)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table employee modify eid int auto_increment;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+-------+-------------+------+-----+---------+----------------+<br>| Field | Type        | Null | Key | Default | Extra          |<br>+-------+-------------+------+-----+---------+----------------+<br>| eid   | int(11)     | NO   | PRI | NULL    | auto_increment |<br>| ename | varchar(20) | YES  |     | NULL    |                |<br>+-------+-------------+------+-----+---------+----------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="5-5-如何删除自增约束"><a href="#5-5-如何删除自增约束" class="headerlink" title="5.5 如何删除自增约束"></a>5.5 如何删除自增约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#alter table 表名称 modify 字段名 数据类型 auto_increment;#给这个字段增加自增约束<br><br>alter table 表名称 modify 字段名 数据类型; #去掉auto_increment相当于删除<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table employee modify eid int;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+-------+-------------+------+-----+---------+-------+<br>| Field | Type        | Null | Key | Default | Extra |<br>+-------+-------------+------+-----+---------+-------+<br>| eid   | int(11)     | NO   | PRI | NULL    |       |<br>| ename | varchar(20) | YES  |     | NULL    |       |<br>+-------+-------------+------+-----+---------+-------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="5-6-MySQL-8-0新特性—自增变量的持久化"><a href="#5-6-MySQL-8-0新特性—自增变量的持久化" class="headerlink" title="5.6 MySQL 8.0新特性—自增变量的持久化"></a>5.6 MySQL 8.0新特性—自增变量的持久化</h3><p>在MySQL 8.0之前，自增主键AUTO_INCREMENT的值如果大于max(primary key)+1，在MySQL重启后，会重置AUTO_INCREMENT&#x3D;max(primary key)+1，这种现象在某些情况下会导致业务主键冲突或者其他难以发 现的问题。 下面通过案例来对比不同的版本中自增变量是否持久化。 在MySQL 5.7版本中，测试步骤如 下： 创建的数据表中包含自增主键的id字段，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test1(<br> id INT PRIMARY KEY AUTO_INCREMENT<br>);<br></code></pre></td></tr></table></figure><p>插入4个空值，执行如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test1<br>VALUES(0),(0),(0),(0);<br></code></pre></td></tr></table></figure><p>查询数据表test1中的数据，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test1;<br>+----+<br>| id |<br>+----+<br>|  1 |<br>|  2 |<br>|  3 |<br>|  4 |<br>+----+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>删除id为4的记录，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM test1 WHERE id = 4;<br></code></pre></td></tr></table></figure><p>再次插入一个空值，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test1 VALUES(0);<br></code></pre></td></tr></table></figure><p>查询此时数据表test1中的数据，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test1;<br>+----+<br>| id |<br>+----+<br>|  1 |<br>|  2 |<br>|  3 |<br>|  5 |<br>+----+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，虽然删除了id为4的记录，但是再次插入空值时，并没有重用被删除的4，而是分配了 5。 删除id为5的记录，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM test1 where id=5;<br></code></pre></td></tr></table></figure><p><strong>重启数据库</strong>，重新插入一个空值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test1 values(0);<br></code></pre></td></tr></table></figure><p>再次查询数据表test1中的数据，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test1;<br>+----+<br>| id |<br>+----+<br>|  1 |<br>|  2 |<br>|  3 |<br>|  4 |<br>+----+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，新插入的0值分配的是4，按照重启前的操作逻辑，此处应该分配6。出现上述结果的主 要原因是自增主键没有持久化。 在MySQL 5.7系统中，对于自增主键的分配规则，是由InnoDB数据字典 内部一个 <code>计数器</code> 来决定的，而该计数器只在 <code>内存中维护</code>，并不会持久化到磁盘中。当数据库重启时，该 计数器会被初始化。</p><p>在MySQL 8.0版本中，上述测试步骤最后一步的结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test1;<br>+----+<br>| id |<br>+----+<br>|  1 |<br>|  2 |<br>|  3 |<br>|  6 |<br>+----+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，自增变量已经持久化了。</p><p>MySQL 8.0将自增主键的计数器持久化到 <code>重做日志</code> 中。每次计数器发生改变，都会将其写入重做日志 中。如果数据库重启，InnoDB会根据重做日志中的信息来初始化计数器的内存值。</p><h2 id="6、FOREIGN-KEY-约束"><a href="#6、FOREIGN-KEY-约束" class="headerlink" title="6、FOREIGN KEY 约束"></a>6、FOREIGN KEY 约束</h2><h3 id="6-1-作用"><a href="#6-1-作用" class="headerlink" title="6.1 作用"></a>6.1 作用</h3><p>限定某个表的某个字段的引用完整性。 </p><p>比如：员工表的员工所在部门的选择，必须在部门表能找到对应的部分。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404161541809.png" alt="image-20240416154144732" style="zoom:67%;" /><h3 id="6-2-关键字"><a href="#6-2-关键字" class="headerlink" title="6.2 关键字"></a>6.2 关键字</h3><p>FOREIGN KEY</p><h3 id="6-3-主表和从表-父表和子表"><a href="#6-3-主表和从表-父表和子表" class="headerlink" title="6.3 主表和从表&#x2F;父表和子表"></a>6.3 主表和从表&#x2F;父表和子表</h3><p>主表（父表）：被引用的表，被参考的表</p><p>从表（子表）：引用别人的表，参考别人的表</p><p>例如：员工表的员工所在部门这个字段的值要参考部门表：部门表是主表，员工表是从表</p><p>例如：学生表、课程表、选课表：选课表的学生和课程要分别参考学生表和课程表，学生表和课程表是 主表，选课表是从表。</p><h3 id="6-4-特点"><a href="#6-4-特点" class="headerlink" title="6.4 特点"></a>6.4 特点</h3><p>（1）从表的外键列，必须引用&#x2F;参考主表的主键或唯一约束的列</p><p>​为什么？因为被依赖&#x2F;被参考的值必须是唯一的</p><p>（2）在创建外键约束时，如果不给外键约束命名，<strong>默认名不是列名，而是自动产生一个外键名（例如 student_ibfk_1;）</strong>，也可以指定外键约束名。</p><p>（3）创建(CREATE)表时就指定外键约束的话，先创建主表，再创建从表</p><p>（4）删表时，先删从表（或先删除外键约束），再删除主表</p><p>（5）当主表的记录被从表参照时，主表的记录将不允许删除，如果要删除数据，需要先删除从表中依赖 该记录的数据，然后才可以删除主表的数据</p><p>（6）在“从表”中指定外键约束，并且一个表可以建立多个外键约束</p><p>（7）从表的外键列与主表被参照的列名字可以不相同，但是数据类型必须一样，逻辑意义一致。如果类 型不一样，创建子表时，就会出现错误“ERROR 1005 (HY000): Can’t create  table’database.tablename’(errno: 150)”。</p><p>​例如：都是表示部门编号，都是int类型。</p><p>（8）<strong>当创建外键约束时，系统默认会在所在的列上建立对应的普通索引</strong>。但是索引名是外键的约束 名。（根据外键查询效率很高）</p><p>（9）删除外键约束后，必须 <code>手动</code> 删除对应的索引</p><h3 id="6-5-添加外键约束"><a href="#6-5-添加外键约束" class="headerlink" title="6.5 添加外键约束"></a>6.5 添加外键约束</h3><p>（1）建表时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 主表名称(<br> 字段1  数据类型  primary key,<br> 字段2  数据类型<br>);<br><br>create table 从表名称(<br> 字段1  数据类型  primary key,<br> 字段2  数据类型,<br> [CONSTRAINT &lt;外键约束名称&gt;] FOREIGN KEY（从表的某个字段) references 主表名(被参考字段)<br>);<br>#(从表的某个字段)的数据类型必须与主表名(被参考字段)的数据类型一致，逻辑意义也一样<br>#(从表的某个字段)的字段名可以与主表名(被参考字段)的字段名一样，也可以不一样<br>-- FOREIGN KEY: 在表级指定子表中的列<br>-- REFERENCES: 标示在父表中的列<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept( #主表<br>did int primary key,         #部门编号<br>dname varchar(50)            #部门名称<br>);<br><br>create table emp(#从表<br>eid int primary key,  #员工编号<br>ename varchar(5),     #员工姓名<br>deptid int,           #员工所在的部门<br>    foreign key (deptid) references dept(did)   #在从表中指定外键约束<br>    #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号<br>);<br><br>说明：<br>（1）主表dept必须先创建成功，然后才能创建emp表，指定外键成功。<br>（2）删除表时，先删除从表emp，再删除主表dept<br></code></pre></td></tr></table></figure><p>（2）建表后</p><p>一般情况下，表与表的关联都是提前设计好了的，因此，会在创建表的时候就把外键约束定义好。不 过，如果需要修改表的设计（比如添加新的字段，增加新的关联关系），但没有预先定义外键约束，那 么，就要用修改表的方式来补充定义。</p><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 从表名 ADD [CONSTRAINT 约束名] FOREIGN KEY (从表的字段) REFERENCES 主表名(被引用字段) [on update xx][on delete xx];<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE emp1 ADD [CONSTRAINT emp_dept_id_fk] FOREIGN KEY(dept_id) REFERENCES dept(dept_id);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br> did int primary key,         #部门编号<br> dname varchar(50)            #部门名称<br>);<br><br><br>create table emp(<br> eid int primary key,  #员工编号<br> ename varchar(5),     #员工姓名<br> deptid int            #员工所在的部门<br>);<br> #这两个表创建时，没有指定外键的话，那么创建顺序是随意<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table emp add foreign key (deptid) references dept(did);<br></code></pre></td></tr></table></figure><h3 id="6-6-演示问题"><a href="#6-6-演示问题" class="headerlink" title="6.6 演示问题"></a>6.6 演示问题</h3><p>（1）失败：不是键列</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br> did int ,       #部门编号<br> dname varchar(50)            #部门名称<br>);<br><br>create table emp(<br> eid int primary key,  #员工编号<br> ename varchar(5),     #员工姓名<br> deptid int,           #员工所在的部门<br> foreign key (deptid) references dept(did)<br>);<br> #ERROR 1215 (HY000): Cannot add foreign key constraint  原因是dept的did不是键列<br></code></pre></td></tr></table></figure><p>（2）失败：数据类型不一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br> did int primary key,        #部门编号<br> dname varchar(50)           #部门名称<br>);<br>create table emp(<br> eid int primary key,  #员工编号<br> ename varchar(5),     #员工姓名<br> deptid char,                #员工所在的部门<br> foreign key (deptid) references dept(did)<br>);<br>#ERROR 1215 (HY000): Cannot add foreign key constraint  原因是从表的deptid字段和主表的did字段的数据类型不一致，并且要它俩的逻辑意义一致<br></code></pre></td></tr></table></figure><p>（3）成功，两个表字段名一样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br> did int primary key,        #部门编号<br> dname varchar(50)           #部门名称<br>);<br><br>create table emp(<br> eid int primary key,  #员工编号<br> ename varchar(5),     #员工姓名<br> did int,              #员工所在的部门<br> foreign key (did) references dept(did)  <br> #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号<br> #是否重名没问题，因为两个did在不同的表中<br>);<br></code></pre></td></tr></table></figure><p>（4）添加、删除、修改问题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br> did int primary key,        #部门编号<br> dname varchar(50)           #部门名称<br>);<br><br>create table emp(<br> eid int primary key,  #员工编号<br> ename varchar(5),     #员工姓名<br> deptid int,    #员工所在的部门<br> foreign key (deptid) references dept(did)  <br> #emp表的deptid和和dept表的did的数据类型一致，意义都是表示部门的编号<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into dept values(1001,&#x27;教学部&#x27;);<br>insert into dept values(1003, &#x27;财务部&#x27;);<br><br>insert into emp values(1,&#x27;张三&#x27;,1001); #添加从表记录成功，在添加这条记录时，要求部门表有1001部门 <br><br>insert into emp values(2,&#x27;李四&#x27;,1005);#添加从表记录失败<br>ERROR 1452 (23000): Cannot add（添加） or update（修改） a child row: a foreign key <br>constraint fails (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY (`deptid`) <br>REFERENCES `dept` (`did`)) 从表emp添加记录失败，因为主表dept没有1005部门<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> mysql&gt; select * from dept;<br> +------+--------+<br> | did  | dname  |<br> +------+--------+<br> | 1001 | 教学部  |<br> | 1003 | 财务部  |<br> +------+--------+<br> 2 rows in set (0.00 sec)<br> <br> mysql&gt; select * from emp;<br> +-----+-------+--------+<br> | eid | ename | deptid |<br> +-----+-------+--------+<br> |   1 | 张三   |   1001 |<br> +-----+-------+--------+<br> 1 row in set (0.00 sec)<br><br>update emp set deptid = 1002 where eid = 1;#修改从表失败 <br>ERROR 1452 (23000): Cannot add（添加） or update（修改） a child row（子表的记录）: a <br>foreign key constraint fails（外键约束失败） (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` <br>FOREIGN KEY (`deptid`) REFERENCES `dept` (`did`))  #部门表did字段现在没有1002的值，所以员工表中不能修改员工所在部门deptid为1002<br><br>update dept set did = 1002 where did = 1001;#修改主表失败<br>ERROR 1451 (23000): Cannot delete（删除） or update（修改） a parent row（父表的记录）: a <br>foreign key constraint fails (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY <br>(`deptid`) REFERENCES `dept` (`did`)) #部门表did的1001字段已经被emp引用了，所以部门表的1001字段就不能修改了<br><br>update dept set did = 1002 where did = 1003;#修改主表成功  因为部门表的1003部门没有被emp表引用，所以可以修改<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from dept where did=1001; #删除主表失败<br>ERROR 1451 (23000): Cannot delete（删除） or update（修改） a parent row（父表记录）: a <br>foreign key constraint fails (`atguigudb`.`emp`, CONSTRAINT `emp_ibfk_1` FOREIGN KEY <br>(`deptid`) REFERENCES `dept` (`did`))  #因为部门表did的1001字段已经被emp引用了，所以部门表的1001字段对应的记录就不能被删除<br></code></pre></td></tr></table></figure><p>总结：约束关系是针对双方的</p><ul><li>添加了外键约束后，主表的修改和删除数据受约束</li><li>添加了外键约束后，从表的添加和修改数据受约束</li><li>在从表上建立外键，要求主表必须存在</li><li>删除主表时，要求从表从表先删除，或将从表中外键引用该主表的关系先删除</li></ul><h3 id="6-7-约束等级"><a href="#6-7-约束等级" class="headerlink" title="6.7 约束等级"></a>6.7 约束等级</h3><ul><li><code>Cascade方式</code> ：在父表上update&#x2F;delete记录时，同步update&#x2F;delete掉子表的匹配记录</li><li><code>Set null方式</code> ：在父表上update&#x2F;delete记录时，将子表上匹配记录的列设为null，但是要注意子 表的外键列不能为not null</li><li><code>No action方式</code> ：如果子表中有匹配的记录，则不允许对父表对应候选键进行update&#x2F;delete操作</li><li><code>Restrict方式</code> ：同no action， 都是立即检查外键约束</li><li><code>Set default方式</code> （在可视化工具SQLyog中可能显示空白）：父表有变更时，子表将外键列设置 成一个默认的值，但Innodb不能识别</li></ul><p>如果没有指定等级，就相当于Restrict方式。</p><p>对于外键约束，最好是采用:  <code>ON UPDATE CASCADE ON DELETE RESTRICT</code> 的方式。</p><p>（1）演示1：on update cascade on delete set null</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br> did int primary key,        #部门编号<br> dname varchar(50)           #部门名称<br>);<br><br>create table emp(<br> eid int primary key,  #员工编号<br> ename varchar(5),     #员工姓名<br> deptid int,             #员工所在的部门<br> foreign key (deptid) references dept(did)  on update cascade on delete set null<br> #把修改操作设置为级联修改等级，把删除操作设置为set null等级<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into dept values(1001,&#x27;教学部&#x27;);<br>insert into dept values(1002, &#x27;财务部&#x27;);<br>insert into dept values(1003, &#x27;咨询部&#x27;);<br><br>insert into emp values(1,&#x27;张三&#x27;,1001); #在添加这条记录时，要求部门表有1001部门<br>insert into emp values(2,&#x27;李四&#x27;,1001);<br>insert into emp values(3,&#x27;王五&#x27;,1002);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from dept;<br><br>mysql&gt; select * from emp;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改主表成功，从表也跟着修改，修改了主表被引用的字段1002为1004，从表的引用字段就跟着修改为1004了<br>mysql&gt; update dept set did = 1004 where did = 1002;<br> Query OK, 1 row affected (0.00 sec)<br> Rows matched: 1  Changed: 1  Warnings: 0<br> <br>mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  |<br>+------+--------+<br>| 1001 | 教学部 |<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 | #原来是1002，修改为1004<br>+------+--------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三  |   1001 |<br>|   2 | 李四  |   1001 |<br>|   3 | 王五  |   1004 | #原来是1002，跟着修改为1004<br>+-----+-------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#删除主表的记录成功，从表对应的字段的值被修改为null<br>mysql&gt; delete from dept where did = 1001;<br>Query OK, 1 row affected (0.01 sec)<br><br>mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  | #记录1001部门被删除了<br>+------+--------+<br>| 1003 | 咨询部  |<br>| 1004 | 财务部  |<br>+------+--------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三  |   NULL | #原来引用1001部门的员工，deptid字段变为null<br>|   2 | 李四  |   NULL |<br>|   3 | 王五  |   1004 |<br>+-----+-------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>（2）演示2：on update set null on delete cascade</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br> did int primary key,        #部门编号<br> dname varchar(50)           #部门名称<br>);<br><br>create table emp(<br> eid int primary key,  #员工编号<br> ename varchar(5),     #员工姓名<br> deptid int,              #员工所在的部门<br> foreign key (deptid) references dept(did)  on update set null on delete cascade<br> #把修改操作设置为set null等级，把删除操作设置为级联删除等级<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into dept values(1001,&#x27;教学部&#x27;);<br>insert into dept values(1002, &#x27;财务部&#x27;);<br>insert into dept values(1003, &#x27;咨询部&#x27;);<br><br>insert into emp values(1,&#x27;张三&#x27;,1001); #在添加这条记录时，要求部门表有1001部门<br>insert into emp values(2,&#x27;李四&#x27;,1001);<br>insert into emp values(3,&#x27;王五&#x27;,1002);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  |<br>+------+--------+<br>| 1001 | 教学部 |<br>| 1002 | 财务部 |<br>| 1003 | 咨询部 |<br>+------+--------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三  |   1001 |<br>|   2 | 李四  |   1001 |<br>|   3 | 王五  |   1002 |<br>+-----+-------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改主表，从表对应的字段设置为null<br>mysql&gt; update dept set did = 1004 where did = 1002;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br> mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  |<br>+------+--------+<br>| 1001 | 教学部 |<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 | #原来did是1002<br>+------+--------+<br>3 rows in set (0.00 sec)<br> <br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三  |   1001 |<br>|   2 | 李四  |   1001 |<br>|   3 | 王五  |   NULL | #原来deptid是1002，因为部门表1002被修改了，1002没有对应的了，就设置为null<br>+-----+-------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#删除主表的记录成功，主表的1001行被删除了，从表相应的记录也被删除了<br>mysql&gt; delete from dept where did=1001;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  | #部门表中1001部门被删除<br>+------+--------+<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 |<br>+------+--------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |#原来1001部门的员工也被删除了<br>+-----+-------+--------+<br>|   3 | 王五  |   NULL |<br>+-----+-------+--------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>（3）演示：on update cascade on delete cascade</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table dept(<br> did int primary key,        #部门编号<br> dname varchar(50)           #部门名称<br>);<br><br>create table emp(<br> eid int primary key,  #员工编号<br> ename varchar(5),     #员工姓名<br> deptid int,             #员工所在的部门<br> foreign key (deptid) references dept(did)  on update cascade on delete cascade<br> #把修改操作设置为级联修改等级，把删除操作也设置为级联删除等级<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">insert into dept values(1001,&#x27;教学部&#x27;);<br>insert into dept values(1002, &#x27;财务部&#x27;);<br>insert into dept values(1003, &#x27;咨询部&#x27;);<br><br>insert into emp values(1,&#x27;张三&#x27;,1001); #在添加这条记录时，要求部门表有1001部门<br>insert into emp values(2,&#x27;李四&#x27;,1001);<br>insert into emp values(3,&#x27;王五&#x27;,1002);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  |<br>+------+--------+<br>| 1001 | 教学部 |<br>| 1002 | 财务部 |<br>| 1003 | 咨询部 |<br>+------+--------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三  |   1001 |<br>|   2 | 李四  |   1001 |<br>|   3 | 王五  |   1002 |<br>+-----+-------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#修改主表，从表对应的字段自动修改<br>mysql&gt; update dept set did = 1004 where did = 1002;<br>Query OK, 1 row affected (0.00 sec)<br>Rows matched: 1  Changed: 1  Warnings: 0<br><br>mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  |<br>+------+--------+<br>| 1001 | 教学部 |<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 | #部门1002修改为1004<br>+------+--------+<br>3 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |<br>+-----+-------+--------+<br>|   1 | 张三  |   1001 |<br>|   2 | 李四  |   1001 |<br>|   3 | 王五  |   1004 | #级联修改<br>+-----+-------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> #删除主表的记录成功，主表的1001行被删除了，从表相应的记录也被删除了<br>mysql&gt; delete from dept where did=1001;<br>Query OK, 1 row affected (0.00 sec)<br><br>mysql&gt; select * from dept;<br>+------+--------+<br>| did  | dname  | #1001部门被删除了<br>+------+--------+<br>| 1003 | 咨询部 |<br>| 1004 | 财务部 | <br>+------+--------+<br>2 rows in set (0.00 sec)<br><br>mysql&gt; select * from emp;<br>+-----+-------+--------+<br>| eid | ename | deptid |  #1001部门的员工也被删除了<br>+-----+-------+--------+<br>|   3 | 王五  |   1004 |<br>+-----+-------+--------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="6-8-删除外键约束"><a href="#6-8-删除外键约束" class="headerlink" title="6.8 删除外键约束"></a>6.8 删除外键约束</h3><p>流程如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">(1)第一步先查看约束名和删除外键约束<br>SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;表名称&#x27;;#查看某个表的约束名<br><br>ALTER TABLE 从表名 DROP FOREIGN KEY 外键约束名;<br><br>（2）第二步查看索引名和删除索引。（注意，只能手动删除）<br>SHOW INDEX FROM 表名称; #查看某个表的索引名<br><br>ALTER TABLE 从表名 DROP INDEX 索引名;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT * FROM information_schema.table_constraints WHERE table_name = &#x27;emp&#x27;;<br><br>mysql&gt; alter table emp drop foreign key emp_ibfk_1;<br>Query OK, 0 rows affected (0.02 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; show index from emp;<br><br>mysql&gt; alter table emp drop index deptid;<br>Query OK, 0 rows affected (0.01 sec)<br>Records: 0  Duplicates: 0  Warnings: 0<br><br>mysql&gt;  show index from emp;<br></code></pre></td></tr></table></figure><h3 id="6-9-开发场景"><a href="#6-9-开发场景" class="headerlink" title="6.9 开发场景"></a>6.9 开发场景</h3><p><strong>问题1：如果两个表之间有关系（一对一、一对多），比如：员工表和部门表（一对多），它们之间是否 一定要建外键约束？</strong></p><p>答：不是的</p><p><strong>问题2：建和不建外键约束有什么区别？</strong></p><p>答：建外键约束，你的操作（创建表、删除表、添加、修改、删除）会受到限制，从语法层面受到限 制。例如：在员工表中不可能添加一个员工信息，它的部门的值在部门表中找不到。</p><p>不建外键约束，你的操作（创建表、删除表、添加、修改、删除）不受限制，要保证数据的 <code>引用完整性</code>，只能依 <code>靠程序员的自觉</code>，或者是<code>在Java程序中进行限定</code>。例如：在员工表中，可以添加一个员工的 信息，它的部门指定为一个完全不存在的部门。</p><p><strong>问题3：那么建和不建外键约束和查询有没有关系？</strong></p><p>答：没有</p><blockquote><p>在 MySQL 里，外键约束是有成本的，需要消耗系统资源。对于大并发的 SQL 操作，有可能会不适 合。比如大型网站的中央数据库，可能会 <code>因为外键约束的系统开销而变得非常慢</code>。所以， MySQL 允许你不使用系统自带的外键约束，在 <code>应用层面</code> 完成检查数据一致性的逻辑。也就是说，即使你不 用外键约束，也要想办法通过应用层面的附加逻辑，来实现外键约束的功能，确保数据的一致性。</p></blockquote><h3 id="6-10-阿里开发规范"><a href="#6-10-阿里开发规范" class="headerlink" title="6.10 阿里开发规范"></a>6.10 阿里开发规范</h3><p>【<code>强制</code>】不得使用外键与级联，一切外键概念必须在应用层解决。</p><p>说明：（概念解释）学生表中的 student_id 是主键，那么成绩表中的 student_id 则为外键。如果更新学 生表中的 student_id，同时触发成绩表中的 student_id 更新，即为级联更新。外键与级联更新适用于<code>单机低并发</code>，不适合 <code>分布式</code>、 <code>高并发集群</code>；级联更新是强阻塞，存在数据库 <code>更新风暴</code> 的风险；外键影响 数据库的 <code>插入速度</code>。</p><h2 id="7、CHECK-约束"><a href="#7、CHECK-约束" class="headerlink" title="7、CHECK 约束"></a>7、CHECK 约束</h2><h3 id="7-1-作用"><a href="#7-1-作用" class="headerlink" title="7.1 作用"></a>7.1 作用</h3><p>检查某个字段的值是否符号xx要求，一般指的是值的范围</p><h3 id="7-2、关键字"><a href="#7-2、关键字" class="headerlink" title="7.2、关键字"></a>7.2、关键字</h3><p>CHECK</p><h3 id="7-3、说明：MySQL-5-7-不支持"><a href="#7-3、说明：MySQL-5-7-不支持" class="headerlink" title="7.3、说明：MySQL 5.7 不支持"></a>7.3、说明：MySQL 5.7 不支持</h3><p>MySQL5.7 可以使用check约束，但check约束对数据验证没有任何作用。添加数据时，没有任何错误或警告</p><p>但是<strong>MySQL 8.0中可以使用check约束了</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br> eid int primary key,<br> ename varchar(5),<br> gender char check (&#x27;男&#x27; or &#x27;女&#x27;)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into employee values(1,&#x27;张三&#x27;,&#x27;妖&#x27;);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from employee;<br>+-----+-------+--------+<br>| eid | ename | gender |<br>+-----+-------+--------+<br>|   1 | 张三   | 妖     |<br>+-----+-------+--------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>再举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE temp(<br> id INT AUTO_INCREMENT,<br> NAME VARCHAR(20),<br> age INT CHECK(age &gt; 20),<br> PRIMARY KEY(id)<br>);<br></code></pre></td></tr></table></figure><ul><li>再举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">age tinyint check(age &gt;20) 或 sex char(2) check(sex in(‘男’,’女’))<br></code></pre></td></tr></table></figure><ul><li>再举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CHECK(height&gt;=0 AND height&lt;3)<br></code></pre></td></tr></table></figure><h2 id="8、DEFAULT约束"><a href="#8、DEFAULT约束" class="headerlink" title="8、DEFAULT约束"></a>8、DEFAULT约束</h2><h3 id="8-1-作用"><a href="#8-1-作用" class="headerlink" title="8.1 作用"></a>8.1 作用</h3><p>给某个字段&#x2F;某列指定默认值，一旦设置默认值，在插入数据时，如果此字段没有显式赋值，则赋值为默认值。</p><h3 id="8-2-关键字"><a href="#8-2-关键字" class="headerlink" title="8.2 关键字"></a>8.2 关键字</h3><p>DEFAULT</p><h3 id="8-3-如何给字段加默认值"><a href="#8-3-如何给字段加默认值" class="headerlink" title="8.3 如何给字段加默认值"></a>8.3 如何给字段加默认值</h3><p>（1）建表时</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table 表名称(<br>字段名  数据类型  primary key,<br>字段名  数据类型  unique key not null,  <br>字段名  数据类型  unique key,<br>字段名  数据类型  not null default 默认值, <br>);<br>create table 表名称(<br>    字段名  数据类型 default 默认值 ,<br>字段名  数据类型 not null default 默认值,  <br>字段名  数据类型 not null default 默认值,<br>primary key(字段名),<br>unique key(字段名)<br> );<br><br>说明：默认值约束一般不在唯一键和主键列上加<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br>eid int primary key,<br>ename varchar(20) not null,<br>gender char default &#x27;男&#x27;,<br>tel char(11) not null default &#x27;&#x27; #默认是空字符串<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| eid    | int(11)     | NO   | PRI | NULL    |       |<br>| ename  | varchar(20) | NO   |     | NULL    |       |<br>| gender | char(1)     | YES  |     | 男      |   |<br>| tel    | char(11)    | NO   |     |         |       |<br> +--------+-------------+------+-----+---------+-------+<br> 4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into employee values(1,&#x27;汪飞&#x27;,&#x27;男&#x27;,&#x27;13700102535&#x27;); #成功<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from employee;<br>+-----+-------+--------+-------------+<br>| eid | ename | gender | tel         |<br>+-----+-------+--------+-------------+<br>|   1 | 汪飞  | 男     | 13700102535 |<br>+-----+-------+--------+-------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into employee(eid,ename) values(2,&#x27;天琪&#x27;); #成功<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; select * from employee;<br>+-----+-------+--------+-------------+<br>| eid | ename | gender | tel         |<br>+-----+-------+--------+-------------+<br>|   1 | 汪飞  | 男     | 13700102535 |<br>|   2 | 天琪  | 男     |             |<br>+-----+-------+--------+-------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into employee(eid,ename) values(3,&#x27;二虎&#x27;);<br>#ERROR 1062 (23000): Duplicate entry &#x27;&#x27; for key &#x27;tel&#x27;  <br>#如果tel有唯一性约束的话会报错，如果tel没有唯一性约束，可以添加成功<br></code></pre></td></tr></table></figure><p>再举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE myemp(<br> id INT AUTO_INCREMENT PRIMARY KEY,<br> NAME VARCHAR(15),<br> salary DOUBLE(10,2) DEFAULT 2000<br>);<br></code></pre></td></tr></table></figure><p>（2）建表后</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 default 默认值;<br><br>#如果这个字段原来有非空约束，你还保留非空约束，那么在加默认值约束时，还得保留非空约束，否则非空约束就被删除了<br>#同理，在给某个字段加非空约束也一样，如果这个字段原来有默认值约束，你想保留，也要在modify语句中保留默认值约束，否则就删除了<br>alter table 表名称 modify 字段名 数据类型 default 默认值 not null;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table employee(<br> eid int primary key,<br> ename varchar(20),<br> gender char,<br> tel char(11) not null<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| eid    | int(11)     | NO   | PRI | NULL    |     |<br>| ename  | varchar(20) | YES  | | NULL    |     |<br>| gender | char(1)     | YES  | | NULL    |     |<br>| tel    | char(11)    | NO   | | NULL    |     |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table employee modify gender char default &#x27;男&#x27;;  #给gender字段增加默认值约束<br>alter table employee modify tel char(11) default &#x27;&#x27;; #给tel字段增加默认值约束<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| eid    | int(11)     | NO   |     | NULL    |       |<br>| ename  | varchar(20) | NO   |     | NULL    |       |<br>| gender | char(1)     | NO   |     | 男      |       |<br>| tel    | char(1)     | NO   |     |         |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">alter table employee modify tel char(11) default &#x27;&#x27;  not null;#给tel字段增加默认值约束，并保留非空约束<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; desc employee;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| eid    | int(11)     | NO   | PRI | NULL    |  |       <br>| ename  | varchar(20) | YES  |     | NULL  |  |       <br>| gender | char(1)     | YES  |     | 男      | |<br>| tel    | char(11)    | NO   |     |         |  |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="8-4-如何删除默认值约束"><a href="#8-4-如何删除默认值约束" class="headerlink" title="8.4 如何删除默认值约束"></a>8.4 如何删除默认值约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table 表名称 modify 字段名 数据类型 ;#删除默认值约束，也不保留非空约束<br><br>alter table 表名称 modify 字段名 数据类型  not null; #删除默认值约束，保留非空约束<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table employee modify gender char; #删除gender字段默认值约束，如果有非空约束，也一并删除<br>alter table employee modify tel char(11)  not null;#删除tel字段默认值约束，保留非空约束<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employee;<br>+--------+-------------+------+-----+---------+-------+<br>| Field  | Type        | Null | Key | Default | Extra |<br>+--------+-------------+------+-----+---------+-------+<br>| eid    | int(11)     | NO   | PRI | NULL    |       |<br>| ename  | varchar(20) | YES  |     | NULL    |       |<br>| gender | char(1)     | YES  |     | NULL    |       |<br>| tel    | int(11)     | NO   |     | NULL    |       |<br>+--------+-------------+------+-----+---------+-------+<br>4 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="9、面试"><a href="#9、面试" class="headerlink" title="9、面试"></a>9、面试</h2><p><strong>面试1、为什么建表时，加 not null default ‘’ 或 default 0</strong></p><p>答：不想让表中出现null值。</p><p><strong>面试2、为什么不想要 null 的值</strong></p><p>答:</p><p>（1）不好比较。null是一种特殊值，比较时只能用专门的is null 和 is not null来比较。碰到运算符，通 常返回null。</p><p>（2）效率不高。影响提高索引效果。因此，我们往往在建表时 not null default ‘’ 或 default 0</p><p><strong>面试3、带AUTO_INCREMENT约束的字段值是从1开始的吗？</strong></p><p>在MySQL中，默认AUTO_INCREMENT的初始 值是1，每新增一条记录，字段值自动加1。设置自增属性（AUTO_INCREMENT）的时候，还可以指定第 一条插入记录的自增字段的值，这样新插入的记录的自增字段值从初始值开始递增，如在表中插入第一 条记录，同时指定id值为5，则以后插入的记录的id值就会从6开始往上增加。添加主键约束时，往往需要 设置字段自动增加属性。</p><p><strong>面试4、并不是每个表都可以任意选择存储引擎？</strong></p><p>外键约束（FOREIGN KEY）不能跨引擎使用。</p><p>MySQL支持多种存储引擎，每一个表都可以指定一个不同的存储引擎，需要注意的是：外键约束是用来 保证数据的参照完整性的，如果表之间需要关联外键，却指定了不同的存储引擎，那么这些表之间是不 能创建外键约束的。所以说，存储引擎的选择也不完全是随意的</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL数据类型精讲</title>
    <link href="/2024/04/14/mysql/11%E3%80%81MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%B2%BE%E8%AE%B2/"/>
    <url>/2024/04/14/mysql/11%E3%80%81MySQL%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%B2%BE%E8%AE%B2/</url>
    
    <content type="html"><![CDATA[<h2 id="1、MySQL中的数据类型"><a href="#1、MySQL中的数据类型" class="headerlink" title="1、MySQL中的数据类型"></a>1、MySQL中的数据类型</h2><table><thead><tr><th>类型</th><th>类型举例</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、INT(或INTEGER)、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td>DECIMAL</td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、DATE、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、VARCHAR、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON类型</td><td>JSON对象、JSON数组</td></tr><tr><td>空间数据类型</td><td>单值类型：GEOMETRY、POINT、LINESTRING、POLYGON； <br />集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、 GEOMETRYCOLLECTION</td></tr></tbody></table><p>常见数据类型的属性，如下：</p><table><thead><tr><th>MySQL关键字</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>数据列可包含NULL值</td></tr><tr><td>NOT NULL</td><td>数据列不允许包含NULL值</td></tr><tr><td>DEFAULT</td><td>默认值</td></tr><tr><td>PRIMARY KEY</td><td>主键</td></tr><tr><td>AUTO_INCREMENT</td><td>自动递增，适用于整数类型</td></tr><tr><td>UNSIGNED</td><td>无符号</td></tr><tr><td>CHARACTER SET name</td><td>指定一个字符集</td></tr></tbody></table><h2 id="2、整数类型"><a href="#2、整数类型" class="headerlink" title="2、整数类型"></a>2、整数类型</h2><h3 id="2-1-类型介绍"><a href="#2-1-类型介绍" class="headerlink" title="2.1 类型介绍"></a>2.1 类型介绍</h3><p>整数类型一共有 5 种，包括 TINYINT、SMALLINT、MEDIUMINT、INT（INTEGER）和 BIGINT。</p><p>它们的区别如下表所示：</p><table><thead><tr><th>整数类型</th><th>字节</th><th>有符号数取值范围</th><th>无符号数取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>-128~127</td><td>0~255</td></tr><tr><td>SMALLINT</td><td>2</td><td>-32768~32767</td><td>0~65535</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>-8388608~8388607</td><td>0~16777215</td></tr><tr><td>INT、INTEGER</td><td>4</td><td>-2147483648~2147483647</td><td>0~4294967295</td></tr><tr><td>BIGINT</td><td>8</td><td>-9223372036854775808~9223372036854775807</td><td>0~18446744073709551615</td></tr></tbody></table><h3 id="2-2-可选属性"><a href="#2-2-可选属性" class="headerlink" title="2.2 可选属性"></a>2.2 可选属性</h3><p><strong>整数类型的可选属性有三个：</strong></p><h4 id="2-2-1-M"><a href="#2-2-1-M" class="headerlink" title="2.2.1 M"></a>2.2.1 M</h4><p><code>M</code> : 表示显示宽度，M的取值范围是(0, 255)。例如，int(5)：当数据宽度小于5位的时候在数字前面需要用 字符填满宽度。该项功能需要配合“ <code>ZEROFILL</code> ”使用，表示用“0”填满宽度，否则指定显示宽度无效。</p><p>如果设置了显示宽度，那么插入的数据宽度超过显示宽度限制，会不会截断或插入失败？</p><p>答案：不会对插入的数据有任何影响，还是按照类型的实际宽度进行保存，即 <code>显示宽度与类型可以存储的 值范围无关</code>。<strong>从MySQL 8.0.17开始，整数数据类型不推荐使用显示宽度属性。</strong></p><p>整型数据类型可以在定义表结构时指定所需要的显示宽度，如果不指定，则系统为每一种类型指定默认 的宽度值。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_int1 ( x TINYINT,　y SMALLINT,　z MEDIUMINT,　m INT,　n BIGINT );<br></code></pre></td></tr></table></figure><p>查看表结构 （MySQL5.7中显式如下，MySQL8中不再显式范围）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc test_int1;<br>+-------+--------------+------+-----+---------+-------+<br>| Field | Type         | Null | Key | Default | Extra |<br>+-------+--------------+------+-----+---------+-------+<br>|   x   | tinyint(4)   | YES  |     | NULL    |  |<br>| 　y   | smallint(6)  | YES  |     | NULL    | |<br>| 　z   | mediumint(9) | YES  |     | NULL    | |<br>| 　m   | int(11)      | YES |     | NULL    | |<br>| 　n   | bigint(20)   | YES  |     | NULL    |       |<br>+-------+--------------+------+-----+---------+-------+<br> 5 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p> TINYINT有符号数和无符号数的取值范围分别为-128<del>127和0</del>255，由于负号占了一个数字位，因此 TINYINT默认的显示宽度为4。同理，其他整数类型的默认显示宽度与其有符号数的最小值的宽度相同。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_int2(<br> f1 INT,<br> f2 INT(5),<br> f3 INT(5) ZEROFILL<br>)<br><br>DESC test_int2;<br><br>INSERT INTO test_int2(f1,f2,f3)<br>VALUES(1,123,123);<br><br>INSERT INTO test_int2(f1,f2)<br>VALUES(123456,123456);<br><br>INSERT INTO test_int2(f1,f2,f3)<br>VALUES(123456,123456,123456);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test_int2;<br>+--------+--------+--------+<br>| f1     | f2     | f3     |<br>+--------+--------+--------+<br>|      1 |    123 |  00123 |<br>| 123456 | 123456 |   NULL |<br>| 123456 | 123456 | 123456 |<br>+--------+--------+--------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="2-2-2-UNSIGNED"><a href="#2-2-2-UNSIGNED" class="headerlink" title="2.2.2 UNSIGNED"></a>2.2.2 UNSIGNED</h4><p><code>UNSIGNED</code> : 无符号类型（非负），所有的整数类型都有一个可选的属性UNSIGNED（无符号属性），无 符号整数类型的最小取值为0。所以，如果需要在MySQL数据库中保存非负整数值时，可以将整数类型设 置为无符号类型。</p><p>int类型默认显示宽度为int(11)，无符号int类型默认显示宽度为int(10)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_int3(<br> f1 INT UNSIGNED<br>);<br><br>mysql&gt; desc test_int3;<br>+-------+------------------+------+-----+---------+-------+<br>| Field | Type             | Null | Key | Default | Extra |<br>+-------+------------------+------+-----+---------+-------+<br>| f1    | int(10) unsigned | YES  |     | NULL    |       |<br>+-------+------------------+------+-----+---------+-------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h4 id="2-2-3-ZEROFILL"><a href="#2-2-3-ZEROFILL" class="headerlink" title="2.2.3 ZEROFILL"></a>2.2.3 ZEROFILL</h4><p><code>ZEROFILL</code> : 0填充,（如果某列是ZEROFILL，那么MySQL会自动为当前列添加UNSIGNED属性），如果指 定了ZEROFILL只是表示不够M位时，用0在左边填充，如果超过M位，只要不超过数据存储范围即可。</p><p>原来，在 int(M) 中，M 的值跟 int(M) 所占多少存储空间并无任何关系。 int(3)、int(4)、int(8) 在磁盘上都 是占用 4 bytes 的存储空间。也就是说，<strong>int(M)，必须和UNSIGNED ZEROFILL一起使用才有意义</strong>。如果整 数值超过M位，就按照实际位数存储。只是无须再用字符 0 进行填充。</p><h3 id="2-3-适用场景"><a href="#2-3-适用场景" class="headerlink" title="2.3 适用场景"></a>2.3 适用场景</h3><p><code>TINYINT</code> ：一般用于枚举数据，比如系统设定取值范围很小且固定的场景。</p><p><code>SMALLINT</code> ：可以用于较小范围的统计数据，比如统计工厂的固定资产库存数量等。</p><p><code>MEDIUMINT</code> ：用于较大整数的计算，比如车站每日的客流量等。</p><p><code>INT、INTEGER</code> ：取值范围足够大，一般情况下不用考虑超限问题，用得最多。比如商品编号。</p><p><code>BIGINT</code> ：只有当你处理特别巨大的整数时才会用到。比如双十一的交易量、大型门户网站点击量、证 券公司衍生产品持仓等。</p><h3 id="2-4-如何选择？"><a href="#2-4-如何选择？" class="headerlink" title="2.4 如何选择？"></a>2.4 如何选择？</h3><p>在评估用哪种整数类型的时候，你需要考虑 <code>存储空间</code> 和 <code>可靠性</code> 的平衡问题：一方 面，用占用字节数少 的整数类型可以节省存储空间；另一方面，要是为了节省存储空间， 使用的整数类型取值范围太小，一 旦遇到超出取值范围的情况，就可能引起 <code>系统错误</code>，影响可靠性。</p><p>举个例子，商品编号采用的数据类型是 INT。原因就在于，客户门店中流通的商品种类较多，而且，每 天都有旧商品下架，新商品上架，这样不断迭代，日积月累。</p><p>如果使用 SMALLINT 类型，虽然占用字节数比 INT 类型的整数少，但是却不能保证数据不会超出范围 65535。相反，使用 INT，就能确保有足够大的取值范围，不用担心数据超出范围影响可靠性的问题。</p><p>你要注意的是，在实际工作中，<strong>系统故障产生的成本远远超过增加几个字段存储空间所产生的成本</strong>。因 此，我建议你首先确保数据不会超过取值范围，在这个前提之下，再去考虑如何节省存储空间。</p><h2 id="3、浮点类型"><a href="#3、浮点类型" class="headerlink" title="3、浮点类型"></a>3、浮点类型</h2><h3 id="3-1-类型介绍"><a href="#3-1-类型介绍" class="headerlink" title="3.1 类型介绍"></a>3.1 类型介绍</h3><p>浮点数和定点数类型的特点是可以 <code>处理小数</code>，你可以把整数看成小数的一个特例。因此，浮点数和定点 数的使用场景，比整数大多了。 MySQL支持的浮点数类型，分别是 FLOAT、DOUBLE、REAL。</p><ul><li>FLOAT 表示单精度浮点数；</li><li>DOUBLE 表示双精度浮点数；</li></ul><table><thead><tr><th>类型</th><th>有符号数取值范围</th><th>无符号数取值范围</th><th>占用字节数</th></tr></thead><tbody><tr><td>FLOAT</td><td>(-3.402823466E+38，-1.175494351E-38)，0, (1.175494351 E-38，3.402823466351 E+38)</td><td>0, (1.175494351 E-383.402823466 E+38)</td><td>4</td></tr><tr><td>DOUBLE</td><td>(-1.7976931348623157E+308, -2.2250738585072014E-308), 0, (2.2250738585072014E-3081, 7976931348623157E+308)</td><td>0, (2.2250738585072014E-308, 1.7976931348623157E+308)</td><td>8</td></tr></tbody></table><ul><li>REAL默认就是 DOUBLE。如果你把 SQL 模式设定为启用“<code>REAL_AS_FLOAT</code>”，那 么，MySQL 就认为 REAL 是 FLOAT。如果要启用“REAL_AS_FLOAT”，可以通过以下 SQL 语句实现：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET sql_mode = “REAL_AS_FLOAT”;<br></code></pre></td></tr></table></figure><p><strong>问题1：</strong>FLOAT 和 DOUBLE 这两种数据类型的区别是啥呢？</p><p>FLOAT 占用字节数少，取值范围小；DOUBLE 占用字节数多，取值范围也大。</p><p><strong>问题2：</strong>为什么浮点数类型的无符号数取值范围，只相当于有符号数取值范围的一半，也就是只相当于 有符号数取值范围大于等于零的部分呢？</p><p>MySQL 存储浮点数的格式为： <code>符号(S)</code> 、 <code>尾数(M)</code> 和  <code>阶码(E)</code> 。因此，无论有没有符号，MySQL 的浮 点数都会存储表示符号的部分。因此， 所谓的无符号数取值范围，其实就是有符号数取值范围大于等于 零的部分。</p><h3 id="3-2-数据精度说明"><a href="#3-2-数据精度说明" class="headerlink" title="3.2 数据精度说明"></a>3.2 数据精度说明</h3><p>对于浮点类型，在MySQL中单精度值使用<code>4</code>个字节，双精度值使用<code>8</code>个字节。</p><ul><li><p>MySQL允许使用 <code>非标准语法</code> （其他数据库未必支持，因此如果涉及到数据迁移，则最好不要这么 用）：<code>FLOAT(M,D)</code> 或 <code>DOUBLE(M,D) </code> 。这里，M称为 <code>精度</code> , D称为 <code>标度 </code>。(M,D)中 M&#x3D;整数位+小数位，D&#x3D;小数位。 D&lt;&#x3D;M&lt;&#x3D;255，0&lt;&#x3D;D&lt;&#x3D;30。</p><p>例如，定义为FLOAT(5,2)的一个列可以显示为-999.99-999.99。如果超过这个范围会报错。</p></li><li><p>FLOAT和DOUBLE类型在不指定(M,D)时，默认会按照实际的精度（由实际的硬件和操作系统决定） 来显示。</p></li><li><p>说明：浮点类型，也可以加 <code>UNSIGNED</code> ，但是不会改变数据范围，例如：FLOAT(3,2) UNSIGNED仍然 只能表示0-9.99的范围。</p></li><li><p>不管是否显式设置了精度(M,D)，这里MySQL的处理方案如下：</p><ul><li>如果存储时，整数部分超出了范围，MySQL就会报错，不允许存这样的值</li><li>如果存储时，小数点部分若超出范围，就分以下情况：<ul><li>若四舍五入后，整数部分没有超出范围，则只警告，但能成功操作并四舍五入删除多余 的小数位后保存。例如在FLOAT(5,2)列内插入999.009，近似结果是999.01。</li><li>若四舍五入后，整数部分超出范围，则MySQL报错，并拒绝处理。如FLOAT(5,2)列内插入 999.995和-999.995都会报错。</li></ul></li></ul></li><li><p><strong>从MySQL 8.0.17开始，FLOAT(M,D) 和DOUBLE(M,D)用法在官方文档中已经明确不推荐使用</strong>，将来可 能被移除。另外，关于浮点型FLOAT和DOUBLE的UNSIGNED也不推荐使用了，将来也可能被移除。</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_double1(<br> f1 FLOAT,<br> f2 FLOAT(5,2),<br> f3 DOUBLE,<br> f4 DOUBLE(5,2)<br>);<br><br>DESC test_double1;<br><br>INSERT INTO test_double1<br>VALUES(123.456,123.456,123.4567,123.45);<br><br>#Out of range value for column &#x27;f2&#x27; at row 1<br>INSERT INTO test_double1<br>VALUES(123.456,1234.456,123.4567,123.45); <br><br>SELECT * FROM test_double1;<br></code></pre></td></tr></table></figure></li></ul><h3 id="3-3-精度误差说明"><a href="#3-3-精度误差说明" class="headerlink" title="3.3 精度误差说明"></a>3.3 精度误差说明</h3><p>浮点数类型有个缺陷，就是不精准。下面我来重点解释一下为什么 MySQL 的浮点数不够精准。比如，我 们设计一个表，有f1这个字段，插入值分别为0.47,0.44,0.19，我们期待的运行结果是：0.47 + 0.44 + 0.19 &#x3D; 1.1。而使用sum之后查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_double2(<br> f1 DOUBLE<br>);<br><br>INSERT INTO test_double2<br>VALUES(0.47),(0.44),(0.19);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT SUM(f1)<br>-&gt; FROM test_double2;<br>+--------------------+<br>| SUM(f1)            |<br>+--------------------+<br>| 1.0999999999999999 |<br>+--------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT SUM(f1) = 1.1,1.1 = 1.1-&gt; FROM test_double2;<br>+---------------+-----------+<br>| SUM(f1) = 1.1 | 1.1 = 1.1 |<br>+---------------+-----------+<br>|             0 |         1 |<br>+---------------+-----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>查询结果是 1.0999999999999999。看到了吗？虽然误差很小，但确实有误差。 你也可以尝试把数据类型 改成 FLOAT，然后运行求和查询，得到的是， 1.0999999940395355。显然，误差更大了。</p><p>那么，为什么会存在这样的误差呢？问题还是出在 MySQL 对浮点类型数据的存储方式上。</p><p>MySQL 用 4 个字节存储 FLOAT 类型数据，用 8 个字节来存储 DOUBLE 类型数据。无论哪个，都是采用二 进制的方式来进行存储的。比如 9.625，用二进制来表达，就是 1001.101，或者表达成 1.001101×2^3。如 果尾数不是 0 或 5（比如 9.624），你就无法用一个二进制数来精确表达。进而，就只好在取值允许的范 围内进行四舍五入。</p><p>在编程中，如果用到浮点数，要特别注意误差问题，<strong>因为浮点数是不准确的，所以我们要避免使用“&#x3D;”来 判断两个数是否相等</strong>。同时，在一些对精确度要求较高的项目中，千万不要使用浮点数，不然会导致结 果错误，甚至是造成不可挽回的损失。那么，MySQL 有没有精准的数据类型呢？当然有，这就是定点数 类型： <code>DECIMAL </code>。</p><h2 id="4、定点数类型"><a href="#4、定点数类型" class="headerlink" title="4、定点数类型"></a>4、定点数类型</h2><h3 id="4-1-类型介绍"><a href="#4-1-类型介绍" class="headerlink" title="4.1 类型介绍"></a>4.1 类型介绍</h3><ul><li>MySQL中的定点数类型只有 DECIMAL 一种类型。</li></ul><table><thead><tr><th>数据类型</th><th>字节数</th><th>含义</th></tr></thead><tbody><tr><td>DECIMAL(M,D),DEC,NUMERIC</td><td>M+2字节</td><td>有效范围由M和D决定</td></tr></tbody></table><p>使用 DECIMAL(M,D) 的方式表示高精度小数。其中，M被称为精度，D被称为标度。0&lt;&#x3D;M&lt;&#x3D;65， 0&lt;&#x3D;D&lt;&#x3D;30，D&lt;M。例如，定义DECIMAL（5,2）的类型，表示该列取值范围是-999.99~999.99。</p><ul><li><p><strong>DECIMAL(M,D)的最大取值范围与DOUBLE类型一样</strong>，但是有效的数据范围是由M和D决定的。</p><p>DECIMAL 的存储空间并不是固定的，由精度值M决定，总共占用的存储空间为M+2个字节。也就是 说，在一些对精度要求不高的场景下，比起占用同样字节长度的定点数，浮点数表达的数值范围可 以更大一些。</p></li><li><p>定点数在MySQL内部是以 <code>字符串</code> 的形式进行存储，这就决定了它一定是精准的。</p></li><li><p>当DECIMAL类型不指定精度和标度时，其默认为DECIMAL(10,0)。当数据的精度超出了定点数类型的 精度范围时，则MySQL同样会进行四舍五入处理。</p></li><li><p><strong>浮点数 vs 定点数</strong></p><ul><li>浮点数相对于定点数的优点是在长度一定的情况下，浮点类型取值范围大，但是不精准，适用 于需要取值范围大，又可以容忍微小误差的科学计算场景（比如计算化学、分子建模、流体动 力学等）</li><li>定点数类型取值范围相对小，但是精准，没有误差，适合于对精度要求极高的场景 （比如涉 及金额计算的场景）</li></ul></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_decimal1(<br> f1 DECIMAL,<br> f2 DECIMAL(5,2)<br>);<br><br>DESC test_decimal1;<br><br>INSERT INTO test_decimal1(f1,f2)<br>VALUES(123.123,123.456);<br><br>#Out of range value for column &#x27;f2&#x27; at row 1<br>INSERT INTO test_decimal1(f2)<br>VALUES(1234.34);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test_decimal1;<br>+------+--------+<br>| f1   | f2     |<br>+------+--------+<br>|  123 | 123.46 |<br>+------+--------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure></li><li><p>举例</p><p>我们运行下面的语句，把test_double2表中字段“f1”的数据类型修改为 DECIMAL(5,2)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE test_double2<br>MODIFY f1 DECIMAL(5,2);<br></code></pre></td></tr></table></figure><p>然后，我们再一次运行求和语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT SUM(f1)-&gt; FROM test_double2;<br>+---------+<br>| SUM(f1) |<br>+---------+<br>|    1.10 |<br>+---------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT SUM(f1) = 1.1-&gt; FROM test_double2;<br>+---------------+<br>| SUM(f1) = 1.1 |<br>+---------------+<br>|             1 |<br>+---------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-2-开发中经验"><a href="#4-2-开发中经验" class="headerlink" title="4.2 开发中经验"></a>4.2 开发中经验</h3><blockquote><p>“由于 DECIMAL 数据类型的精准性，在我们的项目中，除了极少数（比如商品编号）用到整数类型 外，其他的数值都用的是 DECIMAL，原因就是这个项目所处的零售行业，要求精准，一分钱也不能差。 ” ——来自某项目经理</p></blockquote><h2 id="5、位类型：BIT"><a href="#5、位类型：BIT" class="headerlink" title="5、位类型：BIT"></a>5、位类型：BIT</h2><p>BIT类型中存储的是二进制值，类似010110。</p><table><thead><tr><th>二进制字符串类型</th><th>长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td>BIT(M)</td><td>M</td><td>1 &lt;&#x3D; M &lt;&#x3D; 64</td><td>约为(M + 7)&#x2F;8个字节</td></tr></tbody></table><p>BIT类型，如果没有指定(M)，默认是1位。这个1位，表示只能存1位的二进制值。这里(M)是表示二进制的 位数，位数最小值为1，最大值为64。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_bit1(<br> f1 BIT,<br> f2 BIT(5),<br> f3 BIT(64)<br>);<br><br>INSERT INTO test_bit1(f1)<br>VALUES(1);<br><br>#Data too long for column &#x27;f1&#x27; at row 1<br>INSERT INTO test_bit1(f1)<br>VALUES(2);<br><br>INSERT INTO test_bit1(f2)<br>VALUES(23);<br></code></pre></td></tr></table></figure><p>注意：在向BIT类型的字段中插入数据时，一定要确保插入的数据在BIT类型支持的范围内。</p><p>使用SELECT命令查询位字段时，可以用 <code>BIN()</code> 或 <code>HEX()</code> 函数进行读取。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM test_bit1;<br>+------------+------------+------------+<br>| f1         | f2         | f3         |<br>+------------+------------+------------+<br>| 0x01       | NULL       | NULL       |<br>| NULL       | 0x17       | NULL       |<br>+------------+------------+------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT BIN(f2),HEX(f2)-&gt; FROM test_bit1;<br>+---------+---------+<br>| BIN(f2) | HEX(f2) |<br>+---------+---------+<br>| NULL    | NULL    |<br>| 10111   | 17      |<br>+---------+---------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT f2 + 0-&gt; FROM test_bit1;<br>+--------+<br>| f2 + 0 |<br>+--------+<br>|   NULL |<br>|     23 |<br>+--------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>可以看到，使用b+0查询数据时，可以直接查询出存储的十进制数据的值。</p><h2 id="6、日期与时间类型"><a href="#6、日期与时间类型" class="headerlink" title="6、日期与时间类型"></a>6、日期与时间类型</h2><p>日期与时间是重要的信息，在我们的系统中，几乎所有的数据表都用得到。原因是客户需要知道数据的 时间标签，从而进行数据查询、统计和处理。</p><p>MySQL有多种表示日期和时间的数据类型，不同的版本可能有所差异，MySQL8.0版本支持的日期和时间 类型主要有：YEAR类型、TIME类型、DATE类型、DATETIME类型和TIMESTAMP类型。</p><ul><li><code>YEAR</code> 类型通常用来表示年</li><li><code>DATE</code> 类型通常用来表示年、月、日</li><li><code>TIME</code> 类型通常用来表示时、分、秒</li><li><code>DATETIME</code> 类型通常用来表示年、月、日、时、分、秒</li><li><code>TIMESTAMP</code> 类型通常用来表示带时区的年、月、日、时、分、秒</li></ul><table><thead><tr><th>类型</th><th>名称</th><th>字节</th><th>日期格式</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>YEAR</td><td>年</td><td>1</td><td>YYYY或YY</td><td>1901</td><td>2155</td></tr><tr><td>TIME</td><td>时间</td><td>3</td><td>HH:MM:SS</td><td>-838:59:59</td><td>838:59:59</td></tr><tr><td>DATE</td><td>日期</td><td>3</td><td>YYYY-MM-DD</td><td>1000-01-01</td><td>9999-12-03</td></tr><tr><td>DATETIME</td><td>日期 <br />时间</td><td>8</td><td>YYYY-MM-DD HH:MM:SS</td><td>1000-01-01 00:00:00</td><td>9999-12-31 23:59:59</td></tr><tr><td>TIMESTAMP</td><td>日期 <br />时间</td><td>4</td><td>YYYY-MM-DD HH:MM:SS</td><td>1970-01-01 00:00:00 UTC</td><td>2038-01-19  03:14:07UTC</td></tr></tbody></table><p>可以看到，不同数据类型表示的时间内容不同、取值范围不同，而且占用的字节数也不一样，你要根据 实际需要灵活选取。</p><p>为什么时间类型 TIME 的取值范围不是 -23:59:59～23:59:59 呢？原因是 MySQL 设计的 TIME 类型，不光表 示一天之内的时间，而且可以用来表示一个时间间隔，这个时间间隔可以超过 24 小时。</p><h3 id="6-1-YEAR类型"><a href="#6-1-YEAR类型" class="headerlink" title="6.1 YEAR类型"></a>6.1 YEAR类型</h3><p>YEAR类型用来表示年份，在所有的日期时间类型中所占用的存储空间最小，只需要 <code>1个字节</code> 的存储空间。</p><p>在MySQL中，YEAR有以下几种存储格式：</p><ul><li>以4位字符串或数字格式表示YEAR类型，其格式为YYYY，最小值为1901，最大值为2155。</li><li>以2位字符串格式表示YEAR类型，最小值为00，最大值为99。<ul><li>当取值为01到69时，表示2001到2069； </li><li>当取值为70到99时，表示1970到1999； </li><li>当取值整数的0或00添加的话，那么是0000年； </li><li>当取值是日期&#x2F;字符串的’0’添加的话，是2000年。</li></ul></li></ul><p><strong>从MySQL5.5.27开始，2位格式的YEAR已经不推荐使用</strong>。YEAR默认格式就是“YYYY”，没必要写成YEAR(4)， 从MySQL 8.0.19开始，不推荐使用指定显示宽度的YEAR(4)数据类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_year(<br> f1 YEAR,<br> f2 YEAR(4)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DESC test_year;<br>+-------+---------+------+-----+---------+-------+<br>| Field | Type    | Null | Key | Default | Extra |<br>+-------+---------+------+-----+---------+-------+<br>| f1    | year(4) | YES  |     | NULL    |       |<br>| f2    | year(4) | YES  |     | NULL    | |<br>+-------+---------+------+-----+---------+-------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_year<br>VALUES(&#x27;2020&#x27;,&#x27;2021&#x27;);<br><br>mysql&gt; SELECT * FROM test_year;<br>+------+------+<br>| f1   | f2   |<br>+------+------+<br>| 2020 | 2021 |<br>+------+------+<br>1 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_year<br>VALUES(&#x27;45&#x27;,&#x27;71&#x27;);<br><br>INSERT INTO test_year<br>VALUES(0,&#x27;0&#x27;);<br><br>mysql&gt; SELECT * FROM test_year;<br>+------+------+<br>| f1   | f2   |<br>+------+------+<br>| 2020 | 2021 |<br>| 2045 | 1971 |<br>| 0000 | 2000 |<br>+------+------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="6-2-DATE类型"><a href="#6-2-DATE类型" class="headerlink" title="6.2 DATE类型"></a>6.2 DATE类型</h3><p>DATE类型表示日期，没有时间部分，格式为 <code>YYYY-MM-DD</code> ，其中，YYYY表示年份，MM表示月份，DD表示 日期。需要 <code>3个字节</code> 的存储空间。在向DATE类型的字段插入数据时，同样需要满足一定的格式条件。</p><ul><li>以 <code>YYYY-MM-DD </code>格式或者 <code>YYYYMMDD</code> 格式表示的字符串日期，其最小取值为1000-01-01，最大取值为 9999-12-03。YYYYMMDD格式会被转化为YYYY-MM-DD格式。</li><li>以 <code>YY-MM-DD</code>格式或者 <code>YYMMDD</code> 格式表示的字符串日期，此格式中，年份为两位数值或字符串满足 YEAR类型的格式条件为：当年份取值为00到69时，会被转化为2000到2069；当年份取值为70到99 时，会被转化为1970到1999。</li><li>使用 <code>CURRENT_DATE()</code> 或者 <code>NOW()</code> 函数，会插入当前系统的日期。</li></ul><p><strong>举例：</strong></p><p>创建数据表，表中只包含一个DATE类型的字段f1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_date1(<br> f1 DATE<br> );<br>Query OK, 0 rows affected (0.13 sec)<br></code></pre></td></tr></table></figure><p>插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_date1<br>VALUES (&#x27;2020-10-01&#x27;), (&#x27;20201001&#x27;),(20201001);<br><br>INSERT INTO test_date1<br>VALUES (&#x27;00-01-01&#x27;), (&#x27;000101&#x27;), (&#x27;69-10-01&#x27;), (&#x27;691001&#x27;), (&#x27;70-01-01&#x27;), (&#x27;700101&#x27;), (&#x27;99-01-01&#x27;), (&#x27;990101&#x27;);<br><br>INSERT INTO test_date1<br>VALUES (000301), (690301), (700301), (990301);<br><br>INSERT INTO test_date1<br>VALUES (CURRENT_DATE()), (NOW());<br><br>SELECT *<br>FROM test_date1;<br></code></pre></td></tr></table></figure><h3 id="6-3-TIME类型"><a href="#6-3-TIME类型" class="headerlink" title="6.3 TIME类型"></a>6.3 TIME类型</h3><p>TIME类型用来表示时间，不包含日期部分。在MySQL中，需要 <code>3个字节</code> 的存储空间来存储TIME类型的数 据，可以使用“HH:MM:SS”格式来表示TIME类型，其中，HH表示小时，MM表示分钟，SS表示秒。</p><p>在MySQL中，向TIME类型的字段插入数据时，也可以使用几种不同的格式。</p><p> （1）可以使用带有冒号的 字符串，比如’ <code>D HH:MM:SS</code>‘ 、   ‘ <code>HH:MM:SS</code> ‘、’ <code>HH:MM</code>‘、’ <code>D HH:MM</code> ‘、’ <code>D HH</code> ‘或’ <code>SS</code> ‘格式，都能被正确地插入TIME类型的字段中。其中D表示天，其最小值为0，最大值为34。如果使用带有D格式的字符串 插入TIME类型的字段时，D会被转化为小时，计算格式为D*24+HH。当使用带有冒号并且不带D的字符串 表示时间时，表示当天的时间，比如12:10表示12:10:00，而不是00:12:10。 </p><p>（2）可以使用不带有冒号的 字符串或者数字，格式为’ <code>HHMMSS</code> ‘或者 <code>HHMMSS</code> 。如果插入一个不合法的字符串或者数字，MySQL在存 储数据时，会将其自动转化为00:00:00进行存储。比如1210，MySQL会将最右边的两位解析成秒，表示 00:12:10，而不是12:10:00。 （3）使用 <code>CURRENT_TIME()</code> 或者 <code>NOW()</code> ，会插入当前系统的时间。</p><p><strong>举例：</strong></p><p>创建数据表，表中包含一个TIME类型的字段f1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_time1(<br> f1 TIME<br>);<br>Query OK, 0 rows affected (0.02 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_time1<br>VALUES(&#x27;2 12:30:29&#x27;), (&#x27;12:35:29&#x27;), (&#x27;12:40&#x27;), (&#x27;2 12:40&#x27;),(&#x27;1 05&#x27;), (&#x27;45&#x27;);<br><br>INSERT INTO test_time1<br>VALUES (&#x27;123520&#x27;), (124011),(1210);<br><br>INSERT INTO test_time1<br>VALUES (NOW()), (CURRENT_TIME());<br><br>SELECT * FROM test_time1;<br></code></pre></td></tr></table></figure><h3 id="6-4-DATETIME类型"><a href="#6-4-DATETIME类型" class="headerlink" title="6.4 DATETIME类型"></a>6.4 DATETIME类型</h3><p>DATETIME类型在所有的日期时间类型中占用的存储空间最大，总共需要 <code>8</code> 个字节的存储空间。在格式上 为DATE类型和TIME类型的组合，可以表示为 <code>YYYY-MM-DD HH:MM:SS</code> ，其中YYYY表示年份，MM表示月 份，DD表示日期，HH表示小时，MM表示分钟，SS表示秒。</p><p>在向DATETIME类型的字段插入数据时，同样需要满足一定的格式条件。</p><ul><li>以 <code>YYYY-MM-DD HH:MM:SS</code> 格式或者 <code>YYYYMMDDHHMMSS</code> 格式的字符串插入DATETIME类型的字段时， 最小值为1000-01-01 00:00:00，最大值为9999-12-03 23:59:59。<ul><li>以YYYYMMDDHHMMSS格式的数字插入DATETIME类型的字段时，会被转化为YYYY-MM-DD HH:MM:SS格式。</li></ul></li><li>以 <code>YY-MM-DD HH:MM:SS</code> 格式或者 <code>YYMMDDHHMMSS</code> 格式的字符串插入DATETIME类型的字段时，两位 数的年份规则符合YEAR类型的规则，00到69表示2000到2069；70到99表示1970到1999。</li><li>使用函数 <code>CURRENT_TIMESTAMP()</code> 和 <code>NOW()</code> ，可以向DATETIME类型的字段插入系统的当前日期和时间。</li></ul><p><strong>举例：</strong></p><p>创建数据表，表中包含一个DATETIME类型的字段dt。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_datetime1(<br> dt DATETIME<br> );<br>Query OK, 0 rows affected (0.02 sec)<br></code></pre></td></tr></table></figure><p>插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_datetime1<br>VALUES (&#x27;2021-01-01 06:50:30&#x27;), (&#x27;20210101065030&#x27;);<br><br>INSERT INTO test_datetime1<br>VALUES (&#x27;99-01-01 00:00:00&#x27;), (&#x27;990101000000&#x27;), (&#x27;20-01-01 00:00:00&#x27;), (&#x27;200101000000&#x27;);<br><br>INSERT INTO test_datetime1<br>VALUES (20200101000000), (200101000000), (19990101000000), (990101000000);<br><br>INSERT INTO test_datetime1<br>VALUES (CURRENT_TIMESTAMP()), (NOW());<br></code></pre></td></tr></table></figure><h3 id="6-5-TIMESTAMP类型"><a href="#6-5-TIMESTAMP类型" class="headerlink" title="6.5 TIMESTAMP类型"></a>6.5 TIMESTAMP类型</h3><p>TIMESTAMP类型也可以表示日期时间，其显示格式与DATETIME类型相同，都是 <code>YYYY-MM-DD HH:MM:SS</code> ，需要4个字节的存储空间。但是TIMESTAMP存储的时间范围比DATETIME要小很多，只能存储 “1970-01-01 00:00:01 UTC”到“2038-01-19 03:14:07 UTC”之间的时间。其中，UTC表示世界统一时间，也叫 作世界标准时间。</p><ul><li><strong>存储数据的时候需要对当前时间所在的时区进行转换，查询数据的时候再将时间转换回当前的时 区。因此，使用TIMESTAMP存储的同一个时间值，在不同的时区查询时会显示不同的时间。</strong></li></ul><p>向TIMESTAMP类型的字段插入数据时，当插入的数据格式满足YY-MM-DD HH:MM:SS和YYMMDDHHMMSS 时，两位数值的年份同样符合YEAR类型的规则条件，只不过表示的时间范围要小很多。</p><p>如果向TIMESTAMP类型的字段插入的时间超出了TIMESTAMP类型的范围，则MySQL会抛出错误信息。</p><p><strong>举例：</strong></p><p>创建数据表，表中包含一个TIMESTAMP类型的字段ts。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_timestamp1(<br> ts TIMESTAMP<br>);<br></code></pre></td></tr></table></figure><p>插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_timestamp1<br>VALUES (&#x27;1999-01-01 03:04:50&#x27;), (&#x27;19990101030405&#x27;), (&#x27;99-01-01 03:04:05&#x27;), (&#x27;990101030405&#x27;);<br><br>INSERT INTO test_timestamp1<br>VALUES (&#x27;2020@01@01@00@00@00&#x27;), (&#x27;20@01@01@00@00@00&#x27;);<br><br>INSERT INTO test_timestamp1<br>VALUES (CURRENT_TIMESTAMP()), (NOW());<br><br>#Incorrect datetime value<br>INSERT INTO test_timestamp1<br>VALUES (&#x27;2038-01-20 03:14:07&#x27;);<br></code></pre></td></tr></table></figure><p><strong>TIMESTAMP和DATETIME的区别：</strong></p><ul><li>TIMESTAMP存储空间比较小，表示的日期时间范围也比较小</li><li>底层存储方式不同，TIMESTAMP底层存储的是毫秒值，距离1970-1-1 0:0:0 0毫秒的毫秒值。</li><li>两个日期比较大小或日期计算时，TIMESTAMP更方便、更快。</li><li>TIMESTAMP和时区有关。TIMESTAMP会根据用户的时区不同，显示不同的结果。而DATETIME则只能 反映出插入时当地的时区，其他时区的人查看数据必然会有误差的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE temp_time(<br> d1 DATETIME,<br> d2 TIMESTAMP<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO temp_time VALUES(&#x27;2021-9-2 14:45:52&#x27;,&#x27;2021-9-2 14:45:52&#x27;);<br><br>INSERT INTO temp_time VALUES(NOW(),NOW());<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM temp_time;<br>+---------------------+---------------------+<br>| d1                  | d2                  |<br>+---------------------+---------------------+<br>| 2021-09-02 14:45:52 | 2021-09-02 14:45:52 |<br>| 2021-11-03 17:38:17 | 2021-11-03 17:38:17 |<br>+---------------------+---------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> #修改当前的时区<br>SET time_zone = &#x27;+9:00&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM temp_time;<br>+---------------------+---------------------+<br>| d1                  | d2                  |<br>+---------------------+---------------------+<br>| 2021-09-02 14:45:52 | 2021-09-02 15:45:52 |<br>| 2021-11-03 17:38:17 | 2021-11-03 18:38:17 |<br>+---------------------+---------------------+<br>2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="6-6-开发中经验"><a href="#6-6-开发中经验" class="headerlink" title="6.6 开发中经验"></a>6.6 开发中经验</h3><p>用得最多的日期时间类型，就是  <code>DATETIME</code> 。虽然 MySQL 也支持 YEAR（年）、 TIME（时间）、 DATE（日期），以及 TIMESTAMP 类型，但是在实际项目中，尽量用 DATETIME 类型。因为这个数据类型 包括了完整的日期和时间信息，取值范围也最大，使用起来比较方便。毕竟，如果日期时间信息分散在 好几个字段，很不容易记，而且查询的时候，SQL 语句也会更加复杂。</p><p>此外，一般存注册时间、商品发布时间等，不建议使用DATETIME存储，而是使用 <code>时间戳</code>，因为 DATETIME虽然直观，但不便于计算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT UNIX_TIMESTAMP();<br>+------------------+<br>| UNIX_TIMESTAMP() |<br>+------------------+<br>|       1635932762 |<br>+------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="7、文本字符串类型"><a href="#7、文本字符串类型" class="headerlink" title="7、文本字符串类型"></a>7、文本字符串类型</h2><p>在实际的项目中，我们还经常遇到一种数据，就是字符串数据。</p><p>MySQL中，文本字符串总体上分为 <code>CHAR</code> 、 <code>VARCHAR</code> 、<code>TINYTEXT</code> 、 <code>TEXT</code> 、 <code>MEDIUMTEXT</code> 、<code>LONGTEXT</code> 、 <code>ENUM</code> 、 <code>SET</code> 等类型。</p><table><thead><tr><th>文本字符串类型</th><th>值的长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>M</td><td>0 &lt;&#x3D; M &lt;&#x3D; 255</td><td>M个字节</td></tr><tr><td>VARCHAR(R)</td><td>M</td><td>0&lt;&#x3D; M&lt;&#x3D; 65535</td><td>M+1个字节</td></tr><tr><td>TINYTEXT</td><td>L</td><td>0 &lt;&#x3D;L&lt;&#x3D; 255</td><td>M+2个字节</td></tr><tr><td>TEXT</td><td>L</td><td>0&lt;&#x3D;L&lt;&#x3D; 65535</td><td>M+2个字节</td></tr><tr><td>MEDIUMTEXT</td><td>L</td><td>0&lt;&#x3D;L&lt;&#x3D; 16777215</td><td>M+3个字节</td></tr><tr><td>LONGTEXT</td><td>L</td><td>0&lt;&#x3D;L&lt;&#x3D; 4294967295</td><td>M+4个字节</td></tr><tr><td>ENUM</td><td>L</td><td>1&lt;&#x3D;L&lt;&#x3D; 65535</td><td>1或2个字节</td></tr><tr><td>SET</td><td>L</td><td>0&lt;&#x3D;L&lt;&#x3D; 64</td><td>1，2，3，4或8个字节</td></tr></tbody></table><h3 id="7-1-CHAR与VARCHAR类型"><a href="#7-1-CHAR与VARCHAR类型" class="headerlink" title="7.1 CHAR与VARCHAR类型"></a>7.1 CHAR与VARCHAR类型</h3><p>CHAR和VARCHAR类型都可以存储比较短的字符串。</p><table><thead><tr><th>字符串(文本)类型</th><th>特点</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度</td><td>M</td><td>0 &lt;&#x3D; M &lt;&#x3D; 255</td><td>M个字节</td></tr><tr><td>VARCHAR(M)</td><td>可变长度</td><td>M</td><td>0 &lt;&#x3D; M &lt;&#x3D; 65535</td><td>(实际长度 + 1) 个字节</td></tr></tbody></table><p><strong>CHAR类型：</strong></p><ul><li>CHAR(M) 类型一般需要预先定义字符串长度。如果不指定(M)，则表示长度默认是1个字符。</li><li>如果保存时，数据的实际长度比CHAR类型声明的长度小，则会在 <code>右侧填充</code> 空格以达到指定的长 度。当MySQL检索CHAR类型的数据时，CHAR类型的字段会去除尾部的空格。</li><li>定义CHAR类型字段时，声明的字段长度即为CHAR类型字段所占的存储空间的字节数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_char1(<br> c1 CHAR,<br> c2 CHAR(5)<br>);<br><br>DESC test_char1;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_char1<br>VALUES(&#x27;a&#x27;,&#x27;Tom&#x27;);<br><br>SELECT c1,CONCAT(c2,&#x27;***&#x27;) FROM test_char1;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_char1(c2)<br>VALUES(&#x27;a  &#x27;);<br><br>SELECT CHAR_LENGTH(c2)<br>FROM test_char1;<br></code></pre></td></tr></table></figure><p> <strong>VARCHAR类型：</strong></p><ul><li>VARCHAR(M) 定义时， <code>必须指定</code>长度M，否则报错。</li><li>MySQL4.0版本以下，varchar(20)：指的是20字节，如果存放UTF8汉字时，只能存6个（每个汉字3字 节） ；MySQL5.0版本以上，varchar(20)：指的是20字符。</li><li>检索VARCHAR类型的字段数据时，会保留数据尾部的空格。VARCHAR类型的字段所占用的存储空间 为字符串实际长度加1个字节。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_varchar1(<br> NAME VARCHAR  #错误<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#Column length too big for column &#x27;NAME&#x27; (max = 21845);<br>CREATE TABLE test_varchar2(<br> NAME VARCHAR(65535)  #错误<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_varchar3(<br> NAME VARCHAR(5)<br>);<br><br>INSERT INTO test_varchar3<br>VALUES(&#x27;尚硅谷&#x27;),(&#x27;尚硅谷教育&#x27;);<br><br>#Data too long for column &#x27;NAME&#x27; at row 1<br>INSERT INTO test_varchar3<br>VALUES(&#x27;尚硅谷IT教育&#x27;);<br></code></pre></td></tr></table></figure><p><strong>哪些情况使用 CHAR 或 VARCHAR 更好</strong></p><table><thead><tr><th>类型</th><th>特点</th><th>空间上</th><th>时间上</th><th>适用场景</th></tr></thead><tbody><tr><td>CHAR(M)</td><td>固定长度</td><td>浪费存储空间</td><td>效率高</td><td>存储不大，速度要求高</td></tr><tr><td>VARCHAR(M)</td><td>可变长度</td><td>节省存储空间</td><td>效率低</td><td>非CHAR的情况</td></tr></tbody></table><p>情况1：存储很短的信息。比如门牌号码101，201……这样很短的信息应该用char，因为varchar还要占个 byte用于存储信息长度，本来打算节约存储的，结果得不偿失。</p><p>情况2：固定长度的。比如使用uuid作为主键，那用char应该更合适。因为他固定长度，varchar动态根据 长度的特性就消失了，而且还要占个长度信息。</p><p>情况3：十分频繁改变的column。因为varchar每次存储都要有额外的计算，得到长度等工作，如果一个 非常频繁改变的，那就要有很多的精力用于计算，而这些对于char来说是不需要的。</p><p>情况4：具体存储引擎中的情况：</p><ul><li><code>MyISAM</code> 数据存储引擎和数据列：MyISAM数据表，最好使用固定长度(CHAR)的数据列代替可变长 度(VARCHAR)的数据列。这样使得整个表静态化，从而使 <code>数据检索更快</code>，用空间换时间</li><li><code>MEMORY</code> 存储引擎和数据列：MEMORY数据表目前都使用固定长度的数据行存储，因此无论使用 CHAR或VARCHAR列都没有关系，两者都是作为CHAR类型处理的。</li><li><code>InnoDB</code> 存储引擎，建议使用VARCHAR类型。因为对于InnoDB数据表，内部的行存储格式并没有区 分固定长度和可变长度列（所有数据行都使用指向数据列值的头指针），<strong>而且主要影响性能的因素 是数据行使用的存储总量</strong>，由于char平均占用的空间多于varchar，所以除了简短并且固定长度的， 其他考虑varchar。这样节省空间，对磁盘I&#x2F;O和数据存储总量比较好。</li></ul><h3 id="7-2-TEXT类型"><a href="#7-2-TEXT类型" class="headerlink" title="7.2 TEXT类型"></a>7.2 TEXT类型</h3><p>在MySQL中，TEXT用来保存文本类型的字符串，总共包含4种类型，分别为TINYTEXT、TEXT、 MEDIUMTEXT 和 LONGTEXT 类型。</p><p>在向TEXT类型的字段保存和查询数据时，系统自动按照实际长度存储，不需要预先定义长度。这一点和 VARCHAR类型相同。</p><p>每种TEXT类型保存的数据长度和所占用的存储空间不同，如下：</p><table><thead><tr><th>文本字符串类型</th><th>特点</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>TINYTEXT</td><td>小文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 255</td><td>L + 2 个字节</td></tr><tr><td>TEXT</td><td>文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 65535</td><td>L + 2 个字节</td></tr><tr><td>MEDIUMTEXT</td><td>中等文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 16777215</td><td>L + 3 个字节</td></tr><tr><td>LONGTEXT</td><td>大文本、可变长度</td><td>L</td><td>0 &lt;&#x3D; L&lt;&#x3D; 4294967295（相当于 4GB）</td><td>L + 4 个字节</td></tr></tbody></table><p><strong>由于实际存储的长度不确定，MySQL 不允许 TEXT 类型的字段做主键</strong>。遇到这种情况，你只能采用 CHAR(M)，或者 VARCHAR(M)。</p><p><strong>举例：</strong></p><p>创建数据表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_text(<br> tx TEXT<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_text<br>VALUES(&#x27;atguigu   &#x27;);<br><br>SELECT CHAR_LENGTH(tx)<br>FROM test_text; #10<br></code></pre></td></tr></table></figure><p>说明在保存和查询数据时，并没有删除TEXT类型的数据尾部的空格。</p><p><strong>开发中经验：</strong></p><p>TEXT文本类型，可以存比较大的文本段，搜索速度稍慢，因此如果不是特别大的内容，建议使用CHAR， VARCHAR来代替。还有TEXT类型不用加默认值，加了也没用。而且text和blob类型的数据删除后容易导致 “空洞”，使得文件碎片比较多，所以频繁使用的表不建议包含TEXT类型字段，建议单独分出去，单独用 一个表。</p><h2 id="8、ENUM类型"><a href="#8、ENUM类型" class="headerlink" title="8、ENUM类型"></a>8、ENUM类型</h2><p>ENUM类型也叫作枚举类型，ENUM类型的取值范围需要在定义字段时进行指定。设置字段值时，ENUM 类型只允许从成员中选取单个值，不能一次选取多个值。</p><p>其所需要的存储空间由定义ENUM类型时指定的成员个数决定。</p><table><thead><tr><th>文本字符串类型</th><th>长度</th><th>长度范围</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>ENUM</td><td>L</td><td>1 &lt;&#x3D; L &lt;&#x3D; 65535</td><td>1或2个字节</td></tr></tbody></table><ul><li>当ENUM类型包含1～255个成员时，需要1个字节的存储空间；</li><li>当ENUM类型包含256～65535个成员时，需要2个字节的存储空间。</li><li>ENUM类型的成员个数的上限为65535个。</li></ul><p>举例：</p><p>创建表如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_enum(<br> season ENUM(&#x27;春&#x27;,&#x27;夏&#x27;,&#x27;秋&#x27;,&#x27;冬&#x27;,&#x27;unknow&#x27;)<br>);<br></code></pre></td></tr></table></figure><p>添加数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_enum<br>VALUES(&#x27;春&#x27;),(&#x27;秋&#x27;);<br><br># 忽略大小写<br>INSERT INTO test_enum<br>VALUES(&#x27;UNKNOW&#x27;);<br><br># 允许按照角标的方式获取指定索引位置的枚举值<br>INSERT INTO test_enum<br>VALUES(&#x27;1&#x27;),(3);<br><br># Data truncated for column &#x27;season&#x27; at row 1<br>INSERT INTO test_enum<br>VALUES(&#x27;ab&#x27;);<br><br># 当ENUM类型的字段没有声明为NOT NULL时，插入NULL也是有效的<br>INSERT INTO test_enum<br>VALUES(NULL);<br></code></pre></td></tr></table></figure><h2 id="9、SET类型"><a href="#9、SET类型" class="headerlink" title="9、SET类型"></a>9、SET类型</h2><p>SET表示一个字符串对象，可以包含0个或多个成员，但成员个数的上限为 <code>64</code> 。设置字段值时，可以取 取值范围内的 0 个或多个值。</p><p>当SET类型包含的成员个数不同时，其所占用的存储空间也是不同的，具体如下：</p><table><thead><tr><th>成员个数范围（L表示实际成员个数）</th><th>占用的存储空间</th></tr></thead><tbody><tr><td>1 &lt;&#x3D; L &lt;&#x3D; 8</td><td>1个字节</td></tr><tr><td>9 &lt;&#x3D; L &lt;&#x3D; 16</td><td>2个字节</td></tr><tr><td>17 &lt;&#x3D; L &lt;&#x3D; 24</td><td>3个字节</td></tr><tr><td>25 &lt;&#x3D; L &lt;&#x3D; 32</td><td>4个字节</td></tr><tr><td>33 &lt;&#x3D; L &lt;&#x3D; 64</td><td>8个字节</td></tr></tbody></table><p>SET类型在存储数据时成员个数越多，其占用的存储空间越大。注意：SET类型在选取成员时，可以一次 选择多个成员，这一点与ENUM类型不同。</p><p>举例：</p><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_set(<br> s SET (&#x27;A&#x27;, &#x27;B&#x27;, &#x27;C&#x27;)<br>);<br></code></pre></td></tr></table></figure><p>向表中插入数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_set (s) VALUES (&#x27;A&#x27;), (&#x27;A,B&#x27;);<br><br>#插入重复的SET类型成员时，MySQL会自动删除重复的成员<br>INSERT INTO test_set (s) VALUES (&#x27;A,B,C,A&#x27;);<br><br>#向SET类型的字段插入SET成员中不存在的值时，MySQL会抛出错误。<br>INSERT INTO test_set (s) VALUES (&#x27;A,B,C,D&#x27;);<br><br>SELECT *<br>FROM test_set;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE temp_mul(<br> gender ENUM(&#x27;男&#x27;,&#x27;女&#x27;),<br> hobby SET(&#x27;吃饭&#x27;,&#x27;睡觉&#x27;,&#x27;打豆豆&#x27;,&#x27;写代码&#x27;)<br>);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO temp_mul VALUES(&#x27;男&#x27;,&#x27;睡觉,打豆豆&#x27;); #成功<br><br># Data truncated for column &#x27;gender&#x27; at row 1<br>INSERT INTO temp_mul VALUES(&#x27;男,女&#x27;,&#x27;睡觉,写代码&#x27;); #失败<br><br># Data truncated for column &#x27;gender&#x27; at row 1<br>INSERT INTO temp_mul VALUES(&#x27;妖&#x27;,&#x27;睡觉,写代码&#x27;);#失败<br><br>INSERT INTO temp_mul VALUES(&#x27;男&#x27;,&#x27;睡觉,写代码,吃饭&#x27;); #成功<br></code></pre></td></tr></table></figure><h2 id="10、二进制字符串类型"><a href="#10、二进制字符串类型" class="headerlink" title="10、二进制字符串类型"></a>10、二进制字符串类型</h2><p>MySQL中的二进制字符串类型主要存储一些二进制数据，比如可以存储图片、音频和视频等二进制数据。</p><p>MySQL中支持的二进制字符串类型主要包括BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB 和 LONGBLOB类型。</p><h3 id="BINARY与VARBINARY类型"><a href="#BINARY与VARBINARY类型" class="headerlink" title="BINARY与VARBINARY类型"></a><strong>BINARY与VARBINARY类型</strong></h3><p>BINARY和VARBINARY类似于CHAR和VARCHAR，只是它们存储的是二进制字符串。</p><p>BINARY (M)为固定长度的二进制字符串，M表示最多能存储的字节数，取值范围是0~255个字符。如果未 指定(M)，表示只能存储 <code>1个字节</code>。例如BINARY (8)，表示最多能存储8个字节，如果字段值不足(M)个字 节，将在右边填充’\0’以补齐指定长度。</p><p>VARBINARY (M)为可变长度的二进制字符串，M表示最多能存储的字节数，总字节数不能超过行的字节长 度限制65535，另外还要考虑额外字节开销，VARBINARY类型的数据除了存储数据本身外，还需要1或2个 字节来存储数据的字节数。VARBINARY类型 <code>必须指定(M)</code> ，否则报错。</p><table><thead><tr><th>二进制字符串类型</th><th>特点</th><th>值的长度</th><th>占用空间</th></tr></thead><tbody><tr><td>BINARY(M)</td><td>固定长度</td><td>M （0 &lt;&#x3D; M &lt;&#x3D; 255）</td><td>M个字节</td></tr><tr><td>VARBINARY(M)</td><td>可变长度</td><td>M（0 &lt;&#x3D; M &lt;&#x3D; 65535）</td><td>M+1个字节</td></tr></tbody></table><p>举例：</p><p>创建表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_binary1(<br> f1 BINARY,<br> f2 BINARY(3),<br> # f3 VARBINARY,<br> f4 VARBINARY(10)<br>);<br></code></pre></td></tr></table></figure><p>添加数据：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_binary1(f1,f2)<br>VALUES(&#x27;a&#x27;,&#x27;a&#x27;);<br><br>INSERT INTO test_binary1(f1,f2)<br>VALUES(&#x27;尚&#x27;,&#x27;尚&#x27;);#失败<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_binary1(f2,f4)<br>VALUES(&#x27;ab&#x27;,&#x27;ab&#x27;);<br><br>mysql&gt; SELECT LENGTH(f2),LENGTH(f4)<br>-&gt; FROM test_binary1;<br>+------------+------------+<br>| LENGTH(f2) | LENGTH(f4) |<br>+------------+------------+<br>|          3 |       NULL |<br>|          3 |          2 |<br>+------------+------------+<br> 2 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="BLOB类型"><a href="#BLOB类型" class="headerlink" title="BLOB类型"></a>BLOB类型</h3><p>BLOB是一个 <code>二进制大对象</code>，可以容纳可变数量的数据。</p><p>MySQL中的BLOB类型包括TINYBLOB、BLOB、MEDIUMBLOB和LONGBLOB 4种类型，它们可容纳值的最大 长度不同。可以存储一个二进制的大对象，比如 <code>图片</code>、<code>音频</code> 和 <code>视频</code> 等。</p><p>需要注意的是，在实际工作中，往往不会在MySQL数据库中使用BLOB类型存储大对象数据，通常会将图 片、音频和视频文件存储到 <code>服务器的磁盘上</code>，并将图片、音频和视频的访问路径存储到MySQL中。</p><table><thead><tr><th>二进制字符串类型</th><th>值的长度</th><th>长度范围</th><th>占用空间</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 255</td><td>L + 1 个字节</td></tr><tr><td>BLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 65535（相当于64KB）</td><td>L + 2 个字节</td></tr><tr><td>MEDIUMBLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 16777215 （相当于16MB）</td><td>L + 3 个字节</td></tr><tr><td>LONGBLOB</td><td>L</td><td>0 &lt;&#x3D; L &lt;&#x3D; 4294967295（相当于4GB）</td><td>L + 4 个字节</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_blob1(<br> id INT,<br> img MEDIUMBLOB<br>);<br></code></pre></td></tr></table></figure><p><strong>TEXT和BLOB的使用注意事项：</strong></p><p>在使用text和blob字段类型时要注意以下几点，以便更好的发挥数据库的性能。</p><p>① BLOB和TEXT值也会引起自己的一些问题，特别是执行了大量的删除或更新操作的时候。删除这种值 会在数据表中留下很大的” <code>空洞</code> “，以后填入这些”空洞”的记录可能长度不同。为了提高性能，建议定期 使用 OPTIMIZE TABLE 功能对这类表进行 <code>碎片整理</code>。</p><p>② 如果需要对大文本字段进行模糊查询，MySQL 提供了 <code>前缀索引</code>。但是仍然要在不必要的时候避免检 索大型的BLOB或TEXT值。例如，SELECT * 查询就不是很好的想法，除非你能够确定作为约束条件的 WHERE子句只会找到所需要的数据行。否则，你可能毫无目的地在网络上传输大量的值。</p><p>③ 把BLOB或TEXT列 <code>分离到单独的表</code> 中。在某些环境中，如果把这些数据列移动到第二张数据表中，可 以让你把原数据表中的数据列转换为固定长度的数据行格式，那么它就是有意义的。这会 <code>减少主表中的碎片</code>，使你得到固定长度数据行的性能优势。它还使你在主数据表上运行 SELECT * 查询的时候不会通过 网络传输大量的BLOB或TEXT值。</p><h2 id="11、JSON-类型"><a href="#11、JSON-类型" class="headerlink" title="11、JSON 类型"></a>11、JSON 类型</h2><p>JSON（JavaScript Object Notation）是一种轻量级的 数据交换格式。简洁和清晰的层次结构使得 JSON 成 为理想的数据交换语言。它易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效 率。<strong>JSON 可以将 JavaScript 对象中表示的一组数据转换为字符串，然后就可以在网络或者程序之间轻 松地传递这个字符串，并在需要的时候将它还原为各编程语言所支持的数据格式。</strong></p><p>在MySQL 5.7中，就已经支持JSON数据类型。在MySQL 8.x版本中，JSON类型提供了可以进行自动验证的 JSON文档和优化的存储结构，使得在MySQL中存储和读取JSON类型的数据更加方便和高效。 创建数据 表，表中包含一个JSON类型的字段 js 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE test_json(<br> js json<br>);<br></code></pre></td></tr></table></figure><p>向表中插入JSON数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO test_json (js) <br>VALUES (&#x27;&#123;&quot;name&quot;:&quot;songhk&quot;, &quot;age&quot;:18, &quot;address&quot;:&#123;&quot;province&quot;:&quot;beijing&quot;, &quot;city&quot;:&quot;beijing&quot;&#125;&#125;&#x27;);<br></code></pre></td></tr></table></figure><p>查询t19表中的数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT *-&gt; FROM test_json;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404161125912.png" alt="image-20240416112548808"></p><p>当需要检索JSON类型的字段中数据的某个具体值时，可以使用“-&gt;”和“-&gt;&gt;”符号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT js -&gt; &#x27;$.name&#x27; AS NAME,js -&gt; &#x27;$.age&#x27; AS age ,js -&gt; &#x27;$.address.province&#x27; <br>AS province, js -&gt; &#x27;$.address.city&#x27; AS city-&gt; FROM test_json;<br><br>+----------+------+-----------+-----------+<br>| NAME     | age  | province  | city      |<br>+----------+------+-----------+-----------+<br>| &quot;songhk&quot; | 18   | &quot;beijing&quot; | &quot;beijing&quot; |<br>+----------+------+-----------+-----------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>通过“-&gt;”和“-&gt;&gt;”符号，从JSON字段中正确查询出了指定的JSON数据的值。</p><h2 id="12、空间类型"><a href="#12、空间类型" class="headerlink" title="12、空间类型"></a>12、空间类型</h2><p>MySQL 空间类型扩展支持地理特征的生成、存储和分析。这里的地理特征表示世界上具有位置的任何东 西，可以是一个实体，例如一座山；可以是空间，例如一座办公楼；也可以是一个可定义的位置，例如 一个十字路口等等。MySQL中使用 <code>Geometry（几何）</code> 来表示所有地理特征。Geometry指一个点或点的 集合，代表世界上任何具有位置的事物。</p><p>MySQL的空间数据类型（Spatial Data Type）对应于OpenGIS类，包括单值类型：GEOMETRY、POINT、 LINESTRING、POLYGON以及集合类型：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、 GEOMETRYCOLLECTION 。</p><ul><li>Geometry是所有空间集合类型的基类，其他类型如POINT、LINESTRING、POLYGON都是Geometry的子类。<ul><li>Point，顾名思义就是点，有一个坐标值。例如POINT(121.213342 31.234532)，POINT(30 10)， 坐标值支持DECIMAL类型，经度（longitude）在前，维度（latitude）在后，用空格分隔。</li><li>LineString，线，由一系列点连接而成。如果线从头至尾没有交叉，那就是简单的 （simple）；如果起点和终点重叠，那就是封闭的（closed）。例如LINESTRING(30 10,10 30,40 40)，点与点之间用逗号分隔，一个点中的经纬度用空格分隔，与POINT格式一致。</li><li>Polygon，多边形。可以是一个实心平面形，即没有内部边界，也可以有空洞，类似纽扣。最 简单的就是只有一个外边界的情况，例如POLYGON((0 0,10 0,10 10, 0 10))。</li></ul></li></ul><p>下面展示几种常见的几何图形元素：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404161128798.png" alt="image-20240416112807720" style="zoom:67%;" /><ul><li>MultiPoint、MultiLineString、MultiPolygon、GeometryCollection 这4种类型都是集合类，是多个 Point、LineString或Polygon组合而成。</li></ul><p>下面展示的是多个同类或异类几何图形元素的组合：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404161128950.png" alt="image-20240416112834852" style="zoom:67%;" /><h2 id="13、小结及选择建议"><a href="#13、小结及选择建议" class="headerlink" title="13、小结及选择建议"></a>13、小结及选择建议</h2><p>在定义数据类型时，如果确定是 <code>整数</code>，就用 <code>INT</code>； 如果是 <code>小数</code>，一定用定点数类型 <code>DECIMAL(M,D)</code> ； 如果是日期与时间，就用  <code>DATETIME</code> 。</p><p>这样做的好处是，首先确保你的系统不会因为数据类型定义出错。不过，凡事都是有两面的，可靠性 好，并不意味着高效。比如，TEXT 虽然使用方便，但是效率不如 CHAR(M) 和 VARCHAR(M)。</p><p>关于字符串的选择，建议参考如下阿里巴巴的《Java开发手册》规范：</p><p><strong>阿里巴巴《Java开发手册》之MySQL数据库：</strong></p><ul><li>任何字段如果为非负数，必须是 UNSIGNED</li><li>【<code>强制</code>】小数类型为 DECIMAL，禁止使用 FLOAT 和 DOUBLE。<ul><li>说明：在存储的时候，FLOAT 和 DOUBLE 都存在精度损失的问题，很可能在比较值的时候，得 到不正确的结果。如果存储的数据范围超过 DECIMAL 的范围，建议将数据拆成整数和小数并 分开存储。</li></ul></li><li>【<code>强制</code>】如果存储的字符串长度几乎相等，使用 CHAR 定长字符串类型。</li><li>【<code>强制</code>】VARCHAR 是可变长字符串，不预先分配存储空间，长度不要超过 5000。如果存储长度大 于此值，定义字段类型为 TEXT，独立出来一张表，用主键来对应，避免影响其它字段索引效率。</li></ul>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>创建和管理表</title>
    <link href="/2024/04/12/mysql/9%E3%80%81%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/"/>
    <url>/2024/04/12/mysql/9%E3%80%81%E5%88%9B%E5%BB%BA%E5%92%8C%E7%AE%A1%E7%90%86%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1、基础知识"><a href="#1、基础知识" class="headerlink" title="1、基础知识"></a>1、基础知识</h2><h3 id="1-1-一条数据存储的过程"><a href="#1-1-一条数据存储的过程" class="headerlink" title="1.1 一条数据存储的过程"></a>1.1 一条数据存储的过程</h3><p><code>存储数据是处理数据的第一步</code>。只有正确地把数据存储起来，我们才能进行有效的处理和分析。否则，只 能是一团乱麻，无从下手。</p><p>那么，怎样才能把用户各种经营相关的、纷繁复杂的数据，有序、高效地存储起来呢？ 在 MySQL 中， 一个完整的数据存储过程总共有 4 步，分别是创建数据库、确认字段、创建数据表、插入数据。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121604120.png" alt="image-20240412160452086"></p><p>我们要先创建一个数据库，而不是直接创建数据表呢？</p><p>因为从系统架构的层次上看，MySQL 数据库系统从大到小依次是 <code>数据库服务器</code>、<code>数据库</code>、<code>数据表 </code>数据表的 <code>行与列</code>。</p><p>MySQL 数据库服务器之前已经安装。所以，我们就从创建数据库开始。</p><h3 id="1-2-标识符命名规则"><a href="#1-2-标识符命名规则" class="headerlink" title="1.2 标识符命名规则"></a>1.2 标识符命名规则</h3><ul><li>数据库名、表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含 A–Z, a–z, 0–9, _共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使 用&#96;（着重号）引起来</li><li>保持字段名和类型的一致性：在命名字段并为其指定数据类型的时候一定要保证一致性，假如数据 类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><h3 id="1-3-MySQL中的数据类"><a href="#1-3-MySQL中的数据类" class="headerlink" title="1.3 MySQL中的数据类"></a>1.3 MySQL中的数据类</h3><table><thead><tr><th>类型</th><th>类型举例</th></tr></thead><tbody><tr><td>整数类型</td><td>TINYINT、SMALLINT、MEDIUMINT、**INT(或INTEGER)**、BIGINT</td></tr><tr><td>浮点类型</td><td>FLOAT、DOUBLE</td></tr><tr><td>定点数类型</td><td><strong>DECIMAL</strong></td></tr><tr><td>位类型</td><td>BIT</td></tr><tr><td>日期时间类型</td><td>YEAR、TIME、<strong>DATE</strong>、DATETIME、TIMESTAMP</td></tr><tr><td>文本字符串类型</td><td>CHAR、<strong>VARCHAR</strong>、TINYTEXT、TEXT、MEDIUMTEXT、LONGTEXT</td></tr><tr><td>枚举类型</td><td>ENUM</td></tr><tr><td>集合类型</td><td>SET</td></tr><tr><td>二进制字符串类型</td><td>BINARY、VARBINARY、TINYBLOB、BLOB、MEDIUMBLOB、LONGBLOB</td></tr><tr><td>JSON类型</td><td>JSON对象、JSON数组</td></tr><tr><td>空间数据类型</td><td>单值：GEOMETRY、POINT、LINESTRING、POLYGON； <br />集合：MULTIPOINT、MULTILINESTRING、MULTIPOLYGON、 GEOMETRYCOLLECTION</td></tr></tbody></table><p>其中，常用的几类类型介绍如下：</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>INT</td><td>从-2^31到2^31-1的整型数据。存储大小为 4个字节</td></tr><tr><td>CHAR(size)</td><td>定长字符数据。若未指定，默认为1个字符，最大长度255</td></tr><tr><td>VARCHAR(size)</td><td>可变长字符数据，根据字符串实际长度保存，<strong>必须指定长度</strong></td></tr><tr><td>FLOAT(M,D)</td><td>单精度，占用4个字节，M&#x3D;整数位+小数位，D&#x3D;小数位。 D&lt;&#x3D;M&lt;&#x3D;255,0&lt;&#x3D;D&lt;&#x3D;30， 默认M+D&lt;&#x3D;6</td></tr><tr><td>DOUBLE(M,D)</td><td>双精度，占用8个字节，D&lt;&#x3D;M&lt;&#x3D;255,0&lt;&#x3D;D&lt;&#x3D;30，默认M+D&lt;&#x3D;15</td></tr><tr><td>DECIMAL(M,D)</td><td>高精度小数，占用M+2个字节，D&lt;&#x3D;M&lt;&#x3D;65，0&lt;&#x3D;D&lt;&#x3D;30，最大取值范围与DOUBLE 相同。</td></tr><tr><td>DATE</td><td>日期型数据，格式’YYYY-MM-DD’</td></tr><tr><td>BLOB</td><td>二进制形式的长文本数据，最大可达4G</td></tr><tr><td>TEXT</td><td>长文本数据，最大可达4G</td></tr></tbody></table><h2 id="2、创建和管理数据库"><a href="#2、创建和管理数据库" class="headerlink" title="2、创建和管理数据库"></a>2、创建和管理数据库</h2><h3 id="2-1-创建数据库"><a href="#2-1-创建数据库" class="headerlink" title="2.1 创建数据库"></a>2.1 创建数据库</h3><ul><li>方式1：创建数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE 数据库名; <br></code></pre></td></tr></table></figure><ul><li>方式2：创建数据库并指定字符集</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE 数据库名 CHARACTER SET 字符集;<br></code></pre></td></tr></table></figure><ul><li>方式3：判断数据库是否已经存在，不存在则创建数据库（<code>推荐</code>）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE IF NOT EXISTS 数据库名; <br></code></pre></td></tr></table></figure><p>如果MySQL中已经存在相关的数据库，则忽略创建语句，不再创建数据库。</p><blockquote><p>注意：DATABASE 不能改名。一些可视化工具可以改名，它是建新库，把所有表复制到新库，再删 旧库完成的。</p></blockquote><h3 id="2-2-使用数据库"><a href="#2-2-使用数据库" class="headerlink" title="2.2 使用数据库"></a>2.2 使用数据库</h3><ul><li>查看当前所有的数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW DATABASES; #有一个S，代表多个数据库<br></code></pre></td></tr></table></figure><ul><li>查看当前正在使用的数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DATABASE();  #使用的一个 mysql 中的全局函数<br></code></pre></td></tr></table></figure><ul><li>查看指定库下所有的表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW TABLES FROM 数据库名;<br></code></pre></td></tr></table></figure><ul><li>查看数据库的创建信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CREATE DATABASE 数据库名;<br>或者：<br>SHOW CREATE DATABASE 数据库名\G<br></code></pre></td></tr></table></figure><ul><li>使用&#x2F;切换数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">USE 数据库名;<br></code></pre></td></tr></table></figure><blockquote><p>注意：要操作表格和数据之前必须先说明是对哪个数据库进行操作，否则就要对所有对象加上“数 据库名.”。</p></blockquote><h3 id="2-3-修改数据库"><a href="#2-3-修改数据库" class="headerlink" title="2.3 修改数据库"></a>2.3 修改数据库</h3><ul><li>更改数据库字符集</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER DATABASE 数据库名 CHARACTER SET 字符集;  #比如：gbk、utf8等<br></code></pre></td></tr></table></figure><h3 id="2-4-删除数据库"><a href="#2-4-删除数据库" class="headerlink" title="2.4 删除数据库"></a>2.4 删除数据库</h3><ul><li>方式1：删除指定的数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP DATABASE 数据库名;<br></code></pre></td></tr></table></figure><ul><li>方式2：删除指定的数据库（ <code>推荐</code>）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP DATABASE IF EXISTS 数据库名;<br></code></pre></td></tr></table></figure><h3 id="3、创建表"><a href="#3、创建表" class="headerlink" title="3、创建表"></a>3、创建表</h3><h4 id="3-1-创建方式1"><a href="#3-1-创建方式1" class="headerlink" title="3.1 创建方式1"></a>3.1 创建方式1</h4><ul><li><p><strong>必须具备：</strong></p><ul><li><p>CREATE TABLE权限</p></li><li><p>存储空间</p></li></ul></li><li><p><strong>语法格式：</strong></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">CREATE TABLE [IF NOT EXISTS] 表名(<br>字段1, 数据类型 [约束条件] [默认值],<br>字段2, 数据类型 [约束条件] [默认值],<br>字段3, 数据类型 [约束条件] [默认值],<br> ……<br> [表约束条件]<br>);<br></code></pre></td></tr></table></figure><blockquote><p>加上了IF NOT EXISTS关键字，则表示：如果当前数据库中不存在要创建的数据表，则创建数据表； 如果当前数据库中已经存在要创建的数据表，则忽略建表语句，不再创建数据表。</p></blockquote><ul><li><strong>必须指定：</strong><ul><li>表名</li><li>列名(或字段名)，数据类型，<strong>长度</strong></li></ul></li><li><strong>可选指定：</strong><ul><li>约束条件</li><li>默认值</li></ul></li><li>创建表举例1：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs MYSQL">-- 创建表<br>CREATE TABLE emp (<br>    -- int类型<br>    emp_id INT,<br>    -- 最多保存20个中英文字符<br>    emp_name VARCHAR(20),<br>    -- 总位数不超过15位<br>    salary DOUBLE,<br>    -- 日期类型<br>birthday DATE<br> );<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESC emp;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121622359.png" alt="image-20240412162240322" style="zoom: 67%;" /><p>MySQL在执行建表语句时，将id字段的类型设置为int(11)，这里的11实际上是int类型指定的显示宽度，默 认的显示宽度为11。也可以在创建数据表的时候指定数据的显示宽度。</p><ul><li>创建表举例2：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE dept(<br>    -- int类型，自增<br>    deptno INT(2) AUTO_INCREMENT,<br>dname VARCHAR(14),<br>loc VARCHAR(13),<br>    -- 主键<br>PRIMARY KEY (deptno)<br> );<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESCRIBE dept;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121625470.png" alt="image-20240412162538441" style="zoom:67%;" /><blockquote><p>在MySQL 8.x版本中，不再推荐为INT类型指定显示长度，并在未来的版本中可能去掉这样的语法。</p></blockquote><h4 id="3-2-创建方式2"><a href="#3-2-创建方式2" class="headerlink" title="3.2 创建方式2"></a>3.2 创建方式2</h4><ul><li>使用 AS subquery 选项，<strong>将创建表和插入数据结合起来</strong></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121626387.png" alt="image-20240412162616361" style="zoom:67%;" /><ul><li>指定的列和子查询中的列要一一对应</li><li>通过列名和默认值定义列</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE emp1 AS SELECT * FROM employees;<br>CREATE TABLE emp2 AS SELECT * FROM employees WHERE 1=2; -- 创建的emp2是空表<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE TABLE dept80<br>AS <br>SELECT  employee_id, last_name, salary*12 ANNSAL, hire_date<br>FROM    employees<br>WHERE   department_id = 80;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESCRIBE dept80;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121627461.png" alt="image-20240412162738435" style="zoom:67%;" /><h4 id="3-3-查看数据表结构"><a href="#3-3-查看数据表结构" class="headerlink" title="3.3 查看数据表结构"></a>3.3 查看数据表结构</h4><p>在MySQL中创建好数据表之后，可以查看数据表的结构。MySQL支持使用 <code>DESCRIBE/DESC</code> 语句查看数据 表结构，也支持使用 <code>SHOW CREATE TABLE</code> 语句查看数据表结构。</p><p>语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SHOW CREATE TABLE 表名\G<br></code></pre></td></tr></table></figure><p>使用SHOW CREATE TABLE语句不仅可以查看表创建时的详细语句，还可以查看存储引擎和字符编码。</p><h2 id="4、修改表"><a href="#4、修改表" class="headerlink" title="4、修改表"></a>4、修改表</h2><p>修改表指的是修改数据库中已经存在的数据表的结构。</p><p><strong>使用 ALTER TABLE 语句可以实现：</strong></p><ul><li>向已有的表中添加列 </li><li>修改现有表中的列 </li><li>删除现有表中的列 </li><li>重命名现有表中的列</li></ul><h3 id="4-1-追加一个列"><a href="#4-1-追加一个列" class="headerlink" title="4.1 追加一个列"></a>4.1 追加一个列</h3><p>语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 ADD 【COLUMN】 字段名 字段类型 【FIRST|AFTER 字段名】;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE dept80 <br>ADD job_id varchar(15);<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121630879.png" alt="image-20240412163057830" style="zoom:67%;" /><h3 id="4-2-修改一个列"><a href="#4-2-修改一个列" class="headerlink" title="4.2 修改一个列"></a>4.2 修改一个列</h3><ul><li>可以修改列的数据类型，长度、默认值和位置</li><li>修改字段数据类型、长度、默认值、位置的语法格式如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 MODIFY 【COLUMN】 字段名1 字段类型 【DEFAULT 默认值】【FIRST|AFTER 字段名<br>2】;<br></code></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE dept80<br>MODIFY last_name VARCHAR(30);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE dept80<br>MODIFY salary double(9,2) default 1000;<br></code></pre></td></tr></table></figure><ul><li>对默认值的修改只影响今后对表的修改 </li><li>此外，还可以通过此种方式修改列的约束。这里暂先不讲。</li></ul><h3 id="4-3-重命名一个列"><a href="#4-3-重命名一个列" class="headerlink" title="4.3 重命名一个列"></a>4.3 重命名一个列</h3><p>使用 CHANGE old_column new_column dataType子句重命名列。语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 CHANGE 【column】 列名 新列名 新数据类型;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE  dept80<br>CHANGE department_name dept_name varchar(15);<br></code></pre></td></tr></table></figure><h3 id="4-4-删除一个列"><a href="#4-4-删除一个列" class="headerlink" title="4.4 删除一个列"></a>4.4 删除一个列</h3><p>删除表中某个字段的语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE 表名 DROP 【COLUMN】字段名<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER TABLE  dept80<br>DROP COLUMN  job_id; <br></code></pre></td></tr></table></figure><h2 id="5、重命名表"><a href="#5、重命名表" class="headerlink" title="5、重命名表"></a>5、重命名表</h2><ul><li>方式一：使用RENAME</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">RENAME TABLE emp<br>TO myemp;<br></code></pre></td></tr></table></figure><ul><li>方式二：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">ALTER table dept<br>RENAME [TO] detail_dept;  -- [TO]可以省略<br></code></pre></td></tr></table></figure><ul><li>必须是对象的拥有者</li></ul><h2 id="6、删除表"><a href="#6、删除表" class="headerlink" title="6、删除表"></a>6、删除表</h2><ul><li>在MySQL中，当一张数据表 <code>没有与其他任何数据表形成关联关系</code> 时，可以将当前数据表直接删除。 </li><li>数据和结构都被删除 </li><li>所有正在运行的相关事务被提交 </li><li>所有相关索引被删除 </li><li>语法格式：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE [IF EXISTS] 数据表1 [, 数据表2, …, 数据表n];<br></code></pre></td></tr></table></figure><p><code> IF EXISTS</code> 的含义为：如果当前数据库中存在相应的数据表，则删除数据表；如果当前数据库中不存 在相应的数据表，则忽略删除语句，不再执行删除数据表的操作。</p><ul><li>举例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DROP TABLE dept80;<br></code></pre></td></tr></table></figure><ul><li>DROP TABLE 语句不能回滚</li></ul><h2 id="7、清空表"><a href="#7、清空表" class="headerlink" title="7、清空表"></a>7、清空表</h2><ul><li>TRUNCATE TABLE语句：<ul><li>删除表中所有的数据</li><li>释放表的存储空间</li></ul></li><li>举例：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">TRUNCATE TABLE detail_dept;<br></code></pre></td></tr></table></figure><ul><li>TRUNCATE语句<strong>不能回滚</strong>，而使用 DELETE 语句删除数据，可以回滚</li><li>对比：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SET autocommit = FALSE;<br><br>DELETE FROM emp2; <br>#TRUNCATE TABLE emp2;<br><br>SELECT * FROM emp2;<br><br>ROLLBACK;<br><br>SELECT * FROM emp2;<br></code></pre></td></tr></table></figure><blockquote><p>阿里开发规范： </p><p>【参考】TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但 TRUNCATE 无 事务且不触发 TRIGGER，有可能造成事故，故不建议在开发代码中使用此语句。 </p><p>说明：TRUNCATE TABLE 在功能上与不带 WHERE 子句的 DELETE 语句相同。</p></blockquote><h2 id="8、内容拓展"><a href="#8、内容拓展" class="headerlink" title="8、内容拓展"></a>8、内容拓展</h2><h3 id="拓展1：阿里巴巴《Java开发手册》之MySQL字段命名"><a href="#拓展1：阿里巴巴《Java开发手册》之MySQL字段命名" class="headerlink" title="拓展1：阿里巴巴《Java开发手册》之MySQL字段命名"></a>拓展1：阿里巴巴《Java开发手册》之MySQL字段命名</h3><ul><li>【<code>强制</code>】表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出 现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑。<ul><li>正例：aliyun_admin，rdc_config，level3_name</li><li>反例：AliyunAdmin，rdcConfig，level_3_name</li></ul></li><li>【<code>强制</code>】禁用保留字，如 desc、range、match、delayed 等，请参考 MySQL 官方保留字。</li><li>【<code>强制</code>】表必备三字段：id, gmt_create, gmt_modified。<ul><li>说明：其中 id 必为主键，类型为BIGINT UNSIGNED、单表时自增、步长为 1。gmt_create, gmt_modified 的类型均为 DATETIME 类型，前者现在时表示主动式创建，后者过去分词表示被 动式更新</li></ul></li><li>【<code>推荐</code>】表的命名最好是遵循 “业务名称_表的作用”。<ul><li>正例：alipay_task 、 force_project、 trade_config</li></ul></li><li>【<code>推荐</code>】库名与应用名称尽量一致。</li><li>【参考】合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速 度。<ul><li>正例：无符号值可以避免误存负数，且扩大了表示范围。</li></ul></li></ul><table><thead><tr><th>对象</th><th>年龄区间</th><th>类型</th><th>字节</th><th>表示范围</th></tr></thead><tbody><tr><td>人</td><td>150 岁之内</td><td>tinyint unsigned</td><td>1</td><td>无符号值:0 到 255</td></tr><tr><td>龟</td><td>数百岁</td><td>smallint unsigned</td><td>2</td><td>无符号值:0到65535</td></tr><tr><td>恐龙化石</td><td>数千万年</td><td>int unsigned</td><td>3</td><td>无符号值:0 到约 43 亿</td></tr><tr><td>太阳</td><td>约 50 亿年</td><td>bigint unsigned</td><td>8</td><td>无符号值:0 到约 10 的 19 次方</td></tr></tbody></table><h3 id="拓展2：如何理解清空表、删除表等操作需谨慎？！"><a href="#拓展2：如何理解清空表、删除表等操作需谨慎？！" class="headerlink" title="拓展2：如何理解清空表、删除表等操作需谨慎？！"></a>拓展2：如何理解清空表、删除表等操作需谨慎？！</h3><p><code>表删除</code> 操作将把表的定义和表中的数据一起删除，并且MySQL在执行删除操作时，不会有任何的确认信 息提示，因此执行删除操时应当慎重。在删除表前，最好对表中的数据进行 <code>备份</code>，这样当操作失误时可 以对数据进行恢复，以免造成无法挽回的后果。</p><p>同样的，在使用  <code>ALTER TABLE</code> 进行表的基本修改操作时，在执行操作过程之前，也应该确保对数据进 行完整的 <code>备份</code>，因为数据库的改变是 <code>无法撤销</code>的，如果添加了一个不需要的字段，可以将其删除；相 同的，如果删除了一个需要的列，该列下面的所有数据都将会丢失。</p><h3 id="拓展3：MySQL8新特性—DDL的原子化"><a href="#拓展3：MySQL8新特性—DDL的原子化" class="headerlink" title="拓展3：MySQL8新特性—DDL的原子化"></a>拓展3：MySQL8新特性—DDL的原子化</h3><p>在MySQL 8.0版本中，InnoDB表的DDL支持事务完整性，即 <code>DDL操作要么成功要么回滚</code>。DDL操作回滚日志 写入到data dictionary数据字典表mysql.innodb_ddl_log（该表是隐藏的表，通过show tables无法看到） 中，用于回滚操作。通过设置参数，可将DDL操作日志打印输出到MySQL错误日志中。</p><p>分别在MySQL 5.7版本和MySQL 8.0版本中创建数据库和数据表，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE mytest;<br> <br>USE mytest;<br><br>CREATE TABLE book1(<br>book_id INT ,<br>book_name VARCHAR(255)<br>);<br>SHOW TABLES;<br></code></pre></td></tr></table></figure><p>（1）在MySQL 5.7版本中，测试步骤如下： 删除数据表book1和数据表book2，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DROP TABLE book1,book2;<br>ERROR 1051 (42S02): Unknown table &#x27;mytest.book2&#x27;<br></code></pre></td></tr></table></figure><p>再次查询数据库中的数据表名称，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SHOW TABLES;<br>Empty set (0.00 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，虽然删除操作时报错了，但是仍然删除了数据表book1。</p><p>（2）在MySQL 8.0版本中，测试步骤如下： 删除数据表book1和数据表book2，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; DROP TABLE book1,book2;<br>ERROR 1051 (42S02): Unknown table &#x27;mytest.book2&#x27;<br></code></pre></td></tr></table></figure><p>再次查询数据库中的数据表名称，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; show tables;<br>+------------------+<br>| Tables_in_mytest |<br>+------------------+<br>| book1            |<br>+------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>从结果可以看出，数据表book1并没有被删除。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>子查询</title>
    <link href="/2024/04/12/mysql/8%E3%80%81%E5%AD%90%E6%9F%A5%E8%AF%A2/"/>
    <url>/2024/04/12/mysql/8%E3%80%81%E5%AD%90%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="1、需求分析与问题解决"><a href="#1、需求分析与问题解决" class="headerlink" title="1、需求分析与问题解决"></a>1、需求分析与问题解决</h2><h3 id="1-1-实际问题"><a href="#1-1-实际问题" class="headerlink" title="1.1 实际问题"></a>1.1 实际问题</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121441835.png" alt="image-20240412144110794" style="zoom:50%;" /><p>现有解决方式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式一：<br>SELECT salary<br>FROM employees<br>WHERE last_name = &#x27;Abel&#x27;;<br><br>SELECT last_name,salary<br>FROM employees<br>WHERE salary &gt; 11000;<br><br>#方式二：自连接<br>SELECT e2.last_name,e2.salary<br>FROM employees e1,employees e2<br>WHERE e1.last_name = &#x27;Abel&#x27;<br>AND e1.`salary` &lt; e2.`salary`<br><br>#方式三：子查询<br>SELECT last_name,salary<br>FROM employees<br>WHERE salary &gt; (<br>SELECT salary<br>FROM employees<br>WHERE last_name = &#x27;Abel&#x27;<br>);<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121446540.png" alt="image-20240412144606513" style="zoom: 67%;" /><h3 id="1-2-子查询的基本使用"><a href="#1-2-子查询的基本使用" class="headerlink" title="1.2 子查询的基本使用"></a>1.2 子查询的基本使用</h3><ul><li>子查询的基本语法结构：</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121446092.png" alt="image-20240412144645066" style="zoom:67%;" /><ul><li>子查询（内查询）在主查询之前一次执行完成。</li><li>子查询的结果被主查询（外查询）使用 。</li><li>注意事项<ul><li>子查询要包含在括号内</li><li>将子查询放在比较条件的右侧</li><li>单行操作符对应单行子查询，多行操作符对应多行子查询</li></ul></li></ul><h3 id="1-3-子查询的分类"><a href="#1-3-子查询的分类" class="headerlink" title="1.3 子查询的分类"></a>1.3 子查询的分类</h3><p><strong>分类方式1：</strong></p><p>我们按内查询的结果返回一条还是多条记录，将子查询分为 <code>单行子查询</code>、<code>多行子查询</code>。</p><ul><li>单行子查询</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121448518.png" alt="image-20240412144837495" style="zoom:50%;" /><ul><li>多行子查询</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121448360.png" alt="image-20240412144857337" style="zoom:50%;" /><p><strong>分类方式2：</strong></p><p>我们按内查询是否被执行多次，将子查询划分为 <code>相关(或关联)子查询</code> 和 <code>不相关(或非关联)子查询</code>。</p><p>子查询从数据表中查询了数据结果，如果这个数据结果只执行一次，然后这个数据结果作为主查询的条 件进行执行，那么这样的子查询叫做不相关子查询。</p><p>同样，如果子查询需要执行多次，即采用循环的方式，先从外部查询开始，每次都传入子查询进行查 询，然后再将结果反馈给外部，这种嵌套的执行方式就称为相关子查询。</p><h2 id="2、单行子查询"><a href="#2、单行子查询" class="headerlink" title="2、单行子查询"></a>2、单行子查询</h2><h3 id="2-1-单行比较操作符"><a href="#2-1-单行比较操作符" class="headerlink" title="2.1 单行比较操作符"></a>2.1 单行比较操作符</h3><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>&#x3D;</td><td>equal to</td></tr><tr><td>&gt;</td><td>greater than</td></tr><tr><td>&gt;&#x3D;</td><td>greater than or equal to</td></tr><tr><td>&lt;</td><td>less than</td></tr><tr><td>&lt;&#x3D;</td><td>less than or equal to</td></tr><tr><td>&lt;&gt;</td><td>not equal to</td></tr></tbody></table><h3 id="2-2-代码示例"><a href="#2-2-代码示例" class="headerlink" title="2.2 代码示例"></a>2.2 代码示例</h3><p><strong>题目：查询工资大于149号员工工资的员工的信息</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121451477.png" alt="image-20240412145130444" style="zoom:50%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121451675.png" alt="image-20240412145145645" style="zoom:50%;" /><p><strong>题目：返回job_id与141号员工相同，salary比143号员工多的员工姓名，job_id和工资</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name, job_id, salary<br>FROM   employees<br>WHERE  job_id =  <br>               (SELECT job_id<br>                FROM   employees<br>                WHERE  employee_id = 141)<br>AND    salary &gt;<br>               (SELECT salary<br>                FROM   employees<br>                WHERE  employee_id = 143);<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121452917.png" alt="image-20240412145238896" style="zoom:67%;" /><p><strong>题目：返回公司工资最少的员工的last_name,job_id和salary</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name, job_id, salary<br>FROM   employees<br>WHERE  salary = <br>               (SELECT MIN(salary)<br>                FROM   employees);<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121453588.png" alt="image-20240412145319567"></p><p><strong>题目：查询与141号或174号员工的manager_id和department_id相同的其他员工的employee_id， manager_id，department_id</strong></p><p>实现方式1：不成对比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT  employee_id, manager_id, department_id<br>FROM    employees<br>WHERE   manager_id IN<br>         (SELECT  manager_id<br>                  FROM    employees<br>                  WHERE   employee_id IN (174,141))<br>AND     department_id IN <br>         (SELECT  department_id<br>                  FROM    employees<br>                  WHERE   employee_id IN (174,141))<br>AND employee_id NOT IN(174,141);<br></code></pre></td></tr></table></figure><p>实现方式2：成对比较</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT  employee_id, manager_id, department_id<br>FROM    employees<br>WHERE  (manager_id, department_id) IN<br>                     (SELECT manager_id, department_id<br>                      FROM   employees<br>                      WHERE  employee_id IN (141,174))<br>AND employee_id NOT IN (141,174);<br></code></pre></td></tr></table></figure><h3 id="2-3-HAVING-中的子查询"><a href="#2-3-HAVING-中的子查询" class="headerlink" title="2.3 HAVING 中的子查询"></a>2.3 HAVING 中的子查询</h3><ul><li>首先执行子查询。</li><li>向主查询中的HAVING 子句返回结果。</li></ul><p><strong>题目：查询最低工资大于50号部门最低工资的部门id和其最低工资</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT   department_id, MIN(salary)<br>FROM     employees<br>GROUP BY department_id<br>HAVING   MIN(salary) &gt;<br>                      (SELECT MIN(salary)<br>                       FROM   employees<br>                       WHERE  department_id = 50);<br></code></pre></td></tr></table></figure><h3 id="2-4-CASE中的子查询"><a href="#2-4-CASE中的子查询" class="headerlink" title="2.4 CASE中的子查询"></a>2.4 CASE中的子查询</h3><p>在CASE表达式中使用单列子查询：</p><p><strong>题目：显式员工的employee_id,last_name和location。其中，若员工department_id与location_id为1800 的department_id相同，则location为’Canada’，其余则为’USA’。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id, last_name,<br>      (CASE department_id<br>       WHEN<br>            (SELECT department_id FROM departments<br>         WHERE location_id = 1800)           <br>       THEN &#x27;Canada&#x27; ELSE &#x27;USA&#x27; END) location<br>FROM   employees;<br></code></pre></td></tr></table></figure><h3 id="2-5-子查询中的空值问题"><a href="#2-5-子查询中的空值问题" class="headerlink" title="2.5 子查询中的空值问题"></a>2.5 子查询中的空值问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name, job_id<br>FROM   employees<br>WHERE  job_id =<br>               (SELECT job_id<br>                FROM   employees<br>                WHERE  last_name = &#x27;Haas&#x27;);<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121456348.png" alt="image-20240412145651326"></p><blockquote><p><strong>子查询不返回任何行</strong></p></blockquote><h3 id="2-6-非法使用子查询"><a href="#2-6-非法使用子查询" class="headerlink" title="2.6 非法使用子查询"></a>2.6 非法使用子查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id, last_name<br>FROM   employees<br>WHERE  salary =<br>               (SELECT   MIN(salary)<br>                FROM     employees<br>                GROUP BY department_id);<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121457402.png" alt="image-20240412145755378"></p><blockquote><p><strong>多行子查询使用单行比较符</strong></p></blockquote><h2 id="3、多行子查询"><a href="#3、多行子查询" class="headerlink" title="3、多行子查询"></a>3、多行子查询</h2><ul><li>也称为集合比较子查询 </li><li>内查询返回多行 </li><li>使用多行比较操作符</li></ul><h3 id="3-1-多行比较操作符"><a href="#3-1-多行比较操作符" class="headerlink" title="3.1 多行比较操作符"></a>3.1 多行比较操作符</h3><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN</td><td>等于列表中的<strong>任意一个</strong></td></tr><tr><td>ANY</td><td>需要和单行比较操作符一起使用，和子查询返回的<strong>某一个</strong>值比较</td></tr><tr><td>ALL</td><td>需要和单行比较操作符一起使用，和子查询返回的<strong>所有</strong>值比较</td></tr><tr><td>SOME</td><td>实际上是ANY的别名，作用相同，一般常使用ANY</td></tr></tbody></table><blockquote><p>体会 ANY 和 ALL 的区别</p></blockquote><h3 id="3-2-代码示例"><a href="#3-2-代码示例" class="headerlink" title="3.2 代码示例"></a>3.2 代码示例</h3><p><strong>题目：返回其它job_id中比job_id为‘IT_PROG’部门任一工资低的员工的员工号、姓名、job_id 以及salary</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121501929.png" alt="image-20240412150139889" style="zoom:50%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121501577.png" alt="image-20240412150154551" style="zoom:50%;" /><p><strong>题目：返回其它job_id中比job_id为‘IT_PROG’部门所有工资都低的员工的员工号、姓名、job_id以及 salary</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121502833.png" alt="image-20240412150226798" style="zoom:50%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121502691.png" alt="image-20240412150242664" style="zoom:50%;" /><p><strong>题目：查询平均工资最低的部门id</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> #方式1：<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING AVG(salary) = (<br>SELECT MIN(avg_sal)<br>FROM (<br>SELECT AVG(salary) avg_sal<br>FROM employees<br>GROUP BY department_id<br>) dept_avg_sal<br>)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式2：<br>SELECT department_id<br>FROM employees<br>GROUP BY department_id<br>HAVING AVG(salary) &lt;= ALL (<br>SELECT AVG(salary) avg_sal<br>FROM employees<br>GROUP BY department_id<br>)<br></code></pre></td></tr></table></figure><h3 id="3-3-空值问题"><a href="#3-3-空值问题" class="headerlink" title="3.3 空值问题"></a>3.3 空值问题</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name<br>FROM employees<br>WHERE employee_id NOT IN (<br>SELECT manager_id<br>FROM employees<br>);<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121526745.png" alt="image-20240412152657721" style="zoom: 50%;" /><h2 id="4、相关子查询"><a href="#4、相关子查询" class="headerlink" title="4、相关子查询"></a>4、相关子查询</h2><h3 id="4-1-相关子查询执行流程"><a href="#4-1-相关子查询执行流程" class="headerlink" title="4.1 相关子查询执行流程"></a>4.1 相关子查询执行流程</h3><p>如果子查询的执行依赖于外部查询，通常情况下都是因为子查询中的表用到了外部的表，并进行了条件 关联，因此每执行一次外部查询，子查询都要重新计算一次，这样的子查询就称之为 <code>关联子查询</code>。</p><p>相关子查询按照一行接一行的顺序执行，主查询的每一行都执行一次子查询。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121529716.png" alt="image-20240412152945659" style="zoom:50%;" /><p>说明：<strong>子查询中使用主查询中的列</strong></p><h3 id="4-2-代码示例"><a href="#4-2-代码示例" class="headerlink" title="4.2 代码示例"></a>4.2 代码示例</h3><p><strong>题目：查询员工中工资大于本部门平均工资的员工的last_name,salary和其department_id</strong></p><p><strong>方式一：相关子查询</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121531620.png" alt="image-20240412153116580" style="zoom:50%;" /><p><strong>方式二：在 FROM 中使用子查询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name,salary,e1.department_id<br>FROM employees e1,(SELECT department_id,AVG(salary) dept_avg_sal FROM employees GROUP <br>BY department_id) e2<br>WHERE e1.`department_id` = e2.department_id<br>AND e2.dept_avg_sal &lt; e1.`salary`;<br></code></pre></td></tr></table></figure><blockquote><p>from型的子查询：子查询是作为from的一部分，子查询要用()引起来，并且要给这个子查询取别 名， 把它当成一张“临时的虚拟的表”来使用。</p></blockquote><p>在ORDER BY 中使用子查询：</p><p><strong>题目：查询员工的id,salary,按照department_name 排序</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,salary<br>FROM employees e<br>ORDER BY (<br>SELECT department_name<br>FROM departments d<br>WHERE e.`department_id` = d.`department_id`<br>);<br></code></pre></td></tr></table></figure><p><strong>题目：若employees表中employee_id与job_history表中employee_id相同的数目不小于2，输出这些相同 id的员工的employee_id,last_name和其job_id</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT e.employee_id, last_name,e.job_id<br>FROM   employees e <br>WHERE  2 &lt;= (SELECT COUNT(*)<br>FROM   job_history <br>WHERE  employee_id = e.employee_id);<br></code></pre></td></tr></table></figure><h3 id="4-3-EXISTS-与-NOT-EXISTS关键字"><a href="#4-3-EXISTS-与-NOT-EXISTS关键字" class="headerlink" title="4.3 EXISTS 与 NOT EXISTS关键字"></a>4.3 EXISTS 与 NOT EXISTS关键字</h3><ul><li><p>关联子查询通常也会和 EXISTS操作符一起来使用，用来检查在子查询中是否存在满足条件的行。</p></li><li><p><strong>如果在子查询中不存在满足条件的行：</strong></p><ul><li>条件返回 FALSE</li><li>继续在子查询中查找</li></ul></li><li><p><strong>如果在子查询中存在满足条件的行：</strong></p><ul><li>不在子查询中继续查找</li><li>条件返回 TRUE</li></ul></li><li><p>NOT EXISTS关键字表示如果不存在某种条件，则返回TRUE，否则返回FALSE。</p></li></ul><p><strong>题目：查询公司管理者的employee_id，last_name，job_id，department_id信息</strong></p><p>方式一：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id, last_name, job_id, department_id<br>FROM   employees e1<br>WHERE  EXISTS ( SELECT *<br>FROM   employees e2<br>WHERE  e2.manager_id = <br>   e1.employee_id);<br></code></pre></td></tr></table></figure><p>方式二：自连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DISTINCT e1.employee_id, e1.last_name, e1.job_id, e1.department_id<br>FROM   employees e1 JOIN employees e2<br>WHERE e1.employee_id = e2.manager_id;<br></code></pre></td></tr></table></figure><p>方式三：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,last_name,job_id,department_id<br>FROM employees<br>WHERE employee_id IN (<br>             SELECT DISTINCT manager_id<br>             FROM employees<br>             );<br></code></pre></td></tr></table></figure><p><strong>题目：查询departments表中，不存在于employees表中的部门的department_id和department_name</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT department_id, department_name<br>FROM departments d<br>WHERE NOT EXISTS (SELECT &#x27;X&#x27;<br>                  FROM   employees<br>                  WHERE  department_id = d.department_id);<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121538917.png" alt="image-20240412153819892"></p><h3 id="4-4-相关更新"><a href="#4-4-相关更新" class="headerlink" title="4.4 相关更新"></a>4.4 相关更新</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE table1 alias1<br>SET    column = (SELECT expression<br>                FROM   table2 alias2<br>                WHERE  alias1.column = alias2.column);<br></code></pre></td></tr></table></figure><p>使用相关子查询依据一个表中的数据更新另一个表的数据。</p><p><strong>题目：在employees中增加一个department_name字段，数据为员工对应的部门名称</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1）<br>ALTER TABLE employees<br>ADD(department_name VARCHAR2(14));<br><br># 2）<br>UPDATE employees e<br>SET department_name =  (SELECT department_name <br>                        FROM   departments d<br>                        WHERE  e.department_id = d.department_id);<br></code></pre></td></tr></table></figure><h3 id="4-5-相关删除"><a href="#4-5-相关删除" class="headerlink" title="4.5 相关删除"></a>4.5 相关删除</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM table1 alias1<br>WHERE column operator (SELECT expression<br>                       FROM   table2 alias2<br>                       WHERE  alias1.column = alias2.column);<br></code></pre></td></tr></table></figure><p>使用相关子查询依据一个表中的数据删除另一个表的数据。</p><p><strong>题目：删除表employees中，其与emp_history表皆有的数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM employees e<br>WHERE employee_id in  <br>          (SELECT employee_id<br>           FROM   emp_history <br>           WHERE  employee_id = e.employee_id);<br></code></pre></td></tr></table></figure><h2 id="5、抛一个思考题"><a href="#5、抛一个思考题" class="headerlink" title="5、抛一个思考题"></a>5、抛一个思考题</h2><p><strong>问题</strong>：谁的工资比Abel的高？</p><p><strong>解答：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式1：自连接<br>SELECT e2.last_name,e2.salary<br>FROM employees e1,employees e2<br>WHERE e1.last_name = &#x27;Abel&#x27;<br>AND e1.`salary` &lt; e2.`salary`<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式2：子查询<br>SELECT last_name,salary<br>FROM employees<br>WHERE salary &gt; (<br>SELECT salary<br>FROM employees<br>WHERE last_name = &#x27;Abel&#x27;<br>);<br></code></pre></td></tr></table></figure><p><strong>问题</strong>：以上两种方式有好坏之分吗？</p><p><strong>解答</strong>：自连接方式好！</p><p>题目中可以使用子查询，也可以使用自连接。一般情况建议你使用自连接，因为在许多 DBMS 的处理过 程中，对于自连接的处理速度要比子查询快得多。</p><p>可以这样理解：子查询实际上是通过未知表进行查询后的条件判断，而自连接是通过已知的自身数据表 进行条件判断，因此在大部分 DBMS 中都对自连接处理进行了优化</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据处理之增删改</title>
    <link href="/2024/04/12/mysql/10%E3%80%81%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9/"/>
    <url>/2024/04/12/mysql/10%E3%80%81%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86%E4%B9%8B%E5%A2%9E%E5%88%A0%E6%94%B9/</url>
    
    <content type="html"><![CDATA[<h2 id="1、插入数据"><a href="#1、插入数据" class="headerlink" title="1、插入数据"></a>1、插入数据</h2><h3 id="1-1-实际问题"><a href="#1-1-实际问题" class="headerlink" title="1.1 实际问题"></a>1.1 实际问题</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121653636.png" alt="image-20240412165329586" style="zoom:50%;" /><p>解决方式：使用 INSERT 语句向表中插入数据。</p><h3 id="1-2-方式1：VALUES的方式添加"><a href="#1-2-方式1：VALUES的方式添加" class="headerlink" title="1.2 方式1：VALUES的方式添加"></a>1.2 方式1：VALUES的方式添加</h3><p>使用这种语法一次只能向表中插入<strong>一条</strong>数据。</p><p><strong>情况1：为表的所有字段按默认顺序插入数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO 表名<br>VALUES (value1,value2,....);<br></code></pre></td></tr></table></figure><p>值列表中需要为表的每一个字段指定值，并且值的顺序必须和数据表中字段定义时的顺序相同。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysq">INSERT INTO departments<br>VALUES (70, &#x27;Pub&#x27;, 100, 1700);<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO departments<br>VALUES      (100, &#x27;Finance&#x27;, NULL, NULL);<br></code></pre></td></tr></table></figure><p><strong>情况2：为表的指定字段插入数据</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO 表名(column1 [, column2, …, columnn]) <br>VALUES (value1 [,value2, …, valuen]);<br></code></pre></td></tr></table></figure><p>为表的指定字段插入数据，就是在INSERT语句中只向部分字段中插入值，而其他字段的值为表定义时的 默认值。</p><p>在 INSERT 子句中随意列出列名，但是一旦列出，VALUES中要插入的value1,….valuen需要与 column1,…columnn列一一对应。如果类型不同，将无法插入，并且MySQL会产生错误。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO departments(department_id, department_name)<br>VALUES (80, &#x27;IT&#x27;);<br></code></pre></td></tr></table></figure><p><strong>情况3：同时插入多条记录</strong></p><p>INSERT语句可以同时向数据表中插入多条记录，插入时指定多个值列表，每个值列表之间用逗号分隔 开，基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO table_name <br>VALUES <br>(value1 [,value2, …, valuen]),<br>(value1 [,value2, …, valuen]),<br>……<br>(value1 [,value2, …, valuen]);<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO table_name(column1 [, column2, …, columnn]) <br>VALUES <br>(value1 [,value2, …, valuen]),<br>(value1 [,value2, …, valuen]),<br>……<br>(value1 [,value2, …, valuen]);<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; INSERT INTO emp(emp_id,emp_name)<br>-&gt; VALUES (1001,&#x27;shkstart&#x27;),<br>-&gt; (1002,&#x27;atguigu&#x27;),<br>-&gt; (1003,&#x27;Tom&#x27;);<br>Query OK, 3 rows affected (0.00 sec)<br>Records: 3  Duplicates: 0  Warnings: 0<br></code></pre></td></tr></table></figure><p>使用INSERT同时插入多条记录时，MySQL会返回一些在执行单行插入时没有的额外信息，这些信息的含 义如下： </p><ul><li>Records：表明插入的记录条数。 </li><li>Duplicates：表明插入时被忽略的记录，原因可能是这 些记录包含了重复的主键值。 </li><li>Warnings：表明有问题的数据值，例如发生数据类型转换。</li></ul><blockquote><p>一个同时插入多行记录的INSERT语句等同于多个单行插入的INSERT语句，但是多行的INSERT语句 在处理过程中 <code>效率更高</code>。因为MySQL执行单条INSERT语句插入多行数据比使用多条INSERT语句 快，所以在插入多条记录时最好选择使用单条INSERT语句的方式插入。</p></blockquote><p>小结：</p><ul><li><p><code>VALUES</code> 也可以写成 <code>VALUE</code> ，但是VALUES是标准写法。</p></li><li><p>字符和日期型数据应包含在单引号中。</p></li></ul><h3 id="1-3-方式2：将查询结果插入到表中"><a href="#1-3-方式2：将查询结果插入到表中" class="headerlink" title="1.3 方式2：将查询结果插入到表中"></a>1.3 方式2：将查询结果插入到表中</h3><p>INSERT还可以将SELECT语句查询的结果插入到表中，此时不需要把每一条记录的值一个一个输入，只需 要使用一条INSERT语句和一条SELECT语句组成的组合语句即可快速地从一个或多个表中向一个表中插入 多行。</p><p>基本语法格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO 目标表名<br>(tar_column1 [, tar_column2, …, tar_columnn])<br>SELECT<br>(src_column1 [, src_column2, …, src_columnn])<br>FROM 源表名<br>[WHERE condition]<br></code></pre></td></tr></table></figure><ul><li>在 INSERT 语句中加入子查询。</li><li><strong>不必书写 VALUES 子句。</strong></li><li>子查询中的值列表应与 INSERT 子句中的列名对应。</li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO emp2 <br>SELECT * <br>FROM employees<br>WHERE department_id = 90;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO sales_reps(id, name, salary, commission_pct)<br>SELECT employee_id, last_name, salary, commission_pct<br>FROM   employees<br>WHERE  job_id LIKE &#x27;%REP%&#x27;;<br></code></pre></td></tr></table></figure><h2 id="2、更新数据"><a href="#2、更新数据" class="headerlink" title="2、更新数据"></a>2、更新数据</h2><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121700305.png" alt="image-20240412170034238" style="zoom: 50%;" /><ul><li>使用 UPDATE 语句更新数据。语法如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE table_name<br>SET column1=value1, column2=value2, … , column=valuen<br>[WHERE condition]<br></code></pre></td></tr></table></figure><ul><li>可以一次更新<strong>多条</strong>数据。</li><li>如果需要回滚数据，需要保证在DML前，进行设置：<strong>SET AUTOCOMMIT &#x3D; FALSE</strong>;</li><li>使用 <strong>WHERE</strong> 子句指定需要更新的数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE employees<br>SET    department_id = 70<br>WHERE  employee_id = 113;<br></code></pre></td></tr></table></figure><ul><li>如果省略 WHERE 子句，则表中的所有数据都将被更新。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE  copy_emp<br>SET     department_id = 110;<br></code></pre></td></tr></table></figure><ul><li><strong>更新中的数据完整性错误</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE employees<br>SET    department_id = 55<br>WHERE  department_id = 110;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121704047.png" alt="image-20240412170443005" style="zoom:67%;" /><blockquote><p>说明：不存在 55 号部门</p></blockquote><h2 id="3、删除数据"><a href="#3、删除数据" class="headerlink" title="3、删除数据"></a>3、删除数据</h2><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121706291.png" alt="image-20240412170615237" style="zoom:67%;" /><ul><li>使用 DELETE 语句从表中删除数据</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121706642.png" alt="image-20240412170632614" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM table_name [WHERE &lt;condition&gt;];<br></code></pre></td></tr></table></figure><p> table_name指定要执行删除操作的表；“[WHERE ]”为可选参数，指定删除条件，如果没有WHERE子句， DELETE语句将删除表中的所有记录。</p><ul><li>使用 WHERE 子句删除指定的记录。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM departments<br>WHERE  department_name = &#x27;Finance&#x27;;<br></code></pre></td></tr></table></figure><ul><li>如果省略 WHERE 子句，则表中的全部数据将被删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM  copy_emp;<br></code></pre></td></tr></table></figure><ul><li><strong>删除中的数据完整性错误</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DELETE FROM departments<br>WHERE       department_id = 60;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121708624.png" alt="image-20240412170838582" style="zoom: 67%;" /><blockquote><p>说明：You cannot delete a row that contains a primary key that is used as a foreign key in another table.</p></blockquote><h2 id="4、MySQL8新特性：计算列"><a href="#4、MySQL8新特性：计算列" class="headerlink" title="4、MySQL8新特性：计算列"></a>4、MySQL8新特性：计算列</h2><p>什么叫计算列呢？简单来说就是某一列的值是通过别的列计算得来的。例如，a列值为1、b列值为2，c列 不需要手动插入，定义a+b的结果为c的值，那么c就是计算列，是通过别的列计算得来的。</p><p>在MySQL 8.0中，CREATE TABLE 和 ALTER TABLE 中都支持增加计算列。下面以CREATE TABLE为例进行讲 解。</p><p>举例：定义数据表tb1，然后定义字段id、字段a、字段b和字段c，其中字段c为计算列，用于计算a+b的 值。 首先创建测试表tb1，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">CREATE TABLE tb1(<br> id INT,<br> a INT,<br> b INT,<br> c INT GENERATED ALWAYS AS (a + b) VIRTUAL<br> );<br></code></pre></td></tr></table></figure><p>插入演示数据，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">INSERT INTO tb1(a,b) VALUES (100,200);<br></code></pre></td></tr></table></figure><p>查询数据表tb1中的数据，结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM tb1;<br>+------+------+------+------+<br>| id   | a    | b    | c    |<br>+------+------+------+------+<br>| NULL |  100 |  200 |  300 |<br>+------+------+------+------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>更新数据中的数据，语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; UPDATE tb1 SET a = 500;<br>Query OK, 0 rows affected (0.00 sec)<br>Rows matched: 1  Changed: 0  Warnings: 0<br></code></pre></td></tr></table></figure><h2 id="5、综合案例"><a href="#5、综合案例" class="headerlink" title="5、综合案例"></a>5、综合案例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 1、创建数据库test01_library<br># 2、创建表 books，表结构如下：<br></code></pre></td></tr></table></figure><table><thead><tr><th>字段名</th><th>字段说明</th><th>数据类型</th></tr></thead><tbody><tr><td>id</td><td>书编号</td><td>INT</td></tr><tr><td>name</td><td>书名</td><td>VARCHAR(50)</td></tr><tr><td>authors</td><td>作者</td><td>VARCHAR(100)</td></tr><tr><td>price</td><td>价格</td><td>FLOAT</td></tr><tr><td>pubdate</td><td>出版日期</td><td>YEAR</td></tr><tr><td>note</td><td>说明</td><td>VARCHAR(100)</td></tr><tr><td>num</td><td>库存</td><td>INT</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 3、向books表中插入记录<br><br># 1）不指定字段名称，插入第一条记录<br># 2）指定所有字段名称，插入第二记录<br># 3）同时插入多条记录（剩下的所有记录）<br></code></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>name</th><th>authors</th><th>price</th><th>pubdate</th><th>note</th><th>num</th></tr></thead><tbody><tr><td>1</td><td>Tal of AAA</td><td>Dickes</td><td>23</td><td>1995</td><td>novel</td><td>11</td></tr><tr><td>2</td><td>EmmaT</td><td>Jane lura</td><td>35</td><td>1993</td><td>joke</td><td>22</td></tr><tr><td>3</td><td>Story of Jane</td><td>Jane Tim</td><td>40</td><td>2001</td><td>novel</td><td>0</td></tr><tr><td>4</td><td>Lovey Day</td><td>George Byron</td><td>20</td><td>2005</td><td>novel</td><td>30</td></tr><tr><td>5</td><td>Old land</td><td>Honore Blade</td><td>30</td><td>2010</td><td>law</td><td>0</td></tr><tr><td>6</td><td>The Battle</td><td>Upton Sara</td><td>30</td><td>1999</td><td>medicine</td><td>40</td></tr><tr><td>7</td><td>Rose Hood</td><td>Richard haggard</td><td>28</td><td>2008</td><td>cartoon</td><td>28</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 4、将小说类型(novel)的书的价格都增加5。<br><br># 5、将名称为EmmaT的书的价格改为40，并将说明改为drama。<br><br># 6、删除库存为0的记录。<br><br># 7、统计书名中包含a字母的书<br><br># 8、统计书名中包含a字母的书的数量和库存总量<br><br># 9、找出“novel”类型的书，按照价格降序排列<br><br># 10、查询图书信息，按照库存量降序排列，如果库存量相同的按照note升序排列<br><br># 11、按照note分类统计书的数量<br><br># 12、按照note分类统计书的库存量，显示库存量超过30本的<br><br># 13、查询所有图书，每页显示5本，显示第二页<br><br># 14、按照note分类统计书的库存量，显示库存量最多的<br><br># 15、查询书名达到10个字符的书，不包括里面的空格<br><br># 16、查询书名和类型，其中note值为novel显示小说，law显示法律，medicine显示医药，cartoon显示卡通，joke显示笑话<br><br># 17、查询书名、库存，其中num值超过30本的，显示滞销，大于0并低于10的，显示畅销，为0的显示需要无货<br><br># 18、统计每一种note的库存量，并合计总量<br><br># 19、统计每一种note的数量，并合计总量<br><br># 20、统计库存量前三名的图书<br><br># 21、找出最早出版的一本书<br><br># 22、找出novel中价格最高的一本书<br><br># 23、找出书名中字数最多的一本书，不含空格<br></code></pre></td></tr></table></figure><p>答案：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#1、创建数据库test01_library<br>CREATE DATABASE IF NOT EXISTS test01_library CHARACTER SET &#x27;utf8&#x27;;<br> <br>#指定使用哪个数据库<br>USE test01_library;<br><br>#2、创建表 books<br>CREATE TABLE books(<br>id INT,<br>name VARCHAR(50),<br>`authors` VARCHAR(100) ,<br>price FLOAT,<br>pubdate YEAR ,<br>note VARCHAR(100),<br>num INT<br>);<br><br>#3、向books表中插入记录<br># 1）不指定字段名称，插入第一条记录<br>INSERT INTO books <br>VALUES(1,&#x27;Tal of AAA&#x27;,&#x27;Dickes&#x27;,23,1995,&#x27;novel&#x27;,11);<br># 2）指定所有字段名称，插入第二记录<br>INSERT INTO books (id,name,`authors`,price,pubdate,note,num)<br>VALUES(2,&#x27;EmmaT&#x27;,&#x27;Jane lura&#x27;,35,1993,&#x27;Joke&#x27;,22);<br># 3）同时插入多条记录（剩下的所有记录）<br>INSERT INTO books (id,name,`authors`,price,pubdate,note,num) VALUES<br>(3,&#x27;Story of Jane&#x27;,&#x27;Jane Tim&#x27;,40,2001,&#x27;novel&#x27;,0),<br>(4,&#x27;Lovey Day&#x27;,&#x27;George Byron&#x27;,20,2005,&#x27;novel&#x27;,30),<br>(5,&#x27;Old land&#x27;,&#x27;Honore Blade&#x27;,30,2010,&#x27;Law&#x27;,0),<br>(6,&#x27;The Battle&#x27;,&#x27;Upton Sara&#x27;,30,1999,&#x27;medicine&#x27;,40),<br>(7,&#x27;Rose Hood&#x27;,&#x27;Richard haggard&#x27;,28,2008,&#x27;cartoon&#x27;,28);<br># 4、将小说类型(novel)的书的价格都增加5。<br>UPDATE books SET price=price+5 WHERE note = &#x27;novel&#x27;;<br># 5、将名称为EmmaT的书的价格改为40，并将说明改为drama。<br>UPDATE books SET price=40,note=&#x27;drama&#x27; WHERE name=&#x27;EmmaT&#x27;;<br># 6、删除库存为0的记录。<br>DELETE FROM books WHERE num=0;<br><br># 7、统计书名中包含a字母的书<br>SELECT * FROM books WHERE name LIKE &#x27;%a%&#x27;;<br><br># 8、统计书名中包含a字母的书的数量和库存总量<br>SELECT COUNT(*),SUM(num) FROM books WHERE name LIKE &#x27;%a%&#x27;;<br><br># 9、找出“novel”类型的书，按照价格降序排列<br>SELECT * FROM books WHERE note = &#x27;novel&#x27; ORDER BY price DESC;<br><br># 10、查询图书信息，按照库存量降序排列，如果库存量相同的按照note升序排列<br>SELECT * FROM books ORDER BY num DESC,note ASC;<br><br># 11、按照note分类统计书的数量<br>SELECT note,COUNT(*) FROM books GROUP BY note;<br><br># 12、按照note分类统计书的库存量，显示库存量超过30本的<br>SELECT note,SUM(num) FROM books GROUP BY note HAVING SUM(num)&gt;30;<br><br># 13、查询所有图书，每页显示5本，显示第二页<br>SELECT * FROM books LIMIT 5,5;<br><br># 14、按照note分类统计书的库存量，显示库存量最多的<br>SELECT note,SUM(num) sum_num FROM books GROUP BY note ORDER BY sum_num DESC LIMIT 0,1;<br><br># 15、查询书名达到10个字符的书，不包括里面的空格<br>SELECT * FROM books WHERE CHAR_LENGTH(REPLACE(name,&#x27; &#x27;,&#x27;&#x27;))&gt;=10;<br><br>/*<br> 16、查询书名和类型，<br>其中note值为 novel显示小说，law显示法律，medicine显示医药，cartoon显示卡通，joke显示笑话<br>*/<br>SELECT name AS &quot;书名&quot; ,note, CASE note <br>WHEN &#x27;novel&#x27; THEN &#x27;小说&#x27;<br>WHEN &#x27;law&#x27; THEN &#x27;法律&#x27;<br>WHEN &#x27;medicine&#x27; THEN &#x27;医药&#x27;<br>WHEN &#x27;cartoon&#x27; THEN &#x27;卡通&#x27;<br>WHEN &#x27;joke&#x27; THEN &#x27;笑话&#x27;<br>END AS &quot;类型&quot;<br>FROM books;<br><br># 17、查询书名、库存，其中num值超过30本的，显示滞销，大于0并低于10的，显示畅销，为0的显示需要无货<br>SELECT name,num,CASE <br>WHEN num&gt;30 THEN &#x27;滞销&#x27;<br>WHEN num&gt;0 AND num&lt;10 THEN &#x27;畅销&#x27;<br>WHEN num=0 THEN &#x27;无货&#x27;<br>ELSE &#x27;正常&#x27;<br>END AS &quot;库存状态&quot;<br>FROM books;<br><br># 18、统计每一种note的库存量，并合计总量<br>SELECT IFNULL(note,&#x27;合计总库存量&#x27;) AS note,SUM(num) FROM books GROUP BY note WITH ROLLUP;<br><br># 19、统计每一种note的数量，并合计总量<br>SELECT IFNULL(note,&#x27;合计总数&#x27;) AS note,COUNT(*) FROM books GROUP BY note WITH ROLLUP;<br><br># 20、统计库存量前三名的图书<br>SELECT * FROM books ORDER BY num DESC LIMIT 0,3;<br><br># 21、找出最早出版的一本书<br>SELECT * FROM books ORDER BY pubdate ASC LIMIT 0,1;<br><br># 22、找出novel中价格最高的一本书<br>SELECT * FROM books WHERE note = &#x27;novel&#x27; ORDER BY price DESC LIMIT 0,1;<br><br># 23、找出书名中字数最多的一本书，不含空格<br>SELECT * FROM books ORDER BY CHAR_LENGTH(REPLACE(name,&#x27; &#x27;,&#x27;&#x27;)) DESC LIMIT 0,1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单行函数</title>
    <link href="/2024/04/12/mysql/7%E3%80%81%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/"/>
    <url>/2024/04/12/mysql/7%E3%80%81%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1、聚合函数介绍"><a href="#1、聚合函数介绍" class="headerlink" title="1、聚合函数介绍"></a>1、聚合函数介绍</h2><ul><li>什么是聚合函数</li></ul><p>聚合函数作用于一组数据，并对一组数据返回一个值。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404111726403.png" alt="image-20240411172633281" style="zoom:50%;" /><ul><li><p>聚合函数类型</p><ul><li>AVG()</li><li>SUM()</li><li>MAX()</li><li>MIN()</li><li>COUNT()</li></ul></li><li><p>聚合函数语法</p></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404111727964.png" alt="image-20240411172733930" style="zoom:50%;" /><ul><li>聚合函数不能嵌套调用。比如不能出现类似“AVG(SUM(字段名称))”形式的调用。</li></ul><h3 id="1-1-AVG和SUM函数"><a href="#1-1-AVG和SUM函数" class="headerlink" title="1.1 AVG和SUM函数"></a>1.1 AVG和SUM函数</h3><p>可以对<strong>数值型数据</strong>使用AVG 和 SUM 函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT AVG(salary), MAX(salary),MIN(salary), SUM(salary)<br>FROM   employees<br>WHERE  job_id LIKE &#x27;%REP%&#x27;;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404111729430.png" alt="image-20240411172928407"></p><h3 id="1-2-MIN和MAX函数"><a href="#1-2-MIN和MAX函数" class="headerlink" title="1.2 MIN和MAX函数"></a>1.2 MIN和MAX函数</h3><p>可以对<strong>任意数据类型</strong>的数据使用 MIN 和 MAX 函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT MIN(hire_date), MAX(hire_date)<br>FROM     employees;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404111730744.png" alt="image-20240411173013725"></p><h3 id="1-3-COUNT函数"><a href="#1-3-COUNT函数" class="headerlink" title="1.3 COUNT函数"></a>1.3 COUNT函数</h3><ul><li>COUNT(*)返回表中记录总数，适用于<strong>任意数据类型</strong>。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT COUNT(*)<br>FROM      employees<br>WHERE  department_id = 50;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404111731077.png" alt="image-20240411173126058"></p><ul><li>COUNT(expr) 返回<strong>expr不为空</strong>的记录总数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT COUNT(commission_pct)<br>FROM   employees<br>WHERE  department_id = 50;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121113683.png" alt="image-20240412111315633"></p><ul><li><p><strong>问题：用count(*)，count(1)，count(列名)谁好呢?</strong></p><p>其实，对于MyISAM引擎的表是没有区别的。</p><p>这种引擎内部有一计数器在维护着行数。 Innodb引擎的表用count(*),count(1)直接读行数，复杂度是O(n)，因为innodb真的要去数一遍。但好 于具体的count(列名)。</p></li><li><p><strong>问题：能不能使用count(列名)替换count(*)?</strong></p><p>不要使用 count(列名)来替代  <code>count(*)</code> ， <code>count(*)</code> 是 SQL92 定义的标准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。</p><p>说明：count(*)会统计值为 NULL 的行，而 count(列名)不会统计此列为 NULL 值的行。</p></li></ul><h2 id="2、-GROUP-BY"><a href="#2、-GROUP-BY" class="headerlink" title="2、 GROUP BY"></a>2、 GROUP BY</h2><h3 id="2-1-基本使用"><a href="#2-1-基本使用" class="headerlink" title="2.1 基本使用"></a>2.1 基本使用</h3><img src="C:\Users\hangw\AppData\Roaming\Typora\typora-user-images\image-20240412112802636.png" alt="image-20240412112802636" style="zoom:50%;" /><p><strong>可以使用GROUP BY子句将表中的数据分成若干组</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT column, group_function(column)<br>FROM table<br>[WHERE  condition]<br>[GROUP BY   group_by_expression]<br>[ORDER BY   column];<br></code></pre></td></tr></table></figure><blockquote><p><strong>明确：WHERE一定放在FROM后面</strong></p></blockquote><p><strong>在SELECT列表中所有未包含在组函数中的列都应该包含在 GROUP BY子句中</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT   department_id, AVG(salary)<br>FROM     employees<br>GROUP BY department_id ;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121416503.png" alt="image-20240412141645469" style="zoom: 67%;" /><p>包含在 GROUP BY 子句中的列不必包含在SELECT 列表中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT   AVG(salary)<br>FROM     employees<br>GROUP BY department_id ;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121417034.png" alt="image-20240412141734001" style="zoom:67%;" /><h3 id="2-2-使用多个列分组"><a href="#2-2-使用多个列分组" class="headerlink" title="2.2 使用多个列分组"></a>2.2 使用多个列分组</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121418463.png" alt="image-20240412141817405" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT   department_id dept_id, job_id, SUM(salary)<br>FROM     employees<br>GROUP BY department_id, job_id <br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121419274.png" alt="image-20240412141928239" style="zoom:67%;" /><h3 id="2-3-GROUP-BY中使用WITH-ROLLUP"><a href="#2-3-GROUP-BY中使用WITH-ROLLUP" class="headerlink" title="2.3 GROUP BY中使用WITH ROLLUP"></a>2.3 GROUP BY中使用WITH ROLLUP</h3><p>使用 <code>WITH ROLLUP</code> 关键字之后，在所有查询出的分组记录之后增加一条记录，该记录计算查询出的所 有记录的总和，即统计记录数量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT department_id,AVG(salary)<br>FROM employees<br>WHERE department_id &gt; 80<br>GROUP BY department_id WITH ROLLUP;<br></code></pre></td></tr></table></figure><blockquote><p>注意： </p><p>当使用ROLLUP时，不能同时使用ORDER BY子句进行结果排序，即ROLLUP和ORDER BY是互相排斥 的。</p></blockquote><h2 id="3、-HAVING"><a href="#3、-HAVING" class="headerlink" title="3、 HAVING"></a>3、 HAVING</h2><h3 id="3-1-基本使用"><a href="#3-1-基本使用" class="headerlink" title="3.1 基本使用"></a>3.1 基本使用</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121420561.png" alt="image-20240412142059511" style="zoom: 67%;" /><p><strong>过滤分组：HAVING子句</strong></p><ol><li>行已经被分组。 </li><li>使用了聚合函数。 </li><li>满足HAVING 子句中条件的分组将被显示。 </li><li>HAVING 不能单独使用，必须要跟 GROUP BY 一起使用</li></ol><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121422911.png" alt="image-20240412142211874" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT   department_id, MAX(salary)<br>FROM     employees<br>GROUP BY department_id<br>HAVING   MAX(salary)&gt;10000 ;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121422175.png" alt="image-20240412142238148" style="zoom: 67%;" /><ul><li><strong>非法使用聚合函数 ： 不能在 WHERE 子句中使用聚合函数</strong>。如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT   department_id, AVG(salary)<br>FROM     employees<br>WHERE    AVG(salary) &gt; 8000<br>GROUP BY department_id;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121423687.png" alt="image-20240412142337653" style="zoom:67%;" /><h3 id="3-2-WHERE和HAVING的对比"><a href="#3-2-WHERE和HAVING的对比" class="headerlink" title="3.2 WHERE和HAVING的对比"></a>3.2 WHERE和HAVING的对比</h3><p><strong>区别1：WHERE 可以直接使用表中的字段作为筛选条件，但不能使用分组中的计算函数作为筛选条件； HAVING 必须要与 GROUP BY 配合使用，可以把分组计算的函数和分组字段作为筛选条件。</strong></p><p>这决定了，在需要对数据进行分组统计的时候，HAVING 可以完成 WHERE 不能完成的任务。这是因为， 在查询语法结构中，WHERE 在 GROUP BY 之前，所以无法对分组结果进行筛选。HAVING 在 GROUP BY 之 后，可以使用分组字段和分组中的计算函数，对分组的结果集进行筛选，这个功能是 WHERE 无法完成 的。另外，WHERE排除的记录不再包括在分组中。</p><p><strong>区别2：如果需要通过连接从关联表中获取需要的数据，WHERE 是先筛选后连接，而 HAVING 是先连接 后筛选。</strong>这一点，就决定了在关联查询中，WHERE 比 HAVING 更高效。因为 WHERE 可以先筛选，用一 个筛选后的较小数据集和关联表进行连接，这样占用的资源比较少，执行效率也比较高。HAVING 则需要 先把结果集准备好，也就是用未被筛选的数据集进行关联，然后对这个大的数据集进行筛选，这样占用 的资源就比较多，执行效率也较低。</p><p>小结如下：</p><table><thead><tr><th></th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>WHERE</td><td>先筛选数据再关联，执行效率高</td><td>不能使用分组中的计算函数进行筛选</td></tr><tr><td>HAVING</td><td>可以使用分组中的计算函数</td><td>在最后的结果集中进行筛选，执行效率较低</td></tr></tbody></table><p><strong>开发中的选择：</strong></p><p>WHERE 和 HAVING 也不是互相排斥的，我们可以在一个查询里面同时使用 WHERE 和 HAVING。包含分组 统计函数的条件用 HAVING，普通条件用 WHERE。这样，我们就既利用了 WHERE 条件的高效快速，又发 挥了 HAVING 可以使用包含分组统计函数的查询条件的优点。当数据量特别大的时候，运行效率会有很 大的差别。</p><h2 id="4、SELECT的执行过程"><a href="#4、SELECT的执行过程" class="headerlink" title="4、SELECT的执行过程"></a>4、SELECT的执行过程</h2><h3 id="4-1-查询的结构"><a href="#4-1-查询的结构" class="headerlink" title="4.1 查询的结构"></a>4.1 查询的结构</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式1：<br>SELECT ...,....,...<br>FROM ...,...,....<br>WHERE 多表的连接条件<br>AND 不包含组函数的过滤条件<br>GROUP BY ...,...<br>HAVING 包含组函数的过滤条件<br>ORDER BY ... ASC/DESC<br>LIMIT ...,...<br><br>#方式2：<br>SELECT ...,....,...<br>FROM ... JOIN ... <br>ON 多表的连接条件<br>JOIN ...<br>ON ...<br>WHERE 不包含组函数的过滤条件<br>AND/OR 不包含组函数的过滤条件<br>GROUP BY ...,...<br>HAVING 包含组函数的过滤条件<br>ORDER BY ... ASC/DESC<br>LIMIT ...,...<br><br>#其中：<br>#（1）from：从哪些表中筛选<br>#（2）on：关联多表查询时，去除笛卡尔积<br>#（3）where：从表中筛选的条件<br>#（4）group by：分组依据<br>#（5）having：在统计结果中再次筛选<br>#（6）order by：排序<br>#（7）limit：分页<br></code></pre></td></tr></table></figure><h3 id="4-2-SELECT执行顺序"><a href="#4-2-SELECT执行顺序" class="headerlink" title="4.2 SELECT执行顺序"></a>4.2 SELECT执行顺序</h3><p>你需要记住 SELECT 查询时的两个顺序：</p><p><strong>1. 关键字的顺序是不能颠倒的：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY ... LIMIT...<br></code></pre></td></tr></table></figure><p><strong>2. SELECT 语句的执行顺序</strong>（在 MySQL 和 Oracle 中，SELECT 执行顺序基本相同）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">FROM -&gt; WHERE -&gt; GROUP BY -&gt; HAVING -&gt; SELECT 的字段 -&gt; DISTINCT -&gt; ORDER BY -&gt; LIMIT<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404121428812.png" alt="image-20240412142826764" style="zoom:50%;" /><p>比如你写了一个 SQL 语句，那么它的关键字顺序和执行顺序是下面这样的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DISTINCT player_id, player_name, count(*) as num # 顺序 5<br>FROM player JOIN team ON player.team_id = team.team_id # 顺序 1<br>WHERE height &gt; 1.80 # 顺序 2<br>GROUP BY player.team_id # 顺序 3<br>HAVING num &gt; 2 # 顺序 4<br>ORDER BY num DESC # 顺序 6<br>LIMIT 2 # 顺序 7<br></code></pre></td></tr></table></figure><p>在 SELECT 语句执行这些步骤的时候，每个步骤都会产生一个 <code>虚拟表</code>，然后将这个虚拟表传入下一个步 骤中作为输入。需要注意的是，这些步骤隐含在 SQL 的执行过程中，对于我们来说是不可见的。</p><h3 id="4-3-SQL-的执行原理"><a href="#4-3-SQL-的执行原理" class="headerlink" title="4.3 SQL 的执行原理"></a>4.3 SQL 的执行原理</h3><p>SELECT 是先执行 FROM 这一步的。在这个阶段，如果是多张表联查，还会经历下面的几个步骤：</p><ol><li>首先先通过 CROSS JOIN 求笛卡尔积，相当于得到虚拟表 vt（virtual table）1-1；</li><li>通过 ON 进行筛选，在虚拟表 vt1-1 的基础上进行筛选，得到虚拟表 vt1-2；</li><li>添加外部行。如果我们使用的是左连接、右链接或者全连接，就会涉及到外部行，也就是在虚拟 表 vt1-2 的基础上增加外部行，得到虚拟表 vt1-3。</li></ol><p>当然如果我们操作的是两张以上的表，还会重复上面的步骤，直到所有表都被处理完为止。这个过程得 到是我们的原始数据。</p><p>当我们拿到了查询数据表的原始数据，也就是最终的虚拟表  <code>vt1</code> ，就可以在此基础上再进行 <code>WHERE 阶段</code>。在这个阶段中，会根据 vt1 表的结果进行筛选过滤，得到虚拟表 <code>vt2</code>。</p><p>然后进入第三步和第四步，也就是 <code>GROUP 和 HAVING 阶段 </code>。在这个阶段中，实际上是在虚拟表 vt2 的基础上进行分组和分组过滤，得到中间的虚拟表  <code>vt3</code> 和  <code>vt4</code> 。</p><p>当我们完成了条件筛选部分之后，就可以筛选表中提取的字段，也就是进入到 <code>SELECT 和 DISTINCT阶段</code>。</p><p>首先在 SELECT 阶段会提取想要的字段，然后在 DISTINCT 阶段过滤掉重复的行，分别得到中间的虚拟表<code>vt5-1</code> 和 <code>vt5-2</code> 。</p><p>当我们提取了想要的字段数据之后，就可以按照指定的字段进行排序，也就是 <code>ORDER BY 阶段</code>  ，得到虚拟表 <code>vt6</code>。</p><p>最后在 vt6 的基础上，取出指定行的记录，也就是 <code>LIMIT 阶段 </code> ，得到最终的结果，对应的是虚拟表<code>vt7 </code>。</p><p>当然我们在写 SELECT 语句的时候，不一定存在所有的关键字，相应的阶段就会省略。 同时因为 SQL 是一门类似英语的结构化查询语言，所以我们在写 SELECT 语句的时候，还要注意相应的 关键字顺序，<strong>所谓底层运行的原理，就是我们刚才讲到的执行顺序</strong>。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单行函数</title>
    <link href="/2024/04/11/mysql/6%E3%80%81%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/"/>
    <url>/2024/04/11/mysql/6%E3%80%81%E5%8D%95%E8%A1%8C%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="1-1-什么是函数"><a href="#1-1-什么是函数" class="headerlink" title="1.1 什么是函数"></a>1.1 什么是函数</h3><p>函数在计算机语言的使用中贯穿始终，函数的作用是什么呢？它可以把我们经常使用的代码封装起来， 需要的时候直接调用即可。这样既 <code>提高了代码效率</code>，又 <code>提高了可维护性</code>。在 SQL 中我们也可以使用函数 对检索出来的数据进行函数操作。使用这些函数，可以极大地 <code>提高用户对数据库的管理效率</code>。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404101030064.png" alt="image-20240410103050009" style="zoom:50%;" /><p>从函数定义的角度出发，我们可以将函数分成 <code>内置函数</code> 和 <code>自定义函数</code>。在 SQL 语言中，同样也包括了 内置函数和自定义函数。内置函数是系统内置的通用函数，而自定义函数是我们根据自己的需要编写 的，本章及下一章讲解的是 SQL 的内置函数。</p><h3 id="1-2-不同DBMS函数的差异"><a href="#1-2-不同DBMS函数的差异" class="headerlink" title="1.2 不同DBMS函数的差异"></a>1.2 不同DBMS函数的差异</h3><p>我们在使用 SQL 语言的时候，不是直接和这门语言打交道，而是通过它使用不同的数据库软件，即 DBMS。<strong>DBMS 之间的差异性很大，远大于同一个语言不同版本之间的差异</strong>。实际上，只有很少的函数是 被 DBMS 同时支持的。比如，大多数 DBMS 使用（||）或者（+）来做拼接符，而在 MySQL 中的字符串拼 接函数为concat()。大部分 DBMS 会有自己特定的函数，这就意味着 <strong>采用 SQL 函数的代码可移植性是很差的</strong> ，因此在使用函数的时候需要特别注意。</p><h3 id="1-3-MySQL的内置函数及分类"><a href="#1-3-MySQL的内置函数及分类" class="headerlink" title="1.3 MySQL的内置函数及分类"></a>1.3 MySQL的内置函数及分类</h3><p>MySQL提供了丰富的内置函数，这些函数使得数据的维护与管理更加方便，能够更好地提供数据的分析 与统计功能，在一定程度上提高了开发人员进行数据分析与统计的效率。</p><p>MySQL提供的内置函数从 <code>实现的功能角度</code> 可以分为数值函数、字符串函数、日期和时间函数、流程控制 函数、加密与解密函数、获取MySQL信息函数、聚合函数等。这里，我将这些丰富的内置函数再分为两 类：<code>单行函数</code>、 <code>聚合函数（或分组函数）</code>。</p><p><strong>两种SQL函数</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404101034640.png" alt="image-20240410103412598" style="zoom:50%;" /><p><strong>单行函数</strong></p><ul><li>操作数据对象 </li><li>接受参数返回一个结果 </li><li><strong>只对一行进行变换</strong> </li><li><strong>每行返回一个结果</strong> </li><li>可以嵌套 </li><li>参数可以是一列或一个值</li></ul><h2 id="2、数值函数"><a href="#2、数值函数" class="headerlink" title="2、数值函数"></a>2、数值函数</h2><h3 id="2-1-基本函数"><a href="#2-1-基本函数" class="headerlink" title="2.1 基本函数"></a>2.1 基本函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ABS(x)</td><td>返回x的绝对值</td></tr><tr><td>SIGN(X)</td><td>返回X的符号。正数返回1，负数返回-1，0返回0</td></tr><tr><td>PI()</td><td>返回圆周率的值</td></tr><tr><td>CEIL(x)，CEILING(x)</td><td>返回大于或等于某个值的最小整数</td></tr><tr><td>FLOOR(x)</td><td>返回小于或等于某个值的最大整数</td></tr><tr><td>LEAST(e1,e2,e3…)</td><td>返回列表中的最小值</td></tr><tr><td>GREATEST(e1,e2,e3…)</td><td>返回列表中的最大值</td></tr><tr><td>MOD(x,y)</td><td>返回X除以Y后的余数</td></tr><tr><td>RAND()</td><td>返回0~1的随机值</td></tr><tr><td>RAND(x)</td><td>返回0~1的随机值，其中x的值用作种子值，相同的X值会产生相同的随机数</td></tr><tr><td>ROUND(x)</td><td>返回一个对x的值进行四舍五入后，最接近于X的整数</td></tr><tr><td>ROUND(x,y)</td><td>返回一个对x的值进行四舍五入后最接近X的值，并保留到小数点后面Y位</td></tr><tr><td>TRUNCATE(x,y)</td><td>返回数字x截断为y位小数的结果</td></tr><tr><td>SQRT(x)</td><td>返回x的平方根。当X的值为负数时，返回NULL</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>ABS(-123),ABS(32),SIGN(-23),SIGN(43),PI(),CEIL(32.32),CEILING(-43.23),FLOOR(32.32),<br>FLOOR(-43.23),MOD(12,5)<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404101038319.png" alt="image-20240410103859293"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT RAND(),RAND(),RAND(10),RAND(10),RAND(-1),RAND(-1)<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404101039614.png" alt="image-20240410103928593"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>ROUND(12.33),ROUND(12.343,2),ROUND(12.324,-1),TRUNCATE(12.66,1),TRUNCATE(12.66,-1)<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404101039242.png" alt="image-20240410103959215"></p><h3 id="2-2-角度与弧度互换函数"><a href="#2-2-角度与弧度互换函数" class="headerlink" title="2.2 角度与弧度互换函数"></a>2.2 角度与弧度互换函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>RADIANS(x)</td><td>将角度转化为弧度，其中，参数x为角度值</td></tr><tr><td>DEGREES(x)</td><td>将弧度转化为角度，其中，参数x为弧度值</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT RADIANS(30),RADIANS(60),RADIANS(90),DEGREES(2*PI()),DEGREES(RADIANS(90))<br>FROM DUAL;<br></code></pre></td></tr></table></figure><h3 id="2-3-三角函数"><a href="#2-3-三角函数" class="headerlink" title="2.3 三角函数"></a>2.3 三角函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>SIN(x)</td><td>返回x的正弦值，其中，参数x为弧度值</td></tr><tr><td>ASIN(x)</td><td>返回x的反正弦值，即获取正弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td>COS(x)</td><td>返回x的余弦值，其中，参数x为弧度值</td></tr><tr><td>ACOS(x)</td><td>返回x的反余弦值，即获取余弦为x的值。如果x的值不在-1到1之间，则返回NULL</td></tr><tr><td>TAN(x)</td><td>返回x的正切值，其中，参数x为弧度值</td></tr><tr><td>ATAN(x)</td><td>返回x的反正切值，即返回正切值为x的值</td></tr><tr><td>ATAN2(m,n)</td><td>返回两个参数的反正切值</td></tr><tr><td>COT(x)</td><td>返回x的余切值，其中，X为弧度值</td></tr></tbody></table><p>举例：</p><p>ATAN2(M,N)函数返回两个参数的反正切值。 与ATAN(X)函数相比，ATAN2(M,N)需要两个参数，例如有两个 点point(x1,y1)和point(x2,y2)，使用ATAN(X)函数计算反正切值为ATAN((y2-y1)&#x2F;(x2-x1))，使用ATAN2(M,N)计 算反正切值则为ATAN2(y2-y1,x2-x1)。由使用方式可以看出，当x2-x1等于0时，ATAN(X)函数会报错，而 ATAN2(M,N)函数则仍然可以计算。</p><p>ATAN2(M,N)函数的使用示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>SIN(RADIANS(30)),DEGREES(ASIN(1)),TAN(RADIANS(45)),DEGREES(ATAN(1)),DEGREES(ATAN2(1,1) )<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404101044489.png" alt="image-20240410104437458"></p><h3 id="2-4-指数与对数"><a href="#2-4-指数与对数" class="headerlink" title="2.4 指数与对数"></a>2.4 指数与对数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>POW(x,y)，POWER(X,Y)</td><td>返回x的y次方</td></tr><tr><td>EXP(X)</td><td>返回e的X次方，其中e是一个常数，2.718281828459045</td></tr><tr><td>LN(X)，LOG(X)</td><td>返回以e为底的X的对数，当X &lt;&#x3D; 0 时，返回的结果为NULL</td></tr><tr><td>LOG10(X)</td><td>返回以10为底的X的对数，当X &lt;&#x3D; 0 时，返回的结果为NULL</td></tr><tr><td>LOG2(X)</td><td>返回以2为底的X的对数，当X &lt;&#x3D; 0 时，返回NULL</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT POW(2,5),POWER(2,4),EXP(2),LN(10),LOG10(10),LOG2(4)-&gt; FROM DUAL;<br>+----------+------------+------------------+-------------------+-----------+---------+<br>| POW(2,5) | POWER(2,4) | EXP(2)           | LN(10)            | LOG10(10) | LOG2(4) |<br>+----------+------------+------------------+-------------------+-----------+---------+<br>|       32 |         16 | 7.38905609893065 | 2.302585092994046 |         1 |       2 |<br>+----------+------------+------------------+-------------------+-----------+---------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="2-5-进制间的转换"><a href="#2-5-进制间的转换" class="headerlink" title="2.5 进制间的转换"></a>2.5 进制间的转换</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>BIN(x)</td><td>返回x的二进制编码</td></tr><tr><td>HEX(x)</td><td>返回x的十六进制编码</td></tr><tr><td>OCT(x)</td><td>返回x的八进制编码</td></tr><tr><td>CONV(x,f1,f2)</td><td>返回f1进制数变成f2进制数</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT BIN(10),HEX(10),OCT(10),CONV(10,2,8)-&gt; FROM DUAL;<br> +---------+---------+---------+--------------+<br> | BIN(10) | HEX(10) | OCT(10) | CONV(10,2,8) |<br> +---------+---------+---------+--------------+<br> | 1010    | A       | 12      | 2            |<br> +---------+---------+---------+--------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="3、字符串函数"><a href="#3、字符串函数" class="headerlink" title="3、字符串函数"></a>3、字符串函数</h2><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ASCII(S)</td><td>返回字符串S中的第一个字符的ASCII码值</td></tr><tr><td>CHAR_LENGTH(s)</td><td>返回字符串s的字符数。作用与CHARACTER_LENGTH(s)相同</td></tr><tr><td>LENGTH(s)</td><td>返回字符串s的字节数，和字符集有关</td></tr><tr><td>CONCAT(s1,s2,……,sn)</td><td>连接s1,s2,……,sn为一个字符串</td></tr><tr><td>CONCAT_WS(x, s1,s2,……,sn)</td><td>同CONCAT(s1,s2,…)函数，但是每个字符串之间要加上x</td></tr><tr><td>INSERT(str, idx, len, replacestr)</td><td>将字符串str从第idx位置开始，len个字符长的子串替换为字符串replacestr</td></tr><tr><td>REPLACE(str, a, b)</td><td>用字符串b替换字符串str中所有出现的字符串a</td></tr><tr><td>UPPER(s) 或 UCASE(s)</td><td>将字符串s的所有字母转成大写字母</td></tr><tr><td>LOWER(s) 或LCASE(s)</td><td>将字符串s的所有字母转成小写字母</td></tr><tr><td>LEFT(str,n)</td><td>返回字符串str最左边的n个字符</td></tr><tr><td>RIGHT(str,n)</td><td>返回字符串str最右边的n个字符</td></tr><tr><td>LPAD(str, len, pad)</td><td>用字符串pad对str最左边进行填充，直到str的长度为len个字符</td></tr><tr><td>RPAD(str ,len, pad)</td><td>用字符串pad对str最右边进行填充，直到str的长度为len个字符</td></tr><tr><td>LTRIM(s)</td><td>去掉字符串s左侧的空格</td></tr><tr><td>RTRIM(s)</td><td>去掉字符串s右侧的空格</td></tr><tr><td>TRIM(s)</td><td>去掉字符串s开始与结尾的空格</td></tr><tr><td>TRIM(s1 FROM s)</td><td>去掉字符串s开始与结尾的s1</td></tr><tr><td>TRIM(LEADING s1 FROM s)</td><td>去掉字符串s开始处的s1</td></tr><tr><td>TRIM(TRAILING s1 FROM s)</td><td>去掉字符串s结尾处的s1</td></tr><tr><td>REPEAT(str, n)</td><td>返回str重复n次的结果</td></tr><tr><td>SPACE(n)</td><td>返回n个空格</td></tr><tr><td>STRCMP(s1,s2)</td><td>比较字符串s1,s2的ASCII码值的大小</td></tr><tr><td>SUBSTR(s,index,len)</td><td>返回从字符串s的index位置其len个字符，作用与SUBSTRING(s,n,len)、 MID(s,n,len)相同</td></tr><tr><td>LOCATE(substr,str)</td><td>返回字符串substr在字符串str中首次出现的位置，作用于POSITION(substr IN str)、INSTR(str,substr)相同。未找到，返回0</td></tr><tr><td>ELT(m,s1,s2,…,sn)</td><td>返回指定位置的字符串，如果m&#x3D;1，则返回s1，如果m&#x3D;2，则返回s2，如 果m&#x3D;n，则返回sn</td></tr><tr><td>FIELD(s,s1,s2,…,sn)</td><td>返回字符串s在字符串列表中第一次出现的位置</td></tr><tr><td>FIND_IN_SET(s1,s2)</td><td>返回字符串s1在字符串s2中出现的位置。其中，字符串s2是一个以逗号分 隔的字符串</td></tr><tr><td>REVERSE(s)</td><td>返回s反转后的字符串</td></tr><tr><td>NULLIF(value1,value2)</td><td>比较两个字符串，如果value1与value2相等，则返回NULL，否则返回 value1</td></tr></tbody></table><blockquote><p>注意：MySQL中，字符串的位置是从1开始的。</p></blockquote><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT FIELD(&#x27;mm&#x27;,&#x27;hello&#x27;,&#x27;msm&#x27;,&#x27;amma&#x27;),FIND_IN_SET(&#x27;mm&#x27;,&#x27;hello,mm,amma&#x27;)<br>    -&gt; FROM DUAL;<br> +----------------------------------+-----------------------------------+<br> | FIELD(&#x27;mm&#x27;,&#x27;hello&#x27;,&#x27;msm&#x27;,&#x27;amma&#x27;) | FIND_IN_SET(&#x27;mm&#x27;,&#x27;hello,mm,amma&#x27;) |<br> +----------------------------------+-----------------------------------+<br> |                                0 |                                 2 |<br> +----------------------------------+-----------------------------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT NULLIF(&#x27;mysql&#x27;,&#x27;mysql&#x27;),NULLIF(&#x27;mysql&#x27;, &#x27;&#x27;);<br>+-------------------------+---------------------+<br>| NULLIF(&#x27;mysql&#x27;,&#x27;mysql&#x27;) | NULLIF(&#x27;mysql&#x27;, &#x27;&#x27;) |<br>+-------------------------+---------------------+<br>| NULL                    | mysql               |<br>+-------------------------+---------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="4、日期和时间函数"><a href="#4、日期和时间函数" class="headerlink" title="4、日期和时间函数"></a>4、日期和时间函数</h2><h3 id="4-1-获取日期、时间"><a href="#4-1-获取日期、时间" class="headerlink" title="4.1 获取日期、时间"></a>4.1 获取日期、时间</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td><strong>CURDATE()</strong> ，CURRENT_DATE()</td><td>返回当前日期，只包含年、 月、日</td></tr><tr><td><strong>CURTIME()</strong> ， CURRENT_TIME()</td><td>返回当前时间，只包含时、 分、秒</td></tr><tr><td><strong>NOW()</strong> &#x2F; SYSDATE() &#x2F; CURRENT_TIMESTAMP() &#x2F; LOCALTIME() &#x2F; LOCALTIMESTAMP()</td><td>返回当前系统日期和时间</td></tr><tr><td>UTC_DATE()</td><td>返回UTC（世界标准时间） 日期</td></tr><tr><td>UTC_TIME()</td><td>返回UTC（世界标准时间） 时间</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT <br>CURDATE(),CURTIME(),NOW(),SYSDATE()+0,UTC_DATE(),UTC_DATE()+0,UTC_TIME(),UTC_TIME()+0<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404101103543.png" alt="image-20240410110302511"></p><h3 id="4-2-日期与时间戳的转换"><a href="#4-2-日期与时间戳的转换" class="headerlink" title="4.2 日期与时间戳的转换"></a>4.2 日期与时间戳的转换</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>UNIX_TIMESTAMP()</td><td>以UNIX时间戳的形式返回当前时间。SELECT UNIX_TIMESTAMP()  &gt;1634348884</td></tr><tr><td>UNIX_TIMESTAMP(date)</td><td>将时间date以UNIX时间戳的形式返回。</td></tr><tr><td>FROM_UNIXTIME(timestamp)</td><td>将UNIX时间戳的时间转换为普通格式的时间</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT UNIX_TIMESTAMP(now());<br> +-----------------------+<br> | UNIX_TIMESTAMP(now()) |<br> +-----------------------+<br> |            1576380910 |<br> +-----------------------+<br> 1 row in set (0.01 sec)<br> <br> mysql&gt; SELECT UNIX_TIMESTAMP(CURDATE());<br> +---------------------------+<br> | UNIX_TIMESTAMP(CURDATE()) |<br> +---------------------------+<br> |            1576339200     |<br> +---------------------------+<br> 1 row in set (0.00 sec)<br> <br> mysql&gt; SELECT UNIX_TIMESTAMP(CURTIME());<br> +---------------------------+<br> | UNIX_TIMESTAMP(CURTIME()) |<br> +---------------------------+<br> |                1576380969 |<br> +---------------------------+<br> 1 row in set (0.00 sec)<br> <br> mysql&gt; SELECT UNIX_TIMESTAMP(&#x27;2011-11-11 11:11:11&#x27;)<br> +---------------------------------------+<br> | UNIX_TIMESTAMP(&#x27;2011-11-11 11:11:11&#x27;) |<br> +---------------------------------------+<br> |                            1320981071 |<br> +---------------------------------------+<br> 1 row in set (0.00 sec)<br> <br> mysql&gt; SELECT FROM_UNIXTIME(1576380910);<br> +---------------------------+<br> | FROM_UNIXTIME(1576380910) |<br> +---------------------------+<br> | 2019-12-15 11:35:10       |<br> +---------------------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="4-3-获取月份、星期、星期数、天数等函数"><a href="#4-3-获取月份、星期、星期数、天数等函数" class="headerlink" title="4.3 获取月份、星期、星期数、天数等函数"></a>4.3 获取月份、星期、星期数、天数等函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>YEAR(date) &#x2F; MONTH(date) &#x2F; DAY(date)</td><td>返回具体的日期值</td></tr><tr><td>HOUR(time) &#x2F; MINUTE(time) &#x2F; SECOND(time)</td><td>返回具体的时间值</td></tr><tr><td>MONTHNAME(date)</td><td>返回月份：January，…</td></tr><tr><td>DAYNAME(date)</td><td>返回星期几：MONDAY，TUESDAY…..SUNDAY</td></tr><tr><td>WEEKDAY(date)</td><td>返回周几，注意，周1是0，周2是1，。。。周日是6</td></tr><tr><td>QUARTER(date)</td><td>返回日期对应的季度，范围为1～4</td></tr><tr><td>WEEK(date) ， WEEKOFYEAR(date)</td><td>返回一年中的第几周</td></tr><tr><td>DAYOFYEAR(date)</td><td>返回日期是一年中的第几天</td></tr><tr><td>DAYOFMONTH(date)</td><td>返回日期位于所在月份的第几天</td></tr><tr><td>DAYOFWEEK(date)</td><td>返回周几，注意：周日是1，周一是2，。。。周六是 7</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT YEAR(CURDATE()),MONTH(CURDATE()),DAY(CURDATE()),<br>HOUR(CURTIME()),MINUTE(NOW()),SECOND(SYSDATE())<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404101114016.png" alt="image-20240410111456977"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT MONTHNAME(&#x27;2021-10-26&#x27;),DAYNAME(&#x27;2021-10-26&#x27;),WEEKDAY(&#x27;2021-10-26&#x27;),<br>QUARTER(CURDATE()),WEEK(CURDATE()),DAYOFYEAR(NOW()),<br>DAYOFMONTH(NOW()),DAYOFWEEK(NOW())<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404101115799.png" alt="image-20240410111540772"></p><h3 id="4-4-日期的操作函数"><a href="#4-4-日期的操作函数" class="headerlink" title="4.4 日期的操作函数"></a>4.4 日期的操作函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>EXTRACT(type FROM date)</td><td>返回指定日期中特定的部分，type指定返回的值</td></tr></tbody></table><p>EXTRACT(type FROM date)函数中type的取值与含义：</p><table><thead><tr><th>type取值</th><th>含义</th></tr></thead><tbody><tr><td>MICROSECOND</td><td>返回亳秒数</td></tr><tr><td>SECOND</td><td>返回秒数</td></tr><tr><td>MINUTE</td><td>返回分钟数</td></tr><tr><td>HOUR</td><td>返回小时数</td></tr><tr><td>DAY</td><td>返回天数</td></tr><tr><td>WEEK</td><td>返回日期在一年中的第几个星期</td></tr><tr><td>MONTH</td><td>返回日期在一年中的第几个月</td></tr><tr><td>QUARTER</td><td>返回日期在一年中的第几个季度</td></tr><tr><td>YEAR</td><td>返回日期的年份</td></tr><tr><td>SECOND_MICROSECOND</td><td>返回秒和亳秒值</td></tr><tr><td>MINUTE_MICROSECOND</td><td>返回分钟和毫秒值</td></tr><tr><td>MINUTE_SECOND</td><td>返回分钟和秒值</td></tr><tr><td>HOUR_MICROSECOND</td><td>返回小时和毫秒值</td></tr><tr><td>HOUR_SECOND</td><td>返回小时和秒值</td></tr><tr><td>HOUR_MINUTE</td><td>返回小时和分钟值</td></tr><tr><td>DAY_MICROSECOND</td><td>返回天和毫秒值</td></tr><tr><td>DAY_SECOND</td><td>返回天和秒值</td></tr><tr><td>DAY_MINUTE</td><td>返回天和分钟值</td></tr><tr><td>DAY_HOUR</td><td>返回天和小时</td></tr><tr><td>YEAR_MONTH</td><td>返回年和月</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT EXTRACT(MINUTE FROM NOW()),EXTRACT( WEEK FROM NOW()),<br>EXTRACT( QUARTER FROM NOW()),EXTRACT( MINUTE_SECOND FROM NOW())<br>FROM DUAL;<br></code></pre></td></tr></table></figure><h3 id="4-5-时间和秒钟转换的函数"><a href="#4-5-时间和秒钟转换的函数" class="headerlink" title="4.5 时间和秒钟转换的函数"></a>4.5 时间和秒钟转换的函数</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>TIME_TO_SEC(time)</td><td>将 time 转化为秒并返回结果值。转化的公式为：<code>小时 * 3600 + 分钟 * 60 + 秒</code></td></tr><tr><td>SEC_TO_TIME(seconds)</td><td>将 seconds 描述转化为包含小时、分钟和秒的时间</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT TIME_TO_SEC(NOW());<br> +--------------------+<br> | TIME_TO_SEC(NOW()) |<br> +--------------------+<br> |              78774 |<br> +--------------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT SEC_TO_TIME(78774);<br>+--------------------+<br>| SEC_TO_TIME(78774) |<br>+--------------------+<br>| 21:52:54           |<br>+--------------------+<br>1 row in set (0.12 sec)<br></code></pre></td></tr></table></figure><h3 id="4-6-计算日期和时间的函数"><a href="#4-6-计算日期和时间的函数" class="headerlink" title="4.6 计算日期和时间的函数"></a>4.6 计算日期和时间的函数</h3><p><strong>第1组：</strong></p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>DATE_ADD(datetime, INTERVAL expr type)， ADDDATE(date,INTERVAL expr type)</td><td>返回与给定日期时间相差INTERVAL时 间段的日期时间</td></tr><tr><td>DATE_SUB(date,INTERVAL expr type)， SUBDATE(date,INTERVAL expr type)</td><td>返回与date相差INTERVAL时间间隔的 日期</td></tr></tbody></table><p>上述函数中type的取值：</p><table><thead><tr><th>间隔类型</th><th>含义</th></tr></thead><tbody><tr><td>HOUR</td><td>小时</td></tr><tr><td>MINUTE</td><td>分钟</td></tr><tr><td>SECOND</td><td>秒</td></tr><tr><td>YEAR</td><td>年</td></tr><tr><td>MONTH</td><td>月</td></tr><tr><td>DAY</td><td>日</td></tr><tr><td>YEAR_MONTH</td><td>年和月</td></tr><tr><td>DAY_HOUR</td><td>日和小时</td></tr><tr><td>DAY_MINUTE</td><td>日和分钟</td></tr><tr><td>DAY_SECOND</td><td>日和秒</td></tr><tr><td>HOUR_MINUTE</td><td>小时和分钟</td></tr><tr><td>HOUR_SECOND</td><td>小时和秒</td></tr><tr><td>MINUTE_SECOND</td><td>分钟和秒</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT DATE_ADD(NOW(), INTERVAL 1 DAY) AS col1,DATE_ADD(&#x27;2021-10-21 23:32:12&#x27;,INTERVAL <br>1 SECOND) AS col2,<br>ADDDATE(&#x27;2021-10-21 23:32:12&#x27;,INTERVAL 1 SECOND) AS col3,<br>DATE_ADD(&#x27;2021-10-21 23:32:12&#x27;,INTERVAL &#x27;1_1&#x27; MINUTE_SECOND) AS col4,<br>DATE_ADD(NOW(), INTERVAL -1 YEAR) AS col5, #可以是负数<br>DATE_ADD(NOW(), INTERVAL &#x27;1_1&#x27; YEAR_MONTH) AS col6 #需要单引号<br>FROM DUAL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT DATE_SUB(&#x27;2021-01-21&#x27;,INTERVAL 31 DAY) AS col1,<br>SUBDATE(&#x27;2021-01-21&#x27;,INTERVAL 31 DAY) AS col2,<br>DATE_SUB(&#x27;2021-01-21 02:01:01&#x27;,INTERVAL &#x27;1 1&#x27; DAY_HOUR) AS col3<br>FROM DUAL;<br></code></pre></td></tr></table></figure><p><strong>第2组：</strong></p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>ADDTIME(time1,time2)</td><td>返回time1加上time2的时间。当time2为一个数字时，代表的是 <code>秒</code>，可以为负数</td></tr><tr><td>SUBTIME(time1,time2)</td><td>返回time1减去time2后的时间。当time2为一个数字时，代表的是 <code>秒</code>，可以为负数</td></tr><tr><td>DATEDIFF(date1,date2)</td><td>返回date1 - date2的日期间隔天数</td></tr><tr><td>TIMEDIFF(time1, time2)</td><td>返回time1 - time2的时间间隔</td></tr><tr><td>FROM_DAYS(N)</td><td>返回从0000年1月1日起，N天以后的日期</td></tr><tr><td>TO_DAYS(date)</td><td>返回日期date距离0000年1月1日的天数</td></tr><tr><td>LAST_DAY(date)</td><td>返回date所在月份的最后一天的日期</td></tr><tr><td>MAKEDATE(year,n)</td><td>针对给定年份与所在年份中的天数返回一个日期</td></tr><tr><td>MAKETIME(hour,minute,second)</td><td>将给定的小时、分钟和秒组合成时间并返回</td></tr><tr><td>PERIOD_ADD(time,n)</td><td>返回time加上n后的时间</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT <br>ADDTIME(NOW(),20),SUBTIME(NOW(),30),SUBTIME(NOW(),&#x27;1:1:3&#x27;),DATEDIFF(NOW(),&#x27;2021-10-01&#x27;),<br>TIMEDIFF(NOW(),&#x27;2021-10-25 22:10:10&#x27;),FROM_DAYS(366),TO_DAYS(&#x27;0000-12-25&#x27;),<br>LAST_DAY(NOW()),MAKEDATE(YEAR(NOW()),12),MAKETIME(10,21,23),PERIOD_ADD(20200101010101,10)<br>FROM DUAL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT ADDTIME(NOW(), 50);<br>+---------------------+<br>| ADDTIME(NOW(), 50)  |<br>+---------------------+<br>| 2019-12-15 22:17:47 |<br>+---------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT ADDTIME(NOW(), &#x27;1:1:1&#x27;);<br>+-------------------------+<br>| ADDTIME(NOW(), &#x27;1:1:1&#x27;) |<br>+-------------------------+<br>| 2019-12-15 23:18:46     |<br>+-------------------------+<br>1 row in set (0.00 sec<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT SUBTIME(NOW(), &#x27;1:1:1&#x27;);<br>+-------------------------+<br>| SUBTIME(NOW(), &#x27;1:1:1&#x27;) |<br>+-------------------------+<br>| 2019-12-15 21:23:50     |<br>+-------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT SUBTIME(NOW(), &#x27;-1:-1:-1&#x27;); <br>+----------------------------+<br>| SUBTIME(NOW(), &#x27;-1:-1:-1&#x27;) |<br>+----------------------------+<br>| 2019-12-15 22:25:11        |<br>+----------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT FROM_DAYS(366);<br>+----------------+<br>| FROM_DAYS(366) |<br>+----------------+<br>| 0001-01-01     |<br>+----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT MAKEDATE(2020,1);<br>+------------------+<br>| MAKEDATE(2020,1) |<br>+------------------+<br>| 2020-01-01       |<br>+------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT MAKEDATE(2020,32);<br>+-------------------+<br>| MAKEDATE(2020,32) |<br>+-------------------+<br>| 2020-02-01        |<br>+-------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT MAKETIME(1,1,1);<br>+-----------------+<br>| MAKETIME(1,1,1) |<br>+-----------------+<br>| 01:01:01        |<br>+-----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT PERIOD_ADD(20200101010101,1);<br>+------------------------------+<br>| PERIOD_ADD(20200101010101,1) |<br>+------------------------------+<br>|               20200101010102 |<br>+------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT TO_DAYS(NOW());<br>+----------------+<br>| TO_DAYS(NOW()) |<br>+----------------+<br>|         737773 |<br>+----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>举例：查询 7 天内的新增用户数有多少？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT COUNT(*) as num FROM new_user WHERE TO_DAYS(NOW())-TO_DAYS(regist_time)&lt;=7<br></code></pre></td></tr></table></figure><h3 id="4-7-日期的格式化与解析"><a href="#4-7-日期的格式化与解析" class="headerlink" title="4.7 日期的格式化与解析"></a>4.7 日期的格式化与解析</h3><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>DATE_FORMAT(date,fmt)</td><td>按照字符串fmt格式化日期date值</td></tr><tr><td>TIME_FORMAT(time,fmt)</td><td>按照字符串fmt格式化时间time值</td></tr><tr><td>GET_FORMAT(date_type,format_type)</td><td>返回日期字符串的显示格式</td></tr><tr><td>STR_TO_DATE(str, fmt)</td><td>按照字符串fmt对str进行解析，解析为一个日期</td></tr></tbody></table><p>上述 <code>非GET_FORMAT</code> 函数中fmt参数常用的格式符：</p><table><thead><tr><th>格 式 符</th><th>说明</th><th>格式符</th><th>说明</th></tr></thead><tbody><tr><td>%Y</td><td>4位数字表示年份</td><td>%y</td><td>表示两位数字表示年份</td></tr><tr><td>%M</td><td>月名表示月份（January,….）</td><td>%m</td><td>两位数字表示月份 （01,02,03。。。）</td></tr><tr><td>%b</td><td>缩写的月名（Jan.，Feb.，….）</td><td>%c</td><td>数字表示月份（1,2,3,…）</td></tr><tr><td>%D</td><td>英文后缀表示月中的天数 （1st,2nd,3rd,…）</td><td>%d</td><td>两位数字表示月中的天数(01,02…)</td></tr><tr><td>%e</td><td>数字形式表示月中的天数 （1,2,3,4,5…..）</td><td></td><td></td></tr><tr><td>%H</td><td>两位数字表示小数，24小时制 （01,02..）</td><td>%h 和%I</td><td>两位数字表示小时，12小时制 （01,02..）</td></tr><tr><td>%k</td><td>数字形式的小时，24小时制(1,2,3)</td><td>%l</td><td>数字形式表示小时，12小时制 （1,2,3,4….）</td></tr><tr><td>%i</td><td>两位数字表示分钟（00,01,02）</td><td>%S 和%s</td><td>两位数字表示秒(00,01,02…)</td></tr><tr><td>%W</td><td>一周中的星期名称（Sunday…）</td><td>%a</td><td>一周中的星期缩写（Sun.， Mon.,Tues.，..）</td></tr><tr><td>%w</td><td>以数字表示周中的天数 (0&#x3D;Sunday,1&#x3D;Monday….)</td><td></td><td></td></tr><tr><td>%j</td><td>以3位数字表示年中的天数(001,002…)</td><td>%U</td><td>以数字表示年中的第几周， （1,2,3。。）其中Sunday为周中第一 天</td></tr><tr><td>%u</td><td>以数字表示年中的第几周， （1,2,3。。）其中Monday为周中第一 天</td><td></td><td></td></tr><tr><td>%T</td><td>24小时制</td><td>%r</td><td>12小时制</td></tr><tr><td>%p</td><td>AM或PM</td><td>%%</td><td>表示%</td></tr></tbody></table><p> GET_FORMAT函数中date_type和format_type参数取值如下:</p><table><thead><tr><th>日期类型</th><th>格式化类型</th><th>返回的格式化字符串</th></tr></thead><tbody><tr><td>DATE</td><td>USA</td><td>%m.%d.%Y</td></tr><tr><td>DATE</td><td>JIS</td><td>%Y-%m-%d</td></tr><tr><td>DATE</td><td>ISO</td><td>%Y-%m-%d</td></tr><tr><td>DATE</td><td>EUR</td><td>%d.%m.%Y</td></tr><tr><td>DATE</td><td>INTERNAL</td><td>%Y%m%d</td></tr><tr><td>TIME</td><td>USA</td><td>%h:%i:%s %p</td></tr><tr><td>TIME</td><td>JIS</td><td>%H:%i:%s</td></tr><tr><td>TIME</td><td>ISO</td><td>%H:%i:%s</td></tr><tr><td>TIME</td><td>EUR</td><td>%H.%i.%s</td></tr><tr><td>TIME</td><td>INTERNAL</td><td>%H%i%s</td></tr><tr><td>DATETIME</td><td>USA</td><td>%Y-%m-%d %H.%i.%s</td></tr><tr><td>DATETIME</td><td>JIS</td><td>%Y-%m-%d %H:%i:%s</td></tr><tr><td>DATETIME</td><td>ISO</td><td>%Y-%m-%d %H:%i:%s</td></tr><tr><td>DATETIME</td><td>EUR</td><td>%Y-%m-%d %H:%i:%s</td></tr><tr><td>DATETIME</td><td>INTERNAL</td><td>%Y%m%d%H%i%s</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT DATE_FORMAT(NOW(), &#x27;%H:%i:%s&#x27;);<br>+--------------------------------+<br>| DATE_FORMAT(NOW(), &#x27;%H:%i:%s&#x27;) |<br>+--------------------------------+<br>|22:57:34                        |<br>+--------------------------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT STR_TO_DATE(&#x27;09/01/2009&#x27;,&#x27;%m/%d/%Y&#x27;)<br>FROM DUAL;<br><br>SELECT STR_TO_DATE(&#x27;20140422154706&#x27;,&#x27;%Y%m%d%H%i%s&#x27;)<br>FROM DUAL;<br><br>SELECT STR_TO_DATE(&#x27;2014-04-22 15:47:06&#x27;,&#x27;%Y-%m-%d %H:%i:%s&#x27;)<br>FROM DUAL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT GET_FORMAT(DATE, &#x27;USA&#x27;);<br>+-------------------------+<br>| GET_FORMAT(DATE, &#x27;USA&#x27;) |<br>+-------------------------+<br>| %m.%d.%Y                |<br>+-------------------------+<br>1 row in set (0.00 sec)<br><br>SELECT DATE_FORMAT(NOW(),GET_FORMAT(DATE,&#x27;USA&#x27;)),<br>FROM DUAL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT STR_TO_DATE(&#x27;2020-01-01 00:00:00&#x27;,&#x27;%Y-%m-%d&#x27;); <br>+-----------------------------------------------+<br>| STR_TO_DATE(&#x27;2020-01-01 00:00:00&#x27;,&#x27;%Y-%m-%d&#x27;) |<br>+-----------------------------------------------+<br>| 2020-01-01                                    |<br>+-----------------------------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="5、流程控制函数"><a href="#5、流程控制函数" class="headerlink" title="5、流程控制函数"></a>5、流程控制函数</h2><p>流程处理函数可以根据不同的条件，执行不同的处理流程，可以在SQL语句中实现不同的条件选择。 MySQL中的流程处理函数主要包括IF()、IFNULL()和CASE()函数。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>IF(value,value1,value2)</td><td>如果value的值为TRUE，返回value1， 否则返回value2</td></tr><tr><td>IFNULL(value1, value2)</td><td>如果value1不为NULL，返回value1，否 则返回value2</td></tr><tr><td>CASE WHEN 条件1 THEN 结果1 WHEN 条件2 THEN 结果2 …. [ELSE resultn] END</td><td>相当于Java的if…else if…else…</td></tr><tr><td>CASE expr WHEN 常量值1 THEN 值1 WHEN 常量值1 THEN 值1 …. [ELSE 值n] END</td><td>相当于Java的switch…case…</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT IF(1 &gt; 0,&#x27;正确&#x27;,&#x27;错误&#x27;)    <br>-&gt;正确<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT IFNULL(null,&#x27;Hello Word&#x27;)<br>-&gt;Hello Word<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT CASE <br>　WHEN 1 &gt; 0<br>　THEN &#x27;1 &gt; 0&#x27;<br>　WHEN 2 &gt; 0<br>　THEN &#x27;2 &gt; 0&#x27;<br>　ELSE &#x27;3 &gt; 0&#x27;<br>　END<br>-&gt;1 &gt; 0<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT CASE 1 <br>　WHEN 1 THEN &#x27;我是1&#x27;<br>　WHEN 2 THEN &#x27;我是2&#x27;<br>ELSE &#x27;你是谁&#x27;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,salary, CASE WHEN salary&gt;=15000 THEN &#x27;高薪&#x27; <br>                 WHEN salary&gt;=10000 THEN &#x27;潜力股&#x27;  <br>                 WHEN salary&gt;=8000 THEN &#x27;屌丝&#x27; <br>                 ELSE &#x27;草根&#x27; END  &quot;描述&quot;<br>FROM employees;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT oid,`status`, CASE `status` WHEN 1 THEN &#x27;未付款&#x27; <br>                                   WHEN 2 THEN &#x27;已付款&#x27; <br>                                   WHEN 3 THEN &#x27;已发货&#x27;  <br>                                   WHEN 4 THEN &#x27;确认收货&#x27;  <br>                                   ELSE &#x27;无效订单&#x27; END <br>FROM t_order;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT CASE WHEN 1 &gt; 0 THEN &#x27;yes&#x27; WHEN 1 &lt;= 0 THEN &#x27;no&#x27; ELSE &#x27;unknown&#x27; END;<br>+---------------------------------------------------------------------+<br>| CASE WHEN 1 &gt; 0 THEN &#x27;yes&#x27; WHEN 1 &lt;= 0 THEN &#x27;no&#x27; ELSE &#x27;unknown&#x27; END |<br>+---------------------------------------------------------------------+<br>| yes                                                                 |<br>+---------------------------------------------------------------------+<br>1 row in set (0.00 sec)<br> <br><br>mysql&gt; SELECT CASE WHEN 1 &lt; 0 THEN &#x27;yes&#x27; WHEN 1 = 0 THEN &#x27;no&#x27; ELSE &#x27;unknown&#x27; END;  <br>+--------------------------------------------------------------------+<br>| CASE WHEN 1 &lt; 0 THEN &#x27;yes&#x27; WHEN 1 = 0 THEN &#x27;no&#x27; ELSE &#x27;unknown&#x27; END |<br>+--------------------------------------------------------------------+<br>| unknown                                                            |<br>+--------------------------------------------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT CASE 1 WHEN 0 THEN 0 WHEN 1 THEN 1 ELSE -1 END;<br>+------------------------------------------------+<br>| CASE 1 WHEN 0 THEN 0 WHEN 1 THEN 1 ELSE -1 END |<br>+------------------------------------------------+<br>|                                              1 |<br>+------------------------------------------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT CASE -1 WHEN 0 THEN 0 WHEN 1 THEN 1 ELSE -1 END;<br>+-------------------------------------------------+<br>| CASE -1 WHEN 0 THEN 0 WHEN 1 THEN 1 ELSE -1 END |<br>+-------------------------------------------------+<br>|                                              -1 |<br>+-------------------------------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT employee_id,12 * salary * (1 + IFNULL(commission_pct,0))<br>FROM employees;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT last_name, job_id, salary,<br>CASE job_id WHEN &#x27;IT_PROG&#x27;  THEN  1.10*salary<br>WHEN &#x27;ST_CLERK&#x27; THEN  1.15*salary<br>WHEN &#x27;SA_REP&#x27;   THEN  1.20*salary<br>ELSE      salary END     &quot;REVISED_SALARY&quot;<br>FROM   employees;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404111119999.png" alt="image-20240411111910895"></p><h2 id="6、加密与解密函数"><a href="#6、加密与解密函数" class="headerlink" title="6、加密与解密函数"></a>6、加密与解密函数</h2><p>加密与解密函数主要用于对数据库中的数据进行加密和解密处理，以防止数据被他人窃取。这些函数在 保证数据库安全时非常有用。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>PASSWORD(str)</td><td>返回字符串str的加密版本，41位长的字符串。加密结果 <code>不可逆</code>，常用于用户的密码加密</td></tr><tr><td>MD5(str)</td><td>返回字符串str的md5加密后的值，也是一种加密方式。若参数为 NULL，则会返回NULL</td></tr><tr><td>SHA(str)</td><td>从原明文密码str计算并返回加密后的密码字符串，当参数为 NULL时，返回NULL。 <code>SHA加密算法比MD5更加安全</code>。</td></tr><tr><td>ENCODE(value,password_seed)</td><td>返回使用password_seed作为加密密码加密value</td></tr><tr><td>DECODE(value,password_seed)</td><td>返回使用password_seed作为加密密码解密value</td></tr></tbody></table><p>可以看到，ENCODE(value,password_seed)函数与DECODE(value,password_seed)函数互为反函数。</p><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT PASSWORD(&#x27;mysql&#x27;), PASSWORD(NULL);<br>+-------------------------------------------+----------------+<br>| PASSWORD(&#x27;mysql&#x27;)                         | PASSWORD(NULL) |<br>+-------------------------------------------+----------------+<br>| *E74858DB86EBA20BC33D0AECAE8A8108C56B17FA |                |<br>+-------------------------------------------+----------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT md5(&#x27;123&#x27;)<br>-&gt;202cb962ac59075b964b07152d234b70<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT SHA(&#x27;Tom123&#x27;)<br>-&gt;c7c506980abc31cc390a2438c90861d0f1216d50<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT ENCODE(&#x27;mysql&#x27;, &#x27;mysql&#x27;);<br>+--------------------------+<br>| ENCODE(&#x27;mysql&#x27;, &#x27;mysql&#x27;) |<br>+--------------------------+<br>| íg　¼　ìÉ                 |<br>+--------------------------+<br> 1 row in set, 1 warning (0.01 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT DECODE(ENCODE(&#x27;mysql&#x27;,&#x27;mysql&#x27;),&#x27;mysql&#x27;);<br>+-----------------------------------------+<br>| DECODE(ENCODE(&#x27;mysql&#x27;,&#x27;mysql&#x27;),&#x27;mysql&#x27;) |<br>+-----------------------------------------+<br>| mysql                                   |<br>+-----------------------------------------+<br>1 row in set, 2 warnings (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="7、MySQL信息函数"><a href="#7、MySQL信息函数" class="headerlink" title="7、MySQL信息函数"></a>7、MySQL信息函数</h2><p>MySQL中内置了一些可以查询MySQL信息的函数，这些函数主要用于帮助数据库开发或运维人员更好地 对数据库进行维护工作。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>VERSION()</td><td>返回当前MySQL的版本号</td></tr><tr><td>CONNECTION_ID()</td><td>返回当前MySQL服务器的连接数</td></tr><tr><td>DATABASE()，SCHEMA()</td><td>返回MySQL命令行当前所在的数据库</td></tr><tr><td>USER()，CURRENT_USER()、SYSTEM_USER()， SESSION_USER()</td><td>返回当前连接MySQL的用户名，返回结果格式为 “主机名@用户名”</td></tr><tr><td>CHARSET(value)</td><td>返回字符串value自变量的字符集</td></tr><tr><td>COLLATION(value)</td><td>返回字符串value的比较规则</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT DATABASE();<br>+------------+<br>| DATABASE() |<br>+------------+<br>| test       |<br>+------------+<br>1 row in set (0.00 sec)<br><br>mysql&gt; SELECT DATABASE();<br>+------------+<br>| DATABASE() |<br>+------------+<br>| test       |<br>+------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT USER(), CURRENT_USER(), SYSTEM_USER(),SESSION_USER();<br>----------------+----------------+----------------+----------------+<br>| USER()         | CURRENT_USER() | SYSTEM_USER()  | SESSION_USER() |<br>+----------------+----------------+----------------+----------------+<br>| root@localhost | root@localhost | root@localhost | root@localhost |<br>+----------------+----------------+----------------+----------------+<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT CHARSET(&#x27;ABC&#x27;);<br>+----------------+<br>| CHARSET(&#x27;ABC&#x27;) |<br>+----------------+<br>| utf8mb4        |<br>+----------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT COLLATION(&#x27;ABC&#x27;);<br>+--------------------+<br>| COLLATION(&#x27;ABC&#x27;)   |<br>+--------------------+<br>| utf8mb4_general_ci |<br>+--------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="8、其他函数"><a href="#8、其他函数" class="headerlink" title="8、其他函数"></a>8、其他函数</h2><p>MySQL中有些函数无法对其进行具体的分类，但是这些函数在MySQL的开发和运维过程中也是不容忽视的。</p><table><thead><tr><th>函数</th><th>用法</th></tr></thead><tbody><tr><td>FORMAT(value,n)</td><td>返回对数字value进行格式化后的结果数据。n表示 <code>四舍五入</code> 后保留 到小数点后n位</td></tr><tr><td>CONV(value,from,to)</td><td>将value的值进行不同进制之间的转换</td></tr><tr><td>INET_ATON(ipvalue)</td><td>将以点分隔的IP地址转化为一个数字</td></tr><tr><td>INET_NTOA(value)</td><td>将数字形式的IP地址转化为以点分隔的IP地址</td></tr><tr><td>BENCHMARK(n,expr)</td><td>将表达式expr重复执行n次。用于测试MySQL处理expr表达式所耗费 的时间</td></tr><tr><td>CONVERT(value USING char_code)</td><td>将value所使用的字符编码修改为char_code</td></tr></tbody></table><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> # 如果n的值小于或者等于0，则只保留整数部分<br>mysql&gt; SELECT FORMAT(123.123, 2), FORMAT(123.523, 0), FORMAT(123.123, -2); <br>+--------------------+--------------------+---------------------+<br>| FORMAT(123.123, 2) | FORMAT(123.523, 0) | FORMAT(123.123, -2) |<br>+--------------------+--------------------+---------------------+<br>| 123.12             | 124                | 123                 |<br>+--------------------+--------------------+---------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT CONV(16, 10, 2), CONV(8888,10,16), CONV(NULL, 10, 2);<br>+-----------------+------------------+-------------------+<br>| CONV(16, 10, 2) | CONV(8888,10,16) | CONV(NULL, 10, 2) |<br>+-----------------+------------------+-------------------+<br>| 10000           | 22B8             | NULL              |<br>+-----------------+------------------+-------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT INET_ATON(&#x27;192.168.1.100&#x27;);<br>+----------------------------+<br>| INET_ATON(&#x27;192.168.1.100&#x27;) |<br>+----------------------------+<br>|                 3232235876 |<br>+----------------------------+<br>1 row in set (0.00 sec)<br><br># 以“192.168.1.100”为例，计算方式为192乘以256的3次方，加上168乘以256的2次方，加上1乘以256，再加上100。<br>mysql&gt; SELECT INET_NTOA(3232235876);<br>+-----------------------+<br>| INET_NTOA(3232235876) |<br>+-----------------------+<br>| 192.168.1.100         |<br>+-----------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT BENCHMARK(1, MD5(&#x27;mysql&#x27;));<br>+----------------------------+<br>| BENCHMARK(1, MD5(&#x27;mysql&#x27;)) |<br>+----------------------------+<br>|                          0 |<br>+----------------------------+<br>1 row in set (0.00 sec)<br> <br>mysql&gt; SELECT BENCHMARK(1000000, MD5(&#x27;mysql&#x27;)); <br>+----------------------------------+<br>| BENCHMARK(1000000, MD5(&#x27;mysql&#x27;)) |<br>+----------------------------------+<br>|                                0 |<br>+----------------------------------+<br>1 row in set (0.20 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT CHARSET(&#x27;mysql&#x27;), CHARSET(CONVERT(&#x27;mysql&#x27; USING &#x27;utf8&#x27;));<br>+------------------+----------------------------------------+<br>| CHARSET(&#x27;mysql&#x27;) | CHARSET(CONVERT(&#x27;mysql&#x27; USING &#x27;utf8&#x27;)) |<br>+------------------+----------------------------------------+<br>| utf8mb4          | utf8                                   |<br>+------------------+----------------------------------------+<br>1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运算符</title>
    <link href="/2024/04/10/mysql/5%E3%80%81%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/"/>
    <url>/2024/04/10/mysql/5%E3%80%81%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>多表查询，也称为关联查询，指两个或更多个表一起完成查询操作。</p><p>前提条件：这些一起查询的表之间是有关系的（一对一、一对多），它们之间一定是有关联字段，这个 关联字段可能建立了外键，也可能没有建立外键。比如：员工表和部门表，这两个表依靠“部门编号”进 行关联。</p><h2 id="1、一个案例引发的多表连接"><a href="#1、一个案例引发的多表连接" class="headerlink" title="1、一个案例引发的多表连接"></a>1、一个案例引发的多表连接</h2><h3 id="1-1-案例说明"><a href="#1-1-案例说明" class="headerlink" title="1.1 案例说明"></a>1.1 案例说明</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100914073.png" alt="image-20240410091427025" style="zoom:50%;" /><p>从多个表中获取数据：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100915254.png" alt="image-20240410091505202" style="zoom: 50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">#案例：查询员工的姓名及其部门名称<br>SELECT last_name, department_name<br>FROM employees, departments;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100915023.png" alt="image-20240410091543984" style="zoom:50%;" /><p>查询结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">+-----------+----------------------+<br>| last_name | department_name      |<br>+-----------+----------------------+<br>| King      | Administration       |<br>| King      | Marketing   |<br>| King      | Purchasing   |<br>| King      | Shipping   |<br>| King      | IT     |<br>| King      | Sales      |<br>...<br>| Gietz     | IT Support   |<br>| Gietz     | NOC    |<br>| Gietz     | IT Helpdesk   |<br>+-----------+----------------------+<br> 2889 rows in set (0.01 sec)<br></code></pre></td></tr></table></figure><p><strong>分析错误情况：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT COUNT(employee_id) FROM employees;<br>#输出107行<br> <br>SELECT COUNT(department_id)FROM departments;<br>#输出27行<br><br>SELECT 107*27 FROM dual;<br></code></pre></td></tr></table></figure><p>我们把上述多表查询中出现的问题称为：笛卡尔积的错误。</p><h3 id="1-2-笛卡尔积（或交叉连接）的理解"><a href="#1-2-笛卡尔积（或交叉连接）的理解" class="headerlink" title="1.2 笛卡尔积（或交叉连接）的理解"></a>1.2 笛卡尔积（或交叉连接）的理解</h3><p>笛卡尔乘积是一个数学运算。假设我有两个集合 X 和 Y，那么 X 和 Y 的笛卡尔积就是 X 和 Y 的所有可能 组合，也就是第一个对象来自于 X，第二个对象来自于 Y 的所有可能。组合的个数即为两个集合中元素 个数的乘积数。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100921301.png" alt="image-20240410092143244" style="zoom:50%;" /><p>SQL92中，笛卡尔积也称为 <code>交叉连接</code>，英文是  <code>CROSS JOIN</code> 。在 SQL99 中也是使用 CROSS JOIN表示交 叉连接。它的作用就是可以把任意表进行连接，即使这两张表不相关。在MySQL中如下情况会出现笛卡 尔积：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询员工姓名和所在部门名称<br>SELECT last_name,department_name FROM employees,departments;<br>SELECT last_name,department_name FROM employees CROSS JOIN departments;<br>SELECT last_name,department_name FROM employees INNER JOIN departments;<br>SELECT last_name,department_name FROM employees JOIN departments;<br></code></pre></td></tr></table></figure><h3 id="1-3-案例分析与问题解决"><a href="#1-3-案例分析与问题解决" class="headerlink" title="1.3 案例分析与问题解决"></a>1.3 案例分析与问题解决</h3><ul><li><p><strong>笛卡尔积的错误会在下面条件下产生：</strong></p><ul><li>省略多个表的连接条件（或关联条件）</li><li>连接条件（或关联条件）无效</li><li>所有表中的所有行互相连接</li></ul></li><li><p>为了避免笛卡尔积， 可以<strong>在 WHERE 加入有效的连接条件。</strong></p></li><li><p>加入连接条件后，查询语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT  table1.column, table2.column<br>FROM    table1, table2<br>WHERE   table1.column1 = table2.column2;  #连接条件<br></code></pre></td></tr></table></figure><ul><li>在 WHERE子句中写入连接条件。</li></ul></li><li><p>正确写法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#案例：查询员工的姓名及其部门名称<br>SELECT last_name, department_name<br>FROM employees, departments<br>WHERE employees.department_id = departments.department_id;<br></code></pre></td></tr></table></figure></li><li><p><strong>在表中有相同列时，在列名之前加上表名前缀。</strong></p></li></ul><h2 id="2、多表查询分类讲解"><a href="#2、多表查询分类讲解" class="headerlink" title="2、多表查询分类讲解"></a>2、多表查询分类讲解</h2><h3 id="分类1：等值连接-vs-非等值连接"><a href="#分类1：等值连接-vs-非等值连接" class="headerlink" title="分类1：等值连接 vs 非等值连接"></a>分类1：等值连接 vs 非等值连接</h3><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100927912.png" alt="image-20240410092713851" style="zoom:50%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employees.employee_id, employees.last_name, <br>   employees.department_id, departments.department_id, <br>   departments.location_id<br>FROM   employees, departments<br>WHERE  employees.department_id = departments.department_id;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100928014.png" alt="image-20240410092819977" style="zoom:67%;" /><p><strong>拓展1：多个连接条件与 AND 操作符</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100929523.png" alt="image-20240410092904477" style="zoom:67%;" /><p><strong>拓展2：区分重复的列名</strong></p><ul><li><strong>多个表中有相同列时，必须在列名之前加上表名前缀。</strong></li><li>在不同表中具有相同列名的列可以用 <code>表名</code> 加以区分。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employees.last_name, departments.department_name,employees.department_id<br>FROM employees, departments<br>WHERE employees.department_id = departments.department_id;<br></code></pre></td></tr></table></figure><p><strong>拓展3：表的别名</strong></p><ul><li>使用别名可以简化查询。</li><li>列名前使用表名前缀可以提高查询效率。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT e.employee_id, e.last_name, e.department_id,<br>   d.department_id, d.location_id<br>FROM   employees e , departments d<br>WHERE  e.department_id = d.department_id;<br></code></pre></td></tr></table></figure><blockquote><p> 需要注意的是，如果我们使用了表的别名，在查询字段中、过滤条件中就只能使用别名进行代替， 不能使用原有的表名，否则就会报错。</p><p><code>阿里开发规范</code>：</p><p>【<code>强制</code>】对于数据库中表记录的查询和变更，只要涉及多个表，都需要在列名前加表的别名（或 表名）进行限定。</p><p><code>说明</code>：对多表进行查询记录、更新记录、删除记录时，如果对操作列没有限定表的别名（或表 名），并且操作列在多个表中存在时，就会抛异常。</p><p><code>正例</code>：select t1.name from table_first as t1 , table_second as t2 where t1.id&#x3D;t2.id;</p><p><code>反例</code>：在某业务中，由于多表关联查询语句没有加表的别名（或表名）的限制，正常运行两年 后，最近在 某个表中增加一个同名字段，在预发布环境做数据库变更后，线上查询语句出现出 1052 异常：Column ‘name’ in field list is ambiguous。</p></blockquote><p><strong>拓展4：连接多个表</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100933208.png" alt="image-20240410093303165"></p><p><strong>总结：连接 n个表,至少需要n-1个连接条件。</strong>比如，连接三个表，至少需要两个连接条件。</p><p>练习：查询出公司员工的 last_name,department_name, city</p><h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100934369.png" alt="image-20240410093403306" style="zoom:67%;" /><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT e.last_name, e.salary, j.grade_level<br>FROM   employees e, job_grades j<br>WHERE  e.salary BETWEEN j.lowest_sal AND j.highest_sal;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100934040.png" alt="image-20240410093447006" style="zoom:67%;" /><h3 id="分类2：自连接-vs-非自连接"><a href="#分类2：自连接-vs-非自连接" class="headerlink" title="分类2：自连接 vs 非自连接"></a>分类2：自连接 vs 非自连接</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100935756.png" alt="image-20240410093550711" style="zoom:67%;" /><ul><li>当table1和table2本质上是同一张表，只是用取别名的方式虚拟成两张表以代表不同的意义。然后两个表再进行内连接，外连接等查询。</li></ul><p><strong>题目：查询employees表，返回“Xxx works for Xxx”</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT CONCAT(worker.last_name ,&#x27; works for &#x27; <br>       , manager.last_name)<br>FROM   employees worker, employees manager<br>WHERE  worker.manager_id = manager.employee_id ;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100937124.png" alt="image-20240410093720087" style="zoom:67%;" /><p>练习：查询出last_name为 ‘Chen’ 的员工的 manager 的信息。</p><p><strong>分类3：内连接 vs 外连接</strong></p><p>除了查询满足条件的记录以外，外连接还可以查询某一方不满足条件的记录。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100938178.png" alt="image-20240410093800130" style="zoom:67%;" /><ul><li>内连接: 合并具有同一列的两个以上的表的行, <strong>结果集中不包含一个表与另一个表不匹配的行</strong></li><li>外连接: 两个表在连接过程中除了返回满足连接条件的行以外<strong>还返回左（或右）表中不满足条件的 行 ，这种连接称为左（或右） 外连接</strong>。没有匹配的行时, 结果表中相应的列为空(NULL)。</li><li>如果是左外连接，则连接条件中左边的表也称为 <code>主表</code>，右边的表称为 <code>从表</code>。</li><li>如果是右外连接，则连接条件中右边的表也称为 <code>主表</code>，左边的表称为 <code>从表</code>。</li></ul><h4 id="SQL92：使用-创建连接"><a href="#SQL92：使用-创建连接" class="headerlink" title="SQL92：使用(+)创建连接"></a>SQL92：使用(+)创建连接</h4><ul><li><p>在 SQL92 中采用（+）代表从表所在的位置。即左或右外连接中，(+) 表示哪个是从表。</p></li><li><p>Oracle 对 SQL92 支持较好，而 MySQL 则不支持 SQL92 的外连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#左外连接<br>SELECT last_name,department_name<br>FROM employees ,departments<br>WHERE employees.department_id = departments.department_id(+);<br><br>#右外连接<br>SELECT last_name,department_name<br>FROM employees ,departments<br>WHERE employees.department_id(+) = departments.department_id;<br></code></pre></td></tr></table></figure></li><li><p>而且在 SQL92 中，只有左外连接和右外连接，没有满（或全）外连接。</p></li></ul><h2 id="3、SQL99语法实现多表查询"><a href="#3、SQL99语法实现多表查询" class="headerlink" title="3、SQL99语法实现多表查询"></a>3、SQL99语法实现多表查询</h2><h3 id="3-1-基本语法"><a href="#3-1-基本语法" class="headerlink" title="3.1 基本语法"></a>3.1 基本语法</h3><ul><li><p>使用JOIN…ON子句创建连接的语法结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT table1.column, table2.column,table3.column<br>FROM table1<br>JOIN table2 ON table1 和 table2 的连接条件<br>JOIN table3 ON table2 和 table3 的连接条件<br></code></pre></td></tr></table></figure><p>它的嵌套逻辑类似我们使用的 FOR 循环：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> t1 in table1:<br> <span class="hljs-keyword">for</span> t2 in table2:<br> <span class="hljs-keyword">if</span> condition1:<br> <span class="hljs-keyword">for</span> t3 in table3:<br> <span class="hljs-keyword">if</span> condition2:<br> output t1 + t2 + t3<br></code></pre></td></tr></table></figure><p> SQL99 采用的这种嵌套结构非常清爽、层次性更强、可读性更强，即使再多的表进行连接也都清晰 可见。如果你采用 SQL92，可读性就会大打折扣。</p></li><li><p>语法说明：</p><ul><li><strong>可以使用 ON 子句指定额外的连接条件。</strong></li><li>这个连接条件是与其它条件分开的。</li><li><strong>ON 子句使语句具有更高的易读性。</strong></li><li>关键字 JOIN、INNER JOIN、CROSS JOIN 的含义是一样的，都表示内连接</li></ul></li></ul><h3 id="3-2-内连接-INNER-JOIN-的实现"><a href="#3-2-内连接-INNER-JOIN-的实现" class="headerlink" title="3.2 内连接(INNER JOIN)的实现"></a>3.2 内连接(INNER JOIN)的实现</h3><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT 字段列表<br>FROM A表 INNER JOIN B表<br>ON 关联条件<br>WHERE 等其他子句;<br></code></pre></td></tr></table></figure><p>题目1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT e.employee_id, e.last_name, e.department_id, <br>   d.department_id, d.location_id<br>FROM   employees e JOIN departments d<br>ON     (e.department_id = d.department_id);<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100945609.png" alt="image-20240410094535573" style="zoom:67%;" /><p>题目2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT employee_id, city, department_name<br>FROM   employees e <br>JOIN   departments d<br>ON     d.department_id = e.department_id <br>JOIN   locations l<br>ON     d.location_id = l.location_id;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100946319.png" alt="image-20240410094631282" style="zoom: 67%;" /><h3 id="3-3-外连接-OUTER-JOIN-的实现"><a href="#3-3-外连接-OUTER-JOIN-的实现" class="headerlink" title="3.3 外连接(OUTER JOIN)的实现"></a>3.3 外连接(OUTER JOIN)的实现</h3><h4 id="3-3-1-左外连接-LEFT-OUTER-JOIN"><a href="#3-3-1-左外连接-LEFT-OUTER-JOIN" class="headerlink" title="3.3.1 左外连接(LEFT OUTER JOIN)"></a>3.3.1 左外连接(LEFT OUTER JOIN)</h4><ul><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#实现查询结果是A<br>SELECT 字段列表<br>FROM A表 LEFT JOIN B表<br>ON 关联条件<br>WHERE 等其他子句;<br></code></pre></td></tr></table></figure></li><li><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT e.last_name, e.department_id, d.department_name<br>FROM   employees e<br>LEFT OUTER JOIN departments d<br>ON   (e.department_id = d.department_id) ;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100947639.png" alt="image-20240410094753597" style="zoom:67%;" /></li></ul><h4 id="3-3-2-右外连接-RIGHT-OUTER-JOIN"><a href="#3-3-2-右外连接-RIGHT-OUTER-JOIN" class="headerlink" title="3.3.2 右外连接(RIGHT OUTER JOIN)"></a>3.3.2 右外连接(RIGHT OUTER JOIN)</h4><ul><li><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">#实现查询结果是B<br>SELECT 字段列表<br>FROM A表 RIGHT JOIN B表<br>ON 关联条件<br>WHERE 等其他子句;<br></code></pre></td></tr></table></figure></li><li><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT e.last_name, e.department_id, d.department_name<br>FROM   employees e<br>RIGHT OUTER JOIN departments d<br>ON    (e.department_id = d.department_id) ;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100949920.png" alt="image-20240410094905879" style="zoom:67%;" /></li></ul><blockquote><p>需要注意的是，LEFT JOIN 和 RIGHT JOIN 只存在于 SQL99 及以后的标准中，在 SQL92 中不存在， 只能用 (+) 表示。</p></blockquote><h4 id="3-3-3-满外连接-FULL-OUTER-JOIN"><a href="#3-3-3-满外连接-FULL-OUTER-JOIN" class="headerlink" title="3.3.3 满外连接(FULL OUTER JOIN)"></a>3.3.3 满外连接(FULL OUTER JOIN)</h4><ul><li>满外连接的结果 &#x3D; 左右表匹配的数据 + 左表没有匹配到的数据 + 右表没有匹配到的数据。</li><li>SQL99是支持满外连接的。使用FULL JOIN 或 FULL OUTER JOIN来实现。</li><li>需要注意的是，MySQL不支持FULL JOIN，但是可以用 LEFT JOIN UNION RIGHT join代替。</li></ul><h2 id="4、UNION的使用"><a href="#4、UNION的使用" class="headerlink" title="4、UNION的使用"></a>4、UNION的使用</h2><p><strong>合并查询结果</strong> 利用UNION关键字，可以给出多条SELECT语句，并将它们的结果组合成单个结果集。合并时，两个表对应的列数和数据类型必须相同，并且相互对应。各个SELECT语句之间使用UNION或UNION ALL关键字分隔。</p><p>语法格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT column,... FROM table1<br>UNION [ALL]<br>SELECT column,... FROM table2<br></code></pre></td></tr></table></figure><p> <strong>UNION操作符</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100952234.png" alt="image-20240410095229199" style="zoom:50%;" /><p>UNION 操作符返回两个查询的结果集的并集，去除重复记录。</p><p><strong>UNION ALL操作符</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100953748.png" alt="image-20240410095302715" style="zoom:50%;" /><p>UNION ALL操作符返回两个查询的结果集的并集。对于两个结果集的重复部分，不去重。</p><blockquote><p>注意：执行UNION ALL语句时所需要的资源比UNION语句少。如果明确知道合并数据后的结果数据 不存在重复数据，或者不需要去除重复的数据，则尽量使用UNION ALL语句，以提高数据查询的效 率。</p></blockquote><p>举例：查询部门编号&gt;90或邮箱包含a的员工信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式1<br>SELECT * FROM employees WHERE email LIKE &#x27;%a%&#x27; OR department_id&gt;90;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#方式2<br>SELECT * FROM employees  WHERE email LIKE &#x27;%a%&#x27;<br>UNION<br>SELECT * FROM employees  WHERE department_id&gt;90;<br></code></pre></td></tr></table></figure><p>举例：查询中国用户中男性的信息以及美国用户中年男性的用户信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT id,cname FROM t_chinamale WHERE csex=&#x27;男&#x27;<br>UNION ALL<br>SELECT id,tname FROM t_usmale WHERE tGender=&#x27;male&#x27;;<br></code></pre></td></tr></table></figure><h2 id="5、7种SQL-JOINS的实现"><a href="#5、7种SQL-JOINS的实现" class="headerlink" title="5、7种SQL JOINS的实现"></a>5、7种SQL JOINS的实现</h2><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100955787.png" alt="image-20240410095533667" style="zoom:50%;" /><h3 id="5-1-代码实现"><a href="#5-1-代码实现" class="headerlink" title="5.1 代码实现"></a>5.1 代码实现</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#中图：内连接 A∩B<br>SELECT employee_id,last_name,department_name<br>FROM employees e JOIN departments d<br>ON e.`department_id` = d.`department_id`;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#左上图：左外连接<br>SELECT employee_id,last_name,department_name<br>FROM employees e LEFT JOIN departments d<br>ON e.`department_id` = d.`department_id`;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#右上图：右外连接<br>SELECT employee_id,last_name,department_name<br>FROM employees e RIGHT JOIN departments d<br>ON e.`department_id` = d.`department_id`;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#左中图：A - A∩B<br>SELECT employee_id,last_name,department_name<br>FROM employees e LEFT JOIN departments d<br>ON e.`department_id` = d.`department_id`<br>WHERE d.`department_id` IS NULL<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#右中图：B-A∩B<br>SELECT employee_id,last_name,department_name<br>FROM employees e RIGHT JOIN departments d<br>ON e.`department_id` = d.`department_id`<br>WHERE e.`department_id` IS NULL<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#左下图：满外连接<br># 左中图 + 右上图  A∪B<br>SELECT employee_id,last_name,department_name<br>FROM employees e LEFT JOIN departments d<br>ON e.`department_id` = d.`department_id`<br>WHERE d.`department_id` IS NULL<br>UNION ALL  #没有去重操作，效率高<br>SELECT employee_id,last_name,department_name<br>FROM employees e RIGHT JOIN departments d<br>ON e.`department_id` = d.`department_id`;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#右下图<br>#左中图 + 右中图  A ∪B- A∩B 或者 (A -  A∩B) ∪ （B - A∩B）<br>SELECT employee_id,last_name,department_name<br>FROM employees e LEFT JOIN departments d<br>ON e.`department_id` = d.`department_id`<br>WHERE d.`department_id` IS NULL<br>UNION ALL<br>SELECT employee_id,last_name,department_name<br>FROM employees e RIGHT JOIN departments d<br>ON e.`department_id` = d.`department_id`<br>WHERE e.`department_id` IS NULL<br></code></pre></td></tr></table></figure><h3 id="5-2-语法格式小结"><a href="#5-2-语法格式小结" class="headerlink" title="5.2 语法格式小结"></a>5.2 语法格式小结</h3><ul><li><p>左中图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#实现A -  A∩B<br> select 字段列表<br>from A表 left join B表<br>on 关联条件<br>where 从表关联字段 is null and 等其他子句;<br></code></pre></td></tr></table></figure></li><li><p>右中图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#实现B -  A∩B<br> select 字段列表<br>from A表 right join B表<br>on 关联条件<br>where 从表关联字段 is null and 等其他子句;<br></code></pre></td></tr></table></figure></li><li><p>左下图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#实现查询结果是A∪B<br>#用左外的A，union 右外的B<br>select 字段列表<br>from A表 left join B表<br>on 关联条件<br>where 等其他子句<br><br>union <br><br>select 字段列表<br>from A表 right join B表<br>on 关联条件<br>where 等其他子句;<br></code></pre></td></tr></table></figure></li><li><p>右下图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#实现A∪B -  A∩B  或   (A -  A∩B) ∪ （B - A∩B）<br>#使用左外的 (A -  A∩B)  union 右外的（B - A∩B）<br>select 字段列表<br>from A表 left join B表<br>on 关联条件<br>where 从表关联字段 is null and 等其他子句<br><br>union<br><br>select 字段列表<br>from A表 right join B表<br>on 关联条件<br>where 从表关联字段 is null and 等其他子句<br></code></pre></td></tr></table></figure></li></ul><h2 id="6、SQL99语法新特性"><a href="#6、SQL99语法新特性" class="headerlink" title="6、SQL99语法新特性"></a>6、SQL99语法新特性</h2><h3 id="6-1-自然连接"><a href="#6-1-自然连接" class="headerlink" title="6.1 自然连接"></a>6.1 自然连接</h3><p>SQL99 在 SQL92 的基础上提供了一些特殊语法，比如  <code>NATURAL JOIN</code> 用来表示自然连接。我们可以把自然连接理解为 SQL92 中的等值连接。它会帮你自动查询两张连接表中 <code>所有相同的字段</code>，然后进行 <code>等值连接</code>。</p><p>在SQL92标准中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,last_name,department_name<br>FROM employees e JOIN departments d<br>ON e.`department_id` = d.`department_id`<br>AND e.`manager_id` = d.`manager_id`;<br></code></pre></td></tr></table></figure><p>在 SQL99 中你可以写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,last_name,department_name<br>FROM employees e NATURAL JOIN departments d;<br></code></pre></td></tr></table></figure><h3 id="6-2-USING连接"><a href="#6-2-USING连接" class="headerlink" title="6.2 USING连接"></a>6.2 USING连接</h3><p>当我们进行连接的时候，SQL99还支持使用 USING 指定数据表里的 <code>同名字段</code> 进行等值连接。但是只能配合JOIN一起使用。比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,last_name,department_name<br>FROM employees e JOIN departments d<br>USING (department_id);<br></code></pre></td></tr></table></figure><p>你能看出与自然连接 NATURAL JOIN 不同的是，USING 指定了具体的相同的字段名称，你需要在 USING 的括号 () 中填入要指定的同名字段。同时使用  <code>JOIN...USING</code> 可以简化 JOIN ON 的等值连接。它与下 面的 SQL 查询结果是相同的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,last_name,department_name<br>FROM employees e ,departments d<br>WHERE e.department_id = d.department_id;<br></code></pre></td></tr></table></figure><h2 id="7、章节小结"><a href="#7、章节小结" class="headerlink" title="7、章节小结"></a>7、章节小结</h2><p>表连接的约束条件可以有三种方式：WHERE, ON, USING</p><ul><li>WHERE：适用于所有关联查询</li><li><code>ON</code> ：只能和JOIN一起使用，只能写关联条件。虽然关联条件可以并到WHERE中和其他条件一起 写，但分开写可读性更好。</li><li>USING：只能和JOIN一起使用，而且要求<code>两个</code>关联字段在关联表中名称一致，而且只能表示关联字 段值相等</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#关联条件<br>#把关联条件写在where后面<br>SELECT last_name,department_name <br>FROM employees,departments <br>WHERE employees.department_id = departments.department_id;<br><br>#把关联条件写在on后面，只能和JOIN一起使用<br>SELECT last_name,department_name <br>FROM employees INNER JOIN departments <br>ON employees.department_id = departments.department_id;<br><br>SELECT last_name,department_name <br>FROM employees CROSS JOIN departments <br>ON employees.department_id = departments.department_id;<br><br>SELECT last_name,department_name  <br>FROM employees JOIN departments <br>ON employees.department_id = departments.department_id;<br><br>#把关联字段写在using()中，只能和JOIN一起使用<br>#而且两个表中的关联字段必须名称相同，而且只能表示=<br>#查询员工姓名与基本工资<br>SELECT last_name,job_title<br>FROM employees INNER JOIN jobs USING(job_id);<br><br>#n张表关联，需要n-1个关联条件<br>#查询员工姓名，基本工资，部门名称<br>SELECT last_name,job_title,department_name FROM employees,departments,jobs <br>WHERE employees.department_id = departments.department_id <br>AND employees.job_id = jobs.job_id;<br><br>SELECT last_name,job_title,department_name <br>FROM employees INNER JOIN departments INNER JOIN jobs <br>ON employees.department_id = departments.department_id <br>AND employees.job_id = jobs.job_id;<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>我们要 <code>控制连接表的数量</code>。多表连接就相当于嵌套 for 循环一样，非常消耗资源，会让 SQL 查询性能下 降得很严重，因此不要连接不必要的表。在许多 DBMS 中，也都会有最大连接表的限制。</p><blockquote><p>【强制】超过三个表禁止 join。需要 join 的字段，数据类型保持绝对一致；多表关联查询时， 保 证被关联的字段需要有索引。</p><p>说明：即使双表 join 也要注意表索引、SQL 性能。</p><p>来源：阿里巴巴《Java开发手册》</p></blockquote><h2 id="附录：常用的-SQL-标准有哪些"><a href="#附录：常用的-SQL-标准有哪些" class="headerlink" title="附录：常用的 SQL 标准有哪些"></a>附录：常用的 SQL 标准有哪些</h2><p>在正式开始讲连接表的种类时，我们首先需要知道 SQL 存在不同版本的标准规范，因为不同规范下的表 连接操作是有区别的。</p><p>SQL 有两个主要的标准，分别是  <code>SQL92</code> 和  <code>SQL99</code> 。92 和 99 代表了标准提出的时间，SQL92 就是 92 年 提出的标准规范。当然除了 SQL92 和 SQL99 以外，还存在 SQL-86、SQL-89、SQL:2003、SQL:2008、 SQL:2011 和 SQL:2016 等其他的标准。</p><p>这么多标准，到底该学习哪个呢？<strong>实际上最重要的 SQL 标准就是 SQL92 和 SQL99</strong>。一般来说 SQL92 的 形式更简单，但是写的 SQL 语句会比较长，可读性较差。而 SQL99 相比于 SQL92 来说，语法更加复杂， 但可读性更强。我们从这两个标准发布的页数也能看出，SQL92 的标准有 500 页，而 SQL99 标准超过了 1000 页。实际上从 SQL99 之后，很少有人能掌握所有内容，因为确实太多了。就好比我们使用 Windows、Linux 和 Office 的时候，很少有人能掌握全部内容一样。我们只需要掌握一些核心的功能，满 足日常工作的需求即可。</p><p><strong>SQL92 和 SQL99 是经典的 SQL 标准，也分别叫做 SQL-2 和 SQL-3 标准</strong>。也正是在这两个标准发布之 后，SQL 影响力越来越大，甚至超越了数据库领域。现如今 SQL 已经不仅仅是数据库领域的主流语言， 还是信息领域中信息处理的主流语言。在图形检索、图像检索以及语音检索中都能看到 SQL 语言的使 用。</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/04/10/mysql/4%E3%80%81%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/"/>
    <url>/2024/04/10/mysql/4%E3%80%81%E6%8E%92%E5%BA%8F%E4%B8%8E%E5%88%86%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">title</span>: 排序与分页<br><span class="hljs-attribute">date</span>: <span class="hljs-number">2024</span>/<span class="hljs-number">4</span>/<span class="hljs-number">10</span> <span class="hljs-number">09</span>:<span class="hljs-number">12</span>:<span class="hljs-number">24</span><br><span class="hljs-attribute">tag</span>: <br><span class="hljs-attribute">categories</span>: <br></code></pre></td></tr></table></figure><h2 id="1、排序数据"><a href="#1、排序数据" class="headerlink" title="1、排序数据"></a>1、排序数据</h2><h3 id="1-1-排序规则"><a href="#1-1-排序规则" class="headerlink" title="1.1 排序规则"></a>1.1 排序规则</h3><ul><li><p>使用 ORDER BY 子句排序 </p><ul><li><p><strong>ASC（ascend）: 升序</strong> </p></li><li><p><strong>DESC（descend）:降序</strong></p></li></ul></li><li><p><strong>ORDER BY 子句在SELECT语句的结尾。</strong></p></li></ul><h3 id="1-2-单列排序"><a href="#1-2-单列排序" class="headerlink" title="1.2 单列排序"></a>1.2 单列排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT   last_name, job_id, department_id, hire_date<br>FROM     employees<br>ORDER BY hire_date ;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100854481.png" alt="image-20240410085422447"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT   last_name, job_id, department_id, hire_date<br>FROM    employees<br>ORDER BY hire_date DESC ;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100855903.png" alt="image-20240410085534862"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT employee_id, last_name, salary*12 annsal<br>FROM   employees<br>ORDER BY annsal;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100856716.png" alt="image-20240410085616675"></p><h3 id="1-3-多列排序"><a href="#1-3-多列排序" class="headerlink" title="1.3 多列排序"></a>1.3 多列排序</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT last_name, department_id, salary<br>FROM   employees<br>ORDER BY department_id, salary DESC;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404100856525.png" alt="image-20240410085659490"></p><ul><li><p>可以使用不在SELECT列表中的列排序。 </p></li><li><p>在对多列进行排序的时候，首先排序的第一列必须有相同的列值，才会对第二列进行排序。如果第 一列数据中所有值都是唯一的，将不再对第二列进行排序。</p></li></ul><h2 id="2、分页"><a href="#2、分页" class="headerlink" title="2、分页"></a>2、分页</h2><h3 id="2-1-背景"><a href="#2-1-背景" class="headerlink" title="2.1 背景"></a>2.1 背景</h3><p>背景1：查询返回的记录太多了，查看起来很不方便，怎么样能够实现分页查询呢？</p><p>背景2：表里有 4 条数据，我们只想要显示第 2、3 条数据怎么办呢？</p><h3 id="2-2-实现规则"><a href="#2-2-实现规则" class="headerlink" title="2.2 实现规则"></a>2.2 实现规则</h3><ul><li><p>分页原理</p><p>所谓分页显示，就是将数据库中的结果集，一段一段显示出来需要的条件。</p></li><li><p><strong>MySQL中使用 LIMIT 实现分页</strong></p></li><li><p>格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">LIMIT [位置偏移量,] 行数<br></code></pre></td></tr></table></figure><p>第一个“位置偏移量”参数指示MySQL从哪一行开始显示，是一个可选参数，如果不指定“位置偏移 量”，将会从表中的第一条记录开始（第一条记录的位置偏移量是0，第二条记录的位置偏移量是 1，以此类推）；第二个参数“行数”指示返回的记录条数。</p></li><li><p>举例</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">--前10条记录：<br>SELECT * FROM 表名 LIMIT 0,10;<br>或者<br>SELECT * FROM 表名 LIMIT 10;--第11至20条记录：<br>SELECT * FROM 表名 LIMIT 10,10;--第21至30条记录： <br>SELECT * FROM 表名 LIMIT 20,10;<br></code></pre></td></tr></table></figure></li></ul><blockquote><p> MySQL 8.0中可以使用“LIMIT 3 OFFSET 4”，意思是获取从第5条记录开始后面的3条记录，和“LIMIT 4,3;”返回的结果相同。</p></blockquote><ul><li>分页显式公式：<strong>（当前页数-1）*每页条数，每页条数</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT * FROM table <br>LIMIT(PageNo - 1)*PageSize,PageSize;<br></code></pre></td></tr></table></figure><ul><li><strong>注意：LIMIT 子句必须放在整个SELECT语句的最后！</strong></li><li>使用 LIMIT 的好处</li></ul><p>约束返回结果的数量可以 <code>减少数据表的网络传输量</code>，也可以使用 <code>提升查询效率</code>。如果我们知道返回结果只有1条 ，就可以使用 <code>LIMIT 1</code>，告诉 SELECT 语句只需要返回一条记录即可。这样的好处就是 SELECT 不需 要扫描完整的表，只需要检索到一条符合条件的记录即可返回。</p><h3 id="2-3-拓展"><a href="#2-3-拓展" class="headerlink" title="2.3 拓展"></a>2.3 拓展</h3><p>在不同的 DBMS 中使用的关键字可能不同。在 MySQL、PostgreSQL、MariaDB 和 SQLite 中使用 LIMIT 关 键字，而且需要放到 SELECT 语句的最后面。</p><ul><li>如果是 SQL Server 和 Access，需要使用  <code>TOP</code> 关键字，比如：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT TOP 5 name, hp_max FROM heros ORDER BY hp_max DESC<br></code></pre></td></tr></table></figure><ul><li>如果是 DB2，使用 <code>FETCH FIRST 5 ROWS ONLY</code> 这样的关键字：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT name, hp_max FROM heros ORDER BY hp_max DESC FETCH FIRST 5 ROWS ONLY<br></code></pre></td></tr></table></figure><ul><li>如果是 Oracle，你需要基于  <code>ROWNUM</code> 来统计行数：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT rownum,last_name,salary FROM employees WHERE rownum &lt; 5 ORDER BY salary DESC;<br></code></pre></td></tr></table></figure><p>需要说明的是，这条语句是先取出来前 5 条数据行，然后再按照 hp_max 从高到低的顺序进行排序。但这样产生的结果和上述方法的并不一样。我会在后面讲到子查询，你可以使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT rownum, last_name,salary<br>FROM (<br>    SELECT last_name,salary<br>    FROM employees<br>    RDER BY salary DESC)<br>WHERE rownum &lt; 10;<br></code></pre></td></tr></table></figure><p>得到与上述方法一致的结果。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>基本的SELECT语句</title>
    <link href="/2024/04/09/mysql/2%E3%80%81%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/04/09/mysql/2%E3%80%81%E5%9F%BA%E6%9C%AC%E7%9A%84SELECT%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="1、SQL概述"><a href="#1、SQL概述" class="headerlink" title="1、SQL概述"></a>1、SQL概述</h2><h3 id="1-1-SQL背景知识"><a href="#1-1-SQL背景知识" class="headerlink" title="1.1 SQL背景知识"></a>1.1 SQL背景知识</h3><ul><li><p>1946 年，世界上第一台电脑诞生，如今，借由这台电脑发展起来的互联网已经自成江湖。在这几十 年里，无数的技术、产业在这片江湖里沉浮，有的方兴未艾，有的已经几幕兴衰。但在这片浩荡的 波动里，有一门技术从未消失，甚至“老当益壮”，那就是 SQL。</p><ul><li>45 年前，也就是 1974 年，IBM 研究员发布了一篇揭开数据库技术的论文《SEQUEL：一门结构 化的英语查询语言》，直到今天这门结构化的查询语言并没有太大的变化，相比于其他语 言， <code>SQL 的半衰期可以说是非常长了</code>。</li></ul></li><li><p>不论是前端工程师，还是后端算法工程师，都一定会和数据打交道，都需要了解如何又快又准确地 提取自己想要的数据。更别提数据分析师了，他们的工作就是和数据打交道，整理不同的报告，以 便指导业务决策。</p></li><li><p>SQL（Structured Query Language，结构化查询语言）是使用关系模型的数据库应用语言， <code>与数据直接打交道</code>，由 <code>IBM</code> 上世纪70年代开发出来。后由美国国家标准局（ANSI）开始着手制定SQL标准， 先后有 <code>SQL-86 </code> ，<code>SQL-89 </code>，<code>SQL-92 </code>， <code>SQL-99</code> 等标准。</p><ul><li>SQL 有两个重要的标准，分别是 SQL92 和 SQL99，它们分别代表了 92 年和 99 年颁布的 SQL 标 准，我们今天使用的 SQL 语言依然遵循这些标准。</li></ul></li><li><p>不同的数据库生产厂商都支持SQL语句，但都有特有内容。</p></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091545875.png" alt="image-20240409154530829" style="zoom:50%;" /><h3 id="1-2-SQL语言排行榜"><a href="#1-2-SQL语言排行榜" class="headerlink" title="1.2 SQL语言排行榜"></a>1.2 SQL语言排行榜</h3><p>自从 SQL 加入了 TIOBE 编程语言排行榜，就一直保持在 Top 10。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091546919.png" alt="image-20240409154600864" style="zoom:50%;" /><h3 id="1-3-SQL-分类"><a href="#1-3-SQL-分类" class="headerlink" title="1.3 SQL 分类"></a>1.3 SQL 分类</h3><p>SQL语言在功能上主要分为如下3大类：</p><ul><li><strong>DDL（Data Definition Languages、数据定义语言）</strong>，这些语句定义了不同的数据库、表、视图、索 引等数据库对象，还可以用来创建、删除、修改数据库和数据表的结构。</li><li><strong>DML（Data Manipulation Language、数据操作语言）</strong>，用于添加、删除、更新和查询数据库记 录，并检查数据完整性。<ul><li>主要的语句关键字包括 <code>INSERT</code> 、 <code>DELETE</code> 、 <code>UPDATE</code> 、 <code>SELECT</code> 等。</li><li><strong>SELECT是SQL语言的基础，最为重要</strong>。</li></ul></li><li><strong>DCL（Data Control Language、数据控制语言）</strong>，用于定义数据库、表、字段、用户的访问权限和 安全级别。<ul><li>主要的语句关键字包括 <code>GRANT</code> 、 <code>REVOKE</code> 、 <code>COMMIT</code> 、 <code>ROLLBACK</code> 、 <code>SAVEPOINT</code> 等。</li></ul></li></ul><blockquote><p>因为查询语句使用的非常的频繁，所以很多人把查询语句单拎出来一类：DQL（数据查询语言）。</p><p>还有单独将 COMMIT 、ROLLBACK 取出来称为TCL （Transaction Control Language，事务控制语言）。</p></blockquote><h2 id="2、SQL语言的规则与规范"><a href="#2、SQL语言的规则与规范" class="headerlink" title="2、SQL语言的规则与规范"></a>2、SQL语言的规则与规范</h2><h3 id="2-1-基本规则"><a href="#2-1-基本规则" class="headerlink" title="2.1 基本规则"></a>2.1 基本规则</h3><ul><li>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进</li><li>每条命令以 ; 或 \g 或 \G 结束</li><li>关键字不能被缩写也不能分行</li><li>关于标点符号<ul><li>必须保证所有的()、单引号、双引号是成对结束的</li><li>必须使用英文状态下的半角输入方式</li><li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示</li><li>列的别名，尽量使用双引号（” “），而且不建议省略as</li></ul></li></ul><h3 id="2-2-SQL大小写规范-（建议遵守）"><a href="#2-2-SQL大小写规范-（建议遵守）" class="headerlink" title="2.2 SQL大小写规范 （建议遵守）"></a>2.2 SQL大小写规范 （建议遵守）</h3><ul><li><strong>MySQL 在 Windows 环境下是大小写不敏感的</strong></li><li><strong>MySQL 在 Linux 环境下是大小写敏感的</strong><ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的</li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的。</li></ul></li><li><strong>推荐采用统一的书写规范：</strong><ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL 关键字、函数名、绑定变量等都大写</li></ul></li></ul><h3 id="2-3-注-释"><a href="#2-3-注-释" class="headerlink" title="2.3 注 释"></a>2.3 注 释</h3><p>可以使用如下格式的注释结构</p><blockquote><p>单行注释：#注释文字(MySQL特有的方式) </p><p>单行注释：– 注释文字(–后面必须包含一个空格。) </p><p>多行注释：&#x2F;* 注释文字  *&#x2F;</p></blockquote><h3 id="2-4-命名规则"><a href="#2-4-命名规则" class="headerlink" title="2.4 命名规则"></a>2.4 命名规则</h3><ul><li>数据库、表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含 A–Z, a–z, 0–9, _共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使 用&#96;（着重号）引起来</li><li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性。假如数据 类型在一个表里是整数，那在另一个表里可就别变成字符型了</li></ul><p>举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#以下两句是一样的，不区分大小写<br>show databases;<br> SHOW DATABASES;<br> <br>#创建表格<br>#create table student info(...); #表名错误，因为表名有空格<br>create table student_info(...); <br><br>#其中order使用``飘号，因为order和系统关键字或系统函数名等预定义标识符重名了<br>CREATE TABLE `order`(<br>id INT,<br>lname VARCHAR(20)<br>);<br><br>select id as &quot;编号&quot;, `name` as &quot;姓名&quot; from t_stu; #起别名时，as都可以省略<br>select id as 编号, `name` as 姓名 from t_stu; #如果字段别名中没有空格，那么可以省略&quot;&quot;<br>select id as 编 号, `name` as 姓 名 from t_stu; #错误，如果字段别名中有空格，那么不能省略&quot;&quot;<br></code></pre></td></tr></table></figure><h3 id="2-5-数据导入指令"><a href="#2-5-数据导入指令" class="headerlink" title="2.5 数据导入指令"></a>2.5 数据导入指令</h3><p>在命令行客户端登录mysql，使用source指令导入</p><blockquote><p>mysql&gt; source d:\mysqldb.sql</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employees;<br> +----------------+-------------+------+-----+---------+-------+<br> | Field          | Type        | Null | Key | Default | Extra |<br> +----------------+-------------+------+-----+---------+-------+<br> | employee_id    | int(6)      | NO   | PRI | 0       |       |<br> | first_name     | varchar(20) | YES  |     | NULL    |       |<br> | last_name      | varchar(25) | NO   |     | NULL    |       |<br> | email          | varchar(25) | NO   | UNI | NULL    |       |<br> | phone_number   | varchar(20) | YES  |     | NULL    |       |<br> | hire_date      | date        | NO   |     | NULL    |       |<br> | job_id         | varchar(10) | NO   | MUL | NULL    |       |<br> | salary         | double(8,2) | YES  |     | NULL    |       |<br> | commission_pct | double(2,2) | YES  |     | NULL    |       |<br> | manager_id     | int(6)      | YES  | MUL | NULL    |       |<br> | department_id  | int(4)      | YES  | MUL | NULL    |       |<br> +----------------+-------------+------+-----+---------+-------+<br> 11 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="3、基本的SELECT语句"><a href="#3、基本的SELECT语句" class="headerlink" title="3、基本的SELECT语句"></a>3、基本的SELECT语句</h2><h3 id="3-0-SELECT…"><a href="#3-0-SELECT…" class="headerlink" title="3.0 SELECT…"></a>3.0 SELECT…</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT 1; #没有任何子句<br>SELECT 9/2; #没有任何子句<br></code></pre></td></tr></table></figure><h3 id="3-1-SELECT-…-FROM"><a href="#3-1-SELECT-…-FROM" class="headerlink" title="3.1 SELECT … FROM"></a>3.1 SELECT … FROM</h3><ul><li>语法：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT   标识选择哪些列<br>FROM     标识从哪个表中选择<br></code></pre></td></tr></table></figure><ul><li>选择全部列：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT *<br>FROM   departments;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091608636.png" alt="image-20240409160851596" style="zoom:67%;" /><blockquote><p>一般情况下，除非需要使用表中所有的字段数据，最好不要使用通配符‘*’。使用通配符虽然可以节 省输入查询语句的时间，但是获取不需要的列数据通常会降低查询和所使用的应用程序的效率。通 配符的优势是，当不知道所需要的列的名称时，可以通过它获取它们。</p><p>在生产环境下，不推荐你直接使用 SELECT * 进行查询。</p></blockquote><ul><li>选择特定的列：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT department_id, location_id<br>FROM   departments;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091610742.png" alt="image-20240409161002707" style="zoom:67%;" /><blockquote><p>MySQL中的SQL语句是不区分大小写的，因此SELECT和select的作用是相同的，但是，许多开发人 员习惯将关键字大写、数据列和表名小写，读者也应该养成一个良好的编程习惯，这样写出来的代 码更容易阅读和维护。</p></blockquote><h3 id="3-2-列的别名"><a href="#3-2-列的别名" class="headerlink" title="3.2 列的别名"></a>3.2 列的别名</h3><ul><li>重命名一个列</li><li>便于计算</li><li>紧跟列名，也可以 <strong>在列名和别名之间加入关键字AS，别名使用双引号</strong>，以便在别名中包含空格或特 殊的字符并区分大小写。</li><li>AS 可以省略</li><li>建议别名简短，见名知意</li><li>举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name AS name, commission_pct comm<br>FROM   employees;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091611411.png" alt="image-20240409161146384" style="zoom:67%;" /><h3 id="3-3-去除重复行"><a href="#3-3-去除重复行" class="headerlink" title="3.3 去除重复行"></a>3.3 去除重复行</h3><p>默认情况下，查询会返回全部行，包括重复行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT department_id<br>FROM   employees;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091612286.png" alt="image-20240409161248251" style="zoom:67%;" /><p><strong>在SELECT语句中使用关键字DISTINCT去除重复行</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DISTINCT department_id<br>FROM   employees;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091613614.png" alt="image-20240409161331576" style="zoom:67%;" /><p>针对于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT DISTINCT department_id,salary <br>FROM employees;<br></code></pre></td></tr></table></figure><p>这里有两点需要注意：</p><ol><li>DISTINCT 需要放到所有列名的前面，如果写成 <code>SELECT salary, DISTINCT department_id FROM employees</code>会报错。</li><li>DISTINCT 其实是对后面所有列名的组合进行去重，你能看到最后的结果是 74 条，因为这 74 个部 门id不同，都有 salary 这个属性值。如果你想要看都有哪些不同的部门（department_id），只需 要写 DISTINCT department_id 即可，后面不需要再加其他的列名了。</li></ol><h3 id="3-4-空值参与运算"><a href="#3-4-空值参与运算" class="headerlink" title="3.4 空值参与运算"></a>3.4 空值参与运算</h3><ul><li>所有运算符或列值遇到null值，运算的结果都为null</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id,salary,commission_pct,<br>12 * salary * (1 + commission_pct) &quot;annual_sal&quot;<br>FROM employees;<br></code></pre></td></tr></table></figure><p>这里你一定要注意，在 MySQL 里面， 空值不等于空字符串。一个空字符串的长度是 0，而一个空值的长度是空。而且，在 MySQL 里面，空值是占用空间的。</p><h3 id="3-5-着重号"><a href="#3-5-着重号" class="headerlink" title="3.5 着重号"></a>3.5 着重号</h3><ul><li>错误的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">ORDER</span>;<br>ERROR <span class="hljs-number">1064</span> (<span class="hljs-number">42000</span>): You have an error <span class="hljs-keyword">in</span> your <span class="hljs-keyword">SQL</span> syntax; <span class="hljs-keyword">check</span> the manual that <br>corresponds <span class="hljs-keyword">to</span> your MySQL server version <span class="hljs-keyword">for</span> the <span class="hljs-keyword">right</span> syntax <span class="hljs-keyword">to</span> use near <span class="hljs-string">&#x27;ORDER&#x27;</span> <span class="hljs-keyword">at</span> <br>line <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><ul><li>正确的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM `ORDER`;<br> +----------+------------+<br> | order_id | order_name |<br> +----------+------------+<br> |        1 | shkstart   |<br> |        2 | tomcat     |<br> |        3 | dubbo      |<br> +----------+------------+  <br>3 rows in set (0.00 sec)<br><br>mysql&gt; SELECT * FROM `order`;<br> +----------+------------+<br> | order_id | order_name |<br> +----------+------------+<br> |        1 | shkstart   |<br> |        2 | tomcat     |<br> |        3 | dubbo      |<br> +----------+------------+<br>3 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><ul><li>结论</li></ul><p>我们需要保证表中的字段、表名等没有和保留字、数据库系统或常用方法冲突。如果真的相同，请在 SQL语句中使用一对&#96;&#96;（着重号）引起来。</p><h3 id="3-6-查询常数"><a href="#3-6-查询常数" class="headerlink" title="3.6 查询常数"></a>3.6 查询常数</h3><p>SELECT 查询还可以对常数进行查询。对的，就是在 SELECT 查询结果中增加一列固定的常数列。这列的 取值是我们指定的，而不是从数据表中动态取出的。</p><p>你可能会问为什么我们还要对常数进行查询呢？</p><p>SQL 中的 SELECT 语法的确提供了这个功能，一般来说我们只从一个表中查询数据，通常不需要增加一个 固定的常数列，但如果我们想整合不同的数据源，用常数列作为这个表的标记，就需要查询常数。</p><p>比如说，我们想对 employees 数据表中的员工姓名进行查询，同时增加一列字段 <code>corporation</code> ，这个 字段固定值为“尚硅谷”，可以这样写：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT &#x27;glass&#x27; as corporation, last_name FROM employees;<br></code></pre></td></tr></table></figure><h2 id="4、显示表结构"><a href="#4、显示表结构" class="headerlink" title="4、显示表结构"></a>4、显示表结构</h2><p>使用DESCRIBE 或 DESC 命令，表示表结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">DESCRIBE employees;<br>或<br>DESC employees;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; desc employees;<br> +----------------+-------------+------+-----+---------+-------+<br> | Field          | Type        | Null | Key | Default | Extra |<br> +----------------+-------------+------+-----+---------+-------+<br> | employee_id    | int(6)      | NO   | PRI | 0       |       |<br> | first_name     | varchar(20) | YES  |     | NULL    |       |<br> | last_name      | varchar(25) | NO   |     | NULL    |   |<br> | email          | varchar(25) | NO   | UNI | NULL    |       |<br> | phone_number   | varchar(20) | YES  |     | NULL    |       |<br> | hire_date      | date        | NO   |     | NULL    |       |<br> | job_id         | varchar(10) | NO   | MUL | NULL    |       |<br> | salary         | double(8,2) | YES  |     | NULL    |       |<br> | manager_id     | int(6)      | YES  | MUL | NULL    |       |<br> | commission_pct | double(2,2) | YES  |     | NULL    |       |<br> | department_id  | int(4)      | YES  | MUL | NULL    |       |<br> +----------------+-------------+------+-----+---------+-------+<br> 11 rows in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>其中，各个字段的含义分别解释如下：</p><ul><li>Field：表示字段名称。</li><li>Type：表示字段类型，这里 barcode、goodsname 是文本型的，price 是整数类型的。</li><li>Null：表示该列是否可以存储NULL值。</li><li>Key：表示该列是否已编制索引。PRI表示该列是表主键的一部分；UNI表示该列是UNIQUE索引的一 部分；MUL表示在列中某个给定值允许出现多次。</li><li>Default：表示该列是否有默认值，如果有，那么值是多少。</li><li>Extra：表示可以获取的与给定列有关的附加信息，例如AUTO_INCREMENT等。</li></ul><h2 id="5、过滤数据"><a href="#5、过滤数据" class="headerlink" title="5、过滤数据"></a>5、过滤数据</h2><ul><li>背景</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091633772.png" alt="image-20240409163309715" style="zoom:67%;" /><ul><li>语法：<ul><li>使用WHERE 子句，将不满足条件的行过滤掉</li><li><strong>WHERE子句紧随 FROM子句</strong></li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT 字段1,字段2<br>FROM 表名<br>WHERE 过滤条件<br></code></pre></td></tr></table></figure><ul><li>举例</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id, last_name, job_id, department_id<br>FROM   employees<br>WHERE  department_id = 90;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091635404.png" alt="image-20240409163515372" style="zoom:67%;" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>运算符</title>
    <link href="/2024/04/09/mysql/3%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2024/04/09/mysql/3%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="1、算术运算符"><a href="#1、算术运算符" class="headerlink" title="1、算术运算符"></a>1、算术运算符</h2><p>算术运算符主要用于数学运算，其可以连接运算符前后的两个数值或表达式，对数值或表达式进行加 （+）、减（-）、乘（*）、除（&#x2F;）和取模（%）运算。</p><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>+</td><td>加法运算符</td><td>计算两个值或表达式的和</td><td>SELECT A + B</td></tr><tr><td>-</td><td>减法运算符</td><td>计算两个值或表达式的差</td><td>SELECT A - B</td></tr><tr><td>*</td><td>乘法运算符</td><td>计算两个值或表达式的乘积</td><td>SELECT A * B</td></tr><tr><td>&#x2F;或DIV</td><td>除法运算符</td><td>计算两个值或表达式的商</td><td>SELECT A &#x2F; B<br />或者<br />SELECT A DIV B</td></tr><tr><td>%或MOD</td><td>求模(求余)运算符</td><td>计算两个值或表达式的余数</td><td>SELECT A % B<br />或者<br />SELECT A MOD B</td></tr></tbody></table><h3 id="1-1-加法与减法运算符"><a href="#1-1-加法与减法运算符" class="headerlink" title="1.1 加法与减法运算符"></a>1.1 加法与减法运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 100, 100 + 0, 100 - 0, 100 + 50, 100 + 50 -30, 100 + 35.5, 100 - 35.5 <br>FROM dual;<br>+-----+---------+---------+----------+--------------+------------+------------+<br> | 100 | 100 + 0 | 100 - 0 | 100 + 50 | 100 + 50 -30 | 100 + 35.5 | 100 - 35.5 |<br> +-----+---------+---------+----------+--------------+------------+------------+<br> | 100 |     100 |     100 |      150 |          120 |      135.5 |       64.5 |<br> +-----+---------+---------+----------+--------------+------------+------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>由运算结果可以得出如下结论：</p><blockquote><ul><li>一个整数类型的值对整数进行加法和减法操作，结果还是一个整数；</li><li>一个整数类型的值对浮点数进行加法和减法操作，结果是一个浮点数；</li><li>加法和减法的优先级相同，进行先加后减操作与进行先减后加操作的结果是一样的；</li><li>在Java中，+的左右两边如果有字符串，那么表示字符串的拼接。但是在MySQL中+只表示数 值相加。如果遇到非数值类型，先尝试转成数值，如果转失败，就按0计算。（补充：MySQL 中字符串拼接要使用字符串函数CONCAT()实现）</li></ul></blockquote><h3 id="1-2-乘法与除法运算符"><a href="#1-2-乘法与除法运算符" class="headerlink" title="1.2 乘法与除法运算符"></a>1.2 乘法与除法运算符</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 100, 100 * 1, 100 * 1.0, 100 / 1.0, 100 / 2,100 + 2 * 5 / 2,100 /3, 100 <br>DIV 0 FROM dual;<br> +-----+---------+-----------+-----------+---------+-----------------+---------+-----------+<br> | 100 | 100 * 1 | 100 * 1.0 | 100 / 1.0 | 100 / 2 | 100 + 2 * 5 / 2 | 100 /3  | 100 DIV 0 |<br> +-----+---------+-----------+-----------+---------+-----------------+---------+-----------+<br> | 100 |     100 |     100.0 |  100.0000 | 50.0000 |        105.0000 | 33.3333 |     NULL  |<br> +-----+---------+-----------+-----------+---------+-----------------+---------+-----------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> #计算出员工的年基本工资<br>SELECT employee_id,salary,salary * 12 annual_sal <br>FROM employees;<br></code></pre></td></tr></table></figure><p>由运算结果可以得出如下结论：</p><blockquote><ul><li>一个数乘以整数1和除以整数1后仍得原数；</li><li>一个数乘以浮点数1和除以浮点数1后变成浮点数，数值与原数相等；</li><li>一个数除以整数后，不管是否能除尽，结果都为一个浮点数；</li><li>一个数除以另一个数，除不尽时，结果为一个浮点数，并保留到小数点后4位；</li><li>乘法和除法的优先级相同，进行先乘后除操作与先除后乘操作，得出的结果相同。</li><li>在数学运算中，0不能用作除数，在MySQL中，一个数除以0为NULL。</li></ul></blockquote><h3 id="1-3-求模（求余）运算符"><a href="#1-3-求模（求余）运算符" class="headerlink" title="1.3 求模（求余）运算符"></a>1.3 求模（求余）运算符</h3><p>将t22表中的字段i对3和5进行求模（求余）运算</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 12 % 3, 12 MOD 5 FROM dual;<br> +--------+----------+<br> | 12 % 3 | 12 MOD 5 |<br> +--------+----------+<br> |      0 |        2 |<br> +--------+----------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> #筛选出employee_id是偶数的员工<br>SELECT * FROM employees<br>WHERE employee_id MOD 2 = 0;<br></code></pre></td></tr></table></figure><p>可以看到，100对3求模后的结果为3，对5求模后的结果为0。</p><h2 id="2、比较运算符"><a href="#2、比较运算符" class="headerlink" title="2、比较运算符"></a>2、比较运算符</h2><p>比较运算符用来对表达式左边的操作数和右边的操作数进行比较，比较的结果为真则返回1，比较的结果 为假则返回0，其他情况则返回NULL。</p><p>比较运算符经常被用来作为SELECT查询语句的条件来使用，返回符合条件的结果记录。</p><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>&#x3D;</td><td>等于运算符</td><td>判断两个值、字符串或表达式是否相等</td><td>SELECT C FROM TABLE WHEREA &#x3D; B</td></tr><tr><td>&lt;&#x3D;&gt;</td><td>安全等于运算符</td><td>安全地判断两个值、字符串或表达式是否相等</td><td>SELECT C FROM TABLE WHERE A&lt;&#x3D;&gt; B</td></tr><tr><td>&lt;&gt; (!&#x3D;)</td><td>不等于运算符</td><td>判断两个值、字符串或表达式是否不相等</td><td>SELECT C FROM TABLE WHERE A&lt;&gt; B<br />SELECT C FROM TABLE WHEREA !&#x3D; B</td></tr><tr><td>&lt;</td><td>小于运算符</td><td>判断前面的值、字符串或表达式是否小于后面的值、字符串或表达式</td><td>SELECT C FROM TABLE WHEREA&lt;B</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于运算符</td><td>判断前面的值、字符串或表达式是否小于等于后面的值、字符串或表达式</td><td>SELECT C FROM TABLE WHERE A&lt;&#x3D; B</td></tr><tr><td>&gt;</td><td>大于运算符</td><td>判断前面的值、字符串或表达式是否大于后面的值、字符串或表达式</td><td>SELECT C FROM TABLE WHERE A&gt;B</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于运算符</td><td>判断前面的值、字符串或表达式是否大于等于后面的值、字符串或表达式</td><td>SELECT C FROM TABLE WHERE A&gt;&#x3D; B</td></tr></tbody></table><h3 id="2-1-等号运算符"><a href="#2-1-等号运算符" class="headerlink" title="2.1 等号运算符"></a>2.1 等号运算符</h3><ul><li>等号运算符（&#x3D;）判断等号两边的值、字符串或表达式是否相等，如果相等则返回1，不相等则返回 0。</li><li>在使用等号运算符时，遵循如下规则：<ul><li>如果等号两边的值、字符串或表达式都为字符串，则MySQL会按照字符串进行比较，其比较的 是每个字符串中字符的ANSI编码是否相等。</li><li>如果等号两边的值都是整数，则MySQL会按照整数来比较两个值的大小。</li><li>如果等号两边的值一个是整数，另一个是字符串，则MySQL会将字符串转化为数字进行比较。</li><li>如果等号两边的值、字符串或表达式中有一个为NULL，则比较结果为NULL。</li></ul></li><li>对比：SQL中赋值符号使用 : &#x3D;</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 = 1, 1 = &#x27;1&#x27;, 1 = 0, &#x27;a&#x27; = &#x27;a&#x27;, (5 + 3) = (2 + 6), &#x27;&#x27; = NULL , NULL = <br>NULL; <br> +-------+---------+-------+-----------+-------------------+-----------+-------------+<br> | 1 = 1 | 1 = &#x27;1&#x27; | 1 = 0 | &#x27;a&#x27; = &#x27;a&#x27; | (5 + 3) = (2 + 6) | &#x27;&#x27; = NULL | NULL = NULL |<br> +-------+---------+-------+-----------+-------------------+-----------+-------------+<br> |    1  |     1   |   0   |      1    |             1     |    NULL   |NULL |<br> +-------+---------+-------+-----------+-------------------+-----------+-------------+<br> 1 row in set (0.00 sec)<br> <br> mysql&gt; SELECT 1 = 2, 0 = &#x27;abc&#x27;, 1 = &#x27;abc&#x27; FROM dual;<br> +-------+-----------+-----------+<br> | 1 = 2 | 0 = &#x27;abc&#x27; | 1 = &#x27;abc&#x27; |<br> +-------+-----------+-----------+<br> |     0 |         1 |         0 |<br> +-------+-----------+-----------+<br> 1 row in set, 2 warnings (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询salary=10000，注意在Java中比较是==<br> SELECT employee_id,salary FROM employees WHERE salary = 10000;<br></code></pre></td></tr></table></figure><h3 id="2-2-安全等于运算符"><a href="#2-2-安全等于运算符" class="headerlink" title="2.2 安全等于运算符"></a>2.2 安全等于运算符</h3><p> 安全等于运算符（&lt;&#x3D;&gt;）与等于运算符（&#x3D;）的作用是相似的， 唯一的区别是‘&lt;&#x3D;&gt;’可 以用来对NULL进行判断。在两个操作数均为NULL时，其返回值为1，而不为NULL；当一个操作数为NULL 时，其返回值为0，而不为NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 &lt;=&gt; &#x27;1&#x27;, 1 &lt;=&gt; 0, &#x27;a&#x27; &lt;=&gt; &#x27;a&#x27;, (5 + 3) &lt;=&gt; (2 + 6), &#x27;&#x27; &lt;=&gt; NULL,NULL &lt;=&gt; NULL FROM dual;<br> +-----------+---------+-------------+---------------------+-------------+---------------+<br> | 1 &lt;=&gt; &#x27;1&#x27; | 1 &lt;=&gt; 0 | &#x27;a&#x27; &lt;=&gt; &#x27;a&#x27; | (5 + 3) &lt;=&gt; (2 + 6) | &#x27;&#x27; &lt;=&gt; NULL | NULL &lt;=&gt; NULL |<br> +-----------+---------+-------------+---------------------+-------------+---------------+<br> |         1 |       0 |           1 |                   1 |           0 |             1 |<br> +-----------+---------+-------------+---------------------+-------------+---------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">#查询commission_pct等于0.40<br>SELECT employee_id,commission_pct FROM employees WHERE commission_pct = 0.40;<br>SELECT employee_id,commission_pct FROM employees WHERE commission_pct &lt;=&gt; 0.40;<br>#如果把0.40改成 NULL 呢？<br></code></pre></td></tr></table></figure><p>可以看到，使用安全等于运算符时，两边的操作数的值都为NULL时，返回的结果为1而不是NULL，其他 返回结果与等于运算符相同。</p><h3 id="2-3-不等于运算符"><a href="#2-3-不等于运算符" class="headerlink" title="2.3 不等于运算符"></a>2.3 不等于运算符</h3><p> 不等于运算符（&lt;&gt;和!&#x3D;）用于判断两边的数字、字符串或者表达式的值是否不相等， 如果不相等则返回1，相等则返回0。不等于运算符不能判断NULL值。如果两边的值有任意一个为NULL， 或两边都为NULL，则结果为NULL。 SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 &lt;&gt; 1, 1 != 2, &#x27;a&#x27; != &#x27;b&#x27;, (3+4) &lt;&gt; (2+6), &#x27;a&#x27; != NULL, NULL &lt;&gt; NULL; <br> +--------+--------+------------+----------------+-------------+--------------+<br> | 1 &lt;&gt; 1 | 1 != 2 | &#x27;a&#x27; != &#x27;b&#x27; | (3+4) &lt;&gt; (2+6) | &#x27;a&#x27; != NULL | NULL &lt;&gt; NULL |<br> +--------+--------+------------+----------------+-------------+--------------+<br> |      0 |   1    |       1    |            1   |     NULL    |         NULL |<br> +--------+--------+------------+----------------+-------------+--------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>此外，还有非符号类型的运算符：</p><table><thead><tr><th>运算符</th><th>名称</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>IS NULL</td><td>为空运算符</td><td>判断值、字符串或表达式是否为空</td><td>SELECT B FROM TABLE WHERE A IS NULL</td></tr><tr><td>IS NOTNULL</td><td>不为空运算符</td><td>判断值、字符串或表达式是否不为空</td><td>SELECT B FROM TABLE WHERE A IS NOT NULL</td></tr><tr><td>LEAST</td><td>最小值运算符</td><td>在多个值中返回最小值</td><td>SELECT D FROM TABLE WHERE C LEAST(A,B)</td></tr><tr><td>GREATEST</td><td>最大值运算符</td><td>在多个值中返回最大值</td><td>SELECT D FROM TABLE WHERE C GREATEST(A, B)</td></tr><tr><td>BETWEEN AND</td><td>两值之间的运算符</td><td>判断一个值是否在两个值之间</td><td>SELECT D FROM TABLE WHERE C BETWEEN A AND B</td></tr><tr><td>ISNULL</td><td>为空运算符</td><td>判断一个值、字符串或表达式是否为空</td><td>SELECT B FROM TABLE WHERE A ISNULL</td></tr><tr><td>IN</td><td>属于运算符</td><td>判断一个值是否为列表中的任意一个值</td><td>SELECT D FROM TABLE WHERE C IN (A, B)</td></tr><tr><td>NOT IN</td><td>不属于运算符</td><td>判断一个值是否不是一个列表中的任意一个值</td><td>SELECT D FROM TABLE WHERE C NOT IN(A.B)</td></tr><tr><td>LIKE</td><td>模糊匹配运算符</td><td>判断一个值是否符合模糊匹配规则</td><td>SELECT C FROM TABLE WHERE A LIKE B</td></tr><tr><td>REGEXP</td><td>正则表达式运算符</td><td>判断一个值是否符合正则表达式的规则</td><td>SELECT C FROM TABLE WHERE A REGEXP B</td></tr><tr><td>RLIKE</td><td>正则表达式运算符</td><td>判断一个值是否符合正则表达式讜圍昼的规则</td><td>SELECT C FROM TABLE WHERE A RLIKE B</td></tr></tbody></table><h3 id="2-4-空运算符"><a href="#2-4-空运算符" class="headerlink" title="2.4 空运算符"></a>2.4 空运算符</h3><p>空运算符（IS NULL或者ISNULL）判断一个值是否为NULL，如果为NULL则返回1，否则返回 0。 SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT NULL IS NULL, ISNULL(NULL), ISNULL(&#x27;a&#x27;), 1 IS NULL;<br> +--------------+--------------+-------------+-----------+<br> | NULL IS NULL | ISNULL(NULL) | ISNULL(&#x27;a&#x27;) | 1 IS NULL |<br> +--------------+--------------+-------------+-----------+<br> |            1 |            1 |           0 |         0 |<br> +--------------+--------------+-------------+-----------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs MySQL"> #查询commission_pct等于NULL。比较如下的四种写法<br>SELECT employee_id,commission_pct FROM employees WHERE commission_pct IS NULL;<br>SELECT employee_id,commission_pct FROM employees WHERE commission_pct &lt;=&gt; NULL;<br>SELECT employee_id,commission_pct FROM employees WHERE ISNULL(commission_pct);<br>SELECT employee_id,commission_pct FROM employees WHERE commission_pct = NULL;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT last_name, manager_id<br>FROM   employees<br>WHERE  manager_id IS NULL;<br></code></pre></td></tr></table></figure><h3 id="2-5-非空运算符"><a href="#2-5-非空运算符" class="headerlink" title="2.5  非空运算符"></a>2.5  非空运算符</h3><p>非空运算符（IS NOT NULL）判断一个值是否不为NULL，如果不为NULL则返回1，否则返 回0。 SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT NULL IS NOT NULL, &#x27;a&#x27; IS NOT NULL,  1 IS NOT NULL; <br> +------------------+-----------------+---------------+<br> | NULL IS NOT NULL | &#x27;a&#x27; IS NOT NULL | 1 IS NOT NULL |<br> +------------------+-----------------+---------------+<br> |                0 |               1 |             1 |<br> +------------------+-----------------+---------------+<br> 1 row in set (0.01 sec)<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">#查询commission_pct不等于NULL<br>SELECT employee_id,commission_pct FROM employees WHERE commission_pct IS NOT NULL;<br>SELECT employee_id,commission_pct FROM employees WHERE NOT commission_pct &lt;=&gt; NULL;<br>SELECT employee_id,commission_pct FROM employees WHERE NOT ISNULL(commission_pct);<br></code></pre></td></tr></table></figure><h3 id="2-6-最小值运算符"><a href="#2-6-最小值运算符" class="headerlink" title="2.6 最小值运算符"></a>2.6 最小值运算符</h3><p>语法格式为：LEAST(值1，值2，…，值n)。其中，“值n”表示参数列表中有n个值。在有 两个或多个参数的情况下，返回最小值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT LEAST (1,0,2), LEAST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;), LEAST(1,NULL,2);<br> +---------------+--------------------+-----------------+<br> | LEAST (1,0,2) | LEAST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;) | LEAST(1,NULL,2) |<br> +---------------+--------------------+-----------------+<br> |       0       |        a           |      NULL       |<br> +---------------+--------------------+-----------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>由结果可以看到，当参数是整数或者浮点数时，LEAST将返回其中最小的值；当参数为字符串时，返回字 母表中顺序最靠前的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p><h3 id="2-7-最大值运算符"><a href="#2-7-最大值运算符" class="headerlink" title="2.7  最大值运算符"></a>2.7  最大值运算符</h3><p>语法格式为：GREATEST(值1，值2，…，值n)。其中，n表示参数列表中有n个值。当有 两个或多个参数时，返回值为最大值。假如任意一个自变量为NULL，则GREATEST()的返回值为NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT GREATEST(1,0,2), GREATEST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;), GREATEST(1,NULL,2);<br> +-----------------+-----------------------+--------------------+<br> | GREATEST(1,0,2) | GREATEST(&#x27;b&#x27;,&#x27;a&#x27;,&#x27;c&#x27;) | GREATEST(1,NULL,2) |<br> +-----------------+-----------------------+--------------------+<br> |               2 | c                     |               NULL |<br> +-----------------+-----------------------+--------------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>由结果可以看到，当参数中是整数或者浮点数时，GREATEST将返回其中最大的值；当参数为字符串时， 返回字母表中顺序最靠后的字符；当比较值列表中有NULL时，不能判断大小，返回值为NULL。</p><h3 id="2-8-BETWEEN-AND运算符"><a href="#2-8-BETWEEN-AND运算符" class="headerlink" title="2.8 BETWEEN AND运算符"></a>2.8 BETWEEN AND运算符</h3><p>BETWEEN运算符使用的格式通常为SELECT D FROM TABLE WHERE C BETWEEN A AND B，此时，当C大于或等于A，并且C小于或等于B时，结果为1，否则结果为0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 BETWEEN 0 AND 1, 10 BETWEEN 11 AND 12, &#x27;b&#x27; BETWEEN &#x27;a&#x27; AND &#x27;c&#x27;;<br> +-------------------+----------------------+-------------------------+<br> | 1 BETWEEN 0 AND 1 | 10 BETWEEN 11 AND 12 | &#x27;b&#x27; BETWEEN &#x27;a&#x27; AND &#x27;c&#x27; |<br> +-------------------+----------------------+-------------------------+<br> |                 1 |                    0 |                       1 |<br> +-------------------+----------------------+-------------------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT last_name, salary<br>FROM   employees<br>WHERE  salary BETWEEN 2500 AND 3500;<br></code></pre></td></tr></table></figure><h3 id="2-9-IN运算符"><a href="#2-9-IN运算符" class="headerlink" title="2.9 IN运算符"></a>2.9 IN运算符</h3><p>IN运算符用于判断给定的值是否是IN列表中的一个值，如果是则返回1，否则返回0。如果给 定的值为NULL，或者IN列表中存在NULL，则结果为NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT &#x27;a&#x27; IN (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;), 1 IN (2,3), NULL IN (&#x27;a&#x27;,&#x27;b&#x27;), &#x27;a&#x27; IN (&#x27;a&#x27;, NULL);<br> +----------------------+------------+-------------------+--------------------+<br> | &#x27;a&#x27; IN (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;) | 1 IN (2,3) | NULL IN (&#x27;a&#x27;,&#x27;b&#x27;) | &#x27;a&#x27; IN (&#x27;a&#x27;, NULL) |<br> +----------------------+------------+-------------------+--------------------+<br> |            1         |        0   |         NULL      |         1          |<br> +----------------------+------------+-------------------+--------------------+<br> 1 row in set (0.00 sec)<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT employee_id, last_name, salary, manager_id<br>FROM   employees<br>WHERE  manager_id IN (100, 101, 201);<br></code></pre></td></tr></table></figure><h3 id="2-10-NOT-IN运算符"><a href="#2-10-NOT-IN运算符" class="headerlink" title="2.10 NOT IN运算符"></a>2.10 NOT IN运算符</h3><p>NOT IN运算符用于判断给定的值是否不是IN列表中的一个值，如果不是IN列表中的一 个值，则返回1，否则返回0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT &#x27;a&#x27; NOT IN (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;), 1 NOT IN (2,3);<br> +--------------------------+----------------+<br> | &#x27;a&#x27; NOT IN (&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;) | 1 NOT IN (2,3) |<br> +--------------------------+----------------+<br> |                 0        |            1   |<br> +--------------------------+----------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h3 id="2-11-LIKE运算符"><a href="#2-11-LIKE运算符" class="headerlink" title="2.11 LIKE运算符"></a>2.11 LIKE运算符</h3><p>LIKE运算符主要用来匹配字符串，通常用于模糊匹配，如果满足条件则返回1，否则返回 0。如果给定的值或者匹配条件为NULL，则返回结果为NULL。</p><p>LIKE运算符通常使用如下通配符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">“%”：匹配0个或多个字符。<br>“_”：只能匹配一个字符。<br></code></pre></td></tr></table></figure><p>SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT NULL LIKE &#x27;abc&#x27;, &#x27;abc&#x27; LIKE NULL;  <br> +-----------------+-----------------+<br> | NULL LIKE &#x27;abc&#x27; | &#x27;abc&#x27; LIKE NULL |<br> +-----------------+-----------------+<br> |          NULL   |          NULL   |<br> +-----------------+-----------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT  first_name<br>FROM    employees<br>WHERE   first_name LIKE &#x27;S%&#x27;;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT last_name<br>FROM   employees<br>WHERE  last_name LIKE &#x27;_o%&#x27;;<br></code></pre></td></tr></table></figure><p><strong>ESCAPE</strong></p><ul><li>回避特殊符号的：使用转义符。例如：将[%]转为[$%]、[]转为[$]，然后再加上[ESCAPE‘$’]即可。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">SELECT job_id<br>FROM   jobs<br>WHERE  job_id LIKE ‘IT\_%‘;<br></code></pre></td></tr></table></figure><ul><li>如果使用\表示转义，要省略ESCAPE。如果不是\，则要加上ESCAPE。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT job_id<br>FROM   jobs<br>WHERE  job_id LIKE ‘IT$_%‘ escape ‘$‘;<br></code></pre></td></tr></table></figure><h3 id="2-12-REGEXP运算符"><a href="#2-12-REGEXP运算符" class="headerlink" title="2.12 REGEXP运算符"></a>2.12 REGEXP运算符</h3><p>REGEXP运算符用来匹配字符串，语法格式为： <code>expr REGEXP 匹配条件 </code>。如果expr满足匹配条件，返回 1；如果不满足，则返回0。若expr或匹配条件任意一个为NULL，则结果为NULL。</p><p>REGEXP运算符在进行匹配时，常用的有下面几种通配符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">（1）‘^’匹配以该字符后面的字符开头的字符串。<br>（2）‘$’匹配以该字符前面的字符结尾的字符串。<br>（3）‘.’匹配任何一个单字符。<br>（4）“[...]”匹配在方括号内的任何字符。例如，“[abc]”匹配“a”或“b”或“c”。为了命名字符的范围，使用一<br>个‘-’。“[a-z]”匹配任何字母，而“[0-9]”匹配任何数字。<br>（5）‘*’匹配零个或多个在它前面的字符。例如，“x*”匹配任何数量的‘x’字符，“[0-9]*”匹配任何数量的数字，<br>而“*”匹配任何数量的任何字符。<br></code></pre></td></tr></table></figure><p>SQL语句示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT &#x27;shkstart&#x27; REGEXP &#x27;^s&#x27;, &#x27;shkstart&#x27; REGEXP &#x27;t$&#x27;, &#x27;shkstart&#x27; REGEXP &#x27;hk&#x27;;<br> +------------------------+------------------------+-------------------------+<br> | &#x27;shkstart&#x27; REGEXP &#x27;^s&#x27; | &#x27;shkstart&#x27; REGEXP &#x27;t$&#x27; | &#x27;shkstart&#x27; REGEXP &#x27;hk&#x27;  |<br> +------------------------+------------------------+-------------------------+<br> |                      1 |                      1 |                       1 |<br> +------------------------+------------------------+-------------------------+<br> 1 row in set (0.01 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT &#x27;atguigu&#x27; REGEXP &#x27;gu.gu&#x27;, &#x27;atguigu&#x27; REGEXP &#x27;[ab]&#x27;;<br>+--------------------------+-------------------------+<br>| &#x27;atguigu&#x27; REGEXP &#x27;gu.gu&#x27; | &#x27;atguigu&#x27; REGEXP &#x27;[ab]&#x27; |<br>+--------------------------+-------------------------+<br>|                       1  |                       1 |<br>+--------------------------+-------------------------+<br>1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><h2 id="3、逻辑运算符"><a href="#3、逻辑运算符" class="headerlink" title="3、逻辑运算符"></a>3、逻辑运算符</h2><p>逻辑运算符主要用来判断表达式的真假，在MySQL中，逻辑运算符的返回结果为1、0或者NULL。 MySQL中支持4种逻辑运算符如下：</p><table><thead><tr><th>运算符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>NOT 或!</td><td>逻辑非</td><td>SELECT NOT A</td></tr><tr><td>AND&amp;</td><td>逻辑与</td><td>SELECT A AND B<br />SELECT A &amp;&amp;B</td></tr><tr><td>OR或</td><td>逻辑或</td><td>SELECT A OR B<br />SELECT A II B</td></tr><tr><td>XOR</td><td>逻辑异或</td><td>SELECT A XOR B</td></tr></tbody></table><h3 id="3-1-逻辑非运算符"><a href="#3-1-逻辑非运算符" class="headerlink" title="3.1 逻辑非运算符"></a>3.1 逻辑非运算符</h3><p>逻辑非（NOT或!）运算符表示当给定的值为0时返回1；当给定的值为非0值时返回0； 当给定的值为NULL时，返回NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT NOT 1, NOT 0, NOT(1+1), NOT !1, NOT NULL;    <br> +-------+-------+----------+--------+----------+<br> | NOT 1 | NOT 0 | NOT(1+1) | NOT !1 | NOT NULL |<br> +-------+-------+----------+--------+----------+<br> |     0 |     1 |        0 |      1 |     NULL |<br> +-------+-------+----------+--------+----------+<br> 1 row in set, 1 warning (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT last_name, job_id<br>FROM   employees<br>WHERE  job_id NOT IN (&#x27;IT_PROG&#x27;, &#x27;ST_CLERK&#x27;, &#x27;SA_REP&#x27;);<br></code></pre></td></tr></table></figure><h3 id="3-2-逻辑与运算符"><a href="#3-2-逻辑与运算符" class="headerlink" title="3.2 逻辑与运算符"></a>3.2 逻辑与运算符</h3><p> 逻辑与（AND或&amp;&amp;）运算符是当给定的所有值均为非0值，并且都不为NULL时，返回 1；当给定的一个值或者多个值为0时则返回0；否则返回NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 AND -1, 0 AND 1, 0 AND NULL, 1 AND NULL;<br> +----------+---------+------------+------------+<br> | 1 AND -1 | 0 AND 1 | 0 AND NULL | 1 AND NULL |<br> +----------+---------+------------+------------+<br> |        1 |       0 |          0 |       NULL |<br> +----------+---------+------------+------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id, last_name, job_id, salary<br>FROM   employees<br>WHERE  salary &gt;=10000<br>AND    job_id LIKE &#x27;%MAN%&#x27;;<br></code></pre></td></tr></table></figure><h3 id="3-3-逻辑或运算符"><a href="#3-3-逻辑或运算符" class="headerlink" title="3.3 逻辑或运算符"></a>3.3 逻辑或运算符</h3><p>逻辑或（OR或||）运算符是当给定的值都不为NULL，并且任何一个值为非0值时，则返 回1，否则返回0；当一个值为NULL，并且另一个值为非0值时，返回1，否则返回NULL；当两个值都为 NULL时，返回NULL。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 OR -1, 1 OR 0, 1 OR NULL, 0 || NULL, NULL || NULL;     <br> +---------+--------+-----------+-----------+--------------+<br> | 1 OR -1 | 1 OR 0 | 1 OR NULL | 0 || NULL | NULL || NULL |<br> +---------+--------+-----------+-----------+--------------+<br> |       1 |      1 |         1 |    NULL   |       NULL   |<br> +---------+--------+-----------+-----------+--------------+<br> 1 row in set, 2 warnings (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> #查询基本薪资不在9000-12000之间的员工编号和基本薪资<br>SELECT employee_id,salary FROM employees <br>WHERE NOT (salary &gt;= 9000 AND salary &lt;= 12000);<br><br>SELECT employee_id,salary FROM employees <br>WHERE salary &lt;9000 OR salary &gt; 12000;<br><br>SELECT employee_id,salary FROM employees <br>WHERE salary NOT BETWEEN 9000 AND 12000;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">SELECT employee_id, last_name, job_id, salary<br>FROM   employees<br>WHERE  salary &gt;= 10000<br>OR     job_id LIKE &#x27;%MAN%&#x27;;<br></code></pre></td></tr></table></figure><blockquote><p>注意： </p><p>OR可以和AND一起使用，但是在使用时要注意两者的优先级，由于AND的优先级高于OR，因此先 对AND两边的操作数进行操作，再与OR中的操作数结合。</p></blockquote><h3 id="3-4-逻辑异或运算符"><a href="#3-4-逻辑异或运算符" class="headerlink" title="3.4 逻辑异或运算符"></a>3.4 逻辑异或运算符</h3><p>逻辑异或（XOR）运算符是当给定的值中任意一个值为NULL时，则返回NULL；如果 两个非NULL的值都是0或者都不等于0时，则返回0；如果一个值为0，另一个值不为0时，则返回1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 XOR -1, 1 XOR 0, 0 XOR 0, 1 XOR NULL, 1 XOR 1 XOR 1, 0 XOR 0 XOR 0;<br> +----------+---------+---------+------------+---------------+---------------+<br> | 1 XOR -1 | 1 XOR 0 | 0 XOR 0 | 1 XOR NULL | 1 XOR 1 XOR 1 | 0 XOR 0 XOR 0 |<br> +----------+---------+---------+------------+---------------+---------------+<br> |        0 |       1 |       0 |       NULL |             1 |             0 |<br> +----------+---------+---------+------------+---------------+---------------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select last_name,department_id,salary <br>from employees<br>where department_id in (10,20) XOR salary &gt; 8000;<br></code></pre></td></tr></table></figure><h2 id="4、位运算符"><a href="#4、位运算符" class="headerlink" title="4、位运算符"></a>4、位运算符</h2><p>位运算符是在二进制数上进行计算的运算符。位运算符会先将操作数变成二进制数，然后进行位运算， 最后将计算结果从二进制变回十进制数。</p><p>MySQL支持的位运算符如下：</p><table><thead><tr><th>运算符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>&amp;</td><td>按位与(位AND)</td><td>SELECT A &amp; B</td></tr><tr><td>|</td><td>按位或(位OR)</td><td>SELECT A I B</td></tr><tr><td>^</td><td>按位异或(位XOR)</td><td>SELECT A^B</td></tr><tr><td>~</td><td>按位取反</td><td>SELECT ~A</td></tr><tr><td>&gt;&gt;</td><td>按位右移</td><td>SELECT A &gt;&gt; 2</td></tr><tr><td>&lt;&lt;</td><td>按位左移</td><td>SELECT B &lt;&lt; 2</td></tr></tbody></table><h3 id="4-1-按位与运算符"><a href="#4-1-按位与运算符" class="headerlink" title="4.1 按位与运算符"></a>4.1 按位与运算符</h3><p>按位与（&amp;）运算符将给定值对应的二进制数逐位进行逻辑与运算。当给定值对应的二 进制位的数值都为1时，则该位返回1，否则返回0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT 1 &amp; 10, 20 &amp; 30;<br> +--------+---------+<br> | 1 &amp; 10 | 20 &amp; 30 |<br> +--------+---------+<br> |      0 |      20 |<br> +--------+---------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p> 1的二进制数为0001，10的二进制数为1010，所以1 &amp; 10的结果为0000，对应的十进制数为0。20的二进制 数为10100，30的二进制数为11110，所以20 &amp; 30的结果为10100，对应的十进制数为20。</p><h3 id="4-2-按位或运算符"><a href="#4-2-按位或运算符" class="headerlink" title="4.2 按位或运算符"></a>4.2 按位或运算符</h3><p> 按位或（|）运算符将给定的值对应的二进制数逐位进行逻辑或运算。当给定值对应的 二进制位的数值有一个或两个为1时，则该位返回1，否则返回0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT 1 | 10, 20 | 30; <br> +--------+---------+<br> | 1 | 10 | 20 | 30 |<br> +--------+---------+<br> |     11 |      30 |<br> +--------+---------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p> 1的二进制数为0001，10的二进制数为1010，所以1 | 10的结果为1011，对应的十进制数为11。20的二进 制数为10100，30的二进制数为11110，所以20 | 30的结果为11110，对应的十进制数为30。</p><h3 id="4-3-按位异或运算符"><a href="#4-3-按位异或运算符" class="headerlink" title="4.3 按位异或运算符"></a>4.3 按位异或运算符</h3><p>按位异或（^）运算符将给定的值对应的二进制数逐位进行逻辑异或运算。当给定值 对应的二进制位的数值不同时，则该位返回1，否则返回0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT 1 ^ 10, 20 ^ 30; <br> +--------+---------+<br> | 1 ^ 10 | 20 ^ 30 |<br> +--------+---------+<br> |     11 |      10 |<br> +--------+---------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p> 1的二进制数为0001，10的二进制数为1010，所以1 ^ 10的结果为1011，对应的十进制数为11。20的二进 制数为10100，30的二进制数为11110，所以20 ^ 30的结果为01010，对应的十进制数为10。</p><p>再举例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT 12 &amp; 5, 12 | 5,12 ^ 5 FROM DUAL;<br> +--------+--------+--------+<br> | 12 &amp; 5 | 12 | 5 | 12 ^ 5 |<br> +--------+--------+--------+<br> |      4 |     13 |      9 |<br> +--------+--------+--------+<br> 1 row in set (0.00 sec<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404092044000.png" alt="image-20240409202302563" style="zoom:67%;" /><h3 id="4-4-按位取反运算符"><a href="#4-4-按位取反运算符" class="headerlink" title="4.4 按位取反运算符"></a>4.4 按位取反运算符</h3><p> 按位取反（~）运算符将给定的值的二进制数逐位进行取反操作，即将1变为0，将0变 为1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 10 &amp; ~1;<br> +---------+<br> | 10 &amp; ~1 |<br> +---------+<br> |      10 |<br> +---------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>由于按位取反（~）运算符的优先级高于按位与（&amp;）运算符的优先级，所以10 &amp; ~1，首先，对数字1进 行按位取反操作，结果除了最低位为0，其他位都为1，然后与10进行按位与操作，结果为10。</p><h3 id="4-5-按位右移运算符"><a href="#4-5-按位右移运算符" class="headerlink" title="4.5 按位右移运算符"></a>4.5 按位右移运算符</h3><p> 按位右移（&gt;&gt;）运算符将给定的值的二进制数的所有位右移指定的位数。右移指定的 位数后，右边低位的数值被移出并丢弃，左边高位空出的位置用0补齐。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 &gt;&gt; 2, 4 &gt;&gt; 2;<br> +--------+--------+<br> | 1 &gt;&gt; 2 | 4 &gt;&gt; 2 |<br> +--------+--------+<br> |      0 |      1 |<br> +--------+--------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>1的二进制数为0000 0001，右移2位为0000 0000，对应的十进制数为0。4的二进制数为0000 0100，右移2 位为0000 0001，对应的十进制数为1。</p><h3 id="4-6-按位左移运算符"><a href="#4-6-按位左移运算符" class="headerlink" title="4.6 按位左移运算符"></a>4.6 按位左移运算符</h3><p> 按位左移（&lt;&lt;）运算符将给定的值的二进制数的所有位左移指定的位数。左移指定的 位数后，左边高位的数值被移出并丢弃，右边低位空出的位置用0补齐。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT 1 &lt;&lt; 2, 4 &lt;&lt; 2;  <br> +--------+--------+<br> | 1 &lt;&lt; 2 | 4 &lt;&lt; 2 |<br> +--------+--------+<br> |      4 |     16 |<br> +--------+--------+<br> 1 row in set (0.00 sec)<br></code></pre></td></tr></table></figure><p>1的二进制数为0000 0001，左移两位为0000 0100，对应的十进制数为4。4的二进制数为0000 0100，左移 两位为0001 0000，对应的十进制数为16。</p><h2 id="5、运算符的优先级"><a href="#5、运算符的优先级" class="headerlink" title="5、运算符的优先级"></a>5、运算符的优先级</h2><table><thead><tr><th>优先级</th><th>运算符</th></tr></thead><tbody><tr><td>1</td><td>:&#x3D;，&#x3D;(赋值)</td></tr><tr><td>2</td><td>||，OR，XOR</td></tr><tr><td>3</td><td>&amp;&amp;，AND</td></tr><tr><td>4</td><td>NOT</td></tr><tr><td>5</td><td>BETWEEN，CASE，WHEN，THEN 和ELSE</td></tr><tr><td>6</td><td>&#x3D;(比较运算符)，&lt;&#x3D;&gt;，&gt;&#x3D;，&gt;，&lt;&#x3D;，&lt;，◇，!&#x3D;，IS，LIKE，REGEXP和IN</td></tr><tr><td>7</td><td>|</td></tr><tr><td>8</td><td>&amp;</td></tr><tr><td>9</td><td>&lt;&lt;与&gt;&gt;</td></tr><tr><td>10</td><td>-和+</td></tr><tr><td>11</td><td>*，&#x2F;，DIV，%和MOD</td></tr><tr><td>12</td><td>^</td></tr><tr><td>13</td><td>-(负号)和~(按位取反)</td></tr><tr><td>14</td><td>!</td></tr><tr><td>15</td><td>()</td></tr></tbody></table><p>数字编号越大，优先级越高，优先级高的运算符先进行计算。可以看到，赋值运算符的优先级最低，使用“()”括起来的表达式的优先级最高。</p><h2 id="拓展：使用正则表达式查询"><a href="#拓展：使用正则表达式查询" class="headerlink" title="拓展：使用正则表达式查询"></a>拓展：使用正则表达式查询</h2><p>正则表达式通常被用来检索或替换那些符合某个模式的文本内容，根据指定的匹配模式匹配文本中符合 要求的特殊字符串。例如，从一个文本文件中提取电话号码，查找一篇文章中重复的单词或者替换用户 输入的某些敏感词语等，这些地方都可以使用正则表达式。正则表达式强大而且灵活，可以应用于非常 复杂的查询。</p><p>MySQL中使用REGEXP关键字指定正则表达式的字符匹配模式。下表列出了REGEXP操作符中常用字符匹配 列表。</p><table><thead><tr><th>选项</th><th>说明</th><th>例子</th><th>匹配值示例</th></tr></thead><tbody><tr><td>^</td><td>匹配文本的开始字符</td><td>‘^b’匹配以字母b开头的字符串</td><td>book, big, banana, bike</td></tr><tr><td>$</td><td>匹配文本的结束字符</td><td>‘st$’匹配以st 结尾的字符串</td><td>test, resist, persist</td></tr><tr><td>.</td><td>匹配任何单个字符</td><td>‘b.t’匹配任何b和t之间有一个字符的字符串</td><td>bit, bat, but, bite</td></tr><tr><td>*</td><td>匹配零个或多个在它前面的字符</td><td>‘f*n’匹配字符n前面有任意个字符f的字符串</td><td>fn, fan, faan, fabcn</td></tr><tr><td>+</td><td>匹配前面的字符1次或多次</td><td>‘ba+’匹配以b开头后面紧跟至少有一个a的字符串</td><td>ba, bay, bare, battle</td></tr><tr><td>&lt;字符串&gt;</td><td>匹配包含指定的字符串的文本</td><td>‘fa’匹配包含ha的字符串</td><td>fan, afa, faad</td></tr><tr><td>[字符集合]</td><td>匹配字符集合中的任何一个字符</td><td>‘[xz]’匹配包含x或者z的字符串</td><td>dizzy, zebra, x-ray, extra</td></tr><tr><td>[^]</td><td>匹配不在括号中的任何字符</td><td><code>&#39;[^abc]&#39;</code>匹配任何不包含a、b或c的字符串</td><td>desk, fox，f8ke</td></tr><tr><td>字符串 {n,}</td><td>匹配前面的字符串至少n次</td><td>b{2}匹配2个或更多的b</td><td>bbb, bbbb, bbbbbbb</td></tr><tr><td>字符串 {n,m}</td><td>匹配前面的字符串至少n次,至多m次。如果n为0，此参数为可选参数</td><td>b{2,4}匹配含最少2个、最多4个b的字符串</td><td>bb, bbb, bbbb</td></tr></tbody></table><p><strong>查询以特定字符或字符串开头的记录</strong>字符‘^’匹配以特定字符或者字符串开头的文本。</p><p>在fruits表中，查询f_name字段以字母‘b’开头的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;^b&#x27;;<br></code></pre></td></tr></table></figure><p><strong>查询以特定字符或字符串结尾的记录</strong>字符‘$’匹配以特定字符或者字符串结尾的文本。</p><p>在fruits表中，查询f_name字段以字母‘y’结尾的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;y$&#x27;;<br></code></pre></td></tr></table></figure><p><strong>用符号”.”来替代字符串中的任意一个字符</strong>字符‘.’匹配任意一个字符。 在fruits表中，查询f_name字段值 包含字母‘a’与‘g’且两个字母之间只有一个字母的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;a.g&#x27;;<br></code></pre></td></tr></table></figure><p><strong>使用””和”+”来匹配多个字符 星号‘’</strong>匹配前面的字符任意多次，包括0次。加号‘+’匹配前面的字符至 少一次。</p><p>在fruits表中，查询f_name字段值以字母‘b’开头且‘b’后面出现字母‘a’的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;^ba*&#x27;;<br></code></pre></td></tr></table></figure><p>在fruits表中，查询f_name字段值以字母‘b’开头且‘b’后面出现字母‘a’至少一次的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;^ba+&#x27;;<br></code></pre></td></tr></table></figure><p><strong>匹配指定字符串</strong>正则表达式可以匹配指定字符串，只要这个字符串在查询文本中即可，如要匹配多个 字符串，多个字符串之间使用分隔符‘|’隔开。</p><p>在fruits表中，查询f_name字段值包含字符串“on”的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;on&#x27;;<br></code></pre></td></tr></table></figure><p>在fruits表中，查询f_name字段值包含字符串“on”或者“ap”的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;on|ap&#x27;;<br></code></pre></td></tr></table></figure><p>之前介绍过，LIKE运算符也可以匹配指定的字符串，但与REGEXP不同，LIKE匹配的字符串如果在文本中 间出现，则找不到它，相应的行也不会返回。REGEXP在文本内进行匹配，如果被匹配的字符串在文本中 出现，REGEXP将会找到它，相应的行也会被返回。对比结果如下所示。</p><p>在fruits表中，使用LIKE运算符查询f_name字段值为“on”的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT * FROM fruits WHERE f_name like &#x27;on&#x27;;<br>Empty set(0.00 sec)<br></code></pre></td></tr></table></figure><p><strong>匹配指定字符中的任意一个</strong>方括号“[]”指定一个字符集合，只匹配其中任何一个字符，即为所查找的 文本。</p><p>在fruits表中，查找f_name字段中包含字母‘o’或者‘t’的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;[ot]&#x27;;<br></code></pre></td></tr></table></figure><p>在fruits表中，查询s_id字段中包含4、5或者6的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">mysql&gt; SELECT * FROM fruits WHERE s_id REGEXP &#x27;[456]&#x27;;<br></code></pre></td></tr></table></figure><p><strong>匹配指定字符以外的字符</strong><code>“[^字符集合]”</code> 匹配不在指定集合中的任何字符。</p><p>在fruits表中，查询f_id字段中包含字母a<del>e和数字1</del>2以外字符的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_id REGEXP &#x27;[^a-e1-2]&#x27;;<br></code></pre></td></tr></table></figure><p><strong>使用{n,}或者{n,m}来指定字符串连续出现的次数</strong> “字符串{n,}”表示至少匹配n次前面的字符；“字符串 {n,m}”表示匹配前面的字符串不少于n次，不多于m次。例如，a{2,}表示字母a连续出现至少2次，也可以 大于2次；a{2,4}表示字母a连续出现最少2次，最多不能超过4次。</p><p>在fruits表中，查询f_name字段值出现字母‘x’至少2次的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;x&#123;2,&#125;&#x27;;<br></code></pre></td></tr></table></figure><p>在fruits表中，查询f_name字段值出现字符串“ba”最少1次、最多3次的记录，SQL语句如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql&gt; SELECT * FROM fruits WHERE f_name REGEXP &#x27;ba&#123;1,3&#125;&#x27;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据库概述</title>
    <link href="/2024/04/09/mysql/1%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/"/>
    <url>/2024/04/09/mysql/1%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<p>.png–&gt;_watermark.png</p><p>.jpg –&gt;_watermark.jpg</p><p>.webp–&gt;_watermark.webp</p><p>gif–&gt;_watermark.gif</p><p>bmp–&gt; _watermark.bmp</p><h2 id="1、为什么要使用数据库"><a href="#1、为什么要使用数据库" class="headerlink" title="1、为什么要使用数据库"></a>1、为什么要使用数据库</h2><ul><li><p>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企 业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘上加以”固化”</strong>，而持久化的实现过程大多 通过各种关系数据库来完成。 </p></li><li><p>持久化的主要作用是<strong>将内存中的数据存储在关系型数据库中</strong>，当然也可以存储在磁盘文件、XML数 据文件中</p></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091452010.png" alt="image-20240409145252953" style="zoom:50%;" /><h2 id="2、-数据库与数据库管理系统"><a href="#2、-数据库与数据库管理系统" class="headerlink" title="2、 数据库与数据库管理系统"></a>2、 数据库与数据库管理系统</h2><h3 id="2-1-数据库的相关概念"><a href="#2-1-数据库的相关概念" class="headerlink" title="2.1 数据库的相关概念"></a>2.1 数据库的相关概念</h3><table><thead><tr><th>DB：数据库（Database）</th></tr></thead><tbody><tr><td>即存储数据的“仓库”，其本质是一个文件系统。它保存了一系列有组织的数据。</td></tr><tr><td><strong>DBMS：数据库管理系统（Database Management System）</strong></td></tr><tr><td>是一种操纵和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控 制。用户通过数据库管理系统访问数据库中表内的数据。</td></tr><tr><td><strong>SQL：结构化查询语言（Structured Query Language）</strong></td></tr><tr><td>专门用来与数据库通信的语言。</td></tr></tbody></table><h3 id="2-2-数据库与数据库管理系统的关系"><a href="#2-2-数据库与数据库管理系统的关系" class="headerlink" title="2.2 数据库与数据库管理系统的关系"></a>2.2 数据库与数据库管理系统的关系</h3><p>数据库管理系统(DBMS)可以管理多个数据库，一般开发人员会针对每一个应用创建一个数据库。为保存 应用中实体的数据，一般会在数据库创建多个表，以保存程序中实体用户的数据。</p><p>数据库管理系统、数据库和表的关系如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091456703.png" alt="image-20240409145630619" style="zoom:50%;" /><h3 id="2-3-常见的数据库介绍"><a href="#2-3-常见的数据库介绍" class="headerlink" title="2.3 常见的数据库介绍"></a>2.3 常见的数据库介绍</h3><p><strong>Oracle</strong></p><p>1979 年，Oracle 2 诞生，它是第一个商用的 RDBMS（关系型数据库管理系统）。随着 Oracle 软件的名气 越来越大，公司也改名叫 Oracle 公司。 </p><p>2007年，总计85亿美金收购BEA Systems。 </p><p>2009年，总计74亿美金收购SUN。此前的2008年，SUN以10亿美金收购MySQL。意味着Oracle 同时拥有了 MySQL 的管理权，至此 Oracle 在数据库领域中成为绝对的领导者。 </p><p>2013年，甲骨文超越IBM，成为继Microsoft后全球第二大软件公司。 </p><p>如今 Oracle 的年收入达到了 400 亿美金，足以证明商用（收费）数据库软件的价值。</p><p><strong>SQL Server</strong></p><p> SQL Server 是微软开发的大型商业数据库，诞生于 1989 年。C#、.net等语言常使用，与WinNT完全集 成，也可以很好地与Microsoft BackOffice产品集成。</p><p><strong>DB2</strong> </p><p>IBM公司的数据库产品,收费的。常应用在银行系统中。</p><p><strong>PostgreSQL</strong></p><p> PostgreSQL 的稳定性极强，最符合SQL标准，开放源码，具备商业级DBMS质量。PG对数据量大的文本以 及SQL处理较快。</p><p><strong>SyBase</strong></p><p>已经淡出历史舞台。提供了一个非常专业数据建模的工具PowerDesigner。</p><p><strong>SQLite</strong></p><p>嵌入式的小型数据库，应用在手机端。 零配置，SQlite3不用安装，不用配置，不用启动，关闭或者配置 数据库实例。当系统崩溃后不用做任何恢复操作，再下次使用数据库的时候自动恢复。</p><p><strong>informix</strong></p><p>IBM公司出品，取自Information 和Unix的结合，它是第一个被移植到Linux上的商业数据库产品。仅运行 于unix&#x2F;linux平台，命令行操作。 性能较高，支持集群，适应于安全性要求极高的系统，尤其是银行，证 券系统的应用。</p><h2 id="3、MySQL介绍"><a href="#3、MySQL介绍" class="headerlink" title="3、MySQL介绍"></a>3、MySQL介绍</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><ul><li>MySQL是一个 <code>开放源代码的关系型数据库管理系统</code>，由瑞典MySQL AB（创始人Michael Widenius）公 司1995年开发，迅速成为开源数据库的 No.1</li><li>2008被 <code>Sun</code> 收购（10亿美金），2009年Sun被 <code>Oracle</code> 收购。 <code>MariaDB</code> 应运而生。（MySQL 的创 造者担心 MySQL 有闭源的风险，因此创建了 MySQL 的分支项目 MariaDB）</li><li>MySQL6.x 版本之后分为 <code>社区版</code>和 <code>商业版</code>。</li><li>MySQL是一种关联数据库管理系统，将数据保存在不同的表中，而不是将所有数据放在一个大仓库内，这样就增加了速度并提高了灵活性。</li><li>MySQL是开源的，所以你不需要支付额外的费用</li><li>MySQL是可以定制的，采用了 <code>GPL（GNU General Public License）</code> 协议，你可以修改源码来 开发自己的MySQL系统。</li><li>MySQL支持大型的数据库。可以处理拥有上千万条记录的大型数据库。</li><li>MySQL支持大型数据库，支持5000万条记录的数据仓库，32位系统表文件最大可支持 <code>4GB</code> ，64位系统支持最大的表文件为  <code>8TB</code> 。</li><li>MySQL使用 <code>标准的SQL数据语言形式</code>。</li><li>MySQL可以允许运行于多个系统上，并且支持多种语言。这些编程语言包括C、C++、Python、 Java、Perl、PHP和Ruby等。</li></ul><h3 id="3-2-MySQL发展史重大事件"><a href="#3-2-MySQL发展史重大事件" class="headerlink" title="3.2 MySQL发展史重大事件"></a>3.2 MySQL发展史重大事件</h3><p>MySQL的历史就是整个互联网的发展史。互联网业务从社交领域、电商领域到金融领域的发展，推动着应用对数据库的需求提升，对传统的数据库服务能力提出了挑战。高并发、高性能、高可用、轻资源、 易维护、易扩展的需求，促进了MySQL的长足发展。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091506456.png" alt="image-20240409150608353"></p><h3 id="3-3-关于MySQL-8-0"><a href="#3-3-关于MySQL-8-0" class="headerlink" title="3.3 关于MySQL 8.0"></a>3.3 关于MySQL 8.0</h3><p><code>MySQL从5.7版本直接跳跃发布了8.0版本</code>，可见这是一个令人兴奋的里程碑版本。MySQL 8版本在功能上 做了显著的改进与增强，开发者对MySQL的源代码进行了重构，最突出的一点是多MySQL Optimizer优化 器进行了改进。不仅在速度上得到了改善，还为用户带来了更好的性能和更棒的体验。</p><h3 id="3-4-Why-choose-MySQL"><a href="#3-4-Why-choose-MySQL" class="headerlink" title="3.4 Why choose MySQL?"></a>3.4 Why choose MySQL?</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091508561.png" alt="image-20240409150857515"></p><p>为什么如此多的厂商要选用MySQL？大概总结的原因主要有以下几点： </p><ol><li>开放源代码，使用成本低。 </li><li>性能卓越，服务稳定。 </li><li>软件体积小，使用简单，并且易于维护。 </li><li>历史悠久，社区用户非常活跃，遇到问题可以寻求帮助。 </li><li>许多互联网公司在用，经过了时间的验证</li></ol><h3 id="3-5-Oracle-vs-MySQL"><a href="#3-5-Oracle-vs-MySQL" class="headerlink" title="3.5 Oracle vs MySQL"></a>3.5 Oracle vs MySQL</h3><p>Oracle 更适合大型跨国企业的使用，因为他们对费用不敏感，但是对性能要求以及安全性有更高的要求。</p><p>MySQL 由于其<strong>体积小、速度快、总体拥有成本低，可处理上千万条记录的大型数据库，尤其是开放源码 这一特点，使得很多互联网公司、中小型网站选择了MySQL作为网站数据库</strong>（Facebook，Twitter， YouTube，阿里巴巴&#x2F;蚂蚁金服，去哪儿，美团外卖，腾讯）</p><h2 id="4、RDBMS-与-非RDBMS"><a href="#4、RDBMS-与-非RDBMS" class="headerlink" title="4、RDBMS 与 非RDBMS"></a>4、RDBMS 与 非RDBMS</h2><p>从排名中我们能看出来，关系型数据库绝对是 DBMS 的主流，其中使用最多的 DBMS 分别是 Oracle、 MySQL 和 SQL Server。这些都是关系型数据库（RDBMS）。</p><h3 id="4-1-关系型数据库-RDBMS"><a href="#4-1-关系型数据库-RDBMS" class="headerlink" title="4.1 关系型数据库(RDBMS)"></a>4.1 关系型数据库(RDBMS)</h3><h4 id="4-1-1-实质"><a href="#4-1-1-实质" class="headerlink" title="4.1.1 实质"></a>4.1.1 实质</h4><ul><li>这种类型的数据库是 <code>最古老</code> 的数据库类型，关系型数据库模型是把复杂的数据结构归结为简单的 <code>二元关系</code>（即二维表格形式）</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091512581.png" alt="image-20240409151215502" style="zoom:50%;" /><ul><li><p>关系型数据库以 <code>行(row)</code> 和 <code>列(column)</code> 的形式存储数据，以便于用户理解。这一系列的行和列被 称为 <code>表(table) </code>，一组表组成了一个库(database)。</p></li><li><p>表与表之间的数据记录有关系(relationship)。现实世界中的各种实体以及实体之间的各种联系均用 <code>关系模型</code> 来表示。关系型数据库，就是建立在 <code>关系模型</code> 基础上的数据库。</p></li><li><p>SQL 就是关系型数据库的查询语言。</p></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091513646.png" alt="image-20240409151341600" style="zoom:50%;" /><h4 id="4-1-2-优势"><a href="#4-1-2-优势" class="headerlink" title="4.1.2 优势"></a>4.1.2 优势</h4><ul><li><p><strong>复杂查询</strong> 可以用SQL语句方便的在一个表以及多个表之间做非常复杂的数据查询。 </p></li><li><p><strong>事务支持</strong> 使得对于安全性能很高的数据访问要求得以实现。</p></li></ul><h3 id="4-2-非关系型数据库-非RDBMS"><a href="#4-2-非关系型数据库-非RDBMS" class="headerlink" title="4.2 非关系型数据库(非RDBMS)"></a>4.2 非关系型数据库(非RDBMS)</h3><h4 id="4-2-1-介绍"><a href="#4-2-1-介绍" class="headerlink" title="4.2.1 介绍"></a>4.2.1 介绍</h4><p><strong>非关系型数据库</strong>，可看成传统关系型数据库的功能 的解析， <code>阉割版本</code> ，基于键值对存储数据，不需要经过SQL层 <code>性能非常高</code>。同时，通过减少不常用的功能，进一步提高性能。</p><p>目前基本上大部分主流的非关系型数据库都是免费的。</p><h4 id="4-2-2-有哪些非关系型数据库"><a href="#4-2-2-有哪些非关系型数据库" class="headerlink" title="4.2.2 有哪些非关系型数据库"></a>4.2.2 有哪些非关系型数据库</h4><p>相比于 SQL，NoSQL 泛指非关系型数据库，包括了榜单上的键值型数据库、文档型数据库、搜索引擎和 列存储等，除此以外还包括图形数据库。也只有用 NoSQL 一词才能将这些技术囊括进来。</p><p><strong>键值型数据库</strong></p><p>键值型数据库通过 Key-Value 键值的方式来存储数据，其中 Key 和 Value 可以是简单的对象，也可以是复 杂的对象。Key 作为唯一的标识符，优点是查找速度快，在这方面明显优于关系型数据库，缺点是无法 像关系型数据库一样使用条件过滤（比如 WHERE），如果你不知道去哪里找数据，就要遍历所有的键， 这就会消耗大量的计算。</p><p>键值型数据库典型的使用场景是作为 <code>内存缓存</code>。<code>Redis</code> 是最流行的键值型数据库。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091516991.png" alt="image-20240409151650897" style="zoom:50%;" /><p><strong>文档型数据库</strong></p><p>此类数据库可存放并获取文档，可以是XML、JSON等格式。在数据库中文档作为处理信息的基本单位， 一个文档就相当于一条记录。文档数据库所存放的文档，就相当于键值数据库所存放的“值”。MongoDB 是最流行的文档型数据库。此外，还有CouchDB等。</p><p><strong>搜索引擎数据库</strong></p><p>虽然关系型数据库采用了索引提升检索效率，但是针对全文索引效率却较低。搜索引擎数据库是应用在 搜索引擎领域的数据存储形式，由于搜索引擎会爬取大量的数据，并以特定的格式进行存储，这样在检索的时候才能保证性能最优。核心原理是“倒排索引”。</p><p>典型产品：Solr、Elasticsearch、Splunk 等。</p><p><strong>列式数据库</strong></p><p>列式数据库是相对于行式存储的数据库，Oracle、MySQL、SQL Server 等数据库都是采用的行式存储 （Row-based），而列式数据库是将数据按照列存储到数据库中，这样做的好处是可以大量降低系统的 I&#x2F;O，适合于分布式文件系统，不足在于功能相对有限。典型产品：HBase等。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091519726.png" alt="image-20240409151921562"></p><p><strong>图形数据库</strong></p><p>图形数据库，利用了图这种数据结构存储了实体（对象）之间的关系。图形数据库最典型的例子就是社 交网络中人与人的关系，数据模型主要是以节点和边（关系）来实现，特点在于能高效地解决复杂的关系问题。</p><p>图形数据库顾名思义，就是一种存储图形关系的数据库。它利用了图这种数据结构存储了实体（对象） 之间的关系。关系型数据用于存储明确关系的数据，但对于复杂关系的数据存储却有些力不从心。如社交网络中人物之间的关系，如果用关系型数据库则非常复杂，用图形数据库将非常简单。典型产品： Neo4J、InfoGrid等。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091520653.png" alt="image-20240409152011515" style="zoom:50%;" /><h4 id="4-2-3-NoSQL的演变"><a href="#4-2-3-NoSQL的演变" class="headerlink" title="4.2.3 NoSQL的演变"></a>4.2.3 NoSQL的演变</h4><p>由于 SQL 一直称霸 DBMS，因此许多人在思考是否有一种数据库技术能远离 SQL，于是 NoSQL 诞生了， 但是随着发展却发现越来越离不开 SQL。到目前为止 NoSQL 阵营中的 DBMS 都会有实现类似 SQL 的功 能。下面是“NoSQL”这个名词在不同时期的诠释，从这些释义的变化中可以看出  <code>NoSQL 功能的演变</code>：</p><p>1970：NoSQL &#x3D; We have no SQL </p><p>1980：NoSQL &#x3D; Know SQL </p><p>2000：NoSQL &#x3D; No SQL! </p><p>2005：NoSQL &#x3D; Not only SQL </p><p>2013：NoSQL &#x3D; No, SQL!</p><p> NoSQL 对 SQL 做出了很好的补充，比如实际开发中，有很多业务需求，其实并不需要完整的关系型数据 库功能，非关系型数据库的功能就足够使用了。这种情况下，使用 <code>性能更高</code>, <code>成本更低</code> 的非关系型数据库当然是更明智的选择。比如：日志收集、排行榜、定时器等。</p><h3 id="4-3-小结"><a href="#4-3-小结" class="headerlink" title="4.3 小结"></a>4.3 小结</h3><p>NoSQL 的分类很多，即便如此，在 DBMS 排名中，还是 SQL 阵营的比重更大，影响力前 5 的 DBMS 中有 4 个是关系型数据库，而排名前 20 的 DBMS 中也有 12 个是关系型数据库。所以说，掌握 SQL 是非常有 必要的。整套课程将围绕 SQL 展开。</p><h2 id="5、关系型数据库设计规则"><a href="#5、关系型数据库设计规则" class="headerlink" title="5、关系型数据库设计规则"></a>5、关系型数据库设计规则</h2><ul><li>关系型数据库的典型数据结构就是 <code>数据表</code>，这些数据表的组成都是结构化的（Structured）。</li><li>将数据放到表中，表再放到库中。</li><li>一个数据库中可以有多个表，每个表都有一个名字，用来标识自己。表名具有唯一性。</li><li>表具有一些特性，这些特性定义了数据在表中如何存储，类似Java和Python中 “类”的设计。</li></ul><h3 id="5-1-表、记录、字段"><a href="#5-1-表、记录、字段" class="headerlink" title="5.1 表、记录、字段"></a>5.1 表、记录、字段</h3><ul><li>E-R（entity-relationship，实体-联系）模型中有三个主要概念是： <code>实体集</code>、<code>属性</code>、 <code>联系集</code>。</li><li>一个实体集（class）对应于数据库中的一个表（table），一个实体（instance）则对应于数据库表 中的一行（row），也称为一条记录（record）。一个属性（attribute）对应于数据库表中的一列 （column），也称为一个字段（field）。</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091526675.png" alt="image-20240409152649631"></p><blockquote><p>ORM思想 (Object Relational Mapping)体现： </p><p>数据库中的一个表  &lt;—&gt; Java或Python中的一个类 </p><p>表中的一条数据  &lt;—&gt; 类中的一个对象（或实体） </p><p>表中的一个列  &lt;—-&gt; 类中的一个字段、属性(field)</p></blockquote><h3 id="5-2-表的关联关系"><a href="#5-2-表的关联关系" class="headerlink" title="5.2 表的关联关系"></a>5.2 表的关联关系</h3><ul><li>表与表之间的数据记录有关系(relationship)。现实世界中的各种实体以及实体之间的各种联系均用关系模型来表示。</li><li>四种：一对一关联、一对多关联、多对多关联、自我引用</li></ul><h4 id="5-2-1-一对一关联（one-to-one）"><a href="#5-2-1-一对一关联（one-to-one）" class="headerlink" title="5.2.1 一对一关联（one-to-one）"></a>5.2.1 一对一关联（one-to-one）</h4><ul><li>在实际的开发中应用不多，因为一对一可以创建成一张表。</li><li>举例：设计 <code>学生表</code> ：学号、姓名、手机号码、班级、系别、身份证号码、家庭住址、籍贯、紧急 联系人、…<ul><li>拆为两个表：两个表的记录是一一对应关系。</li><li><code>基础信息表</code>（常用信息）：学号、姓名、手机号码、班级、系别</li><li><code>档案信息表</code>（不常用信息）：学号、身份证号码、家庭住址、籍贯、紧急联系人、…</li></ul></li><li>两种建表原则：<ul><li>外键唯一：主表的主键和从表的外键（唯一），形成主外键关系，外键唯一。</li><li>外键是主键：主表的主键和从表的主键，形成主外键关系。</li></ul></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091529500.png" alt="image-20240409152959392" style="zoom:50%;" /><h4 id="5-2-2-一对多关系（one-to-many）"><a href="#5-2-2-一对多关系（one-to-many）" class="headerlink" title="5.2.2 一对多关系（one-to-many）"></a>5.2.2 一对多关系（one-to-many）</h4><ul><li>常见实例场景： <code>客户表和订单表</code>， <code>分类表和商品表</code>，<code>部门表和员工表</code>。</li><li>举例：<ul><li>员工表：编号、姓名、…、所属部门</li><li>部门表：编号、名称、简介</li></ul></li><li>一对多建表原则：在从表(多方)创建一个字段，字段作为外键指向主表(一方)的主键</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091531088.png" alt="image-20240409153131056" style="zoom:50%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091531790.png" alt="image-20240409153147656" style="zoom:50%;" /><h4 id="5-2-3-多对多（many-to-many）"><a href="#5-2-3-多对多（many-to-many）" class="headerlink" title="5.2.3 多对多（many-to-many）"></a><strong>5.2.3 多对多（many-to-many）</strong></h4><p>要表示多对多关系，必须创建第三个表，该表通常称为 <code>联接表</code>，它将多对多关系划分为两个一对多关 系。将这两个表的主键都插入到第三个表中。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091532721.png" alt="image-20240409153225679" style="zoom:50%;" /><ul><li><p><strong>举例1：学生-课程</strong></p><ul><li><p><code>学生信息表</code>：一行代表一个学生的信息（学号、姓名、手机号码、班级、系别…）</p></li><li><p><code>课程信息表</code>：一行代表一个课程的信息（课程编号、授课老师、简介…）</p></li><li><p><code>选课信息表</code>：一个学生可以选多门课，一门课可以被多个学生选</p><blockquote><p>学号     课程编号</p><p>11001</p><p>21001</p><p>11002</p></blockquote></li></ul></li><li><p><strong>举例2：产品-订单</strong></p></li></ul><p>“订单”表和“产品”表有一种多对多的关系，这种关系是通过与“订单明细”表建立两个一对多关系来 定义的。一个订单可以有多个产品，每个产品可以出现在多个订单中。 </p><ul><li><code>产品表</code>：“产品”表中的每条记录表示一个产品。</li><li><code>订单表</code>：“订单”表中的每条记录表示一个订单。</li><li><code>订单明细表</code>：每个产品可以与“订单”表中的多条记录对应，即出现在多个订单中。一个订单 可以与“产品”表中的多条记录对应，即包含多个产品。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091535028.png" alt="image-20240409153549955" style="zoom:67%;" /><h4 id="5-3-4-自我引用-Self-reference"><a href="#5-3-4-自我引用-Self-reference" class="headerlink" title="5.3.4 自我引用(Self reference)"></a>5.3.4 自我引用(Self reference)</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/MySQL/202404091537737.png" alt="image-20240409153719660" style="zoom:50%;" />]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常用类和基础API</title>
    <link href="/2024/03/26/11.%20%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/"/>
    <url>/2024/03/26/11.%20%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/</url>
    
    <content type="html"><![CDATA[<h1 id="第11章-常用类和基础API"><a href="#第11章-常用类和基础API" class="headerlink" title="第11章_常用类和基础API"></a>第11章_常用类和基础API</h1><h2 id="1-字符串相关类之不可变字符序列：String"><a href="#1-字符串相关类之不可变字符序列：String" class="headerlink" title="1. 字符串相关类之不可变字符序列：String"></a>1. 字符串相关类之不可变字符序列：String</h2><h3 id="1-1-String的特性"><a href="#1-1-String的特性" class="headerlink" title="1.1 String的特性"></a>1.1 String的特性</h3><ul><li><p><code>java.lang.String</code> 类代表字符串。Java程序中所有的字符串文字（例如<code>&quot;hello&quot;</code> ）都可以看作是实现此类的实例。</p></li><li><p>字符串是常量，用双引号引起来表示。它们的值在创建之后不能更改。</p></li><li><p>字符串String类型本身是final声明的，意味着我们不能继承String。</p></li><li><p>String对象的字符内容是存储在一个字符数组value[]中的。<code>&quot;abc&quot;</code> 等效于 <code>char[] data=&#123;&#39;h&#39;,&#39;e&#39;,&#39;l&#39;,&#39;l&#39;,&#39;o&#39;&#125;</code>。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120296_watermark.png" alt="image-20220514184404024" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//jdk8中的String源码：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123;<br>    <span class="hljs-comment">/** The value is used for character storage. */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">char</span> value[]; <span class="hljs-comment">//String对象的字符内容是存储在此数组中</span><br> <br>    <span class="hljs-comment">/** Cache the hash code for the string */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> hash; <span class="hljs-comment">// Default to 0</span><br><br></code></pre></td></tr></table></figure><ul><li><p>private意味着外面无法直接获取字符数组，而且String没有提供value的get和set方法。</p></li><li><p>final意味着字符数组的引用不可改变，而且String也没有提供方法来修改value数组某个元素值</p></li><li><p>因此字符串的字符数组内容也不可变的，即String代表着不可变的字符序列。即，一旦对字符串进行修改，就会产生新对象。</p></li><li><p>JDK9只有，底层使用byte[]数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">String</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence &#123; <br>    <span class="hljs-meta">@Stable</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] value;<br>&#125;<br><br><span class="hljs-comment">//官方说明：... that most String objects contain only Latin-1 characters. Such characters require only one byte of storage, hence half of the space in the internal char arrays of such String objects is going unused.</span><br><br><span class="hljs-comment">//细节：... The new String class will store characters encoded either as ISO-8859-1/Latin-1 (one byte per character), or as UTF-16 (two bytes per character), based upon the contents of the string. The encoding flag will indicate which encoding is used.</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持（toString()方法）。</p></li></ul><h3 id="1-2-String的内存结构"><a href="#1-2-String的内存结构" class="headerlink" title="1.2 String的内存结构"></a>1.2 String的内存结构</h3><h4 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1.2.1 概述"></a>1.2.1 概述</h4><p>因为字符串对象设计为不可变，那么所以字符串有常量池来保存很多常量对象。</p><p>JDK6中，字符串常量池在方法区。JDK7开始，就移到堆空间，直到目前JDK17版本。</p><p>举例内存结构分配：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120382_watermark.png" alt="image-20220405160036240"></p><h4 id="1-2-2-练习类型1：拼接"><a href="#1-2-2-练习类型1：拼接" class="headerlink" title="1.2.2 练习类型1：拼接"></a>1.2.2 练习类型1：拼接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>System.out.println(s1 == s2);<br><span class="hljs-comment">// 内存中只有一个&quot;hello&quot;对象被创建，同时被s1和s2共享。</span><br></code></pre></td></tr></table></figure><p>对应内存结构为：（以下内存结构以<code>JDK6为例</code>绘制）：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120325_watermark.png" alt="image-20220405152839525" style="zoom:67%;" /><p>进一步：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120440_watermark.png" alt="image-20220405152941599" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>p1.name = “Tom<span class="hljs-string">&quot;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">Person p2 = new Person();</span><br><span class="hljs-string">p2.name = “Tom&quot;</span>;<br><br>System.out.println(p1.name.equals( p2.name)); <span class="hljs-comment">//</span><br>System.out.println(p1.name == p2.name); <span class="hljs-comment">//</span><br>System.out.println(p1.name == <span class="hljs-string">&quot;Tom&quot;</span>); <span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120507_watermark.png" alt="image-20220405153027693" style="zoom:67%;" /><h4 id="1-2-3-练习类型2：new"><a href="#1-2-3-练习类型2：new" class="headerlink" title="1.2.3 练习类型2：new"></a>1.2.3 练习类型2：new</h4><p>String str1 &#x3D; “abc”; 与 String str2 &#x3D; new String(“abc”);的区别？</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120474_watermark.png" alt="image-20220405160149200" style="zoom:67%;" /><p>str2 首先指向堆中的一个字符串对象，然后堆中字符串的value数组指向常量池中常量对象的value数组。</p><blockquote><ul><li><p>字符串常量存储在字符串常量池，目的是共享。</p></li><li><p>字符串非常量对象存储在堆中。</p></li></ul></blockquote><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javaEE&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;javaEE&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;javaEE&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;javaEE&quot;</span>);<br><br>System.out.println(s1 == s2);<span class="hljs-comment">//true</span><br>System.out.println(s1 == s3);<span class="hljs-comment">//false</span><br>System.out.println(s1 == s4);<span class="hljs-comment">//false</span><br>System.out.println(s3 == s4);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120061_watermark.png" alt="image-20220405160321172" style="zoom:67%;" /><p>练习：String str2 &#x3D; new String(“hello”); 在内存中创建了几个对象？</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">两个<br></code></pre></td></tr></table></figure><h4 id="1-2-4-练习类型3：intern"><a href="#1-2-4-练习类型3：intern" class="headerlink" title="1.2.4 练习类型3：intern()"></a>1.2.4 练习类型3：intern()</h4><ul><li><strong>String s1 &#x3D; “a”;</strong></li></ul><p>说明：在字符串常量池中创建了一个字面量为”a”的字符串。</p><ul><li><strong>s1 &#x3D; s1 + “b”;</strong></li></ul><p>说明：实际上原来的“a”字符串对象已经丢弃了，现在在堆空间中产生了一个字符串s1+”b”（也就是”ab”)。如果多次执行这些改变串内容的操作，会导致大量副本字符串对象存留在内存中，降低效率。如果这样的操作放到循环中，会极大影响程序的性能。</p><ul><li><strong>String s2 &#x3D; “ab”;</strong></li></ul><p>说明：直接在字符串常量池中创建一个字面量为”ab”的字符串。</p><ul><li><strong>String s3 &#x3D; “a” + “b”;</strong></li></ul><p>说明：s3指向字符串常量池中已经创建的”ab”的字符串。</p><ul><li><strong>String s4 &#x3D; s1.intern();</strong></li></ul><p>说明：堆空间的s1对象在调用intern()之后，会将常量池中已经存在的”ab”字符串赋值给s4。</p><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> s1 + <span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> s1 + s2;<br><span class="hljs-type">String</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span> (s1 + s2).intern();<br><br>System.out.println(s3 == s4);<br>System.out.println(s3 == s5);<br>System.out.println(s4 == s5);<br>System.out.println(s3 == s6);<br></code></pre></td></tr></table></figure><blockquote><p><strong>结论：</strong></p><p>（1）常量+常量：结果是常量池。且常量池中不会存在相同内容的常量。</p><p>（2）常量与变量 或 变量与变量：结果在堆中</p><p>（3）拼接后调用intern方法：返回值在常量池中</p></blockquote><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloworld&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> s1 + <span class="hljs-string">&quot;world&quot;</span>;<span class="hljs-comment">//s4字符串内容也helloworld，s1是变量，&quot;world&quot;常量，变量 + 常量的结果在堆中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> s1 + s2;<span class="hljs-comment">//s5字符串内容也helloworld，s1和s2都是变量，变量 + 变量的结果在堆中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-string">&quot;world&quot;</span>;<span class="hljs-comment">//常量+ 常量 结果在常量池中，因为编译期间就可以确定结果</span><br><br>System.out.println(s3 == s4);<span class="hljs-comment">//false</span><br>System.out.println(s3 == s5);<span class="hljs-comment">//false</span><br>System.out.println(s3 == s6);<span class="hljs-comment">//true</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloworld&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> s1 + <span class="hljs-string">&quot;world&quot;</span>;<span class="hljs-comment">//s4字符串内容也helloworld，s1是常量，&quot;world&quot;常量，常量+常量结果在常量池中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> s1 + s2;<span class="hljs-comment">//s5字符串内容也helloworld，s1和s2都是常量，常量+ 常量 结果在常量池中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s6</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span> + <span class="hljs-string">&quot;world&quot;</span>;<span class="hljs-comment">//常量+ 常量 结果在常量池中，因为编译期间就可以确定结果</span><br><br>System.out.println(s3 == s4);<span class="hljs-comment">//true</span><br>System.out.println(s3 == s5);<span class="hljs-comment">//true</span><br>System.out.println(s3 == s6);<span class="hljs-comment">//true</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloworld&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> (s1 + <span class="hljs-string">&quot;world&quot;</span>).intern();<span class="hljs-comment">//把拼接的结果放到常量池中</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> (s1 + s2).intern();<br><br>System.out.println(s3 == s4);<span class="hljs-comment">//true</span><br>System.out.println(s3 == s5);<span class="hljs-comment">//true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>练习：下列程序运行的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestString</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;world&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;helloworld&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">str4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>.concat(<span class="hljs-string">&quot;world&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>+<span class="hljs-string">&quot;world&quot;</span>;<br><br>System.out.println(str3 == str4);<span class="hljs-comment">//false</span><br>System.out.println(str3 == str5);<span class="hljs-comment">//true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>concat方法拼接，哪怕是两个常量对象拼接，结果也是在堆。</p></blockquote><p>练习：下列程序运行的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTest</span> &#123;<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;good&quot;</span>);<br>    <span class="hljs-type">char</span>[] ch = &#123; <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span> &#125;;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(String str, <span class="hljs-type">char</span> ch[])</span> &#123;<br>        str = <span class="hljs-string">&quot;test ok&quot;</span>;<br>        ch[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;b&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringTest</span> <span class="hljs-variable">ex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTest</span>();<br>        ex.change(ex.str, ex.ch);<br>        System.out.print(ex.str + <span class="hljs-string">&quot; and &quot;</span>);<span class="hljs-comment">//</span><br>        System.out.println(ex.ch);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-3-String的常用API-1"><a href="#1-3-String的常用API-1" class="headerlink" title="1.3 String的常用API-1"></a>1.3 String的常用API-1</h3><h4 id="1-3-1-构造器"><a href="#1-3-1-构造器" class="headerlink" title="1.3.1 构造器"></a>1.3.1 构造器</h4><ul><li><code>public String() </code> ：初始化新创建的 String对象，以使其表示空字符序列。</li><li><code> String(String original)</code>： 初始化一个新创建的 <code>String</code> 对象，使其表示一个与参数相同的字符序列；换句话说，新创建的字符串是该参数字符串的副本。</li><li><code>public String(char[] value) </code> ：通过当前参数中的字符数组来构造新的String。</li><li><code>public String(char[] value,int offset, int count) </code> ：通过字符数组的一部分来构造新的String。</li><li><code>public String(byte[] bytes) </code> ：通过使用平台的<strong>默认字符集</strong>解码当前参数中的字节数组来构造新的String。</li><li><code>public String(byte[] bytes,String charsetName) </code> ：通过使用指定的字符集解码当前参数中的字节数组来构造新的String。</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//字面量定义方式：字符串常量对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><br><span class="hljs-comment">//构造器定义方式：无参构造</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();<br><br><span class="hljs-comment">//构造器定义方式：创建&quot;hello&quot;字符串常量的副本</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><br><span class="hljs-comment">//构造器定义方式：通过字符数组构造</span><br><span class="hljs-type">char</span> chars[] = &#123;<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>&#125;;     <br><span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars);<br><span class="hljs-type">String</span> <span class="hljs-variable">str4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br><br><span class="hljs-comment">//构造器定义方式：通过字节数组构造</span><br><span class="hljs-type">byte</span> bytes[] = &#123;<span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span> &#125;;     <br><span class="hljs-type">String</span> <span class="hljs-variable">str5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes);<br><span class="hljs-type">String</span> <span class="hljs-variable">str6</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes,<span class="hljs-string">&quot;GBK&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">char</span>[] data = &#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> String.copyValueOf(data);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> String.copyValueOf(data,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">123456</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> String.valueOf(num);<br><br>    System.out.println(s1);<br>System.out.println(s2);<br>System.out.println(s3);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-2-String与其他结构间的转换"><a href="#1-3-2-String与其他结构间的转换" class="headerlink" title="1.3.2 String与其他结构间的转换"></a>1.3.2 String与其他结构间的转换</h4><p><strong>字符串 –&gt; 基本数据类型、包装类：</strong></p><ul><li>Integer包装类的public static int parseInt(String s)：可以将由“数字”字符组成的字符串转换为整型。</li><li>类似地，使用java.lang包中的Byte、Short、Long、Float、Double类调相应的类方法可以将由“数字”字符组成的字符串，转化为相应的基本数据类型。</li></ul><p><strong>基本数据类型、包装类 –&gt; 字符串：</strong></p><ul><li>调用String类的public String valueOf(int n)可将int型转换为字符串</li><li>相应的valueOf(byte b)、valueOf(long l)、valueOf(float f)、valueOf(double d)、valueOf(boolean b)可由参数的相应类型到字符串的转换。</li></ul><p> <strong>字符数组 –&gt;  字符串：</strong></p><ul><li>String 类的构造器：String(char[]) 和 String(char[]，int offset，int length) 分别用字符数组中的全部字符和部分字符创建字符串对象。</li></ul><p> <strong>字符串 –&gt;  字符数组：</strong></p><ul><li><p>public char[] toCharArray()：将字符串中的全部字符存放在一个字符数组中的方法。</p></li><li><p>public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)：提供了将指定索引范围内的字符串存放到数组中的方法。</p></li></ul><p><strong>字符串 –&gt; 字节数组：（编码）</strong></p><ul><li>public byte[] getBytes() ：使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中。</li><li>public byte[] getBytes(String charsetName) ：使用指定的字符集将此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。</li></ul><p> <strong>字节数组 –&gt; 字符串：（解码）</strong></p><ul><li>String(byte[])：通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。</li><li>String(byte[]，int offset，int length) ：用指定的字节数组的一部分，即从数组起始位置offset开始取length个字节构造一个字符串对象。</li><li>String(byte[], String charsetName ) 或 new String(byte[], int, int,String charsetName )：解码，按照指定的编码方式进行解码。</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;中国&quot;</span>;<br>    System.out.println(str.getBytes(<span class="hljs-string">&quot;ISO8859-1&quot;</span>).length);<span class="hljs-comment">// 2</span><br>    <span class="hljs-comment">// ISO8859-1把所有的字符都当做一个byte处理，处理不了多个字节</span><br>    System.out.println(str.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>).length);<span class="hljs-comment">// 4 每一个中文都是对应2个字节</span><br>    System.out.println(str.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>).length);<span class="hljs-comment">// 6 常规的中文都是3个字节</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 不乱码：（1）保证编码与解码的字符集名称一样（2）不缺字节</span><br><span class="hljs-comment">     */</span><br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(str.getBytes(<span class="hljs-string">&quot;ISO8859-1&quot;</span>), <span class="hljs-string">&quot;ISO8859-1&quot;</span>));<span class="hljs-comment">// 乱码</span><br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(str.getBytes(<span class="hljs-string">&quot;GBK&quot;</span>), <span class="hljs-string">&quot;GBK&quot;</span>));<span class="hljs-comment">// 中国</span><br>    System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(str.getBytes(<span class="hljs-string">&quot;UTF-8&quot;</span>), <span class="hljs-string">&quot;UTF-8&quot;</span>));<span class="hljs-comment">// 中国</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-4-String的常用API-2"><a href="#1-4-String的常用API-2" class="headerlink" title="1.4 String的常用API-2"></a>1.4 String的常用API-2</h3><p><code>String</code> 类包括的方法可用于检查序列的单个字符、比较字符串、搜索字符串、提取子字符串、创建字符串副本并将所有字符全部转换为大写或小写。 </p><h4 id="1-4-1-系列1：常用方法"><a href="#1-4-1-系列1：常用方法" class="headerlink" title="1.4.1 系列1：常用方法"></a>1.4.1 系列1：常用方法</h4><p>（1）boolean isEmpty()：字符串是否为空<br>（2）int length()：返回字符串的长度<br>（3）String concat(xx)：拼接<br>（4）boolean equals(Object obj)：比较字符串是否相等，区分大小写<br>（5）boolean equalsIgnoreCase(Object obj)：比较字符串是否相等，不区分大小写<br>（6）int compareTo(String other)：比较字符串大小，区分大小写，按照Unicode编码值比较大小<br>（7）int compareToIgnoreCase(String other)：比较字符串大小，不区分大小写<br>（8）String toLowerCase()：将字符串中大写字母转为小写<br>（9）String toUpperCase()：将字符串中小写字母转为大写<br>（10）String trim()：去掉字符串前后空白符<br>（11）public String intern()：结果在常量池中共享</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//将用户输入的单词全部转为小写，如果用户没有输入单词，重新输入</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>String word;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>System.out.print(<span class="hljs-string">&quot;请输入单词：&quot;</span>);<br>word = input.nextLine();<br><span class="hljs-keyword">if</span>(word.trim().length()!=<span class="hljs-number">0</span>)&#123;<br>word = word.toLowerCase();<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>System.out.println(word);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-comment">//随机生成验证码，验证码由0-9，A-Z,a-z的字符组成</span><br><span class="hljs-type">char</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">26</span>*<span class="hljs-number">2</span>+<span class="hljs-number">10</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>array[i] = (<span class="hljs-type">char</span>)(<span class="hljs-string">&#x27;0&#x27;</span> + i);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>,j=<span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>+<span class="hljs-number">26</span>; i++,j++) &#123;<br>array[i] = (<span class="hljs-type">char</span>)(<span class="hljs-string">&#x27;A&#x27;</span> + j);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>+<span class="hljs-number">26</span>,j=<span class="hljs-number">0</span>; i &lt; array.length; i++,j++) &#123;<br>array[i] = (<span class="hljs-type">char</span>)(<span class="hljs-string">&#x27;a&#x27;</span> + j);<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">code</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">Random</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>code += array[rand.nextInt(array.length)];<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;验证码：&quot;</span> + code);<br><span class="hljs-comment">//将用户输入的单词全部转为小写，如果用户没有输入单词，重新输入</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.print(<span class="hljs-string">&quot;请输入验证码：&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">inputCode</span> <span class="hljs-operator">=</span> input.nextLine();<br><br><span class="hljs-keyword">if</span>(!code.equalsIgnoreCase(inputCode))&#123;<br>System.out.println(<span class="hljs-string">&quot;验证码输入不正确&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-2-系列2：查找"><a href="#1-4-2-系列2：查找" class="headerlink" title="1.4.2 系列2：查找"></a>1.4.2 系列2：查找</h4><p>（11）boolean contains(xx)：是否包含xx<br>（12）int indexOf(xx)：从前往后找当前字符串中xx，即如果有返回第一次出现的下标，要是没有返回-1<br>（13）int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始<br>（14）int lastIndexOf(xx)：从后往前找当前字符串中xx，即如果有返回最后一次出现的下标，要是没有返回-1<br>（15）int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;尚硅谷是一家靠谱的培训机构，尚硅谷可以说是IT培训的小清华，JavaEE是尚硅谷的当家学科，尚硅谷的大数据培训是行业独角兽。尚硅谷的前端和UI专业一样独领风骚。&quot;</span>;<br>System.out.println(<span class="hljs-string">&quot;是否包含清华：&quot;</span> + str.contains(<span class="hljs-string">&quot;清华&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;培训出现的第一次下标：&quot;</span> + str.indexOf(<span class="hljs-string">&quot;培训&quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;培训出现的最后一次下标：&quot;</span> + str.lastIndexOf(<span class="hljs-string">&quot;培训&quot;</span>));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-3-系列3：字符串截取"><a href="#1-4-3-系列3：字符串截取" class="headerlink" title="1.4.3 系列3：字符串截取"></a>1.4.3 系列3：字符串截取</h4><p>（16）String substring(int beginIndex) ：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。<br>（17）String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloworldjavaatguigu&quot;</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sub1</span> <span class="hljs-operator">=</span> str.substring(<span class="hljs-number">5</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">sub2</span> <span class="hljs-operator">=</span> str.substring(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>);<br>    System.out.println(sub1);<br>    System.out.println(sub2);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;快速学习Java的秘诀.dat&quot;</span>;<br>    <span class="hljs-comment">//截取文件名</span><br>    System.out.println(<span class="hljs-string">&quot;文件名：&quot;</span> + fileName.substring(<span class="hljs-number">0</span>,fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)));<br>    <span class="hljs-comment">//截取后缀名</span><br>    System.out.println(<span class="hljs-string">&quot;后缀名：&quot;</span> + fileName.substring(fileName.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-4-系列4：和字符-字符数组相关"><a href="#1-4-4-系列4：和字符-字符数组相关" class="headerlink" title="1.4.4 系列4：和字符&#x2F;字符数组相关"></a>1.4.4 系列4：和字符&#x2F;字符数组相关</h4><p>（18）char charAt(index)：返回[index]位置的字符<br>（19）char[] toCharArray()： 将此字符串转换为一个新的字符数组返回<br>（20）static String valueOf(char[] data)  ：返回指定数组中表示该字符序列的 String<br>（21）static String valueOf(char[] data, int offset, int count) ： 返回指定数组中表示该字符序列的 String<br>（22）static String copyValueOf(char[] data)： 返回指定数组中表示该字符序列的 String<br>（23）static String copyValueOf(char[] data, int offset, int count)：返回指定数组中表示该字符序列的 String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//将字符串中的字符按照大小顺序排列</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;helloworldjavaatguigu&quot;</span>;<br><span class="hljs-type">char</span>[] array = str.toCharArray();<br>Arrays.sort(array);<br>str = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(array);<br>System.out.println(str);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//将首字母转为大写</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack&quot;</span>;<br>str = Character.toUpperCase(str.charAt(<span class="hljs-number">0</span>))+str.substring(<span class="hljs-number">1</span>);<br>System.out.println(str);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">char</span>[] data = &#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>&#125;;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> String.copyValueOf(data);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> String.copyValueOf(data,<span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">123456</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> String.valueOf(num);<br><br>   System.out.println(s1);<br>System.out.println(s2);<br>System.out.println(s3);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-5-系列5：开头与结尾"><a href="#1-4-5-系列5：开头与结尾" class="headerlink" title="1.4.5 系列5：开头与结尾"></a>1.4.5 系列5：开头与结尾</h4><p>（24）boolean startsWith(xx)：测试此字符串是否以指定的前缀开始<br>（25）boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始<br>（26）boolean endsWith(xx)：测试此字符串是否以指定的后缀结束 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>System.out.println(name.startsWith(<span class="hljs-string">&quot;张&quot;</span>));<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello.txt&quot;</span>;<br><span class="hljs-keyword">if</span>(file.endsWith(<span class="hljs-string">&quot;.java&quot;</span>))&#123;<br>System.out.println(<span class="hljs-string">&quot;Java源文件&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(file.endsWith(<span class="hljs-string">&quot;.class&quot;</span>))&#123;<br>System.out.println(<span class="hljs-string">&quot;Java字节码文件&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;其他文件&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-6-系列6：替换"><a href="#1-4-6-系列6：替换" class="headerlink" title="1.4.6 系列6：替换"></a>1.4.6 系列6：替换</h4><p>（27）String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。 不支持正则。<br>（28）String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。<br>（29）String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。<br>（30）String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello244world.java;887&quot;</span>;<br>    <span class="hljs-comment">//把其中的非字母去掉</span><br>    str1 = str1.replaceAll(<span class="hljs-string">&quot;[^a-zA-Z]&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    System.out.println(str1);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12hello34world5java7891mysql456&quot;</span>;<br>    <span class="hljs-comment">//把字符串中的数字替换成,，如果结果中开头和结尾有，的话去掉</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">string</span> <span class="hljs-operator">=</span> str2.replaceAll(<span class="hljs-string">&quot;\\d+&quot;</span>, <span class="hljs-string">&quot;,&quot;</span>).replaceAll(<span class="hljs-string">&quot;^,|,$&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>    System.out.println(string);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-常见算法题目"><a href="#1-5-常见算法题目" class="headerlink" title="1.5 常见算法题目"></a>1.5 常见算法题目</h3><p><strong>题目1：</strong>模拟一个trim方法，去除字符串两端的空格。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">myTrim</span><span class="hljs-params">(String str)</span> &#123;<br><span class="hljs-keyword">if</span> (str != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">// 用于记录从前往后首次索引位置不是空格的位置的索引</span><br><span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> str.length() - <span class="hljs-number">1</span>;<span class="hljs-comment">// 用于记录从后往前首次索引位置不是空格的位置的索引</span><br><br><span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; str.charAt(start) == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>start++;<br>&#125;<br><br><span class="hljs-keyword">while</span> (start &lt; end &amp;&amp; str.charAt(end) == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>end--;<br>&#125;<br><span class="hljs-keyword">if</span> (str.charAt(start) == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> str.substring(start, end + <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMyTrim</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;   a   &quot;</span>;<br><span class="hljs-comment">// str = &quot; &quot;;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">newStr</span> <span class="hljs-operator">=</span> myTrim(str);<br>System.out.println(<span class="hljs-string">&quot;---&quot;</span> + newStr + <span class="hljs-string">&quot;---&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>题目2：</strong>将一个字符串进行反转。将字符串中指定部分进行反转。比如“ab<code>cdef</code>g”反转为”ab<code>fedc</code>g”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 方式一：</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverse1</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<span class="hljs-comment">// start:2,end:5</span><br><span class="hljs-keyword">if</span> (str != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// 1.</span><br><span class="hljs-type">char</span>[] charArray = str.toCharArray();<br><span class="hljs-comment">// 2.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start, j = end; i &lt; j; i++, j--) &#123;<br><span class="hljs-type">char</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> charArray[i];<br>charArray[i] = charArray[j];<br>charArray[j] = temp;<br>&#125;<br><span class="hljs-comment">// 3.</span><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(charArray);<br><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>&#125;<br><br><span class="hljs-comment">// 方式二：</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverse2</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<br><span class="hljs-comment">// 1.</span><br><span class="hljs-type">String</span> <span class="hljs-variable">newStr</span> <span class="hljs-operator">=</span> str.substring(<span class="hljs-number">0</span>, start);<span class="hljs-comment">// ab</span><br><span class="hljs-comment">// 2.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> end; i &gt;= start; i--) &#123;<br>newStr += str.charAt(i);<br>&#125; <span class="hljs-comment">// abfedc</span><br><span class="hljs-comment">// 3.</span><br>newStr += str.substring(end + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">return</span> newStr;<br>&#125;<br><br><span class="hljs-comment">// 方式三：推荐 （相较于方式二做的改进）</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">reverse3</span><span class="hljs-params">(String str, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> &#123;<span class="hljs-comment">// ArrayList list = new ArrayList(80);</span><br><span class="hljs-comment">// 1.</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(str.length());<br><span class="hljs-comment">// 2.</span><br>s.append(str.substring(<span class="hljs-number">0</span>, start));<span class="hljs-comment">// ab</span><br><span class="hljs-comment">// 3.</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> end; i &gt;= start; i--) &#123;<br>s.append(str.charAt(i));<br>&#125;<br><br><span class="hljs-comment">// 4.</span><br>s.append(str.substring(end + <span class="hljs-number">1</span>));<br><br><span class="hljs-comment">// 5.</span><br><span class="hljs-keyword">return</span> s.toString();<br><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testReverse</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdefg&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> reverse3(str, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>);<br>System.out.println(str1);<span class="hljs-comment">// abfedcg</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>题目3：</strong>获取一个字符串在另一个字符串中出现的次数。<br>              比如：获取“ ab”在 “abkkcadkabkebfkabkskab” 中出现的次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第3题</span><br><span class="hljs-comment">// 判断str2在str1中出现的次数</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">(String mainStr, String subStr)</span> &#123;<br><span class="hljs-keyword">if</span> (mainStr.length() &gt;= subStr.length()) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">// while((index = mainStr.indexOf(subStr)) != -1)&#123;</span><br><span class="hljs-comment">// count++;</span><br><span class="hljs-comment">// mainStr = mainStr.substring(index + subStr.length());</span><br><span class="hljs-comment">// &#125;</span><br><span class="hljs-comment">// 改进：</span><br><span class="hljs-keyword">while</span> ((index = mainStr.indexOf(subStr, index)) != -<span class="hljs-number">1</span>) &#123;<br>index += subStr.length();<br>count++;<br>&#125;<br><br><span class="hljs-keyword">return</span> count;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetCount</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cdabkkcadkabkebfkabkskab&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ab&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> getCount(str1, str2);<br>System.out.println(count);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>题目4：</strong>获取两个字符串中最大相同子串。比如：<br>              str1 &#x3D; “abcwerthelloyuiodef“;str2 &#x3D; “cvhellobnm”<br>              提示：将短的那个串进行长度依次递减的子串与较长的串比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第4题</span><br><span class="hljs-comment">// 如果只存在一个最大长度的相同子串</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMaxSameSubString</span><span class="hljs-params">(String str1, String str2)</span> &#123;<br><span class="hljs-keyword">if</span> (str1 != <span class="hljs-literal">null</span> &amp;&amp; str2 != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">maxStr</span> <span class="hljs-operator">=</span> (str1.length() &gt; str2.length()) ? str1 : str2;<br><span class="hljs-type">String</span> <span class="hljs-variable">minStr</span> <span class="hljs-operator">=</span> (str1.length() &gt; str2.length()) ? str2 : str1;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> minStr.length();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<span class="hljs-comment">// 0 1 2 3 4 此层循环决定要去几个字符</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, y = len - i; y &lt;= len; x++, y++) &#123;<br><br><span class="hljs-keyword">if</span> (maxStr.contains(minStr.substring(x, y))) &#123;<br><br><span class="hljs-keyword">return</span> minStr.substring(x, y);<br>&#125;<br><br>&#125;<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><br><span class="hljs-comment">// 如果存在多个长度相同的最大相同子串</span><br><span class="hljs-comment">// 此时先返回String[]，后面可以用集合中的ArrayList替换，较方便</span><br><span class="hljs-keyword">public</span> String[] getMaxSameSubString1(String str1, String str2) &#123;<br><span class="hljs-keyword">if</span> (str1 != <span class="hljs-literal">null</span> &amp;&amp; str2 != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">maxString</span> <span class="hljs-operator">=</span> (str1.length() &gt; str2.length()) ? str1 : str2;<br><span class="hljs-type">String</span> <span class="hljs-variable">minString</span> <span class="hljs-operator">=</span> (str1.length() &gt; str2.length()) ? str2 : str1;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> minString.length();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, y = len - i; y &lt;= len; x++, y++) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">subString</span> <span class="hljs-operator">=</span> minString.substring(x, y);<br><span class="hljs-keyword">if</span> (maxString.contains(subString)) &#123;<br>sBuffer.append(subString + <span class="hljs-string">&quot;,&quot;</span>);<br>&#125;<br>&#125;<br>System.out.println(sBuffer);<br><span class="hljs-keyword">if</span> (sBuffer.length() != <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>String[] split = sBuffer.toString().replaceAll(<span class="hljs-string">&quot;,$&quot;</span>, <span class="hljs-string">&quot;&quot;</span>).split(<span class="hljs-string">&quot;\\,&quot;</span>);<br><span class="hljs-keyword">return</span> split;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br><span class="hljs-comment">// 如果存在多个长度相同的最大相同子串：使用ArrayList</span><br><span class="hljs-comment">//public List&lt;String&gt; getMaxSameSubString1(String str1, String str2) &#123;</span><br><span class="hljs-comment">//if (str1 != null &amp;&amp; str2 != null) &#123;</span><br><span class="hljs-comment">//List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="hljs-comment">//String maxString = (str1.length() &gt; str2.length()) ? str1 : str2;</span><br><span class="hljs-comment">//String minString = (str1.length() &gt; str2.length()) ? str2 : str1;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//int len = minString.length();</span><br><span class="hljs-comment">//for (int i = 0; i &lt; len; i++) &#123;</span><br><span class="hljs-comment">//for (int x = 0, y = len - i; y &lt;= len; x++, y++) &#123;</span><br><span class="hljs-comment">//String subString = minString.substring(x, y);</span><br><span class="hljs-comment">//if (maxString.contains(subString)) &#123;</span><br><span class="hljs-comment">//list.add(subString);</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//if (list.size() != 0) &#123;</span><br><span class="hljs-comment">//break;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//return list;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//return null;</span><br><span class="hljs-comment">//&#125;</span><br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetMaxSameSubString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcwerthelloyuiodef&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;cvhellobnmiodef&quot;</span>;<br>String[] strs = getMaxSameSubString1(str1, str2);<br>System.out.println(Arrays.toString(strs));<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>题目5：</strong>对字符串中字符进行自然顺序排序。<br>提示：<br>1）字符串变成字符数组。<br>2）对数组排序，选择，冒泡，Arrays.sort();<br>3）将排序后的数组变成字符串。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 第5题</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSort</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcwerthelloyuiodef&quot;</span>;<br><span class="hljs-type">char</span>[] arr = str.toCharArray();<br>Arrays.sort(arr);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">newStr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(arr);<br>System.out.println(newStr);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-字符串相关类之可变字符序列：StringBuffer、StringBuilder"><a href="#2-字符串相关类之可变字符序列：StringBuffer、StringBuilder" class="headerlink" title="2. 字符串相关类之可变字符序列：StringBuffer、StringBuilder"></a>2. 字符串相关类之可变字符序列：StringBuffer、StringBuilder</h2><p>因为String对象是不可变对象，虽然可以共享常量对象，但是对于频繁字符串的修改和拼接操作，效率极低，空间消耗也比较高。因此，JDK又在java.lang包提供了可变字符序列StringBuffer和StringBuilder类型。</p><h3 id="2-1-StringBuffer与StringBuilder的理解"><a href="#2-1-StringBuffer与StringBuilder的理解" class="headerlink" title="2.1 StringBuffer与StringBuilder的理解"></a>2.1 StringBuffer与StringBuilder的理解</h3><ul><li><p>java.lang.StringBuffer代表<code>可变的字符序列</code>，JDK1.0中声明，可以对字符串内容进行增删，此时不会产生新的对象。比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//情况1:</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;我喜欢学习&quot;</span>); <br><span class="hljs-comment">//情况2：</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;我喜欢学习&quot;</span>); <br>buffer.append(<span class="hljs-string">&quot;数学&quot;</span>); <br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120531_watermark.png" alt="image-20220405221714261"></p></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120694_watermark.png" alt="image-20220228153030902" style="zoom:80%;" /><ul><li>继承结构：</li></ul><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120847_watermark.png" alt="image-20220405174233055"></p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120745_watermark.png" alt="image-20220405174414780" style="zoom:67%;" /><ul><li>StringBuilder 和 StringBuffer 非常类似，均代表可变的字符序列，而且提供相关功能的方法也一样。</li><li>区分String、StringBuffer、StringBuilder<ul><li>String:不可变的字符序列； 底层使用char[]数组存储(JDK8.0中)</li><li>StringBuffer:可变的字符序列；线程安全（方法有synchronized修饰），效率低；底层使用char[]数组存储 (JDK8.0中)</li><li>StringBuilder:可变的字符序列； jdk1.5引入，线程不安全的，效率高；底层使用char[]数组存储(JDK8.0中)</li></ul></li></ul><h3 id="2-2-StringBuilder、StringBuffer的API"><a href="#2-2-StringBuilder、StringBuffer的API" class="headerlink" title="2.2 StringBuilder、StringBuffer的API"></a>2.2 StringBuilder、StringBuffer的API</h3><p>StringBuilder、StringBuffer的API是完全一致的，并且很多方法与String相同。</p><p><strong>1、常用API</strong></p><p>（1）StringBuffer append(xx)：提供了很多的append()方法，用于进行字符串追加的方式拼接<br>（2）StringBuffer delete(int start, int end)：删除[start,end)之间字符<br>（3）StringBuffer deleteCharAt(int index)：删除[index]位置字符<br>（4）StringBuffer replace(int start, int end, String str)：替换[start,end)范围的字符序列为str<br>（5）void setCharAt(int index, char c)：替换[index]位置字符<br>（6）char charAt(int index)：查找指定index位置上的字符<br>（7）StringBuffer insert(int index, xx)：在[index]位置插入xx<br>（8）int length()：返回存储的字符数据的长度<br>（9）StringBuffer reverse()：反转</p><blockquote><ul><li><p>当append和insert时，如果原来value数组长度不够，可扩容。</p></li><li><p>如上(1)(2)(3)(4)(9)这些方法支持<code>方法链操作</code>。原理：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120919_watermark.png" alt="image-20220405223542750"></p></li></ul></blockquote><p><strong>2、其它API</strong></p><p>（1）int indexOf(String str)：在当前字符序列中查询str的第一次出现下标<br>（2）int indexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的第一次出现下标<br>（3）int lastIndexOf(String str)：在当前字符序列中查询str的最后一次出现下标<br>（4）int lastIndexOf(String str, int fromIndex)：在当前字符序列[fromIndex,最后]中查询str的最后一次出现下标<br>（5）String substring(int start)：截取当前字符序列[start,最后]<br>（6）String substring(int start, int end)：截取当前字符序列[start,end)<br>（7）String toString()：返回此序列中数据的字符串表示形式<br>（8）void setLength(int newLength) ：设置当前字符序列长度为newLength</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>    s.append(<span class="hljs-string">&quot;hello&quot;</span>).append(<span class="hljs-literal">true</span>).append(<span class="hljs-string">&#x27;a&#x27;</span>).append(<span class="hljs-number">12</span>).append(<span class="hljs-string">&quot;atguigu&quot;</span>);<br>    System.out.println(s);<br>    System.out.println(s.length());<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.insert(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;java&quot;</span>);<br>    s.insert(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;chailinyan&quot;</span>);<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.delete(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>);<br>    s.deleteCharAt(<span class="hljs-number">4</span>);<br>    System.out.println(s);<br>&#125;<br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.reverse();<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.setCharAt(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;a&#x27;</span>);<br>    System.out.println(s);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;helloworld&quot;</span>);<br>    s.setLength(<span class="hljs-number">30</span>);<br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3-效率测试"><a href="#2-3-效率测试" class="headerlink" title="2.3 效率测试"></a>2.3 效率测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始设置</span><br><span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">endTime</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">buffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-comment">//开始对比</span><br>startTime = System.currentTimeMillis();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20000</span>; i++) &#123;<br>    buffer.append(String.valueOf(i));<br>&#125;<br>endTime = System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;StringBuffer的执行时间：&quot;</span> + (endTime - startTime));<br><br>startTime = System.currentTimeMillis();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20000</span>; i++) &#123;<br>    builder.append(String.valueOf(i));<br>&#125;<br>endTime = System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;StringBuilder的执行时间：&quot;</span> + (endTime - startTime));<br><br>startTime = System.currentTimeMillis();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20000</span>; i++) &#123;<br>    text = text + i;<br>&#125;<br>endTime = System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;String的执行时间：&quot;</span> + (endTime - startTime));<br><br></code></pre></td></tr></table></figure><h3 id="2-4-练习"><a href="#2-4-练习" class="headerlink" title="2.4 练习"></a>2.4 练习</h3><p>笔试题：程序输出：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>sb.append(str);<br><br>System.out.println(sb.length());<span class="hljs-comment">//</span><br><br>System.out.println(sb);<span class="hljs-comment">//</span><br><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(str);<br>System.out.println(sb1);<span class="hljs-comment">//</span><br><br></code></pre></td></tr></table></figure><h2 id="3-JDK8之前：日期时间API"><a href="#3-JDK8之前：日期时间API" class="headerlink" title="3. JDK8之前：日期时间API"></a>3. JDK8之前：日期时间API</h2><h3 id="3-1-java-lang-System类的方法"><a href="#3-1-java-lang-System类的方法" class="headerlink" title="3.1 java.lang.System类的方法"></a>3.1 java.lang.System类的方法</h3><ul><li><p>System类提供的public static long currentTimeMillis()：用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</p><ul><li>此方法适于计算时间差。</li></ul></li><li><p>计算世界时间的主要标准有：</p><ul><li>UTC(Coordinated Universal Time)</li><li>GMT(Greenwich Mean Time)</li><li>CST(Central Standard Time)</li></ul><blockquote><p>在国际无线电通信场合，为了统一起见，使用一个统一的时间，称为通用协调时(UTC, Universal Time Coordinated)。UTC与格林尼治平均时(GMT, Greenwich Mean Time)一样，都与英国伦敦的本地时相同。这里，UTC与GMT含义完全相同。</p></blockquote></li></ul><h3 id="3-2-java-util-Date"><a href="#3-2-java-util-Date" class="headerlink" title="3.2 java.util.Date"></a>3.2 java.util.Date</h3><p>表示特定的瞬间，精确到毫秒。</p><ul><li>构造器：<ul><li>Date()：使用无参构造器创建的对象可以获取本地当前时间。</li><li>Date(long 毫秒数)：把该毫秒值换算成日期时间对象</li></ul></li><li>常用方法<ul><li>getTime(): 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</li><li>toString(): 把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)，zzz是时间标准。</li><li>其它很多方法都过时了。</li></ul></li><li>举例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    System.out.println(d);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>    System.out.println(time);<span class="hljs-comment">//1559806982971</span><br>    <span class="hljs-comment">//当前系统时间距离1970-1-1 0:0:0 0毫秒的时间差，毫秒为单位</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> d.getTime();<br>    System.out.println(time);<span class="hljs-comment">//1559807047979</span><br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> <span class="hljs-number">1559807047979L</span>;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<br>    System.out.println(d);<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> Long.MAX_VALUE;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(time);<br>    System.out.println(d);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-java-text-SimpleDateFormat"><a href="#3-3-java-text-SimpleDateFormat" class="headerlink" title="3.3 java.text.SimpleDateFormat"></a>3.3 java.text.SimpleDateFormat</h3><ul><li>java.text.SimpleDateFormat类是一个不与语言环境有关的方式来格式化和解析日期的具体类。</li><li>可以进行格式化：日期 –&gt; 文本</li><li>可以进行解析：文本 –&gt; 日期</li><li><strong>构造器：</strong><ul><li>SimpleDateFormat() ：默认的模式和语言环境创建对象</li><li>public SimpleDateFormat(String pattern)：该构造方法可以用参数pattern指定的格式创建一个对象</li></ul></li><li><strong>格式化：</strong><ul><li>public String format(Date date)：方法格式化时间对象date</li></ul></li><li><strong>解析：</strong><ul><li>public Date parse(String source)：从给定字符串的开始解析文本，以生成一个日期。</li></ul></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120962_watermark.png" alt="1572599023197"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//格式化</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH时mm分ss秒 SSS毫秒  E Z&quot;</span>);<br>    <span class="hljs-comment">//把Date日期转成字符串，按照指定的格式转</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> sf.format(d);<br>    System.out.println(str);<br>&#125;<br><span class="hljs-comment">//解析</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;2022年06月06日 16时03分14秒 545毫秒  星期四 +0800&quot;</span>;<br>    <span class="hljs-type">SimpleDateFormat</span> <span class="hljs-variable">sf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年MM月dd日 HH时mm分ss秒 SSS毫秒  E Z&quot;</span>);<br>    <span class="hljs-type">Date</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> sf.parse(str);<br>    System.out.println(d);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-java-util-Calendar-日历"><a href="#3-4-java-util-Calendar-日历" class="headerlink" title="3.4 java.util.Calendar(日历)"></a>3.4 java.util.Calendar(日历)</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120047_watermark.png" alt="image-20220511105252261" style="zoom:67%;" /><ul><li><p>Date类的API大部分被废弃了，替换为Calendar。</p></li><li><p><code>Calendar</code> 类是一个抽象类，主用用于完成日期字段之间相互操作的功能。</p></li><li><p>获取Calendar实例的方法</p><ul><li><p>使用<code>Calendar.getInstance()</code>方法</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120308_watermark.png" alt="image-20220123184906903"></p></li><li><p>调用它的子类GregorianCalendar（公历）的构造器。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120357_watermark.png" alt="image-20220405225828816"></p></li></ul></li><li><p>一个Calendar的实例是系统时间的抽象表示，可以修改或获取 YEAR、MONTH、DAY_OF_WEEK、HOUR_OF_DAY 、MINUTE、SECOND等 <code>日历字段</code>对应的时间值。</p><ul><li>public int get(int field)：返回给定日历字段的值</li><li>public void set(int field,int value) ：将给定的日历字段设置为指定的值</li><li>public void add(int field,int amount)：根据日历的规则，为给定的日历字段添加或者减去指定的时间量</li><li>public final Date getTime()：将Calendar转成Date对象</li><li>public final void setTime(Date date)：使用指定的Date对象重置Calendar的时间</li></ul></li><li><p>常用字段</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120439_watermark.png" alt="1620277709044"></p></li><li><p>注意：</p><ul><li>获取月份时：一月是0，二月是1，以此类推，12月是11</li><li>获取星期时：周日是1，周二是2 ， 。。。。周六是7</li></ul></li><li><p>示例代码：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Calendar;<br><span class="hljs-keyword">import</span> java.util.TimeZone;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCalendar</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br>        System.out.println(c);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> c.get(Calendar.YEAR);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> c.get(Calendar.MONTH)+<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> c.get(Calendar.DATE);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> c.get(Calendar.HOUR_OF_DAY);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minute</span> <span class="hljs-operator">=</span> c.get(Calendar.MINUTE);<br><br>        System.out.println(year + <span class="hljs-string">&quot;-&quot;</span> + month + <span class="hljs-string">&quot;-&quot;</span> + day + <span class="hljs-string">&quot; &quot;</span> + hour + <span class="hljs-string">&quot;:&quot;</span> + minute);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">TimeZone</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> TimeZone.getTimeZone(<span class="hljs-string">&quot;America/Los_Angeles&quot;</span>);<br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Calendar.getInstance(t);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> c.get(Calendar.YEAR);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> c.get(Calendar.MONTH)+<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> c.get(Calendar.DATE);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> c.get(Calendar.HOUR_OF_DAY);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">minute</span> <span class="hljs-operator">=</span> c.get(Calendar.MINUTE);<br><br>        System.out.println(year + <span class="hljs-string">&quot;-&quot;</span> + month + <span class="hljs-string">&quot;-&quot;</span> + day + <span class="hljs-string">&quot; &quot;</span> + hour + <span class="hljs-string">&quot;:&quot;</span> + minute);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Calendar</span> <span class="hljs-variable">calendar</span> <span class="hljs-operator">=</span> Calendar.getInstance();<br><span class="hljs-comment">// 从一个 Calendar 对象中获取 Date 对象</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> calendar.getTime();<br>        <br><span class="hljs-comment">// 使用给定的 Date 设置此 Calendar 的时间</span><br>date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(<span class="hljs-number">234234235235L</span>);<br>calendar.setTime(date);<br>calendar.set(Calendar.DAY_OF_MONTH, <span class="hljs-number">8</span>);<br>System.out.println(<span class="hljs-string">&quot;当前时间日设置为8后,时间是:&quot;</span> + calendar.getTime());<br>        <br>calendar.add(Calendar.HOUR, <span class="hljs-number">2</span>);<br>System.out.println(<span class="hljs-string">&quot;当前时间加2小时后,时间是:&quot;</span> + calendar.getTime());<br>        <br>calendar.add(Calendar.MONTH, -<span class="hljs-number">2</span>);<br>System.out.println(<span class="hljs-string">&quot;当前日期减2个月后,时间是:&quot;</span> + calendar.getTime());  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-练习"><a href="#3-5-练习" class="headerlink" title="3.5 练习"></a>3.5 练习</h3><p>输入年份和月份，输出该月日历。</p><p>闰年计算公式：年份可以被4整除但不能被100整除，或者可以被400整除。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120510_watermark.png" alt="image-20220503120722810" style="zoom:67%;" /><h2 id="4-JDK8：新的日期时间API"><a href="#4-JDK8：新的日期时间API" class="headerlink" title="4. JDK8：新的日期时间API"></a>4. JDK8：新的日期时间API</h2><p>如果我们可以跟别人说：“我们在1502643933071见面，别晚了！”那么就再简单不过了。但是我们希望时间与昼夜和四季有关，于是事情就变复杂了。JDK 1.0中包含了一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：</p><ul><li><p>可变性：像日期和时间这样的类应该是不可变的。</p></li><li><p>偏移性：Date中的年份是从1900开始的，而月份都从0开始。</p></li><li><p>格式化：格式化只对Date有用，Calendar则不行。</p></li><li><p>此外，它们也不是线程安全的；不能处理闰秒等。</p><blockquote><p>闰秒，是指为保持协调世界时接近于世界时时刻，由国际计量局统一规定在年底或年中（也可能在季末）对协调世界时增加或减少1秒的调整。由于地球自转的不均匀性和长期变慢性（主要由潮汐摩擦引起的），会使世界时（民用时）和原子时之间相差超过到±0.9秒时，就把协调世界时向前拨1秒（负闰秒，最后一分钟为59秒）或向后拨1秒（正闰秒，最后一分钟为61秒）； 闰秒一般加在公历年末或公历六月末。</p><p>目前，全球已经进行了27次闰秒，均为正闰秒。</p></blockquote></li></ul><p>总结：<code>对日期和时间的操作一直是Java程序员最痛苦的地方之一</code>。</p><p>第三次引入的API是成功的，并且Java 8中引入的java.time API 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。</p><p>Java 8 以一个新的开始为 Java 创建优秀的 API。新的日期时间API包含：</p><ul><li><code>java.time</code> – 包含值对象的基础包</li><li><code>java.time.chrono</code> – 提供对不同的日历系统的访问。</li><li><code>java.time.format</code> – 格式化和解析时间和日期</li><li><code>java.time.temporal</code> – 包括底层框架和扩展特性</li><li><code>java.time.zone</code> – 包含时区支持的类</li></ul><p>说明：新的 java.time 中包含了所有关于时钟（Clock），本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。</p><p>尽管有68个新的公开类型，但是大多数开发者只会用到基础包和format包，大概占总数的三分之一。</p><h3 id="4-1-本地日期时间：LocalDate、LocalTime、LocalDateTime"><a href="#4-1-本地日期时间：LocalDate、LocalTime、LocalDateTime" class="headerlink" title="4.1 本地日期时间：LocalDate、LocalTime、LocalDateTime"></a>4.1 本地日期时间：LocalDate、LocalTime、LocalDateTime</h3><table><thead><tr><th>方法</th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>now() </code>&#x2F; now(ZoneId zone)</td><td>静态方法，根据当前时间创建对象&#x2F;指定时区的对象</td></tr><tr><td><code>of(xx,xx,xx,xx,xx,xxx)</code></td><td>静态方法，根据指定日期&#x2F;时间创建对象</td></tr><tr><td>getDayOfMonth()&#x2F;getDayOfYear()</td><td>获得月份天数(1-31) &#x2F;获得年份天数(1-366)</td></tr><tr><td>getDayOfWeek()</td><td>获得星期几(返回一个 DayOfWeek 枚举值)</td></tr><tr><td>getMonth()</td><td>获得月份, 返回一个 Month 枚举值</td></tr><tr><td>getMonthValue() &#x2F; getYear()</td><td>获得月份(1-12) &#x2F;获得年份</td></tr><tr><td>getHours()&#x2F;getMinute()&#x2F;getSecond()</td><td>获得当前对象对应的小时、分钟、秒</td></tr><tr><td>withDayOfMonth()&#x2F;withDayOfYear()&#x2F;withMonth()&#x2F;withYear()</td><td>将月份天数、年份天数、月份、年份修改为指定的值并返回新的对象</td></tr><tr><td>with(TemporalAdjuster  t)</td><td>将当前日期时间设置为校对器指定的日期时间</td></tr><tr><td>plusDays(), plusWeeks(), plusMonths(), plusYears(),plusHours()</td><td>向当前对象添加几天、几周、几个月、几年、几小时</td></tr><tr><td>minusMonths() &#x2F; minusWeeks()&#x2F;minusDays()&#x2F;minusYears()&#x2F;minusHours()</td><td>从当前对象减去几月、几周、几天、几年、几小时</td></tr><tr><td>plus(TemporalAmount t)&#x2F;minus(TemporalAmount t)</td><td>添加或减少一个 Duration 或 Period</td></tr><tr><td>isBefore()&#x2F;isAfter()</td><td>比较两个 LocalDate</td></tr><tr><td>isLeapYear()</td><td>判断是否是闰年（在LocalDate类中声明）</td></tr><tr><td>format(DateTimeFormatter  t)</td><td>格式化本地日期、时间，返回一个字符串</td></tr><tr><td>parse(Charsequence text)</td><td>将指定格式的字符串解析为日期、时间</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.LocalTime;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLocalDateTime</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        System.out.println(now);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">LocalTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalTime.now();<br>        System.out.println(now);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        System.out.println(now);<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">lai</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2019</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>);<br>        System.out.println(lai);<br>    &#125;<br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test05</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">lai</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2019</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>);<br>        System.out.println(lai.getDayOfYear());<br>    &#125;<br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test06</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">lai</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2019</span>, <span class="hljs-number">5</span>, <span class="hljs-number">13</span>);<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">go</span> <span class="hljs-operator">=</span> lai.plusDays(<span class="hljs-number">160</span>);<br>        System.out.println(go);<span class="hljs-comment">//2019-10-20</span><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">before</span> <span class="hljs-operator">=</span> now.minusDays(<span class="hljs-number">100</span>);<br>        System.out.println(before);<span class="hljs-comment">//2019-02-26</span><br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-瞬时：Instant"><a href="#4-2-瞬时：Instant" class="headerlink" title="4.2 瞬时：Instant"></a>4.2 瞬时：Instant</h3><ul><li>Instant：时间线上的一个瞬时点。 这可能被用来记录应用程序中的事件时间戳。<ul><li>时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。</li></ul></li><li><code>java.time.Instant</code>表示时间线上的一点，而不需要任何上下文信息，例如，时区。概念上讲，<code>它只是简单的表示自1970年1月1日0时0分0秒（UTC）开始的秒数。</code></li></ul><table><thead><tr><th><strong>方法</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><code>now()</code></td><td>静态方法，返回默认UTC时区的Instant类的对象</td></tr><tr><td><code>ofEpochMilli(long epochMilli)</code></td><td>静态方法，返回在1970-01-01 00:00:00基础上加上指定毫秒数之后的Instant类的对象</td></tr><tr><td>atOffset(ZoneOffset offset)</td><td>结合即时的偏移来创建一个 OffsetDateTime</td></tr><tr><td><code>toEpochMilli()</code></td><td>返回1970-01-01 00:00:00到当前时间的毫秒数，即为时间戳</td></tr></tbody></table><blockquote><p>中国大陆、中国香港、中国澳门、中国台湾、蒙古国、新加坡、马来西亚、菲律宾、西澳大利亚州的时间与UTC的时差均为+8，也就是UTC+8。</p><p>instant.atOffset(ZoneOffset.ofHours(8));</p></blockquote><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120591_watermark.png" alt="image-20220406000442908"></p><blockquote><p>整个地球分为二十四时区，每个时区都有自己的本地时间。北京时区是东八区，领先UTC八个小时，在电子邮件信头的Date域记为+0800。如果在电子邮件的信头中有这么一行： </p><p>Date: Fri, 08 Nov 2002 09:42:22 +0800 </p><p>说明信件的发送地的地方时间是二○○二年十一月八号，星期五，早上九点四十二分（二十二秒），这个地方的本地时领先UTC八个小时(+0800， 就是东八区时间)。电子邮件信头的Date域使用二十四小时的时钟，而不使用AM和PM来标记上下午。 </p></blockquote><h3 id="4-3-日期时间格式化：DateTimeFormatter"><a href="#4-3-日期时间格式化：DateTimeFormatter" class="headerlink" title="4.3 日期时间格式化：DateTimeFormatter"></a>4.3 日期时间格式化：DateTimeFormatter</h3><p>该类提供了三种格式化方法：</p><ul><li><p>(了解)预定义的标准格式。如：ISO_LOCAL_DATE_TIME、ISO_LOCAL_DATE、ISO_LOCAL_TIME</p></li><li><p>(了解)本地化相关的格式。如：ofLocalizedDate(FormatStyle.LONG)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 本地化相关的格式。如：ofLocalizedDateTime()</span><br><span class="hljs-comment">// FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span><br><br><span class="hljs-comment">// 本地化相关的格式。如：ofLocalizedDate()</span><br><span class="hljs-comment">// FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span><br></code></pre></td></tr></table></figure></li><li><p>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</p></li></ul><table><thead><tr><th><strong>方</strong>   <strong>法</strong></th><th><strong>描</strong>   <strong>述</strong></th></tr></thead><tbody><tr><td><strong>ofPattern(String</strong>  <strong>pattern)</strong></td><td>静态方法，返回一个指定字符串格式的DateTimeFormatter</td></tr><tr><td><strong>format(TemporalAccessor</strong> <strong>t)</strong></td><td>格式化一个日期、时间，返回字符串</td></tr><tr><td><strong>parse(CharSequence</strong>  <strong>text)</strong></td><td>将指定格式的字符序列解析为一个日期、时间</td></tr></tbody></table><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.ZoneId;<br><span class="hljs-keyword">import</span> java.time.format.DateTimeFormatter;<br><span class="hljs-keyword">import</span> java.time.format.FormatStyle;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDatetimeFormatter</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">// 方式一：预定义的标准格式。如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span><br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">formatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ISO_LOCAL_DATE_TIME;<br>        <span class="hljs-comment">// 格式化:日期--&gt;字符串</span><br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> formatter.format(localDateTime);<br>        System.out.println(localDateTime);<br>        System.out.println(str1);<span class="hljs-comment">//2022-12-04T21:02:14.808</span><br><br>        <span class="hljs-comment">// 解析：字符串 --&gt;日期</span><br>        <span class="hljs-type">TemporalAccessor</span> <span class="hljs-variable">parse</span> <span class="hljs-operator">=</span> formatter.parse(<span class="hljs-string">&quot;2022-12-04T21:02:14.808&quot;</span>);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">dateTime</span> <span class="hljs-operator">=</span> LocalDateTime.from(parse);<br>        System.out.println(dateTime);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-comment">// 方式二：</span><br>        <span class="hljs-comment">// 本地化相关的格式。如：ofLocalizedDateTime()</span><br>        <span class="hljs-comment">// FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span><br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">formatter1</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);<br>        <br>        <span class="hljs-comment">// 格式化</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> formatter1.format(localDateTime);<br>        System.out.println(str2);<span class="hljs-comment">// 2022年12月4日 下午09时03分55秒</span><br><br>        <span class="hljs-comment">// 本地化相关的格式。如：ofLocalizedDate()</span><br>        <span class="hljs-comment">// FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span><br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">formatter2</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL);<br>        <span class="hljs-comment">// 格式化</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> formatter2.format(LocalDate.now());<br>        System.out.println(str3);<span class="hljs-comment">// 2022年12月4日 星期日</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//方式三：自定义的方式（关注、重点）</span><br>        <span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">dateTimeFormatter</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);<br>        <span class="hljs-comment">//格式化</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">strDateTime</span> <span class="hljs-operator">=</span> dateTimeFormatter.format(LocalDateTime.now());<br>        System.out.println(strDateTime); <span class="hljs-comment">//2022/12/04 21:05:42</span><br>        <span class="hljs-comment">//解析</span><br>        <span class="hljs-type">TemporalAccessor</span> <span class="hljs-variable">accessor</span> <span class="hljs-operator">=</span> dateTimeFormatter.parse(<span class="hljs-string">&quot;2022/12/04 21:05:42&quot;</span>);<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.from(accessor);<br>        System.out.println(localDateTime); <span class="hljs-comment">//2022-12-04T21:05:42</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-其它API"><a href="#4-4-其它API" class="headerlink" title="4.4 其它API"></a>4.4 其它API</h3><p><strong>1、指定时区日期时间：ZondId和ZonedDateTime</strong></p><ul><li><p>ZoneId：该类中包含了所有的时区信息，一个时区的ID，如 Europe&#x2F;Paris</p></li><li><p>ZonedDateTime：一个在ISO-8601日历系统时区的日期时间，如 2007-12-03T10:15:30+01:00 Europe&#x2F;Paris。</p><ul><li>其中每个时区都对应着ID，地区ID都为“{区域}&#x2F;{城市}”的格式，例如：Asia&#x2F;Shanghai等</li></ul></li><li><p>常见时区ID：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Asia/Shanghai<br>UTC<br>America/New_York<br></code></pre></td></tr></table></figure><ul><li>可以通过ZondId获取所有可用的时区ID：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.time.ZoneId;<br><span class="hljs-keyword">import</span> java.time.ZonedDateTime;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestZone</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//需要知道一些时区的id</span><br>        <span class="hljs-comment">//Set&lt;String&gt;是一个集合，容器</span><br>        Set&lt;String&gt; availableZoneIds = ZoneId.getAvailableZoneIds();<br>        <span class="hljs-comment">//快捷模板iter</span><br>        <span class="hljs-keyword">for</span> (String availableZoneId : availableZoneIds) &#123;<br>            System.out.println(availableZoneId);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> ZonedDateTime.now();<br>        System.out.println(t1);<br><br>        <span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> ZonedDateTime.now(ZoneId.of(<span class="hljs-string">&quot;America/New_York&quot;</span>));<br>        System.out.println(t2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>2、持续日期&#x2F;时间：Period和Duration</strong></p><ul><li>持续时间：Duration，用于计算两个“时间”间隔</li><li>日期间隔：Period，用于计算两个“日期”间隔</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.time.Duration;<br><span class="hljs-keyword">import</span> java.time.LocalDate;<br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.time.Period;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPeriodDuration</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> LocalDate.now();<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2018</span>, <span class="hljs-number">12</span>, <span class="hljs-number">31</span>);<br>        <span class="hljs-type">Period</span> <span class="hljs-variable">between</span> <span class="hljs-operator">=</span> Period.between(t1, t2);<br>        System.out.println(between);<br><br>        System.out.println(<span class="hljs-string">&quot;相差的年数：&quot;</span>+between.getYears());<br>        System.out.println(<span class="hljs-string">&quot;相差的月数：&quot;</span>+between.getMonths());<br>        System.out.println(<span class="hljs-string">&quot;相差的天数：&quot;</span>+between.getDays());<br>        System.out.println(<span class="hljs-string">&quot;相差的总数：&quot;</span>+between.toTotalMonths());<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br>        <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2017</span>, <span class="hljs-number">8</span>, <span class="hljs-number">29</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">Duration</span> <span class="hljs-variable">between</span> <span class="hljs-operator">=</span> Duration.between(t1, t2);<br>        System.out.println(between);<br><br>        System.out.println(<span class="hljs-string">&quot;相差的总天数：&quot;</span>+between.toDays());<br>        System.out.println(<span class="hljs-string">&quot;相差的总小时数：&quot;</span>+between.toHours());<br>        System.out.println(<span class="hljs-string">&quot;相差的总分钟数：&quot;</span>+between.toMinutes());<br>        System.out.println(<span class="hljs-string">&quot;相差的总秒数：&quot;</span>+between.getSeconds());<br>        System.out.println(<span class="hljs-string">&quot;相差的总毫秒数：&quot;</span>+between.toMillis());<br>        System.out.println(<span class="hljs-string">&quot;相差的总纳秒数：&quot;</span>+between.toNanos());<br>        System.out.println(<span class="hljs-string">&quot;不够一秒的纳秒数：&quot;</span>+between.getNano());<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//Duration:用于计算两个“时间”间隔，以秒和纳秒为基准</span><br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">localTime</span> <span class="hljs-operator">=</span> LocalTime.now();<br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">localTime1</span> <span class="hljs-operator">=</span> LocalTime.of(<span class="hljs-number">15</span>, <span class="hljs-number">23</span>, <span class="hljs-number">32</span>);<br><span class="hljs-comment">//between():静态方法，返回Duration对象，表示两个时间的间隔</span><br><span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(localTime1, localTime);<br>System.out.println(duration);<br><br>System.out.println(duration.getSeconds());<br>System.out.println(duration.getNano());<br><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2016</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">23</span>, <span class="hljs-number">32</span>);<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime1</span> <span class="hljs-operator">=</span> LocalDateTime.of(<span class="hljs-number">2017</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">15</span>, <span class="hljs-number">23</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-type">Duration</span> <span class="hljs-variable">duration1</span> <span class="hljs-operator">=</span> Duration.between(localDateTime1, localDateTime);<br>System.out.println(duration1.toDays());<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//Period:用于计算两个“日期”间隔，以年、月、日衡量</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> LocalDate.now();<br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate1</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2028</span>, <span class="hljs-number">3</span>, <span class="hljs-number">18</span>);<br><br><span class="hljs-type">Period</span> <span class="hljs-variable">period</span> <span class="hljs-operator">=</span> Period.between(localDate, localDate1);<br>System.out.println(period);<br><br>System.out.println(period.getYears());<br>System.out.println(period.getMonths());<br>System.out.println(period.getDays());<br><br><span class="hljs-type">Period</span> <span class="hljs-variable">period1</span> <span class="hljs-operator">=</span> period.withYears(<span class="hljs-number">2</span>);<br>System.out.println(period1);<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3、Clock：使用时区提供对当前即时、日期和时间的访问的时钟。</p><p>4、</p><p>TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整到“下一个工作日”等操作。<br>TemporalAdjusters : 该类通过静态方法(firstDayOfXxx()&#x2F;lastDayOfXxx()&#x2F;nextXxx())提供了大量的常用 TemporalAdjuster 的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">// TemporalAdjuster:时间校正器</span><br><span class="hljs-comment">// 获取当前日期的下一个周日是哪天？</span><br><span class="hljs-type">TemporalAdjuster</span> <span class="hljs-variable">temporalAdjuster</span> <span class="hljs-operator">=</span> TemporalAdjusters.next(DayOfWeek.SUNDAY);<br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now().with(temporalAdjuster);<br>System.out.println(localDateTime);<br><span class="hljs-comment">// 获取下一个工作日是哪天？</span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> LocalDate.now().with(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TemporalAdjuster</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Temporal <span class="hljs-title function_">adjustInto</span><span class="hljs-params">(Temporal temporal)</span> &#123;<br>        <span class="hljs-type">LocalDate</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> (LocalDate) temporal;<br>       <span class="hljs-keyword">if</span> (date.getDayOfWeek().equals(DayOfWeek.FRIDAY)) &#123;<br>           <span class="hljs-keyword">return</span> date.plusDays(<span class="hljs-number">3</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (date.getDayOfWeek().equals(DayOfWeek.SATURDAY)) &#123;<br>            <span class="hljs-keyword">return</span> date.plusDays(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> date.plusDays(<span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;);<br>System.out.println(<span class="hljs-string">&quot;下一个工作日是：&quot;</span> + localDate);<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-与传统日期处理的转换"><a href="#4-5-与传统日期处理的转换" class="headerlink" title="4.5 与传统日期处理的转换"></a>4.5 与传统日期处理的转换</h3><table><thead><tr><th><strong>类</strong></th><th><strong>To</strong> <strong>遗留类</strong></th><th><strong>From</strong> <strong>遗留类</strong></th></tr></thead><tbody><tr><td><strong>java.time.Instant与java.util.Date</strong></td><td>Date.from(instant)</td><td>date.toInstant()</td></tr><tr><td><strong>java.time.Instant与java.sql.Timestamp</strong></td><td>Timestamp.from(instant)</td><td>timestamp.toInstant()</td></tr><tr><td><strong>java.time.ZonedDateTime与java.util.GregorianCalendar</strong></td><td>GregorianCalendar.from(zonedDateTime)</td><td>cal.toZonedDateTime()</td></tr><tr><td><strong>java.time.LocalDate与java.sql.Time</strong></td><td>Date.valueOf(localDate)</td><td>date.toLocalDate()</td></tr><tr><td><strong>java.time.LocalTime与java.sql.Time</strong></td><td>Date.valueOf(localDate)</td><td>date.toLocalTime()</td></tr><tr><td><strong>java.time.LocalDateTime与java.sql.Timestamp</strong></td><td>Timestamp.valueOf(localDateTime)</td><td>timestamp.toLocalDateTime()</td></tr><tr><td><strong>java.time.ZoneId与java.util.TimeZone</strong></td><td>Timezone.getTimeZone(id)</td><td>timeZone.toZoneId()</td></tr><tr><td><strong>java.time.format.DateTimeFormatter与java.text.DateFormat</strong></td><td>formatter.toFormat()</td><td>无</td></tr></tbody></table><h2 id="5-Java比较器"><a href="#5-Java比较器" class="headerlink" title="5. Java比较器"></a>5. Java比较器</h2><p>我们知道基本数据类型的数据（除boolean类型外）需要比较大小的话，之间使用比较运算符即可，但是引用数据类型是不能直接使用比较运算符来比较大小的。那么，如何解决这个问题呢？</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120371_watermark.png" alt="image-20220406001726285"></p><ul><li><p>在Java中经常会涉及到对象数组的排序问题，那么就涉及到对象之间的比较问题。</p></li><li><p>Java实现对象排序的方式有两种：</p><ul><li>自然排序：java.lang.Comparable</li><li>定制排序：java.util.Comparator</li></ul></li></ul><h3 id="5-1-自然排序：java-lang-Comparable"><a href="#5-1-自然排序：java-lang-Comparable" class="headerlink" title="5.1 自然排序：java.lang.Comparable"></a>5.1 自然排序：java.lang.Comparable</h3><ul><li>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序。</li><li>实现 Comparable 的类必须实现 <code>compareTo(Object obj) </code>方法，两个对象即通过 compareTo(Object obj) 方法的返回值来比较大小。如果当前对象this大于形参对象obj，则返回正整数，如果当前对象this小于形参对象obj，则返回负整数，如果当前对象this等于形参对象obj，则返回零。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparable</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object obj)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>实现Comparable接口的对象列表（和数组）可以通过 Collections.sort 或 Arrays.sort进行自动排序。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p></li><li><p>对于类 C 的每一个 e1 和 e2 来说，当且仅当 e1.compareTo(e2) &#x3D;&#x3D; 0 与 e1.equals(e2) 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals 一致。建议（虽然不是必需的）<code>最好使自然排序与 equals 一致</code>。</p></li><li><p>Comparable 的典型实现：(<code>默认都是从小到大排列的</code>)</p><ul><li>String：按照字符串中字符的Unicode值进行比较</li><li>Character：按照字符的Unicode值来进行比较</li><li>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较</li><li>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</li><li>Date、Time等：后面的日期时间比前面的日期时间大</li></ul></li><li><p>代码示例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.api;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> score;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, <span class="hljs-type">int</span> score, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.score = score;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">int</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, score=&quot;</span> + score +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-comment">//这些需要强制，将o对象向下转型为Student类型的变量，才能调用Student类中的属性</span><br>        <span class="hljs-comment">//默认按照学号比较大小</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> (Student) o;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id - stu.id;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.api;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Student[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">5</span>];<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">90</span>,<span class="hljs-number">23</span>);<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;熊大&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-number">22</span>);<br>        arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">5</span>,<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">75</span>,<span class="hljs-number">25</span>);<br>        arr[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">85</span>,<span class="hljs-number">24</span>);<br>        arr[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;熊二&quot;</span>,<span class="hljs-number">85</span>,<span class="hljs-number">18</span>);<br><br>        <span class="hljs-comment">//单独比较两个对象</span><br>        System.out.println(arr[<span class="hljs-number">0</span>].compareTo(arr[<span class="hljs-number">1</span>]));<br>        System.out.println(arr[<span class="hljs-number">1</span>].compareTo(arr[<span class="hljs-number">2</span>]));<br>        System.out.println(arr[<span class="hljs-number">2</span>].compareTo(arr[<span class="hljs-number">2</span>]));<br><br>        System.out.println(<span class="hljs-string">&quot;所有学生：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;按照学号排序：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length-i; j++) &#123;<br>                <span class="hljs-keyword">if</span>(arr[j].compareTo(arr[j+<span class="hljs-number">1</span>])&gt;<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-type">Student</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                    arr[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>再举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> score;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">int</span> score)</span> &#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, score=&quot;</span> + score +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.score - ((Student)o).score;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">3</span>];<br>students[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">96</span>);<br>students[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">85</span>);<br>students[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">98</span>);<br><br>System.out.println(Arrays.toString(students));<br>Arrays.sort(students);<br>System.out.println(Arrays.toString(students));<br>&#125;<br></code></pre></td></tr></table></figure><p>再举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Goods</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br><br>    <span class="hljs-comment">//按照价格，比较商品的大小</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span> &#123;<br>        <span class="hljs-keyword">if</span>(o <span class="hljs-keyword">instanceof</span> Goods) &#123;<br>            <span class="hljs-type">Goods</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (Goods) o;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.price &gt; other.price) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.price &lt; other.price) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;输入的数据类型不一致&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//构造器、getter、setter、toString()方法略</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComparableTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        Goods[] all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>[<span class="hljs-number">4</span>];<br>        all[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;《红楼梦》&quot;</span>, <span class="hljs-number">100</span>);<br>        all[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;《西游记》&quot;</span>, <span class="hljs-number">80</span>);<br>        all[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;《三国演义》&quot;</span>, <span class="hljs-number">140</span>);<br>        all[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;《水浒传》&quot;</span>, <span class="hljs-number">120</span>);<br><br>        Arrays.sort(all);<br><br>        System.out.println(Arrays.toString(all));<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-2-定制排序：java-util-Comparator"><a href="#5-2-定制排序：java-util-Comparator" class="headerlink" title="5.2 定制排序：java.util.Comparator"></a>5.2 定制排序：java.util.Comparator</h3><ul><li>思考<ul><li>当元素的类型没有实现java.lang.Comparable接口而又不方便修改代码（例如：一些第三方的类，你只有.class文件，没有源文件）</li><li>如果一个类，实现了Comparable接口，也指定了两个对象的比较大小的规则，但是此时此刻我不想按照它预定义的方法比较大小，但是我又不能随意修改，因为会影响其他地方的使用，怎么办？</li></ul></li><li>JDK在设计类库之初，也考虑到这种情况，所以又增加了一个java.util.Comparator接口。强行对多个对象进行整体排序的比较。<ul><li>重写compare(Object o1,Object o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</li><li>可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.util;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Comparator</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1,Object o2)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.api;<br><br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-comment">//定义定制比较器类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentScoreComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparator</span> &#123; <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> (Student) o1;<br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> (Student) o2;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> s1.getScore() - s2.getScore();<br>        <span class="hljs-keyword">return</span> result != <span class="hljs-number">0</span> ? result : s1.getId() - s2.getId();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.api;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Student[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">5</span>];<br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">90</span>, <span class="hljs-number">23</span>);<br>        arr[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;熊大&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">22</span>);<br>        arr[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">75</span>, <span class="hljs-number">25</span>);<br>        arr[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">85</span>, <span class="hljs-number">24</span>);<br>        arr[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;熊二&quot;</span>, <span class="hljs-number">85</span>, <span class="hljs-number">18</span>);<br><br><br>        System.out.println(<span class="hljs-string">&quot;所有学生：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;按照成绩排序&quot;</span>);<br>        <span class="hljs-type">StudentScoreComparator</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentScoreComparator</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - i; j++) &#123;<br>                <span class="hljs-keyword">if</span> (sc.compare(arr[j], arr[j + <span class="hljs-number">1</span>]) &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">Student</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>    Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">5</span>];<br>    students[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-number">90</span>, <span class="hljs-number">23</span>);<br>    students[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;熊大&quot;</span>, <span class="hljs-number">100</span>, <span class="hljs-number">22</span>);<br>    students[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-number">75</span>, <span class="hljs-number">25</span>);<br>    students[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-number">85</span>, <span class="hljs-number">24</span>);<br>    students[<span class="hljs-number">4</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;熊二&quot;</span>, <span class="hljs-number">85</span>, <span class="hljs-number">18</span>);<br><br>    System.out.println(Arrays.toString(students));<br>    <span class="hljs-comment">//定制排序</span><br>    <span class="hljs-type">StudentScoreComparator</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StudentScoreComparator</span>();<br>    Arrays.sort(students, sc);<br>    System.out.println(<span class="hljs-string">&quot;排序之后：&quot;</span>);<br>    System.out.println(Arrays.toString(students));<br>&#125;<br></code></pre></td></tr></table></figure><p>再举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">Goods[] all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>[<span class="hljs-number">4</span>];<br>all[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;War and Peace&quot;</span>, <span class="hljs-number">100</span>);<br>all[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;Childhood&quot;</span>, <span class="hljs-number">80</span>);<br>all[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;Scarlet and Black&quot;</span>, <span class="hljs-number">140</span>);<br>all[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Goods</span>(<span class="hljs-string">&quot;Notre Dame de Paris&quot;</span>, <span class="hljs-number">120</span>);<br><br>Arrays.sort(all, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1, Object o2)</span> &#123;<br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">g1</span> <span class="hljs-operator">=</span> (Goods) o1;<br>        <span class="hljs-type">Goods</span> <span class="hljs-variable">g2</span> <span class="hljs-operator">=</span> (Goods) o2;<br><br>        <span class="hljs-keyword">return</span> g1.getName().compareTo(g2.getName());<br>    &#125;<br>&#125;);<br><br>System.out.println(Arrays.toString(all));<br><br></code></pre></td></tr></table></figure><h2 id="6-系统相关类"><a href="#6-系统相关类" class="headerlink" title="6. 系统相关类"></a>6. 系统相关类</h2><h3 id="6-1-java-lang-System类"><a href="#6-1-java-lang-System类" class="headerlink" title="6.1 java.lang.System类"></a>6.1 java.lang.System类</h3><ul><li><p>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于<code>java.lang包</code>。</p></li><li><p>由于该类的构造器是private的，所以无法创建该类的对象。其内部的成员变量和成员方法都是<code>static的</code>，所以也可以很方便的进行调用。</p></li><li><p>成员变量   Scanner scan &#x3D; new Scanner(System.in);</p><ul><li>System类内部包含<code>in</code>、<code>out</code>和<code>err</code>三个成员变量，分别代表标准输入流(键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。</li></ul></li><li><p>成员方法</p><ul><li><p><code>native long currentTimeMillis()</code>：<br>该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。</p></li><li><p><code>void exit(int status)</code>：<br>该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表异常退出。使用该方法可以在图形界面编程中实现程序的退出功能等。</p></li><li><p><code>void gc()</code>：<br>该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则取决于系统中垃圾回收算法的实现以及系统执行时的情况。</p></li><li><p><code>String getProperty(String key)</code>：<br>该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见的属性名以及属性的作用如下表所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8C%E5%9F%BA%E7%A1%80API/202403261120036_watermark.png" alt="image-20220406003340258"></p></li></ul></li><li><p>举例</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSystem</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;现在的系统时间距离1970年1月1日凌晨：&quot;</span> + time + <span class="hljs-string">&quot;毫秒&quot;</span>);<br><br>        System.exit(<span class="hljs-number">0</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;over&quot;</span>);<span class="hljs-comment">//不会执行</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">javaVersion</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;java.version&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;java的version:&quot;</span> + javaVersion);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">javaHome</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;java.home&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;java的home:&quot;</span> + javaHome);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">osName</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.name&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;os的name:&quot;</span> + osName);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">osVersion</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;os.version&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;os的version:&quot;</span> + osVersion);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.name&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;user的name:&quot;</span> + userName);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">userHome</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.home&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;user的home:&quot;</span> + userHome);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">userDir</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;user的dir:&quot;</span> + userDir);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i &lt;=<span class="hljs-number">10</span>; i++)&#123;<br>            <span class="hljs-type">MyDemo</span> <span class="hljs-variable">my</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDemo</span>(i);<br>            <span class="hljs-comment">//每一次循环my就会指向新的对象，那么上次的对象就没有变量引用它了，就成垃圾对象</span><br>        &#125;<br><br>        <span class="hljs-comment">//为了看到垃圾回收器工作，我要加下面的代码，让main方法不那么快结束，因为main结束就会导致JVM退出，GC也会跟着结束。</span><br>        System.gc();<span class="hljs-comment">//如果不调用这句代码，GC可能不工作，因为当前内存很充足，GC就觉得不着急回收垃圾对象。</span><br>        <span class="hljs-comment">//调用这句代码，会让GC尽快来工作。</span><br>        Thread.sleep(<span class="hljs-number">5000</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDemo</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDemo</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyDemo&#123;&quot;</span> + <span class="hljs-string">&quot;value=&quot;</span> + value + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">//重写finalize方法，让大家看一下它的调用效果</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br><span class="hljs-comment">//        正常重写，这里是编写清理系统内存的代码</span><br><span class="hljs-comment">//        这里写输出语句是为了看到finalize()方法被调用的效果</span><br>        System.out.println(<span class="hljs-built_in">this</span>+ <span class="hljs-string">&quot;轻轻的我走了，不带走一段代码....&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</code>： </p><p>从指定源数组中复制一个数组，复制从指定的位置开始，到目标数组的指定位置结束。常用于数组的插入和删除</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSystemArrayCopy</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span>[] arr1 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>];<br>        System.arraycopy(arr1,<span class="hljs-number">0</span>,arr2,<span class="hljs-number">3</span>,arr1.length);<br>        System.out.println(Arrays.toString(arr1));<br>        System.out.println(Arrays.toString(arr2));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        System.arraycopy(arr,<span class="hljs-number">0</span>,arr,<span class="hljs-number">1</span>,arr.length-<span class="hljs-number">1</span>);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        System.arraycopy(arr,<span class="hljs-number">1</span>,arr,<span class="hljs-number">0</span>,arr.length-<span class="hljs-number">1</span>);<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-java-lang-Runtime类"><a href="#6-2-java-lang-Runtime类" class="headerlink" title="6.2 java.lang.Runtime类"></a>6.2 java.lang.Runtime类</h3><p>每个 Java 应用程序都有一个 <code>Runtime</code> 类实例，使应用程序能够与其运行的环境相连接。</p><p><code>public static Runtime getRuntime()</code>： 返回与当前 Java 应用程序相关的运行时对象。应用程序不能创建自己的 Runtime 类实例。</p><p><code>public long totalMemory()</code>：返回 Java 虚拟机中初始化时的内存总量。此方法返回的值可能随时间的推移而变化，这取决于主机环境。默认为物理电脑内存的1&#x2F;64。</p><p><code>public long maxMemory()</code>：返回 Java 虚拟机中最大程度能使用的内存总量。默认为物理电脑内存的1&#x2F;4。</p><p><code>public long freeMemory()</code>：回 Java 虚拟机中的空闲内存量。调用 gc 方法可能导致 freeMemory 返回值的增加。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.system;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRuntime</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Runtime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> Runtime.getRuntime();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">initialMemory</span> <span class="hljs-operator">=</span> runtime.totalMemory(); <span class="hljs-comment">//获取虚拟机初始化时堆内存总量</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">maxMemory</span> <span class="hljs-operator">=</span> runtime.maxMemory(); <span class="hljs-comment">//获取虚拟机最大堆内存总量</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//模拟占用内存</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            str += i;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">freeMemory</span> <span class="hljs-operator">=</span> runtime.freeMemory(); <span class="hljs-comment">//获取空闲堆内存总量</span><br>        System.out.println(<span class="hljs-string">&quot;总内存：&quot;</span> + initialMemory / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> * <span class="hljs-number">64</span> + <span class="hljs-string">&quot;MB&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;总内存：&quot;</span> + maxMemory / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> * <span class="hljs-number">4</span> + <span class="hljs-string">&quot;MB&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;空闲内存：&quot;</span> + freeMemory / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> + <span class="hljs-string">&quot;MB&quot;</span>) ;<br>        System.out.println(<span class="hljs-string">&quot;已用内存：&quot;</span> + (initialMemory-freeMemory) / <span class="hljs-number">1024</span> / <span class="hljs-number">1024</span> + <span class="hljs-string">&quot;MB&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-和数学相关的类"><a href="#7-和数学相关的类" class="headerlink" title="7. 和数学相关的类"></a>7. 和数学相关的类</h2><h3 id="7-1-java-lang-Math"><a href="#7-1-java-lang-Math" class="headerlink" title="7.1 java.lang.Math"></a>7.1 java.lang.Math</h3><p><code>java.lang.Math</code> 类包含用于执行基本数学运算的方法，如初等指数、对数、平方根和三角函数。类似这样的工具类，其所有方法均为静态方法，并且不会创建对象，调用起来非常简单。</p><ul><li><code>public static double abs(double a) </code> ：返回 double 值的绝对值。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> Math.abs(-<span class="hljs-number">5</span>); <span class="hljs-comment">//d1的值为5</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> Math.abs(<span class="hljs-number">5</span>); <span class="hljs-comment">//d2的值为5</span><br></code></pre></td></tr></table></figure><ul><li><code>public static double ceil(double a)</code> ：返回大于等于参数的最小的整数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> Math.ceil(<span class="hljs-number">3.3</span>); <span class="hljs-comment">//d1的值为 4.0</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> Math.ceil(-<span class="hljs-number">3.3</span>); <span class="hljs-comment">//d2的值为 -3.0</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> Math.ceil(<span class="hljs-number">5.1</span>); <span class="hljs-comment">//d3的值为 6.0</span><br></code></pre></td></tr></table></figure><ul><li><code>public static double floor(double a) </code> ：返回小于等于参数最大的整数。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> Math.floor(<span class="hljs-number">3.3</span>); <span class="hljs-comment">//d1的值为3.0</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> Math.floor(-<span class="hljs-number">3.3</span>); <span class="hljs-comment">//d2的值为-4.0</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> Math.floor(<span class="hljs-number">5.1</span>); <span class="hljs-comment">//d3的值为 5.0</span><br></code></pre></td></tr></table></figure><ul><li><code>public static long round(double a)</code> ：返回最接近参数的 long。(相当于四舍五入方法)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> Math.round(<span class="hljs-number">5.5</span>); <span class="hljs-comment">//d1的值为6</span><br><span class="hljs-type">long</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> Math.round(<span class="hljs-number">5.4</span>); <span class="hljs-comment">//d2的值为5</span><br><span class="hljs-type">long</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> Math.round(-<span class="hljs-number">3.3</span>); <span class="hljs-comment">//d3的值为-3</span><br><span class="hljs-type">long</span> <span class="hljs-variable">d4</span> <span class="hljs-operator">=</span> Math.round(-<span class="hljs-number">3.8</span>); <span class="hljs-comment">//d4的值为-4</span><br></code></pre></td></tr></table></figure><ul><li>public static double pow(double a,double b)：返回a的b幂次方法</li><li>public static double sqrt(double a)：返回a的平方根</li><li><code>public static double random()</code>：返回[0,1)的随机值</li><li>public static final double PI：返回圆周率</li><li>public static double max(double x, double y)：返回x,y中的最大值</li><li>public static double min(double x, double y)：返回x,y中的最小值</li><li>其它：acos,asin,atan,cos,sin,tan 三角函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Math.pow(<span class="hljs-number">2</span>,<span class="hljs-number">31</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">sqrt</span> <span class="hljs-operator">=</span> Math.sqrt(<span class="hljs-number">256</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">rand</span> <span class="hljs-operator">=</span> Math.random();<br><span class="hljs-type">double</span> <span class="hljs-variable">pi</span> <span class="hljs-operator">=</span> Math.PI;<br></code></pre></td></tr></table></figure><h3 id="7-2-java-math包"><a href="#7-2-java-math包" class="headerlink" title="7.2 java.math包"></a>7.2 java.math包</h3><h4 id="7-2-1-BigInteger"><a href="#7-2-1-BigInteger" class="headerlink" title="7.2.1 BigInteger"></a>7.2.1 BigInteger</h4><ul><li><p>Integer类作为int的包装类，能存储的最大整型值为2^31-1，Long类也是有限的，最大为2^63-1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类都无能为力，更不用说进行运算了。</p></li><li><p>java.math包的BigInteger可以表示<code>不可变的任意精度的整数</code>。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。 </p></li><li><p>构造器</p><ul><li>BigInteger(String val)：根据字符串构建BigInteger对象</li></ul></li><li><p>方法</p><ul><li>public BigInteger <code>abs</code>()：返回此 BigInteger 的绝对值的 BigInteger。</li><li>BigInteger <code>add</code>(BigInteger val) ：返回其值为 (this + val) 的 BigInteger</li><li>BigInteger <code>subtract</code>(BigInteger val) ：返回其值为 (this - val) 的 BigInteger</li><li>BigInteger <code>multiply</code>(BigInteger val) ：返回其值为 (this * val) 的 BigInteger</li><li>BigInteger <code>divide</code>(BigInteger val) ：返回其值为 (this &#x2F; val) 的 BigInteger。整数相除只保留整数部分。</li><li>BigInteger <code>remainder</code>(BigInteger val) ：返回其值为 (this % val) 的 BigInteger。</li><li>BigInteger[] <code>divideAndRemainder</code>(BigInteger val)：返回包含 (this &#x2F; val) 后跟 (this % val) 的两个 BigInteger 的数组。</li><li>BigInteger <code>pow</code>(int exponent) ：返回其值为 (this^exponent) 的 BigInteger。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-comment">//long bigNum = 123456789123456789123456789L;</span><br><br>    <span class="hljs-type">BigInteger</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;12345678912345678912345678&quot;</span>);<br>    <span class="hljs-type">BigInteger</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;78923456789123456789123456789&quot;</span>);<br><br>    <span class="hljs-comment">//System.out.println(&quot;和：&quot; + (b1+b2));//错误的，无法直接使用+进行求和</span><br><br>    System.out.println(<span class="hljs-string">&quot;和：&quot;</span> + b1.add(b2));<br>    System.out.println(<span class="hljs-string">&quot;减：&quot;</span> + b1.subtract(b2));<br>    System.out.println(<span class="hljs-string">&quot;乘：&quot;</span> + b1.multiply(b2));<br>    System.out.println(<span class="hljs-string">&quot;除：&quot;</span> + b2.divide(b1));<br>    System.out.println(<span class="hljs-string">&quot;余：&quot;</span> + b2.remainder(b1));<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-2-BigDecimal"><a href="#7-2-2-BigDecimal" class="headerlink" title="7.2.2 BigDecimal"></a>7.2.2 BigDecimal</h4><ul><li><p>一般的Float类和Double类可以用来做科学计算或工程计算，但在<strong>商业计算中，要求数字精度比较高，故用到java.math.BigDecimal类。</strong></p></li><li><p>BigDecimal类支持不可变的、任意精度的有符号十进制定点数。</p></li><li><p>构造器</p><ul><li>public BigDecimal(double val)</li><li>public BigDecimal(String val) –&gt; 推荐</li></ul></li><li><p>常用方法</p><ul><li>public BigDecimal <code>add</code>(BigDecimal augend)</li><li>public BigDecimal <code>subtract</code>(BigDecimal subtrahend)</li><li>public BigDecimal <code>multiply</code>(BigDecimal multiplicand)</li><li>public BigDecimal <code>divide</code>(BigDecimal divisor, int scale, int roundingMode)：divisor是除数，scale指明保留几位小数，roundingMode指明舍入模式（ROUND_UP :向上加1、ROUND_DOWN :直接舍去、ROUND_HALF_UP:四舍五入）</li></ul></li><li><p>举例</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">BigInteger</span> <span class="hljs-variable">bi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;12433241123&quot;</span>);<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;12435.351&quot;</span>);<br>    <span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bd2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;11&quot;</span>);<br>    System.out.println(bi);<br>    <span class="hljs-comment">// System.out.println(bd.divide(bd2));</span><br>    System.out.println(bd.divide(bd2, BigDecimal.ROUND_HALF_UP));<br>    System.out.println(bd.divide(bd2, <span class="hljs-number">15</span>, BigDecimal.ROUND_HALF_UP));<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="7-3-java-util-Random"><a href="#7-3-java-util-Random" class="headerlink" title="7.3 java.util.Random"></a>7.3 java.util.Random</h3><p>用于产生随机数</p><ul><li><p><code>boolean nextBoolean()</code>:返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的 boolean 值。 </p></li><li><p><code>void nextBytes(byte[] bytes)</code>:生成随机字节并将其置于用户提供的 byte 数组中。 </p></li><li><p><code>double nextDouble()</code>:返回下一个伪随机数，它是取自此随机数生成器序列的、在 0.0 和 1.0 之间均匀分布的 double 值。 </p></li><li><p><code>float nextFloat()</code>:返回下一个伪随机数，它是取自此随机数生成器序列的、在 0.0 和 1.0 之间均匀分布的 float 值。 </p></li><li><p><code>double nextGaussian()</code>:返回下一个伪随机数，它是取自此随机数生成器序列的、呈高斯（“正态”）分布的 double 值，其平均值是 0.0，标准差是 1.0。 </p></li><li><p><code>int nextInt()</code>:返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 int 值。 </p></li><li><p><code>int nextInt(int n)</code>:返回一个伪随机数，它是取自此随机数生成器序列的、在 0（包括）和指定值（不包括）之间均匀分布的 int 值。 </p></li><li><p><code>long nextLong()</code>:返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的 long 值。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    System.out.println(<span class="hljs-string">&quot;随机整数：&quot;</span> + r.nextInt());<br>    System.out.println(<span class="hljs-string">&quot;随机小数：&quot;</span> + r.nextDouble());<br>    System.out.println(<span class="hljs-string">&quot;随机布尔值：&quot;</span> + r.nextBoolean());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多线程</title>
    <link href="/2024/02/29/10.%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2024/02/29/10.%20%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-相关概念"><a href="#1-相关概念" class="headerlink" title="1. 相关概念"></a>1. 相关概念</h2><h3 id="1-1-程序、进程与线程"><a href="#1-1-程序、进程与线程" class="headerlink" title="1.1 程序、进程与线程"></a>1.1 程序、进程与线程</h3><ul><li><p><strong>程序（program）</strong>：为完成特定任务，用某种语言编写的<code>一组指令的集合</code>。即指<code>一段静态的代码</code>，静态对象。</p></li><li><p><strong>进程（process）</strong>：程序的一次执行过程，或是正在内存中运行的应用程序。如：运行中的QQ，运行中的网易音乐播放器。</p><ul><li>每个进程都有一个独立的内存空间，系统运行一个程序即是一个进程从创建、运行到消亡的过程。（生命周期）</li><li>程序是静态的，进程是动态的</li><li>进程作为<code>操作系统调度和分配资源的最小单位</code>（亦是系统运行程序的基本单位），系统在运行时会为每个进程分配不同的内存区域。</li><li>现代的操作系统，大都是支持多进程的，支持同时运行多个程序。比如：现在我们上课一边使用编辑器，一边使用录屏软件，同时还开着画图板，dos窗口等软件。</li></ul></li><li><p><strong>线程（thread）</strong>：进程可进一步细化为线程，是程序内部的<code>一条执行路径</code>。一个进程中至少有一个线程。</p><ul><li><p>一个进程同一时间若<code>并行</code>执行多个线程，就是支持多线程的。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101322_watermark.png" alt="image-20220331233204504" style="zoom:67%;" /></li><li><p>线程作为<code>CPU调度和执行的最小单位</code>。</p></li><li><p>一个进程中的多个线程共享相同的内存单元，它们从同一个堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来<code>安全的隐患</code>。</p></li><li><p>下图中，红框的蓝色区域为线程独享，黄色区域为线程共享。</p></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101338_watermark.png" alt="image-20220514175737426" style="zoom:80%;" /><blockquote><p>注意：</p><p>不同的进程之间是不共享内存的。</p><p>进程之间的数据交换和通信的成本很高。</p></blockquote></li></ul><h3 id="1-2-查看进程和线程"><a href="#1-2-查看进程和线程" class="headerlink" title="1.2 查看进程和线程"></a>1.2 查看进程和线程</h3><p>我们可以在电脑底部任务栏，右键—–&gt;打开任务管理器，可以查看当前任务的进程：</p><p>1、每个应用程序的运行都是一个进程</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101392_watermark.png" style="zoom:80%;" /><p>2、一个应用程序的多次运行，就是多个进程</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101440_watermark.png" alt="1563267431480" style="zoom:80%;" /><p>3、一个进程中包含多个线程</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101497_watermark.png" alt="1563270525077" style="zoom:80%;" /><h3 id="1-3-线程调度"><a href="#1-3-线程调度" class="headerlink" title="1.3 线程调度"></a>1.3 线程调度</h3><ul><li><p><strong>分时调度</strong></p><p>所有线程<code>轮流使用</code> CPU 的使用权，并且平均分配每个线程占用 CPU 的时间。</p></li><li><p><strong>抢占式调度</strong></p><p>让<code>优先级高</code>的线程以<code>较大的概率</code>优先使用 CPU。如果线程的优先级相同，那么会随机选择一个(线程随机性)，Java使用的为抢占式调度。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101559_watermark.bmp" alt="抢占式调度"></p></li></ul><h3 id="1-4-多线程程序的优点"><a href="#1-4-多线程程序的优点" class="headerlink" title="1.4 多线程程序的优点"></a>1.4 多线程程序的优点</h3><p><strong>背景：</strong>以单核CPU为例，只使用单个线程先后完成多个任务（调用多个方法），肯定比用多个线程来完成用的时间更短，为何仍需多线程呢？</p><p><strong>多线程程序的优点：</strong></p><ol><li><p>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。</p></li><li><p>提高计算机系统CPU的利用率</p></li><li><p>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改</p></li></ol><h3 id="1-5-补充概念"><a href="#1-5-补充概念" class="headerlink" title="1.5 补充概念"></a>1.5 补充概念</h3><h4 id="1-5-1-单核CPU和多核CPU"><a href="#1-5-1-单核CPU和多核CPU" class="headerlink" title="1.5.1 单核CPU和多核CPU"></a>1.5.1 单核CPU和多核CPU</h4><p>单核CPU，在一个时间单元内，只能执行一个线程的任务。例如，可以把CPU看成是医院的医生诊室，在一定时间内只能给一个病人诊断治疗。所以单核CPU就是，代码经过前面一系列的前导操作（类似于医院挂号，比如有10个窗口挂号），然后到cpu处执行时发现，就只有一个CPU（对应一个医生），大家排队执行。</p><p>这时候想要提升系统性能，只有两个办法，要么提升CPU性能（让医生看病快点），要么多加几个CPU（多整几个医生），即为多核的CPU。</p><p><code>问题：多核的效率是单核的倍数吗？</code>譬如4核A53的cpu，性能是单核A53的4倍吗？理论上是，但是实际不可能，至少有两方面的损耗。</p><ul><li><code>一个是多个核心的其他共用资源限制</code>。譬如，4核CPU对应的内存、cache、寄存器并没有同步扩充4倍。这就好像医院一样，1个医生换4个医生，但是做B超检查的还是一台机器，性能瓶颈就从医生转到B超检查了。</li><li><code>另一个是多核CPU之间的协调管理损耗</code>。譬如多个核心同时运行两个相关的任务，需要考虑任务同步，这也需要消耗额外性能。好比公司工作，一个人的时候至少不用开会浪费时间，自己跟自己商量就行了。两个人就要开会同步工作，协调分配，所以工作效率绝对不可能达到2倍。</li></ul><h4 id="1-5-2-并行与并发"><a href="#1-5-2-并行与并发" class="headerlink" title="1.5.2 并行与并发"></a>1.5.2 并行与并发</h4><ul><li><p><strong>并行（parallel）</strong>：指两个或多个事件在<code>同一时刻</code>发生（同时发生）。指在同一时刻，有<code>多条指令</code>在<code>多个CPU</code>上<code>同时</code>执行。比如：多个人同时做不同的事。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101438_watermark.png" alt="image-20220401000804242"></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101348_watermark.png" alt="image-20220513181758585" style="zoom: 50%;" /></li><li><p><strong>并发（concurrency）</strong>：指两个或多个事件在<code>同一个时间段内</code>发生。即在一段时间内，有<code>多条指令</code>在<code>单个CPU</code>上<code>快速轮换、交替</code>执行，使得在宏观上具有多个进程同时执行的效果。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101194_watermark.png" alt="image-20220401000515678"></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101511_watermark.png" alt="image-20220513181815978" style="zoom:50%;" /></li></ul><p>在操作系统中，启动了多个程序，<code>并发</code>指的是在一段时间内宏观上有多个程序同时运行，这在单核 CPU 系统中，每一时刻只能有一个程序执行，即微观上这些程序是分时的交替运行，只不过是给人的感觉是同时运行，那是因为分时交替运行的时间是非常短的。</p><p>而在多核 CPU 系统中，则这些可以<code>并发</code>执行的程序便可以分配到多个CPU上，实现多任务并行执行，即利用每个处理器来处理一个可以并发执行的程序，这样多个程序便可以同时执行。目前电脑市场上说的多核 CPU，便是多核处理器，核越多，<code>并行</code>处理的程序越多，能大大的提高电脑运行的效率。</p><h2 id="2-创建和启动线程"><a href="#2-创建和启动线程" class="headerlink" title="2.创建和启动线程"></a>2.创建和启动线程</h2><h3 id="2-1-概述"><a href="#2-1-概述" class="headerlink" title="2.1 概述"></a>2.1 概述</h3><ul><li><p>Java语言的JVM允许程序运行多个线程，使用<code>java.lang.Thread</code>类代表<strong>线程</strong>，所有的线程对象都必须是Thread类或其子类的实例。</p></li><li><p>Thread类的特性</p><ul><li>每个线程都是通过某个特定Thread对象的run()方法来完成操作的，因此把run()方法体称为<code>线程执行体</code>。</li><li>通过该Thread对象的start()方法来启动这个线程，而非直接调用run()</li><li>要想实现多线程，必须在主线程中创建新的线程对象。</li></ul></li></ul><h3 id="2-2-方式1：继承Thread类"><a href="#2-2-方式1：继承Thread类" class="headerlink" title="2.2 方式1：继承Thread类"></a>2.2 方式1：继承Thread类</h3><p>Java通过继承Thread类来<strong>创建</strong>并<strong>启动多线程</strong>的步骤如下：</p><ol><li>定义Thread类的子类，并重写该类的run()方法，该run()方法的方法体就代表了线程需要完成的任务</li><li>创建Thread子类的实例，即创建了线程对象</li><li>调用线程对象的start()方法来启动该线程</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.thread;<br><span class="hljs-comment">//自定义线程类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-comment">//定义指定线程名称的构造方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-comment">//调用父类的String参数的构造方法，指定线程的名称</span><br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 重写run方法，完成该线程执行的逻辑</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(getName()+<span class="hljs-string">&quot;：正在执行！&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMyThread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建自定义线程对象1</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">mt1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;子线程1&quot;</span>);<br>        <span class="hljs-comment">//开启子线程1</span><br>        mt1.start();<br>        <br>        <span class="hljs-comment">//创建自定义线程对象2</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">mt2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>(<span class="hljs-string">&quot;子线程2&quot;</span>);<br>        <span class="hljs-comment">//开启子线程2</span><br>        mt2.start();<br>        <br>        <span class="hljs-comment">//在主方法中执行for循环</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;main线程！&quot;</span>+i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101066_watermark.png" alt="image-20220401221215860" style="zoom:67%;" /><blockquote><p>注意：</p><ol><li><p>如果自己手动调用run()方法，那么就只是普通方法，没有启动多线程模式。</p></li><li><p>run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU调度决定。</p></li><li><p>想要启动多线程，必须调用start方法。</p></li><li><p>一个线程对象只能调用一次start()方法启动，如果重复调用了，则将抛出以上的异常“<code>IllegalThreadStateException</code>”。</p></li></ol></blockquote><h3 id="2-3-方式2：实现Runnable接口"><a href="#2-3-方式2：实现Runnable接口" class="headerlink" title="2.3 方式2：实现Runnable接口"></a>2.3 方式2：实现Runnable接口</h3><p>Java有单继承的限制，当我们无法继承Thread类时，那么该如何做呢？在核心类库中提供了Runnable接口，我们可以实现Runnable接口，重写run()方法，然后再通过Thread类的对象代理启动和执行我们的线程体run()方法</p><p>步骤如下：</p><ol><li><p>定义Runnable接口的实现类，并重写该接口的run()方法，该run()方法的方法体同样是该线程的线程执行体。</p></li><li><p>创建Runnable实现类的实例，并以此实例作为Thread的target参数来创建Thread对象，该Thread对象才是真正<br>的线程对象。</p></li><li><p>调用线程对象的start()方法，启动线程。调用Runnable接口实现类的run方法。</p></li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot; &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.thread;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMyRunnable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建自定义类对象  线程任务对象</span><br>        <span class="hljs-type">MyRunnable</span> <span class="hljs-variable">mr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyRunnable</span>();<br>        <span class="hljs-comment">//创建线程对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(mr, <span class="hljs-string">&quot;长江&quot;</span>);<br>        t.start();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;黄河 &quot;</span> + i);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 通过实现Runnable接口，使得该类有了多线程类的特征。所有的分线程要执行的代码都在run方法里面。</p><p>在启动的多线程的时候，需要先通过Thread类的构造方法Thread(Runnable target) 构造出对象，然后调用Thread对象的start()方法来运行多线程代码。</p><p>实际上，所有的多线程代码都是通过运行Thread的start()方法来运行的。因此，不管是继承Thread类还是实现<br>Runnable接口来实现多线程，最终还是通过Thread的对象的API来控制线程的，熟悉Thread类的API是进行多线程编程的基础。</p><p>说明：Runnable对象仅仅作为Thread对象的target，Runnable实现类里包含的run()方法仅作为线程执行体。<br>而实际的线程对象依然是Thread实例，只是该Thread线程负责执行其target的run()方法。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101328_watermark.png" alt="image-20220401222212377"  /><h3 id="2-4-变形写法"><a href="#2-4-变形写法" class="headerlink" title="2.4 变形写法"></a>2.4 变形写法</h3><p><strong>使用匿名内部类对象来实现线程的创建和启动</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;新的线程！&quot;</span>)&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>System.out.println(getName()+<span class="hljs-string">&quot;：正在执行！&quot;</span>+i);<br>&#125;<br>&#125;<br>&#125;.start();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;：&quot;</span> + i);<br>&#125;<br>&#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure><h3 id="2-5-对比两种方式"><a href="#2-5-对比两种方式" class="headerlink" title="2.5 对比两种方式"></a>2.5 对比两种方式</h3><p><strong>联系</strong></p><p>Thread类实际上也是实现了Runnable接口的类。即：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span><br></code></pre></td></tr></table></figure><p><strong>区别</strong></p><ul><li><p>继承Thread：线程代码存放Thread子类run方法中。</p></li><li><p>实现Runnable：线程代码存在接口的子类的run方法。</p></li></ul><p><strong>实现Runnable接口比继承Thread类所具有的优势</strong></p><ul><li>避免了单继承的局限性</li><li>多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程来处理同一份资源。</li><li>增加程序的健壮性，实现解耦操作，代码可以被多个线程共享，代码和线程独立。</li></ul><h3 id="2-6-练习"><a href="#2-6-练习" class="headerlink" title="2.6 练习"></a>2.6 练习</h3><p>创建两个分线程，让其中一个线程输出1-100之间的偶数，另一个线程输出1-100之间的奇数。</p><h2 id="3-Thread类的常用结构"><a href="#3-Thread类的常用结构" class="headerlink" title="3. Thread类的常用结构"></a>3. Thread类的常用结构</h2><h3 id="3-1-构造器"><a href="#3-1-构造器" class="headerlink" title="3.1 构造器"></a>3.1 构造器</h3><ul><li>public Thread() :分配一个新的线程对象。</li><li>public Thread(String name) :分配一个指定名字的新的线程对象。</li><li>public Thread(Runnable target) :指定创建线程的目标对象，它实现了Runnable接口中的run方法</li><li>public Thread(Runnable target,String name) :分配一个带有指定目标新的线程对象并指定名字。</li></ul><h3 id="3-2-常用方法系列1"><a href="#3-2-常用方法系列1" class="headerlink" title="3.2 常用方法系列1"></a>3.2 常用方法系列1</h3><ul><li>public void run() :此线程要执行的任务在此处定义代码。</li><li>public void start() :导致此线程开始执行; Java虚拟机调用此线程的run方法。</li><li>public String getName() :获取当前线程名称。</li><li>public void setName(String name)：设置该线程名称。</li><li>public static Thread currentThread() :返回对当前正在执行的线程对象的引用。在Thread子类中就是this，通常用于主线程和Runnable实现类</li><li>public static void sleep(long millis) :使当前正在执行的线程以指定的毫秒数暂停（暂时停止执行）。</li><li>public static void yield()：yield只是让当前线程暂停一下，让系统的线程调度器重新调度一次，希望优先级与当前线程相同或更高的其他线程能够获得执行机会，但是这个不能保证，完全有可能的情况是，当某个线程调用了yield方法暂停之后，线程调度器又将其调度出来重新执行。</li></ul><h3 id="3-3-常用方法系列2"><a href="#3-3-常用方法系列2" class="headerlink" title="3.3 常用方法系列2"></a>3.3 常用方法系列2</h3><ul><li><p>public final boolean isAlive()：测试线程是否处于活动状态。如果线程已经启动且尚未终止，则为活动状态。 </p></li><li><p>void join() ：等待该线程终止。 </p><p>void join(long millis) ：等待该线程终止的时间最长为 millis 毫秒。如果millis时间到，将不再等待。 </p><p>void join(long millis, int nanos) ：等待该线程终止的时间最长为 millis 毫秒 + nanos 纳秒。 </p></li><li><p>public final void stop()：<code>已过时</code>，不建议使用。强行结束一个线程的执行，直接进入死亡状态。run()即刻停止，可能会导致一些清理性的工作得不到完成，如文件，数据库等的关闭。同时，会立即释放该线程所持有的所有的锁，导致数据得不到同步的处理，出现数据不一致的问题。</p></li><li><p>void suspend() &#x2F; void resume() : 这两个操作就好比播放器的暂停和恢复。二者必须成对出现，否则非常容易发生死锁。suspend()调用会导致线程暂停，但不会释放任何锁资源，导致其它线程都无法访问被它占用的锁，直到调用resume()。<code>已过时</code>，不建议使用。</p></li></ul><h3 id="3-4-常用方法系列3"><a href="#3-4-常用方法系列3" class="headerlink" title="3.4 常用方法系列3"></a>3.4 常用方法系列3</h3><p>每个线程都有一定的优先级，同优先级线程组成先进先出队列（先到先服务），使用分时调度策略。优先级高的线程采用抢占式策略，获得较多的执行机会。每个线程默认的优先级都与创建它的父线程具有相同的优先级。</p><ul><li>Thread类的三个优先级常量：<ul><li>MAX_PRIORITY（10）：最高优先级 </li><li>MIN _PRIORITY （1）：最低优先级</li><li>NORM_PRIORITY （5）：普通优先级，默认情况下main线程具有普通优先级。</li></ul></li></ul><ul><li>public final int getPriority() ：返回线程优先级 </li><li>public final void setPriority(int newPriority) ：改变线程的优先级，范围在[1,10]之间。</li></ul><p>练习：获取main线程对象的名称和优先级。</p><p>声明一个匿名内部类继承Thread类，重写run方法，在run方法中获取线程名称和优先级。设置该线程优先级为最高优先级并启动该线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>System.out.println(getName() + <span class="hljs-string">&quot;的优先级：&quot;</span> + getPriority());<br>&#125;<br>&#125;;<br>t.setPriority(Thread.MAX_PRIORITY);<br>t.start();<br><br>System.out.println(Thread.currentThread().getName() +<span class="hljs-string">&quot;的优先级：&quot;</span> +                                           Thread.currentThread().getPriority());<br>&#125;<br></code></pre></td></tr></table></figure><p>案例：</p><ul><li><p>声明一个匿名内部类继承Thread类，重写run方法，实现打印[1,100]之间的偶数，要求每隔1秒打印1个偶数。</p></li><li><p>声明一个匿名内部类继承Thread类，重写run方法，实现打印[1,100]之间的奇数，</p><ul><li>当打印到5时，让奇数线程暂停一下，再继续。</li><li>当打印到5时，让奇数线程停下来，让偶数线程执行完再打印。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.api;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThreadStateChange</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">te</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt;= <span class="hljs-number">100</span>; i += <span class="hljs-number">2</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;偶数线程：&quot;</span> + i);<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">1000</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        te.start();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">to</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i += <span class="hljs-number">2</span>) &#123;<br>                    System.out.println(<span class="hljs-string">&quot;奇数线程：&quot;</span> + i);<br>                    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) &#123;<br><span class="hljs-comment">//                        Thread.yield();</span><br>                        <span class="hljs-keyword">try</span> &#123;<br>                            te.join();<br>                        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br><br>                &#125;<br>            &#125;<br>        &#125;;<br>        to.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>生产实践中的趣事：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101663_watermark.jpg"></p><h3 id="3-5-守护线程（了解）"><a href="#3-5-守护线程（了解）" class="headerlink" title="3.5 守护线程（了解）"></a>3.5 守护线程（了解）</h3><p>有一种线程，它是在后台运行的，它的任务是为其他线程提供服务的，这种线程被称为“守护线程”。JVM的垃圾回收线程就是典型的守护线程。</p><p>守护线程有个特点，就是如果所有非守护线程都死亡，那么守护线程自动死亡。形象理解：<code>兔死狗烹</code>，<code>鸟尽弓藏</code></p><p>调用setDaemon(true)方法可将指定线程设置为守护线程。必须在线程启动之前设置，否则会报IllegalThreadStateException异常。</p><p>调用isDaemon()可以判断线程是否是守护线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThread</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">MyDaemon</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDaemon</span>();<br>m.setDaemon(<span class="hljs-literal">true</span>);<br>m.start();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;main:&quot;</span> + i);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDaemon</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;我一直守护者你...&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-多线程的生命周期"><a href="#4-多线程的生命周期" class="headerlink" title="4. 多线程的生命周期"></a>4. 多线程的生命周期</h2><p>Java语言使用Thread类及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下一些状态：</p><h3 id="4-1-JDK1-5之前：5种状态"><a href="#4-1-JDK1-5之前：5种状态" class="headerlink" title="4.1 JDK1.5之前：5种状态"></a>4.1 JDK1.5之前：5种状态</h3><p>线程的生命周期有五种状态：新建（New）、就绪（Runnable）、运行（Running）、阻塞（Blocked）、死亡（Dead）。CPU需要在多条线程之间切换，于是线程状态会多次在运行、阻塞、就绪之间切换。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101477_watermark.png" alt="image-20220401002307038" style="zoom: 67%;" /><p><strong>1.新建</strong></p><p>当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态。此时它和其他Java对象一样，仅仅由JVM为其分配了内存，并初始化了实例变量的值。此时的线程对象并没有任何线程的动态特征，程序也不会执行它的线程体run()。</p><p><strong>2.就绪</strong></p><p>但是当线程对象调用了start()方法之后，就不一样了，线程就从新建状态转为就绪状态。JVM会为其创建方法调用栈和程序计数器，当然，处于这个状态中的线程并没有开始运行，只是表示已具备了运行的条件，随时可以被调度。至于什么时候被调度，取决于JVM里线程调度器的调度。</p><blockquote><p>注意：</p><p>程序只能对新建状态的线程调用start()，并且只能调用一次，如果对非新建状态的线程，如已启动的线程或已死亡的线程调用start()都会报错IllegalThreadStateException异常。</p></blockquote><p><strong>3.运行</strong></p><p>如果处于就绪状态的线程获得了CPU资源时，开始执行run()方法的线程体代码，则该线程处于运行状态。如果计算机只有一个CPU核心，在任何时刻只有一个线程处于运行状态，如果计算机有多个核心，将会有多个线程并行(Parallel)执行。</p><p>当然，美好的时光总是短暂的，而且CPU讲究雨露均沾。对于抢占式策略的系统而言，系统会给每个可执行的线程一个小时间段来处理任务，当该时间用完，系统会剥夺该线程所占用的资源，让其回到就绪状态等待下一次被调度。此时其他线程将获得执行机会，而在选择下一个线程时，系统会适当考虑线程的优先级。</p><p><strong>4.阻塞</strong></p><p>当在运行过程中的线程遇到如下情况时，会让出 CPU 并临时中止自己的执行，进入阻塞状态：</p><ul><li>线程调用了sleep()方法，主动放弃所占用的CPU资源；</li><li>线程试图获取一个同步监视器，但该同步监视器正被其他线程持有；</li><li>线程执行过程中，同步监视器调用了wait()，让它等待某个通知（notify）；</li><li>线程执行过程中，同步监视器调用了wait(time)</li><li>线程执行过程中，遇到了其他线程对象的加塞（join）；</li><li>线程被调用suspend方法被挂起（已过时，因为容易发生死锁）；</li></ul><p>当前正在执行的线程被阻塞后，其他线程就有机会执行了。针对如上情况，当发生如下情况时会解除阻塞，让该线程重新进入就绪状态，等待线程调度器再次调度它：</p><ul><li>线程的sleep()时间到；</li><li>线程成功获得了同步监视器；</li><li>线程等到了通知(notify)；</li><li>线程wait的时间到了</li><li>加塞的线程结束了；</li><li>被挂起的线程又被调用了resume恢复方法（已过时，因为容易发生死锁）；</li></ul><p><strong>5.死亡</strong></p><p>线程会以以下三种方式之一结束，结束后的线程就处于死亡状态：</p><ul><li>run()方法执行完成，线程正常结束</li><li>线程执行过程中抛出了一个未捕获的异常（Exception）或错误（Error）</li><li>直接调用该线程的stop()来结束该线程（已过时）</li></ul><h3 id="4-2-JDK1-5及之后：6种状态"><a href="#4-2-JDK1-5及之后：6种状态" class="headerlink" title="4.2 JDK1.5及之后：6种状态"></a>4.2 JDK1.5及之后：6种状态</h3><p>在java.lang.Thread.State的枚举类中这样定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">State</span> &#123;<br>NEW,<br>RUNNABLE,<br>BLOCKED,<br>WAITING,<br>TIMED_WAITING,<br>TERMINATED;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><code>NEW（新建）</code>：线程刚被创建，但是并未启动。还没调用start方法。</p></li><li><p><code>RUNNABLE（可运行）</code>：这里没有区分就绪和运行状态。因为对于Java对象来说，只能标记为可运行，至于什么时候运行，不是JVM来控制的了，是OS来进行调度的，而且时间非常短暂，因此对于Java对象的状态来说，无法区分。</p></li><li><p><code>Teminated（被终止）</code>：表明此线程已经结束生命周期，终止运行。</p></li><li><p>重点说明，根据Thread.State的定义，<strong>阻塞状态分为三种</strong>：<code>BLOCKED</code>、<code>WAITING</code>、<code>TIMED_WAITING</code>。</p><ul><li><code>BLOCKED（锁阻塞）</code>：在API中的介绍为：一个正在阻塞、等待一个监视器锁（锁对象）的线程处于这一状态。只有获得锁对象的线程才能有执行机会。<ul><li>比如，线程A与线程B代码中使用同一锁，如果线程A获取到锁，线程A进入到Runnable状态，那么线程B就进入到Blocked锁阻塞状态。</li></ul></li><li><code>TIMED_WAITING（计时等待）</code>：在API中的介绍为：一个正在限时等待另一个线程执行一个（唤醒）动作的线程处于这一状态。<ul><li>当前线程执行过程中遇到Thread类的<code>sleep</code>或<code>join</code>，Object类的<code>wait</code>，LockSupport类的<code>park</code>方法，并且在调用这些方法时，<code>设置了时间</code>，那么当前线程会进入TIMED_WAITING，直到时间到，或被中断。</li></ul></li><li><code>WAITING（无限等待）</code>：在API中介绍为：一个正在无限期等待另一个线程执行一个特别的（唤醒）动作的线程处于这一状态。<ul><li>当前线程执行过程中遇到遇到Object类的<code>wait</code>，Thread类的<code>join</code>，LockSupport类的<code>park</code>方法，并且在调用这些方法时，<code>没有指定时间</code>，那么当前线程会进入WAITING状态，直到被唤醒。<ul><li>通过Object类的wait进入WAITING状态的要有Object的notify&#x2F;notifyAll唤醒；</li><li>通过Condition的await进入WAITING状态的要有Condition的signal方法唤醒；</li><li>通过LockSupport类的park方法进入WAITING状态的要有LockSupport类的unpark方法唤醒</li><li>通过Thread类的join进入WAITING状态，只有调用join方法的线程对象结束才能让当前线程恢复；</li></ul></li></ul></li></ul></li></ul><p>说明：当从WAITING或TIMED_WAITING恢复到Runnable状态时，如果发现当前线程没有得到监视器锁，那么会立刻转入BLOCKED状态。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101011_watermark.png" alt="image-20220524203355448"></p><p>或</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101509_watermark.jpg" alt="线程的生命周期Thread.State"></p><blockquote><p>我们在翻阅API的时候会发现Timed Waiting（计时等待） 与 Waiting（无限等待） 状态联系还是很紧密的，<br>比如Waiting（无限等待） 状态中wait方法是空参的，而timed waiting（计时等待） 中wait方法是带参的。<br>这种带参的方法，其实是一种倒计时操作，相当于我们生活中的小闹钟，我们设定好时间，到时通知，可是<br>如果提前得到（唤醒）通知，那么设定好时间在通知也就显得多此一举了，那么这种设计方案其实是一举两<br>得。如果没有得到（唤醒）通知，那么线程就处于Timed Waiting状态，直到倒计时完毕自动醒来；如果在倒<br>计时期间得到（唤醒）通知，那么线程从Timed Waiting状态立刻唤醒。</p></blockquote><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 22:15</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadStateTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-type">SubThread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubThread</span>();<br>        System.out.println(t.getName() + <span class="hljs-string">&quot; 状态 &quot;</span> + t.getState());<br>        t.start();<br><br>        <span class="hljs-keyword">while</span> (Thread.State.TERMINATED != t.getState()) &#123;<br>            System.out.println(t.getName() + <span class="hljs-string">&quot; 状态 &quot;</span> + t.getState());<br>            Thread.sleep(<span class="hljs-number">500</span>);<br>        &#125;<br>        System.out.println(t.getName() + <span class="hljs-string">&quot; 状态 &quot;</span> + t.getState());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>                System.out.println(<span class="hljs-string">&quot;打印：&quot;</span> + i);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1000</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>命令行演示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101069_watermark.png" alt="image-20220524195035355"></p><h2 id="5-线程安全问题及解决"><a href="#5-线程安全问题及解决" class="headerlink" title="5. 线程安全问题及解决"></a>5. 线程安全问题及解决</h2><p>当我们使用多个线程访问<strong>同一资源</strong>（可以是同一个变量、同一个文件、同一条记录等）的时候，若多个线程<code>只有读操作</code>，那么不会发生线程安全问题。但是如果多个线程中对资源有<code>读和写</code>的操作，就容易出现线程安全问题。</p><p>举例：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101569_watermark.png" alt="image-20220401233218326" style="zoom:67%;" /><p>类比：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101849_watermark.gif"></p><h3 id="5-1-同一个资源问题和线程安全问题"><a href="#5-1-同一个资源问题和线程安全问题" class="headerlink" title="5.1 同一个资源问题和线程安全问题"></a>5.1 同一个资源问题和线程安全问题</h3><p>案例：</p><p>火车站要卖票，我们模拟火车站的卖票过程。因为疫情期间，本次列车的座位共100个（即，只能出售100张火车票）。我们来模拟车站的售票窗口，实现多个窗口同时售票的过程。注意：不能出现错票、重票。</p><h4 id="5-1-1-局部变量不能共享"><a href="#5-1-1-局部变量不能共享" class="headerlink" title="5.1.1 局部变量不能共享"></a>5.1.1 局部变量不能共享</h4><p>示例代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript">package com.<span class="hljs-property">atguigu</span>.<span class="hljs-property">unsafe</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Thread</span> &#123;<br>    public <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>        int ticket = <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">while</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-title function_">getName</span>() + <span class="hljs-string">&quot;卖出一张票，票号:&quot;</span> + ticket);<br>            ticket--;<br>        &#125;<br>    &#125;<br>&#125;<br><br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicketDemo1</span> &#123;<br>    public <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">Window</span> w1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Window</span>();<br>        <span class="hljs-title class_">Window</span> w2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Window</span>();<br>        <span class="hljs-title class_">Window</span> w3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Window</span>();<br><br>        w1.<span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        w2.<span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        w3.<span class="hljs-title function_">setName</span>(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        w1.<span class="hljs-title function_">start</span>();<br>        w2.<span class="hljs-title function_">start</span>();<br>        w3.<span class="hljs-title function_">start</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：发现卖出300张票。</p><p>问题：局部变量是每次调用方法都是独立的，那么每个线程的run()的ticket是独立的，不是共享数据。</p><h4 id="5-1-2-不同对象的实例变量不共享"><a href="#5-1-2-不同对象的实例变量不共享" class="headerlink" title="5.1.2 不同对象的实例变量不共享"></a>5.1.2 不同对象的实例变量不共享</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.unsafe;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketWindow</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(getName() + <span class="hljs-string">&quot;卖出一张票，票号:&quot;</span> + ticket);<br>            ticket--;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicketDemo2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TicketWindow</span> <span class="hljs-variable">w1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketWindow</span>();<br>        <span class="hljs-type">TicketWindow</span> <span class="hljs-variable">w2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketWindow</span>();<br>        <span class="hljs-type">TicketWindow</span> <span class="hljs-variable">w3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketWindow</span>();<br><br>        w1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        w2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        w3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        w1.start();<br>        w2.start();<br>        w3.start();<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>结果：发现卖出300张票。</p><p>问题：不同的实例对象的实例变量是独立的。</p><h4 id="5-1-3-静态变量是共享的"><a href="#5-1-3-静态变量是共享的" class="headerlink" title="5.1.3 静态变量是共享的"></a>5.1.3 静态变量是共享的</h4><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.unsafe;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketSaleThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<span class="hljs-comment">//加入这个，使得问题暴露的更明显</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(getName() + <span class="hljs-string">&quot;卖出一张票，票号:&quot;</span> + ticket);<br>            ticket--;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicketDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TicketSaleThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketSaleThread</span>();<br>        <span class="hljs-type">TicketSaleThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketSaleThread</span>();<br>        <span class="hljs-type">TicketSaleThread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketSaleThread</span>();<br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java">窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">100</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">100</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">100</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">97</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">97</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">97</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">94</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">94</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">94</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">91</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">91</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">91</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">88</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">88</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">88</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">85</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">85</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">85</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">82</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">82</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">82</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">79</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">79</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">79</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">76</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">76</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">76</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">73</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">73</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">73</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">70</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">70</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">70</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">67</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">67</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">67</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">64</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">64</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">64</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">61</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">61</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">61</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">58</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">58</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">58</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">55</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">55</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">55</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">52</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">52</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">52</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">49</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">49</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">49</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">46</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">46</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">46</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">43</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">43</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">43</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">40</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">40</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">40</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">37</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">37</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">37</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">34</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">34</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">34</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">31</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">31</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">31</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">28</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">28</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">28</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">25</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">25</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">25</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">22</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">22</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">22</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">19</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">19</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">19</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">16</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">16</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">16</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">13</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">13</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">13</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">10</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">10</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">10</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">7</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">7</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">7</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">4</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">4</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">4</span><br>窗口<span class="hljs-number">3</span>卖出一张票，票号:<span class="hljs-number">1</span><br>窗口<span class="hljs-number">2</span>卖出一张票，票号:<span class="hljs-number">1</span><br>窗口<span class="hljs-number">1</span>卖出一张票，票号:<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>结果：发现卖出近100张票。</p><p>问题1：但是有重复票或负数票问题。</p><p>原因：线程安全问题</p><p>问题2：如果要考虑有两场电影，各卖100张票等</p><p>原因：TicketThread类的静态变量，是所有TicketThread类的对象共享</p><h4 id="5-1-4-同一个对象的实例变量共享"><a href="#5-1-4-同一个对象的实例变量共享" class="headerlink" title="5.1.4 同一个对象的实例变量共享"></a>5.1.4 同一个对象的实例变量共享</h4><p>示例代码：多个Thread线程使用同一个Runnable对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.safe;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketSaleRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<span class="hljs-comment">//加入这个，使得问题暴露的更明显</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出一张票，票号:&quot;</span> + ticket);<br>            ticket--;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicketDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TicketSaleRunnable</span> <span class="hljs-variable">tr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketSaleRunnable</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(tr, <span class="hljs-string">&quot;窗口一&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(tr, <span class="hljs-string">&quot;窗口二&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(tr, <span class="hljs-string">&quot;窗口三&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>结果：发现卖出近100张票。</p><p>问题：但是有重复票或负数票问题。</p><p>原因：线程安全问题</p><h4 id="5-1-5-抽取资源类，共享同一个资源对象"><a href="#5-1-5-抽取资源类，共享同一个资源对象" class="headerlink" title="5.1.5 抽取资源类，共享同一个资源对象"></a>5.1.5 抽取资源类，共享同一个资源对象</h4><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.unsafe;<br><br><span class="hljs-comment">//1、编写资源类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sale</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">10</span>);<span class="hljs-comment">//加入这个，使得问题暴露的更明显</span><br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出一张票，票号:&quot;</span> + ticket);<br>            ticket--;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;没有票了&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTicket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ticket;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicketDemo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//2、创建资源对象</span><br>        <span class="hljs-type">Ticket</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket</span>();<br><br>        <span class="hljs-comment">//3、启动多个线程操作资源类的对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;窗口一&quot;</span>) &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    ticket.sale();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;窗口二&quot;</span>) &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    ticket.sale();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                ticket.sale();<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;窗口三&quot;</span>);<br><br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>结果：发现卖出近100张票。</p><p>问题：但是有重复票或负数票问题。</p><p>原因：线程安全问题</p><h3 id="5-2-同步机制解决线程安全问题"><a href="#5-2-同步机制解决线程安全问题" class="headerlink" title="5.2 同步机制解决线程安全问题"></a>5.2 同步机制解决线程安全问题</h3><p>要解决上述多线程并发访问一个资源的安全性问题:也就是解决重复票与不存在票问题，Java中提供了同步机制<br>(synchronized)来解决。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101155_watermark.png" alt="1563372934332"></p><p>根据案例简述：</p><p>窗口1线程进入操作的时候，窗口2和窗口3线程只能在外等着，窗口1操作结束，窗口1和窗口2和窗口3才有机会进入代码去执行。也就是说在某个线程修改共享资源的时候，其他线程不能修改该资源，等待修改完毕同步之后，才能去抢夺CPU资源，完成对应的操作，保证了数据的同步性，解决了线程不安全的现象。</p><p>为了保证每个线程都能正常执行原子操作，Java引入了线程同步机制。注意:在任何时候,最多允许一个线程拥有同步锁，谁拿到锁就进入代码块，其他的线程只能在外等着(BLOCKED)。</p><h4 id="5-2-1-同步机制解决线程安全问题的原理"><a href="#5-2-1-同步机制解决线程安全问题的原理" class="headerlink" title="5.2.1 同步机制解决线程安全问题的原理"></a>5.2.1 同步机制解决线程安全问题的原理</h4><p>同步机制的原理，其实就相当于给某段代码加“锁”，任何线程想要执行这段代码，都要先获得“锁”，我们称它为同步锁。因为Java对象在堆中的数据分为分为对象头、实例变量、空白的填充。而对象头中包含：</p><ul><li>Mark Word：记录了和当前对象有关的GC、锁标记等信息。</li><li>指向类的指针：每一个对象需要记录它是由哪个类创建出来的。</li><li>数组长度（只有数组对象才有）</li></ul><p>哪个线程获得了“同步锁”对象之后，”同步锁“对象就会记录这个线程的ID，这样其他线程就只能等待了，除非这个线程”释放“了锁对象，其他线程才能重新获得&#x2F;占用”同步锁“对象。</p><h4 id="5-2-2-同步代码块和同步方法"><a href="#5-2-2-同步代码块和同步方法" class="headerlink" title="5.2.2 同步代码块和同步方法"></a>5.2.2 同步代码块和同步方法</h4><p><strong>同步代码块</strong>：synchronized 关键字可以用于某个区块前面，表示只对这个区块的资源实行互斥访问。<br>格式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(同步锁)&#123;<br>     需要同步操作的代码<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>同步方法：</strong>synchronized 关键字直接修饰方法，表示同一时刻只有一个线程能进入这个方法，其他线程在外面等着。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>    可能会产生线程安全问题的代码<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-3-同步锁机制"><a href="#5-2-3-同步锁机制" class="headerlink" title="5.2.3 同步锁机制"></a>5.2.3 同步锁机制</h4><p>在《Thinking in Java》中，是这么说的：对于并发工作，你需要某种方式来防止两个任务访问相同的资源（其实就是共享资源竞争）。 防止这种冲突的方法就是当资源被一个任务使用时，在其上加锁。第一个访问某项资源的任务必须锁定这项资源，使其他任务在其被解锁之前，就无法访问它了，而在其被解锁之时，另一个任务就可以锁定并使用它了。</p><h4 id="5-2-4-synchronized的锁是什么"><a href="#5-2-4-synchronized的锁是什么" class="headerlink" title="5.2.4 synchronized的锁是什么"></a>5.2.4 synchronized的锁是什么</h4><p>同步锁对象可以是任意类型，但是必须保证竞争“同一个共享资源”的多个线程必须使用同一个“同步锁对象”。</p><p>对于同步代码块来说，同步锁对象是由程序员手动指定的（很多时候也是指定为this或类名.class），但是对于同步方法来说，同步锁对象只能是默认的：</p><ul><li><p>静态方法：当前类的Class对象（类名.class）</p></li><li><p>非静态方法：this</p></li></ul><h4 id="5-2-5-同步操作的思考顺序"><a href="#5-2-5-同步操作的思考顺序" class="headerlink" title="5.2.5 同步操作的思考顺序"></a>5.2.5 同步操作的思考顺序</h4><p>1、如何找问题，即代码是否存在线程安全？（非常重要）<br>（1）明确哪些代码是多线程运行的代码<br>（2）明确多个线程是否有共享数据<br>（3）明确多线程运行代码中是否有多条语句操作共享数据</p><p>2、如何解决呢？（非常重要）<br>对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。<br>即所有操作共享数据的这些语句都要放在同步范围中</p><p>3、切记：</p><p>范围太小：不能解决安全问题</p><p>范围太大：因为一旦某个线程抢到锁，其他线程就只能等待，所以范围太大，效率会降低，不能合理利用CPU资源。</p><h4 id="5-2-6-代码演示"><a href="#5-2-6-代码演示" class="headerlink" title="5.2.6 代码演示"></a>5.2.6 代码演示</h4><h5 id="示例一：静态方法加锁"><a href="#示例一：静态方法加锁" class="headerlink" title="示例一：静态方法加锁"></a>示例一：静态方法加锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.safe;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketSaleThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//直接锁这里，肯定不行，会导致，只有一个窗口卖票</span><br>        <span class="hljs-keyword">while</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br>            saleOneTicket();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saleOneTicket</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//锁对象是TicketSaleThread类的Class对象，而一个类的Class对象在内存中肯定只有一个</span><br>        <span class="hljs-keyword">if</span>(ticket &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//不加条件，相当于条件判断没有进入锁管控，线程安全问题就没有解决</span><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出一张票，票号:&quot;</span> + ticket);<br>            ticket--;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicketDemo3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TicketSaleThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketSaleThread</span>();<br>        <span class="hljs-type">TicketSaleThread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketSaleThread</span>();<br>        <span class="hljs-type">TicketSaleThread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketSaleThread</span>();<br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="示例二：非静态方法加锁"><a href="#示例二：非静态方法加锁" class="headerlink" title="示例二：非静态方法加锁"></a>示例二：非静态方法加锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.safe;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicketDemo4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">TicketSaleRunnable</span> <span class="hljs-variable">tr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TicketSaleRunnable</span>();<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(tr, <span class="hljs-string">&quot;窗口一&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(tr, <span class="hljs-string">&quot;窗口二&quot;</span>);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(tr, <span class="hljs-string">&quot;窗口三&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketSaleRunnable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//直接锁这里，肯定不行，会导致，只有一个窗口卖票</span><br>        <span class="hljs-keyword">while</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br>            saleOneTicket();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saleOneTicket</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//锁对象是this，这里就是TicketSaleRunnable对象，因为上面3个线程使用同一个TicketSaleRunnable对象，所以可以</span><br>        <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//不加条件，相当于条件判断没有进入锁管控，线程安全问题就没有解决</span><br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出一张票，票号:&quot;</span> + ticket);<br>            ticket--;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="示例三：同步代码块"><a href="#示例三：同步代码块" class="headerlink" title="示例三：同步代码块"></a>示例三：同步代码块</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.safe;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SaleTicketDemo5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//2、创建资源对象</span><br>        <span class="hljs-type">Ticket</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket</span>();<br><br>        <span class="hljs-comment">//3、启动多个线程操作资源类的对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;窗口一&quot;</span>) &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//不能给run()直接加锁，因为t1,t2,t3的三个run方法分别属于三个Thread类对象，</span><br>                <span class="hljs-comment">// run方法是非静态方法，那么锁对象默认选this，那么锁对象根本不是同一个</span><br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    <span class="hljs-keyword">synchronized</span> (ticket) &#123;<br>                        ticket.sale();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-string">&quot;窗口二&quot;</span>) &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    <span class="hljs-keyword">synchronized</span> (ticket) &#123;<br>                        ticket.sale();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                    <span class="hljs-keyword">synchronized</span> (ticket) &#123;<br>                        ticket.sale();<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;, <span class="hljs-string">&quot;窗口三&quot;</span>);<br><br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//1、编写资源类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sale</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//也可以直接给这个方法加锁，锁对象是this，这里就是Ticket对象</span><br>        <span class="hljs-keyword">if</span> (ticket &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;卖出一张票，票号:&quot;</span> + ticket);<br>            ticket--;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;没有票了&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTicket</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> ticket;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-3-练习"><a href="#5-3-练习" class="headerlink" title="5.3 练习"></a>5.3 练习</h3><p>银行有一个账户。<br>有两个储户分别向同一个账户存3000元，每次存1000，存3次。每次存完打印账户余额。</p><p>问题：该程序是否有安全问题，如果有，如何解决？</p><p>【提示】<br>1，明确哪些代码是多线程运行代码，须写入run()方法<br>2，明确什么是共享数据。<br>3，明确多线程运行代码中哪些语句是操作共享数据的。</p><p>【拓展问题】可否实现两个储户交替存钱的操作</p><h2 id="6-再谈同步"><a href="#6-再谈同步" class="headerlink" title="6. 再谈同步"></a>6. 再谈同步</h2><h3 id="6-1-单例设计模式的线程安全问题"><a href="#6-1-单例设计模式的线程安全问题" class="headerlink" title="6.1 单例设计模式的线程安全问题"></a>6.1 单例设计模式的线程安全问题</h3><h4 id="6-1-1-饿汉式没有线程安全问题"><a href="#6-1-1-饿汉式没有线程安全问题" class="headerlink" title="6.1.1 饿汉式没有线程安全问题"></a>6.1.1 饿汉式没有线程安全问题</h4><p>饿汉式：在类初始化时就直接创建单例对象，而类初始化过程是没有线程安全问题的</p><p>形式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.single.hungry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HungrySingle</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">HungrySingle</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HungrySingle</span>(); <span class="hljs-comment">//对象是否声明为final 都可以</span><br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">HungrySingle</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HungrySingle <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>形式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">public class HungryOne&#123;</span><br><span class="hljs-comment">    public static final HungryOne INSTANCE = new HungryOne();</span><br><span class="hljs-comment">    private HungryOne()&#123;&#125;</span><br><span class="hljs-comment">&#125;*/</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">HungryOne</span>&#123;<br>    INSTANCE<br>&#125;<br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.single.hungry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HungrySingleTest</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-type">HungrySingle</span> <span class="hljs-variable">hs1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-type">HungrySingle</span> <span class="hljs-variable">hs2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-comment">//演示存在的线程安全问题</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                hs1 = HungrySingle.getInstance();<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                hs2 = HungrySingle.getInstance();<br>            &#125;<br>        &#125;;<br><br>        t1.start();<br>        t2.start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            t1.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            t2.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(hs1);<br>        System.out.println(hs2);<br>        System.out.println(hs1 == hs2);<span class="hljs-comment">//true</span><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-1-2-懒汉式线程安全问题"><a href="#6-1-2-懒汉式线程安全问题" class="headerlink" title="6.1.2 懒汉式线程安全问题"></a>6.1.2 懒汉式线程安全问题</h4><p>懒汉式：延迟创建对象，第一次调用getInstance方法再创建对象</p><p>形式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.single.lazy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyOne</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> LazyOne instance;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">LazyOne</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">//方式1：</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> LazyOne <span class="hljs-title function_">getInstance1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyOne</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>    <span class="hljs-comment">//方式2：</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyOne <span class="hljs-title function_">getInstance2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">synchronized</span>(LazyOne.class) &#123;<br>            <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>                instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyOne</span>();<br>            &#125;<br>            <span class="hljs-keyword">return</span> instance;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//方式3：</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazyOne <span class="hljs-title function_">getInstance3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">synchronized</span> (LazyOne.class) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">10</span>);<span class="hljs-comment">//加这个代码，暴露问题</span><br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(instance == <span class="hljs-literal">null</span>)&#123;<br>                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyOne</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    注意：上述方式3中，有指令重排问题</span><br><span class="hljs-comment">    mem = allocate(); 为单例对象分配内存空间</span><br><span class="hljs-comment">    instance = mem;   instance引用现在非空，但还未初始化</span><br><span class="hljs-comment">    ctorSingleton(instance); 为单例对象通过instance调用构造器</span><br><span class="hljs-comment">    从JDK2开始，分配空间、初始化、调用构造器会在线程的工作存储区一次性完成，然后复制到主存储区。但是需要   </span><br><span class="hljs-comment">    volatile关键字，避免指令重排。</span><br><span class="hljs-comment">    */</span><br>    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>形式二：使用内部类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.single.lazy;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazySingle</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">LazySingle</span><span class="hljs-params">()</span>&#123;&#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazySingle <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Inner.INSTANCE;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>        <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">LazySingle</span> <span class="hljs-variable">INSTANCE</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazySingle</span>();<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>内部类只有在外部类被调用才加载，产生INSTANCE实例；又不用加锁。</p><p>此模式具有之前两个模式的优点，同时屏蔽了它们的缺点，是最好的单例模式。</p><p>此时的内部类，使用enum进行定义，也是可以的。</p></blockquote><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.single.lazy;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLazy</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">LazyOne</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> LazyOne.getInstance();<br>        <span class="hljs-type">LazyOne</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> LazyOne.getInstance();<br><br>        System.out.println(s1);<br>        System.out.println(s2);<br>        System.out.println(s1 == s2);<br>    &#125;<br><br>    <span class="hljs-comment">//把s1和s2声明在外面，是想要在线程的匿名内部类中为s1和s2赋值</span><br>    LazyOne s1;<br>    LazyOne s2;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                s1 = LazyOne.getInstance();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                s2 = LazyOne.getInstance();<br>            &#125;<br>        &#125;;<br><br>        t1.start();<br>        t2.start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            t1.join();<br>            t2.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(s1);<br>        System.out.println(s2);<br>        System.out.println(s1 == s2);<br>    &#125;<br><br><br>    LazySingle obj1;<br>    LazySingle obj2;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                obj1 = LazySingle.getInstance();<br>            &#125;<br>        &#125;;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>                obj2 = LazySingle.getInstance();<br>            &#125;<br>        &#125;;<br><br>        t1.start();<br>        t2.start();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            t1.join();<br>            t2.join();<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        System.out.println(obj1);<br>        System.out.println(obj2);<br>        System.out.println(obj1 == obj2);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-2-死锁"><a href="#6-2-死锁" class="headerlink" title="6.2 死锁"></a>6.2 死锁</h3><p>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101765_watermark.png" alt="thread-lock"></p><blockquote><p>【小故事】</p><p>面试官：你能解释清楚什么是死锁，我就录取你！<br>面试者：你录取我，我就告诉你什么是死锁！<br>….<br>恭喜你，面试通过了</p></blockquote><p>一旦出现死锁，整个程序既不会发生异常，也不会给出任何提示，只是所有线程处于阻塞状态，无法继续。</p><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLockTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">synchronized</span> (s1) &#123;<br>s1.append(<span class="hljs-string">&quot;a&quot;</span>);<br>s2.append(<span class="hljs-string">&quot;1&quot;</span>);<br><br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">10</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br><span class="hljs-keyword">synchronized</span> (s2) &#123;<br>s1.append(<span class="hljs-string">&quot;b&quot;</span>);<br>s2.append(<span class="hljs-string">&quot;2&quot;</span>);<br><br>System.out.println(s1);<br>System.out.println(s2);<br><br>&#125;<br>&#125;<br>&#125;<br>&#125;.start();<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">synchronized</span> (s2) &#123;<br>s1.append(<span class="hljs-string">&quot;c&quot;</span>);<br>s2.append(<span class="hljs-string">&quot;3&quot;</span>);<br><br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">10</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br><span class="hljs-keyword">synchronized</span> (s1) &#123;<br>s1.append(<span class="hljs-string">&quot;d&quot;</span>);<br>s2.append(<span class="hljs-string">&quot;4&quot;</span>);<br><br>System.out.println(s1);<br>System.out.println(s2);<br><br>&#125;<br><br>&#125;<br>&#125;<br>&#125;.start();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(B b)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;当前线程名: &quot;</span> + Thread.currentThread().getName()<br>+ <span class="hljs-string">&quot; 进入了A实例的foo方法&quot;</span>); <span class="hljs-comment">// ①</span><br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">200</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException ex) &#123;<br>ex.printStackTrace();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;当前线程名: &quot;</span> + Thread.currentThread().getName()<br>+ <span class="hljs-string">&quot; 企图调用B实例的last方法&quot;</span>); <span class="hljs-comment">// ③</span><br>b.last();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">last</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;进入了A类的last方法内部&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bar</span><span class="hljs-params">(A a)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;当前线程名: &quot;</span> + Thread.currentThread().getName()<br>+ <span class="hljs-string">&quot; 进入了B实例的bar方法&quot;</span>); <span class="hljs-comment">// ②</span><br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">200</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException ex) &#123;<br>ex.printStackTrace();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;当前线程名: &quot;</span> + Thread.currentThread().getName()<br>+ <span class="hljs-string">&quot; 企图调用A实例的last方法&quot;</span>); <span class="hljs-comment">// ④</span><br>a.last();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">last</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;进入了B类的last方法内部&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br><span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br><span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> &#123;<br>Thread.currentThread().setName(<span class="hljs-string">&quot;主线程&quot;</span>);<br><span class="hljs-comment">// 调用a对象的foo方法</span><br>a.foo(b);<br>System.out.println(<span class="hljs-string">&quot;进入了主线程之后&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>Thread.currentThread().setName(<span class="hljs-string">&quot;副线程&quot;</span>);<br><span class="hljs-comment">// 调用b对象的bar方法</span><br>b.bar(a);<br>System.out.println(<span class="hljs-string">&quot;进入了副线程之后&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">DeadLock</span> <span class="hljs-variable">dl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeadLock</span>();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(dl).start();<br>dl.init();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestDeadLock</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">g</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-type">Object</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-type">Owner</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Owner</span>(g,m);<br><span class="hljs-type">Customer</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(g,m);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(s).start();<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(c).start();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Owner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">private</span> Object goods;<br><span class="hljs-keyword">private</span> Object money;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Owner</span><span class="hljs-params">(Object goods, Object money)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.goods = goods;<br><span class="hljs-built_in">this</span>.money = money;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">synchronized</span> (goods) &#123;<br>System.out.println(<span class="hljs-string">&quot;先给钱&quot;</span>);<br><span class="hljs-keyword">synchronized</span> (money) &#123;<br>System.out.println(<span class="hljs-string">&quot;发货&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Customer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">private</span> Object goods;<br><span class="hljs-keyword">private</span> Object money;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Customer</span><span class="hljs-params">(Object goods, Object money)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.goods = goods;<br><span class="hljs-built_in">this</span>.money = money;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">synchronized</span> (money) &#123;<br>System.out.println(<span class="hljs-string">&quot;先发货&quot;</span>);<br><span class="hljs-keyword">synchronized</span> (goods) &#123;<br>System.out.println(<span class="hljs-string">&quot;再给钱&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>诱发死锁的原因：</strong></p><ul><li>互斥条件</li><li>占用且等待</li><li>不可抢夺（或不可抢占）</li><li>循环等待</li></ul><p>以上4个条件，同时出现就会触发死锁。</p><p><strong>解决死锁：</strong></p><p>死锁一旦出现，基本很难人为干预，只能尽量规避。可以考虑打破上面的诱发条件。</p><p>针对条件1：互斥条件基本上无法被破坏。因为线程需要通过互斥解决安全问题。</p><p>针对条件2：可以考虑一次性申请所有所需的资源，这样就不存在等待的问题。</p><p>针对条件3：占用部分资源的线程在进一步申请其他资源时，如果申请不到，就主动释放掉已经占用的资源。</p><p>针对条件4：可以将资源改为线性顺序。申请资源时，先申请序号较小的，这样避免循环等待问题。</p><h3 id="6-3-JDK5-0新特性：Lock-锁"><a href="#6-3-JDK5-0新特性：Lock-锁" class="headerlink" title="6.3 JDK5.0新特性：Lock(锁)"></a>6.3 JDK5.0新特性：Lock(锁)</h3><ul><li><p>JDK5.0的新增功能，保证线程的安全。与采用synchronized相比，Lock可提供多种锁方案，更灵活、更强大。Lock通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</p></li><li><p>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</p></li><li><p>在实现线程安全的控制中，比较常用的是<code>ReentrantLock</code>，可以显式加锁、释放锁。</p><ul><li>ReentrantLock类实现了 Lock 接口，它拥有与 synchronized 相同的并发性和内存语义，但是添加了类似锁投票、定时锁等候和可中断锁等候的一些特性。此外，它还提供了在激烈争用情况下更佳的性能。</li></ul></li><li><p>Lock锁也称同步锁，加锁与释放锁方法，如下：</p><ul><li>public void lock() :加同步锁。</li><li>public void unlock() :释放同步锁。</li></ul></li><li><p>代码结构</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">//1. 创建Lock的实例，必须确保多个线程共享同一个Lock实例</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReenTrantLock</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//2. 调动lock()，实现需共享的代码的锁定</span><br>lock.lock();<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//保证线程安全的代码;</span><br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-comment">//3. 调用unlock()，释放共享代码的锁定</span><br>lock.unlock();  <br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>注意：如果同步代码有异常，要将unlock()写入finally语句块。</p></blockquote><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.locks.ReentrantLock;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//1. 创建Lock的实例，必须确保多个线程共享同一个Lock实例</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-comment">//2. 调动lock()，实现需共享的代码的锁定</span><br>lock.lock();<br><span class="hljs-keyword">if</span>(ticket &gt; <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">10</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>System.out.println(ticket--);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>                <span class="hljs-comment">//3. 调用unlock()，释放共享代码的锁定</span><br>lock.unlock();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLock</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Window</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Window</span>();<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t);<br><br>t1.start();<br>t2.start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>synchronized与Lock的对比</strong></p><ol><li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，出了作用域、遇到异常等自动解锁</li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类），更体现面向对象。</li><li>（了解）Lock锁可以对读不加锁，对写加锁，synchronized不可以</li><li>（了解）Lock锁可以有多种获取锁的方式，可以从sleep的线程中抢到锁，synchronized不可以</li></ol><blockquote><p>说明：开发建议中处理线程安全问题优先使用顺序为：</p><p>•    Lock —-&gt; 同步代码块 —-&gt; 同步方法</p></blockquote><h2 id="7-线程的通信"><a href="#7-线程的通信" class="headerlink" title="7. 线程的通信"></a>7. 线程的通信</h2><h3 id="7-1-线程间通信"><a href="#7-1-线程间通信" class="headerlink" title="7.1 线程间通信"></a>7.1 线程间通信</h3><p><strong>为什么要处理线程间通信：</strong></p><p>当我们<code>需要多个线程</code>来共同完成一件任务，并且我们希望他们<code>有规律的执行</code>，那么多线程之间需要一些通信机制，可以协调它们的工作，以此实现多线程共同操作一份数据。</p><p>比如：线程A用来生产包子的，线程B用来吃包子的，包子可以理解为同一资源，线程A与线程B处理的动作，一个是生产，一个是消费，此时B线程必须等到A线程完成后才能执行，那么线程A与线程B之间就需要线程通信，即—— <strong>等待唤醒机制。</strong></p><h3 id="7-2-等待唤醒机制"><a href="#7-2-等待唤醒机制" class="headerlink" title="7.2 等待唤醒机制"></a>7.2 等待唤醒机制</h3><p>这是多个线程间的一种<code>协作机制</code>。谈到线程我们经常想到的是线程间的<code>竞争（race）</code>，比如去争夺锁，但这并不是故事的全部，线程间也会有协作机制。</p><p>在一个线程满足某个条件时，就进入等待状态（<code>wait() / wait(time)</code>）， 等待其他线程执行完他们的指定代码过后再将其唤醒（<code>notify()</code>）;或可以指定wait的时间，等时间到了自动唤醒；在有多个线程进行等待时，如果需要，可以使用 <code>notifyAll()</code>来唤醒所有的等待线程。wait&#x2F;notify 就是线程间的一种协作机制。</p><ol><li>wait：线程不再活动，不再参与调度，进入 <code>wait set</code> 中，因此不会浪费 CPU 资源，也不会去竞争锁了，这时的线程状态是 WAITING 或 TIMED_WAITING。它还要等着别的线程执行一个<code>特别的动作</code>，也即“<code>通知（notify）</code>”或者等待时间到，在这个对象上等待的线程从wait set 中释放出来，重新进入到调度队列（<code>ready queue</code>）中</li><li>notify：则选取所通知对象的 wait set 中的一个线程释放；</li><li>notifyAll：则释放所通知对象的 wait set 上的全部线程。</li></ol><blockquote><p>注意：</p><p>被通知的线程被唤醒后也不一定能立即恢复执行，因为它当初中断的地方是在同步块内，而此刻它已经不持有锁，所以它需要再次尝试去获取锁（很可能面临其它线程的竞争），成功后才能在当初调用 wait 方法之后的地方恢复执行。</p><p>总结如下：</p><ul><li>如果能获取锁，线程就从 WAITING 状态变成 RUNNABLE（可运行） 状态；</li><li>否则，线程就从 WAITING 状态又变成 BLOCKED（等待锁） 状态</li></ul></blockquote><h3 id="7-3-举例"><a href="#7-3-举例" class="headerlink" title="7.3 举例"></a>7.3 举例</h3><p>例题：使用两个线程打印 1-100。线程1, 线程2 交替打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Communication</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                notify();<br>                <span class="hljs-keyword">if</span> (i &lt;= <span class="hljs-number">100</span>) &#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;:&quot;</span> + i++);<br>                &#125; <span class="hljs-keyword">else</span><br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    wait();<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-4-调用wait和notify需注意的细节"><a href="#7-4-调用wait和notify需注意的细节" class="headerlink" title="7.4 调用wait和notify需注意的细节"></a>7.4 调用wait和notify需注意的细节</h3><ol><li>wait方法与notify方法必须要由<code>同一个锁对象调用</code>。因为：对应的锁对象可以通过notify唤醒使用同一个锁对象调用的wait方法后的线程。</li><li>wait方法与notify方法是属于Object类的方法的。因为：锁对象可以是任意对象，而任意对象的所属类都是继承了Object类的。</li><li>wait方法与notify方法必须要在<code>同步代码块</code>或者是<code>同步函数</code>中使用。因为：必须要<code>通过锁对象</code>调用这2个方法。否则会报java.lang.IllegalMonitorStateException异常。</li></ol><h3 id="7-5-生产者与消费者问题"><a href="#7-5-生产者与消费者问题" class="headerlink" title="7.5 生产者与消费者问题"></a>7.5 生产者与消费者问题</h3><p>等待唤醒机制可以解决经典的“生产者与消费者”的问题。生产者与消费者问题（英语：Producer-consumer problem），也称有限缓冲问题（英语：Bounded-buffer problem），是一个多线程同步问题的经典案例。该问题描述了两个（多个）<code>共享固定大小缓冲区的线程</code>——即所谓的“生产者”和“消费者”——在实际运行时会发生的问题。</p><p>生产者的主要作用是生成一定量的数据放到缓冲区中，然后重复此过程。与此同时，消费者也在缓冲区消耗这些数据。<strong>该问题的关键就是要保证生产者不会在缓冲区满时加入数据，消费者也不会在缓冲区中空时消耗数据。</strong></p><p><strong>举例：</strong></p><p>生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p><p>类似的场景，比如厨师和服务员等。</p><p><strong>生产者与消费者问题中其实隐含了两个问题：</strong></p><ul><li>线程安全问题：因为生产者与消费者共享数据缓冲区，产生安全问题。不过这个问题可以使用同步解决。</li><li>线程的协调工作问题：<ul><li>要解决该问题，就必须让生产者线程在缓冲区满时等待(wait)，暂停进入阻塞状态，等到下次消费者消耗了缓冲区中的数据的时候，通知(notify)正在等待的线程恢复到就绪状态，重新开始往缓冲区添加数据。同样，也可以让消费者线程在缓冲区空时进入等待(wait)，暂停进入阻塞状态，等到生产者往缓冲区添加数据之后，再通知(notify)正在等待的线程恢复到就绪状态。通过这样的通信机制来解决此类问题。</li></ul></li></ul><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerProducerTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Clerk</span> <span class="hljs-variable">clerk</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Clerk</span>();<br><span class="hljs-type">Producer</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer</span>(clerk);<br><br><span class="hljs-type">Consumer</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(clerk);<br><span class="hljs-type">Consumer</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer</span>(clerk);<br><br>p1.setName(<span class="hljs-string">&quot;生产者1&quot;</span>);<br>c1.setName(<span class="hljs-string">&quot;消费者1&quot;</span>);<br>c2.setName(<span class="hljs-string">&quot;消费者2&quot;</span>);<br><br>p1.start();<br>c1.start();<br>c2.start();<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//生产者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-keyword">private</span> Clerk clerk;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Producer</span><span class="hljs-params">(Clerk clerk)</span>&#123;<br><span class="hljs-built_in">this</span>.clerk = clerk;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>System.out.println(<span class="hljs-string">&quot;=========生产者开始生产产品========&quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">40</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br><span class="hljs-comment">//要求clerk去增加产品</span><br>clerk.addProduct();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//消费者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-keyword">private</span> Clerk clerk;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer</span><span class="hljs-params">(Clerk clerk)</span>&#123;<br><span class="hljs-built_in">this</span>.clerk = clerk;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;=========消费者开始消费产品========&quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">90</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br><span class="hljs-comment">//要求clerk去减少产品</span><br>clerk.minusProduct();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//资源类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Clerk</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">productNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//产品数量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_PRODUCT</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_PRODUCT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-comment">//增加产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addProduct</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(productNum &lt; MAX_PRODUCT)&#123;<br>productNum++;<br>System.out.println(Thread.currentThread().getName() + <br><span class="hljs-string">&quot;生产了第&quot;</span> + productNum + <span class="hljs-string">&quot;个产品&quot;</span>);<br><span class="hljs-comment">//唤醒消费者</span><br><span class="hljs-built_in">this</span>.notifyAll();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//减少产品</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">minusProduct</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(productNum &gt;= MIN_PRODUCT)&#123;<br>System.out.println(Thread.currentThread().getName() + <br><span class="hljs-string">&quot;消费了第&quot;</span> + productNum + <span class="hljs-string">&quot;个产品&quot;</span>);<br>productNum--;<br><br><span class="hljs-comment">//唤醒生产者</span><br><span class="hljs-built_in">this</span>.notifyAll();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-built_in">this</span>.wait();<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-6-面试题：区分sleep-和wait"><a href="#7-6-面试题：区分sleep-和wait" class="headerlink" title="7.6 面试题：区分sleep()和wait()"></a>7.6 面试题：区分sleep()和wait()</h3><p>相同点：一旦执行，都会使得当前线程结束执行状态，进入阻塞状态。</p><p>不同点：</p><p> ① 定义方法所属的类：sleep():Thread中定义。  wait():Object中定义</p><p>② 使用范围的不同：sleep()可以在任何需要使用的位置被调用； wait():必须使用在同步代码块或同步方法中</p><p>③ 都在同步结构中使用的时候，是否释放同步监视器的操作不同：sleep():不会释放同步监视器 ;wait():会释放同步监视器</p><p>④ 结束等待的方式不同：sleep()：指定时间一到就结束阻塞。 wait():可以指定时间也可以无限等待直到notify或notifyAll。</p><h3 id="7-7-是否释放锁的操作"><a href="#7-7-是否释放锁的操作" class="headerlink" title="7.7 是否释放锁的操作"></a>7.7 是否释放锁的操作</h3><p>任何线程进入同步代码块、同步方法之前，必须先获得对同步监视器的锁定，那么何时会释放对同步监视器的锁定呢？</p><h4 id="7-7-1-释放锁的操作"><a href="#7-7-1-释放锁的操作" class="headerlink" title="7.7.1 释放锁的操作"></a>7.7.1 释放锁的操作</h4><p>当前线程的同步方法、同步代码块执行结束。</p><p>当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、该方法的继续执行。</p><p>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导致当前线程异常结束。</p><p>当前线程在同步代码块、同步方法中执行了锁对象的wait()方法，当前线程被挂起，并释放锁。</p><h4 id="7-7-2-不会释放锁的操作"><a href="#7-7-2-不会释放锁的操作" class="headerlink" title="7.7.2 不会释放锁的操作"></a>7.7.2 不会释放锁的操作</h4><p>线程执行同步代码块或同步方法时，程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行。</p><p>线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该该线程挂起，该线程不会释放锁（同步监视器）。</p><ul><li>应尽量避免使用suspend()和resume()这样的过时来控制线程。</li></ul><h2 id="8-JDK5-0新增线程创建方式"><a href="#8-JDK5-0新增线程创建方式" class="headerlink" title="8. JDK5.0新增线程创建方式"></a>8. JDK5.0新增线程创建方式</h2><h3 id="8-1-新增方式一：实现Callable接口"><a href="#8-1-新增方式一：实现Callable接口" class="headerlink" title="8.1 新增方式一：实现Callable接口"></a>8.1 新增方式一：实现Callable接口</h3><ul><li>与使用Runnable相比， Callable功能更强大些<ul><li>相比run()方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值（需要借助FutureTask类，获取返回结果）</li></ul></li><li>Future接口（了解）<ul><li>可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。</li><li>FutureTask是Futrue接口的唯一的实现类</li><li>FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值</li></ul></li><li>缺点：在获取分线程执行结果的时候，当前线程（或是主线程）受阻塞，效率较低。</li><li>代码举例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 创建多线程的方式三：实现Callable （jdk5.0新增的）</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">//1.创建一个实现Callable的实现类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span> &#123;<br>    <span class="hljs-comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(i);<br>                sum += i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CallableTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//3.创建Callable接口实现类的对象</span><br>        <span class="hljs-type">NumThread</span> <span class="hljs-variable">numThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumThread</span>();<br><br>        <span class="hljs-comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span><br>        <span class="hljs-type">FutureTask</span> <span class="hljs-variable">futureTask</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>(numThread);<br>        <span class="hljs-comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(futureTask).start();<br><br><br><span class="hljs-comment">//      接收返回值</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//6.获取Callable中call方法的返回值</span><br>            <span class="hljs-comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> futureTask.get();<br>            System.out.println(<span class="hljs-string">&quot;总和为：&quot;</span> + sum);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">catch</span> (ExecutionException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-2-新增方式二：使用线程池"><a href="#8-2-新增方式二：使用线程池" class="headerlink" title="8.2 新增方式二：使用线程池"></a>8.2 新增方式二：使用线程池</h3><p><strong>现有问题：</strong></p><p>如果并发的线程数量很多，并且每个线程都是执行一个时间很短的任务就结束了，这样频繁创建线程就会大大降低系统的效率，因为频繁创建线程和销毁线程需要时间。</p><p>那么有没有一种办法使得线程可以复用，即执行完一个任务，并不被销毁，而是可以继续执行其他的任务？</p><p><strong>思路：</strong>提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%A4%9A%E7%BA%BF%E7%A8%8B/202402291101138_watermark.jpg" alt="线程池的理解"></p><p><strong>好处：</strong></p><ul><li><p>提高响应速度（减少了创建新线程的时间）</p></li><li><p>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</p></li><li><p>便于线程管理</p><ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没有任务时最多保持多长时间后会终止</li><li>…</li></ul></li></ul><p><strong>线程池相关API</strong></p><ul><li>JDK5.0之前，我们必须手动自定义线程池。从JDK5.0开始，Java内置线程池相关的API。在java.util.concurrent包下提供了线程池相关API：<code>ExecutorService</code> 和 <code>Executors</code>。</li><li><code>ExecutorService</code>：真正的线程池接口。常见子类ThreadPoolExecutor<ul><li><code>void execute(Runnable command)</code> ：执行任务&#x2F;命令，没有返回值，一般用来执行Runnable</li><li><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code>：执行任务，有返回值，一般又来执行Callable</li><li><code>void shutdown()</code> ：关闭连接池</li></ul></li><li><code>Executors</code>：一个线程池的工厂类，通过此类的静态工厂方法可以创建多种类型的线程池对象。<ul><li><code>Executors.newCachedThreadPool()</code>：创建一个可根据需要创建新线程的线程池</li><li><code>Executors.newFixedThreadPool(int nThreads)</code>; 创建一个可重用固定线程数的线程池</li><li><code>Executors.newSingleThreadExecutor()</code> ：创建一个只有一个线程的线程池</li><li><code>Executors.newScheduledThreadPool(int corePoolSize)</code>：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</li></ul></li></ul><p><strong>代码举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">100</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberThread1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">100</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)&#123;<br>                System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;: &quot;</span> + i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberThread2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">call</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">evenSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录偶数的和</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt;= <span class="hljs-number">100</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                evenSum += i;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> evenSum;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPoolTest</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1. 提供指定线程数量的线程池</span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">10</span>);<br>        <span class="hljs-type">ThreadPoolExecutor</span> <span class="hljs-variable">service1</span> <span class="hljs-operator">=</span> (ThreadPoolExecutor) service;<br><span class="hljs-comment">//        //设置线程池的属性</span><br><span class="hljs-comment">//        System.out.println(service.getClass());//ThreadPoolExecutor</span><br>        service1.setMaximumPoolSize(<span class="hljs-number">50</span>); <span class="hljs-comment">//设置线程池中线程数的上限</span><br><br>        <span class="hljs-comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span><br>        service.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberThread</span>());<span class="hljs-comment">//适合适用于Runnable</span><br>        service.execute(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberThread1</span>());<span class="hljs-comment">//适合适用于Runnable</span><br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Future</span> <span class="hljs-variable">future</span> <span class="hljs-operator">=</span> service.submit(<span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberThread2</span>());<span class="hljs-comment">//适合使用于Callable</span><br>            System.out.println(<span class="hljs-string">&quot;总和为：&quot;</span> + future.get());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-comment">//3.关闭连接池</span><br>        service.shutdown();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异常处理</title>
    <link href="/2024/02/28/9.%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    <url>/2024/02/28/9.%20%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="1-异常概述"><a href="#1-异常概述" class="headerlink" title="1. 异常概述"></a>1. 异常概述</h2><h3 id="1-1-什么是生活的异常"><a href="#1-1-什么是生活的异常" class="headerlink" title="1.1 什么是生活的异常"></a>1.1 什么是生活的异常</h3><p>男主角小明每天开车上班，正常车程1小时。但是，不出意外的话，可能会出现意外。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441448_watermark.png" alt="image-20220814203918560"></p><p>出现意外，即为异常情况。我们会做相应的处理。如果不处理，到不了公司。处理完了，就可以正常开车去公司。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441563_watermark.png" alt="image-20220520210320301" style="zoom:70%;" /><h3 id="1-2-什么是程序的异常"><a href="#1-2-什么是程序的异常" class="headerlink" title="1.2 什么是程序的异常"></a>1.2 什么是程序的异常</h3><p>在使用计算机语言进行项目开发的过程中，即使程序员把代码写得<code>尽善尽美</code>，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：<code>客户输入数据的格式问题</code>，<code>读取文件是否存在</code>，<code>网络是否始终保持通畅</code>等等。</p><ul><li><strong>异常</strong> ：指的是程序在执行过程中，出现的非正常情况，如果不处理最终会导致JVM的非正常停止。</li></ul><blockquote><p>异常指的并不是语法错误和逻辑错误。语法错了，编译不通过，不会产生字节码文件，根本不能运行。</p><p>代码逻辑错误，只是没有得到想要的结果，例如：求a与b的和，你写成了a-b</p></blockquote><h3 id="1-3-异常的抛出机制"><a href="#1-3-异常的抛出机制" class="headerlink" title="1.3 异常的抛出机制"></a>1.3 异常的抛出机制</h3><p>Java中是如何表示不同的异常情况，又是如何让程序员得知，并处理异常的呢？</p><p>Java中把不同的异常用不同的类表示，一旦发生某种异常，就<code>创建该异常类型的对象</code>，并且抛出（throw）。然后程序员可以捕获(catch)到这个异常对象，并处理；如果没有捕获(catch)这个异常对象，那么这个异常对象将会导致程序终止。</p><p>举例：</p><p>运行下面的程序，程序会产生一个数组角标越界异常<code>ArrayIndexOfBoundsException</code>。我们通过图解来解析下异常产生和抛出的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTools</span> &#123;<br>    <span class="hljs-comment">// 对给定的数组通过给定的角标获取元素。</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> index)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">element</span> <span class="hljs-operator">=</span> arr[index];<br>        <span class="hljs-keyword">return</span> element;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123; <span class="hljs-number">34</span>, <span class="hljs-number">12</span>, <span class="hljs-number">67</span> &#125;;<br>        intnum = ArrayTools.getElement(arr, <span class="hljs-number">4</span>)<br>        System.out.println(<span class="hljs-string">&quot;num=&quot;</span> + num);<br>        System.out.println(<span class="hljs-string">&quot;over&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述程序执行过程图解：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441467_watermark.png"></p><h3 id="1-4-如何对待异常"><a href="#1-4-如何对待异常" class="headerlink" title="1.4 如何对待异常"></a>1.4 如何对待异常</h3><p> 对于程序出现的异常，一般有两种解决方法：一是遇到错误就终止程序的运行。另一种方法是程序员在编写程序时，就充分考虑到各种可能发生的异常和错误，极力预防和避免。实在无法避免的，要编写相应的代码进行异常的检测、以及<code>异常的处理</code>，保证代码的<code>健壮性</code>。</p><h2 id="2-Java异常体系"><a href="#2-Java异常体系" class="headerlink" title="2. Java异常体系"></a>2. Java异常体系</h2><h3 id="2-1-Throwable"><a href="#2-1-Throwable" class="headerlink" title="2.1 Throwable"></a>2.1 Throwable</h3><p><code>java.lang.Throwable</code> 类是Java程序执行过程中发生的异常事件对应的类的根父类。</p><p><strong>Throwable中的常用方法：</strong></p><ul><li><p><code>public void printStackTrace()</code>：打印异常的详细信息。</p><p>包含了异常的类型、异常的原因、异常出现的位置、在开发和调试阶段都得使用printStackTrace。</p></li><li><p><code>public String getMessage()</code>：获取发生异常的原因。</p></li></ul><h3 id="2-2-Error-和-Exception"><a href="#2-2-Error-和-Exception" class="headerlink" title="2.2 Error 和 Exception"></a>2.2 Error 和 Exception</h3><p>Throwable可分为两类：Error和Exception。分别对应着<code>java.lang.Error</code>与<code>java.lang.Exception</code>两个类。</p><p><strong>Error：</strong>Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。一般不编写针对性的代码进行处理。</p><ul><li>例如：StackOverflowError（栈内存溢出）和OutOfMemoryError（堆内存溢出，简称OOM）。</li></ul><p><strong>Exception:</strong> 其它因编程错误或偶然的外在因素导致的一般性问题，需要使用针对性的代码进行处理，使程序继续运行。否则一旦发生异常，程序也会挂掉。例如：</p><ul><li>空指针访问</li><li>试图读取不存在的文件</li><li>网络连接中断</li><li>数组角标越界</li></ul><blockquote><p>说明：</p><ol><li>无论是Error还是Exception，还有很多子类，异常的类型非常丰富。当代码运行出现异常时，特别是我们不熟悉的异常时，不要紧张，把异常的简单类名，拷贝到API中去查去认识它即可。</li><li>我们本章讲的异常处理，其实针对的就是Exception。</li></ol></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441509_watermark.png" alt="image-20220511161910951" style="zoom:67%;" /><h3 id="2-3-编译时异常和运行时异常"><a href="#2-3-编译时异常和运行时异常" class="headerlink" title="2.3 编译时异常和运行时异常"></a>2.3 编译时异常和运行时异常</h3><p>Java程序的执行分为编译时过程和运行时过程。有的错误只有在<code>运行时</code>才会发生。比如：除数为0，数组下标越界等。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441416_watermark.png" alt="image-20220330002449526" style="zoom:80%;" /><p>因此，根据异常可能出现的阶段，可以将异常分为：</p><ul><li><strong>编译时期异常</strong>（即checked异常、受检异常）：在代码编译阶段，编译器就能明确<code>警示</code>当前代码<code>可能发生（不是一定发生）</code>xx异常，并<code>明确督促</code>程序员提前编写处理它的代码。如果程序员<code>没有编写</code>对应的异常处理代码，则编译器就会直接判定编译失败，从而不能生成字节码文件。通常，这类异常的发生不是由程序员的代码引起的，或者不是靠加简单判断就可以避免的，例如：FileNotFoundException（文件找不到异常）。</li><li><strong>运行时期异常</strong>（即runtime异常、unchecked异常、非受检异常）：在代码编译阶段，编译器完全不做任何检查，无论该异常是否会发生，编译器都不给出任何提示。只有等代码运行起来并确实发生了xx异常，它才能被发现。通常，这类异常是由程序员的代码编写不当引起的，只要稍加判断，或者细心检查就可以避免。<ul><li><strong>java.lang.RuntimeException</strong>类及它的子类都是运行时异常。比如：ArrayIndexOutOfBoundsException数组下标越界异常，ClassCastException类型转换异常。</li></ul></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441603_watermark.png" alt="1562771528807"></p><h2 id="3-常见的错误和异常"><a href="#3-常见的错误和异常" class="headerlink" title="3. 常见的错误和异常"></a>3. 常见的错误和异常</h2><h3 id="3-1-Error"><a href="#3-1-Error" class="headerlink" title="3.1 Error"></a>3.1 Error</h3><p>最常见的就是VirtualMachineError，它有两个经典的子类：StackOverflowError、OutOfMemoryError。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.exception;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStackOverflowError</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//StackOverflowError</span><br>        recursion();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recursion</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//递归方法</span><br>        recursion(); <br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.exception;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestOutOfMemoryError</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//OutOfMemoryError</span><br>        <span class="hljs-comment">//方式一：</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[Integer.MAX_VALUE];<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//OutOfMemoryError</span><br>        <span class="hljs-comment">//方式二：</span><br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            s.append(<span class="hljs-string">&quot;atguigu&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-2-运行时异常"><a href="#3-2-运行时异常" class="headerlink" title="3.2 运行时异常"></a>3.2 运行时异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.exception;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRuntimeException</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//NullPointerException</span><br>        <span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][];<br>        System.out.println(arr[<span class="hljs-number">0</span>].length);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//ClassCastException</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> (String) obj;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//ArrayIndexOutOfBoundsException</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//InputMismatchException</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>);<span class="hljs-comment">//输入非整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> input.nextInt();<br>        input.close();<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test05</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//ArithmeticException</span><br>        System.out.println(a/b);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-编译时异常"><a href="#3-3-编译时异常" class="headerlink" title="3.3 编译时异常"></a>3.3 编译时异常</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.exception;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCheckedException</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test06</span><span class="hljs-params">()</span> &#123;<br>        Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">//休眠1秒  InterruptedException</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test07</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;java.lang.String&quot;</span>);<span class="hljs-comment">//ClassNotFoundException</span><br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test08</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> DriverManager.getConnection(<span class="hljs-string">&quot;....&quot;</span>);  <span class="hljs-comment">//SQLException</span><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test09</span><span class="hljs-params">()</span>  &#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;尚硅谷Java秘籍.txt&quot;</span>); <span class="hljs-comment">//FileNotFoundException</span><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test10</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;尚硅谷Java秘籍.txt&quot;</span>);<br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<span class="hljs-comment">//FileNotFoundException</span><br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> fis.read();<span class="hljs-comment">//IOException</span><br><span class="hljs-keyword">while</span>(b != -<span class="hljs-number">1</span>)&#123;<br>System.out.print((<span class="hljs-type">char</span>)b);<br>b = fis.read();<span class="hljs-comment">//IOException</span><br>&#125;<br><br>fis.close();<span class="hljs-comment">//IOException</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-异常的处理"><a href="#4-异常的处理" class="headerlink" title="4. 异常的处理"></a>4. 异常的处理</h2><h3 id="4-1-异常处理概述"><a href="#4-1-异常处理概述" class="headerlink" title="4.1 异常处理概述"></a>4.1 异常处理概述</h3><p>在编写程序时，经常要在可能出现错误的地方加上检测的代码，如进行x&#x2F;y运算时，要<code>检测分母为0</code>，<code>数据为空</code>，<code>输入的不是数据而是字符</code>等。过多的if-else分支会导致程序的<code>代码加长</code>、<code>臃肿</code>，<code>可读性差</code>，程序员需要花很大的精力“<code>堵漏洞</code>”。因此采用异常处理机制。</p><p><strong>Java异常处理</strong></p><p>Java采用的异常处理机制，是<code>将异常处理的程序代码集中在一起</code>，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。</p><p><strong>Java异常处理的方式：</strong></p><p>方式一：try-catch-finally</p><p>方式二：throws + 异常类型</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441992_watermark.png" alt="image-20220331111051496"></p><h3 id="4-2-方式1：捕获异常（try-catch-finally）"><a href="#4-2-方式1：捕获异常（try-catch-finally）" class="headerlink" title="4.2 方式1：捕获异常（try-catch-finally）"></a>4.2 方式1：捕获异常（try-catch-finally）</h3><p>Java提供了异常处理的<strong>抓抛模型</strong>。</p><ul><li>前面提到，Java程序的执行过程中如出现异常，会生成一个异常类对象，该异常对象将被提交给Java运行时系统，这个过程称为<code>抛出(throw)异常</code>。</li><li>如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。这一过程称为<code>捕获(catch)异常</code>。</li><li>如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。</li></ul><h4 id="4-2-1-try-catch-finally基本格式"><a href="#4-2-1-try-catch-finally基本格式" class="headerlink" title="4.2.1 try-catch-finally基本格式"></a>4.2.1 try-catch-finally基本格式</h4><p>捕获异常语法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>......<span class="hljs-comment">//可能产生异常的代码</span><br>&#125;<br><span class="hljs-keyword">catch</span>( 异常类型<span class="hljs-number">1</span> e )&#123;<br>......<span class="hljs-comment">//当产生异常类型1型异常时的处置措施</span><br>&#125;<br><span class="hljs-keyword">catch</span>( 异常类型<span class="hljs-number">2</span> e )&#123;<br>...... <span class="hljs-comment">//当产生异常类型2型异常时的处置措施</span><br>&#125;  <br><span class="hljs-keyword">finally</span>&#123;<br>...... <span class="hljs-comment">//无论是否发生异常，都无条件执行的语句</span><br>&#125; <br><br></code></pre></td></tr></table></figure><p><strong>1、整体执行过程：</strong></p><p>当某段代码可能发生异常，不管这个异常是编译时异常（受检异常）还是运行时异常（非受检异常），我们都可以使用try块将它括起来，并在try块下面编写catch分支尝试捕获对应的异常对象。</p><ul><li>如果在程序运行时，try块中的代码没有发生异常，那么catch所有的分支都不执行。</li><li>如果在程序运行时，try块中的代码发生了异常，根据异常对象的类型，将从上到下选择第一个匹配的catch分支执行。此时try中发生异常的语句下面的代码将不执行，而整个try…catch之后的代码可以继续运行。</li><li>如果在程序运行时，try块中的代码发生了异常，但是所有catch分支都无法匹配（捕获）这个异常，那么JVM将会终止当前方法的执行，并把异常对象“抛”给调用者。如果调用者不处理，程序就挂了。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441945_watermark.png" alt="image-20220503122722605" style="zoom:67%;" /><p><strong>2、try</strong></p><ul><li>捕获异常的第一步是用<code>try&#123;…&#125;语句块</code>选定捕获异常的范围，将可能出现异常的业务逻辑代码放在try语句块中。</li></ul><p><strong>3、catch (Exceptiontype e)</strong></p><ul><li><p>catch分支，分为两个部分，catch()中编写异常类型和异常参数名，{}中编写如果发生了这个异常，要做什么处理的代码。</p></li><li><p>如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可以用其父类作为catch的参数。</p><p>比如：可以用ArithmeticException类作为参数的地方，就可以用RuntimeException类作为参数，或者用所有异常的父类Exception类作为参数。但不能是与ArithmeticException类无关的异常，如NullPointerException（catch中的语句将不会执行）。</p></li><li><p>每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。</p></li><li><p>如果有多个catch分支，并且多个异常类型有父子类关系，必须保证小的子异常类型在上，大的父异常类型在下。否则，报错。</p></li><li><p>catch中常用异常处理的方式</p><ul><li><p><code>public String getMessage()</code>：获取异常的描述信息，返回字符串</p></li><li><p><code>public void printStackTrace()</code>：打印异常的跟踪栈信息并输出到控制台。包含了异常的类型、异常的原因、还包括异常出现的位置，在开发和调试阶段，都得使用printStackTrace()。</p></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441469_watermark.png" alt="image-20220331180736381" style="zoom:80%;" /></li></ul><h4 id="4-2-2-使用举例"><a href="#4-2-2-使用举例" class="headerlink" title="4.2.2 使用举例"></a>4.2.2 使用举例</h4><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexOutExp</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String friends[] = &#123; <span class="hljs-string">&quot;lisa&quot;</span>, <span class="hljs-string">&quot;bily&quot;</span>, <span class="hljs-string">&quot;kessy&quot;</span> &#125;;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            System.out.println(friends[i]);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;index err&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;\nthis is the end&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DivideZero1</span> &#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> y;<br>        <span class="hljs-type">DivideZero1</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DivideZero1</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            y = <span class="hljs-number">3</span> / c.x;<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;divide by zero error!&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;program ends ok!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu.com&quot;</span>;<br>str1 = <span class="hljs-literal">null</span>;<br>System.out.println(str1.charAt(<span class="hljs-number">0</span>));<br>&#125;<span class="hljs-keyword">catch</span>(NullPointerException e)&#123;<br><span class="hljs-comment">//异常的处理方式1</span><br>System.out.println(<span class="hljs-string">&quot;不好意思，亲~出现了小问题，正在加紧解决...&quot;</span>);<br>&#125;<span class="hljs-keyword">catch</span>(ClassCastException e)&#123;<br><span class="hljs-comment">//异常的处理方式2</span><br>System.out.println(<span class="hljs-string">&quot;出现了类型转换的异常&quot;</span>);<br>&#125;<span class="hljs-keyword">catch</span>(RuntimeException e)&#123;<br><span class="hljs-comment">//异常的处理方式3</span><br>System.out.println(<span class="hljs-string">&quot;出现了运行时异常&quot;</span>);<br>&#125;<br><span class="hljs-comment">//此处的代码，在异常被处理了以后，是可以正常执行的</span><br>System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>举例4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><br></code></pre></td></tr></table></figure><h4 id="4-2-3-finally使用及举例"><a href="#4-2-3-finally使用及举例" class="headerlink" title="4.2.3 finally使用及举例"></a>4.2.3 finally使用及举例</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441288_watermark.png" alt="image-20220331215517077" style="zoom: 80%;" /><ul><li><p>因为异常会引发程序跳转，从而会导致有些语句执行不到。而程序中有一些特定的代码无论异常是否发生，都<code>需要执行</code>。例如，数据库连接、输入流输出流、Socket连接、Lock锁的关闭等，这样的代码通常就会放到finally块中。所以，我们通常将一定要被执行的代码声明在finally中。</p><ul><li>唯一的例外，使用 System.exit(0) 来终止当前正在运行的 Java 虚拟机。</li></ul></li><li><p>不论在try代码块中是否发生了异常事件，catch语句是否执行，catch语句是否有异常，catch语句中是否有return，finally块中的语句都会被执行。</p></li><li><p>finally语句和catch语句是可选的，但finally不能单独使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>     <br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <br>&#125; <br></code></pre></td></tr></table></figure></li></ul><p>举例1：确保资源关闭</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">import</span> java.util.InputMismatchException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFinally</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入第一个整数：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> input.nextInt();<br>            System.out.print(<span class="hljs-string">&quot;请输入第二个整数：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> input.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> a/b;<br>            System.out.println(a + <span class="hljs-string">&quot;/&quot;</span> + b +<span class="hljs-string">&quot;=&quot;</span> + result);<br>        &#125; <span class="hljs-keyword">catch</span> (InputMismatchException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;数字格式不正确，请输入两个整数&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;第二个整数不能为0&quot;</span>);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;程序结束，释放资源&quot;</span>);<br>            input.close();<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;hello1.txt&quot;</span>);<br>            fis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<span class="hljs-comment">//FileNotFoundException</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> fis.read();<span class="hljs-comment">//IOException</span><br>            <span class="hljs-keyword">while</span>(b != -<span class="hljs-number">1</span>)&#123;<br>                System.out.print((<span class="hljs-type">char</span>)b);<br>                b = fis.read();<span class="hljs-comment">//IOException</span><br>            &#125;<br><br>        &#125;<span class="hljs-keyword">catch</span>(IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span>(fis != <span class="hljs-literal">null</span>)<br>                    fis.close();<span class="hljs-comment">//IOException</span><br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例2：从try回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinallyTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> test(<span class="hljs-string">&quot;12&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String str)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Integer.parseInt(str);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">catch</span>(NumberFormatException e)&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;test结束&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例3：从catch回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinallyTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> test(<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Integer.parseInt(str);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;test结束&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例4：从finally回来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinallyTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> test(<span class="hljs-string">&quot;a&quot;</span>);<br>        System.out.println(result);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Integer.parseInt(str);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;test结束&quot;</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>笔试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> test();<br>        System.out.println(result); <span class="hljs-comment">//100</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">return</span> i;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            i++;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>笔试题：final、finally、finalize有什么区别？</p></blockquote><h4 id="4-2-4-练习"><a href="#4-2-4-练习" class="headerlink" title="4.2.4 练习"></a>4.2.4 练习</h4><p>编写一个类ExceptionTest，在main方法中使用try、catch、finally，要求：</p><ul><li><p>在try块中，编写被零除的代码。</p></li><li><p>在catch块中，捕获被零除所产生的异常，并且打印异常信息</p></li><li><p>在finally块中，打印一条语句。</p></li></ul><h4 id="4-2-5-异常处理的体会"><a href="#4-2-5-异常处理的体会" class="headerlink" title="4.2.5 异常处理的体会"></a>4.2.5 异常处理的体会</h4><ul><li><p>前面使用的异常都是<code>RuntimeException类</code>或是它的<code>子类</code>，这些类的异常的特点是：即使没有使用try和catch捕获，Java自己也能捕获，并且编译通过 ( 但运行时会发生异常使得程序运行终止 )。所以，对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。</p></li><li><p>如果抛出的异常是IOException等类型的<code>非运行时异常</code>，则必须捕获，否则<code>编译错误</code>。也就是说，我们必须处理编译时异常，将异常进行捕捉，转化为运行时异常。</p></li></ul><h3 id="4-3-方式2：声明抛出异常类型（throws）"><a href="#4-3-方式2：声明抛出异常类型（throws）" class="headerlink" title="4.3 方式2：声明抛出异常类型（throws）"></a>4.3 方式2：声明抛出异常类型（throws）</h3><ul><li><p>如果在编写方法体的代码时，某句代码可能发生某个<code>编译时异常</code>，不处理编译不通过，但是在当前方法体中可能<code>不适合处理</code>或<code>无法给出合理的处理方式</code>，则此方法应<code>显示地</code>声明抛出异常，表明该方法将不对这些异常进行处理，而由该方法的调用者负责处理。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441166_watermark.png" alt="image-20220331112000671" style="zoom:67%;" /></li><li><p>具体方式：在方法声明中用<code>throws语句</code>可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类。</p></li></ul><h4 id="4-3-1-throws基本格式"><a href="#4-3-1-throws基本格式" class="headerlink" title="4.3.1 throws基本格式"></a>4.3.1 throws基本格式</h4><p><strong>声明异常格式：</strong></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">修饰符 返回值类型 方法名(参数) <span class="hljs-keyword">throws</span> 异常类名<span class="hljs-number">1</span>,异常类名<span class="hljs-number">2</span>…&#123;   &#125;<br></code></pre></td></tr></table></figure><p>在throws后面可以写多个异常类型，用逗号隔开。</p><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile</span><span class="hljs-params">(String file)</span>  <span class="hljs-keyword">throws</span> FileNotFoundException,IOException &#123;<br>...<br><span class="hljs-comment">// 读文件的操作可能产生FileNotFoundException或IOException类型的异常</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>    <span class="hljs-comment">//...</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-3-2-throws-使用举例"><a href="#4-3-2-throws-使用举例" class="headerlink" title="4.3.2 throws 使用举例"></a>4.3.2 throws 使用举例</h4><p><strong>举例：针对于编译时异常</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThrowsCheckedException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;上课.....&quot;</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            afterClass();<span class="hljs-comment">//换到这里处理异常</span><br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>            System.out.println(<span class="hljs-string">&quot;准备提前上课&quot;</span>);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;上课.....&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterClass</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">10</span>; i&gt;=<span class="hljs-number">1</span>; i--)&#123;<br>            Thread.sleep(<span class="hljs-number">1000</span>);<span class="hljs-comment">//本来应该在这里处理异常</span><br>            System.out.println(<span class="hljs-string">&quot;距离上课还有：&quot;</span> + i + <span class="hljs-string">&quot;分钟&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>举例：针对于运行时异常：</strong></p><p>throws后面也可以写运行时异常类型，只是运行时异常类型，写或不写对于编译器和程序执行来说都没有任何区别。如果写了，唯一的区别就是调用者调用该方法后，使用try…catch结构时，IDEA可以获得更多的信息，需要添加哪种catch分支。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">import</span> java.util.InputMismatchException;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThrowsRuntimeException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入第一个整数：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> input.nextInt();<br>            System.out.print(<span class="hljs-string">&quot;请输入第二个整数：&quot;</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> input.nextInt();<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> divide(a,b);<br>            System.out.println(a + <span class="hljs-string">&quot;/&quot;</span> + b +<span class="hljs-string">&quot;=&quot;</span> + result);<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException | InputMismatchException e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            input.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">divide</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span><span class="hljs-keyword">throws</span> ArithmeticException&#123;<br>        <span class="hljs-keyword">return</span> a/b;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="4-3-3-方法重写中throws的要求"><a href="#4-3-3-方法重写中throws的要求" class="headerlink" title="4.3.3 方法重写中throws的要求"></a>4.3.3 方法重写中throws的要求</h4><p>方法重写时，对于方法签名是有严格要求的。复习：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">（<span class="hljs-number">1</span>）方法名必须相同<br>（<span class="hljs-number">2</span>）形参列表必须相同<br>（<span class="hljs-number">3</span>）返回值类型<br>- 基本数据类型和<span class="hljs-keyword">void</span>：必须相同<br>- 引用数据类型：&lt;=<br>（<span class="hljs-number">4</span>）权限修饰符：&gt;=，而且要求父类被重写方法在子类中是可见的<br>（<span class="hljs-number">5</span>）不能是<span class="hljs-keyword">static</span>，<span class="hljs-keyword">final</span>修饰的方法<br></code></pre></td></tr></table></figure><p>此外，对于throws异常列表要求：</p><ul><li>如果父类被重写方法的方法签名后面没有 “throws  编译时异常类型”，那么重写方法时，方法签名后面也不能出现“throws  编译时异常类型”。</li><li>如果父类被重写方法的方法签名后面有 “<code>throws  编译时异常类型</code>”，那么重写方法时，throws的编译时异常类型必须 &lt;&#x3D; 被重写方法throws的编译时异常类型，或者不throws编译时异常。</li><li>方法重写，对于“<code>throws 运行时异常类型</code>”没有要求。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span><span class="hljs-keyword">throws</span> Exception&#123;<br>        System.out.println(<span class="hljs-string">&quot;Father.method&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException,ClassCastException &#123;<br>        System.out.println(<span class="hljs-string">&quot;Son.method&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-两种异常处理方式的选择"><a href="#4-4-两种异常处理方式的选择" class="headerlink" title="4.4 两种异常处理方式的选择"></a>4.4 两种异常处理方式的选择</h3><p>前提：对于异常，使用相应的处理方式。此时的异常，主要指的是编译时异常。</p><ul><li>如果程序代码中，涉及到资源的调用（流、数据库连接、网络连接等），则必须考虑使用try-catch-finally来处理，保证不出现内存泄漏。</li><li>如果父类被重写的方法没有throws异常类型，则子类重写的方法中如果出现异常，只能考虑使用try-catch-finally进行处理，不能throws。</li><li>开发中，方法a中依次调用了方法b,c,d等方法，方法b,c,d之间是递进关系。此时，如果方法b,c,d中有异常，我们通常选择使用throws，而方法a中通常选择使用try-catch-finally。</li></ul><h2 id="5-手动抛出异常对象：throw"><a href="#5-手动抛出异常对象：throw" class="headerlink" title="5. 手动抛出异常对象：throw"></a>5. 手动抛出异常对象：throw</h2><p>Java 中异常对象的生成有两种方式：</p><ul><li><p>由虚拟机<strong>自动生成</strong>：程序运行过程中，虚拟机检测到程序发生了问题，那么针对当前代码，就会在后台自动创建一个对应异常类的实例对象并抛出。</p></li><li><p>由开发人员<strong>手动创建</strong>：<code>new 异常类型([实参列表]);</code>，如果创建好的异常对象不抛出对程序没有任何影响，和创建一个普通对象一样，但是一旦throw抛出，就会对程序运行产生影响了。</p></li></ul><h3 id="5-1-使用格式"><a href="#5-1-使用格式" class="headerlink" title="5.1 使用格式"></a>5.1 使用格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> 异常类名(参数);<br></code></pre></td></tr></table></figure><p>throw语句抛出的异常对象，和JVM自动创建和抛出的异常对象一样。</p><ul><li><p>如果是编译时异常类型的对象，同样需要使用throws或者try…catch处理，否则编译不通过。</p></li><li><p>如果是运行时异常类型的对象，编译器不提示。</p></li><li><p>可以抛出的异常必须是Throwable或其子类的实例。下面的语句在编译时将会产生语法错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;want to throw&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="5-2-使用注意点："><a href="#5-2-使用注意点：" class="headerlink" title="5.2 使用注意点："></a>5.2 使用注意点：</h3><p>无论是编译时异常类型的对象，还是运行时异常类型的对象，如果没有被try..catch合理的处理，都会导致程序崩溃。</p><p>throw语句会导致程序执行流程被改变，throw语句是明确抛出一个异常对象，因此它<code>下面的代码将不会执行</code>。</p><p>如果当前方法没有try…catch处理这个异常对象，throw语句就会<code>代替return语句</code>提前终止当前方法的执行，并返回一个异常对象给调用者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestThrow</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(max(<span class="hljs-number">4</span>,<span class="hljs-number">2</span>,<span class="hljs-number">31</span>,<span class="hljs-number">1</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(max(<span class="hljs-number">4</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(max());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span>&#123;<br>        <span class="hljs-keyword">if</span>(nums == <span class="hljs-literal">null</span> || nums.length==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;没有传入任何整数，无法获取最大值&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(nums[i] &gt; max)&#123;<br>                max = nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6-自定义异常"><a href="#6-自定义异常" class="headerlink" title="6. 自定义异常"></a>6. 自定义异常</h2><h3 id="6-1-为什么需要自定义异常类"><a href="#6-1-为什么需要自定义异常类" class="headerlink" title="6.1 为什么需要自定义异常类"></a>6.1 为什么需要自定义异常类</h3><p>Java中不同的异常类，分别表示着某一种具体的异常情况。那么在开发中总是有些异常情况是核心类库中没有定义好的，此时我们需要根据自己业务的异常情况来定义异常类。例如年龄负数问题，考试成绩负数问题，某员工已在团队中等。</p><h3 id="6-2-如何自定义异常类"><a href="#6-2-如何自定义异常类" class="headerlink" title="6.2 如何自定义异常类"></a>6.2 如何自定义异常类</h3><p>（1）要继承一个异常类型</p><p>​自定义一个编译时异常类型：自定义类继承<code>java.lang.Exception</code>。</p><p>​自定义一个运行时异常类型：自定义类继承<code>java.lang.RuntimeException</code>。</p><p>（2）建议大家提供至少两个构造器，一个是无参构造，一个是(String message)构造器。</p><p>（3）自定义异常需要提供<code>serialVersionUID</code></p><h3 id="6-3-注意点"><a href="#6-3-注意点" class="headerlink" title="6.3 注意点"></a>6.3 注意点</h3><ol><li><p>自定义的异常只能通过throw抛出。</p></li><li><p>自定义异常最重要的是异常类的名字和message属性。当异常出现时，可以根据名字判断异常类型。比如：<code>TeamException(&quot;成员已满，无法添加&quot;); </code>、 <code>TeamException(&quot;该员工已是某团队成员&quot;);</code></p></li><li><p>自定义异常对象只能手动抛出。抛出后由try..catch处理，也可以甩锅throws给调用者处理。</p></li></ol><h3 id="6-4-举例"><a href="#6-4-举例" class="headerlink" title="6.4 举例"></a>6.4 举例</h3><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">23423423435L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> idnumber;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">(String message, <span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>        <span class="hljs-built_in">this</span>.idnumber = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> idnumber;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyExpTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">regist</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> <span class="hljs-keyword">throws</span> MyException &#123;<br>        <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyException</span>(<span class="hljs-string">&quot;人数为负值，不合理&quot;</span>, <span class="hljs-number">3</span>);<br>        <span class="hljs-keyword">else</span><br>            System.out.println(<span class="hljs-string">&quot;登记人数&quot;</span> + num);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">manager</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            regist(<span class="hljs-number">100</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (MyException e) &#123;<br>            System.out.print(<span class="hljs-string">&quot;登记失败，出错种类&quot;</span> + e.getId());<br>        &#125;<br>        System.out.print(<span class="hljs-string">&quot;本次登记操作结束&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">MyExpTest</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyExpTest</span>();<br>        t.manager();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.define;<br><span class="hljs-comment">//自定义异常：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotTriangleException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">13465653435L</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NotTriangleException</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">NotTriangleException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.define;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Triangle</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> a;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> b;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> c;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Triangle</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b, <span class="hljs-type">double</span> c)</span> <span class="hljs-keyword">throws</span> NotTriangleException &#123;<br>        <span class="hljs-keyword">if</span>(a&lt;=<span class="hljs-number">0</span> || b&lt;=<span class="hljs-number">0</span> || c&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(<span class="hljs-string">&quot;三角形的边长必须是正数&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a+b&lt;=c || b+c&lt;=a || a+c&lt;=b)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(a+<span class="hljs-string">&quot;,&quot;</span> + b +<span class="hljs-string">&quot;,&quot;</span> + c +<span class="hljs-string">&quot;不能构造三角形，三角形任意两边之后必须大于第三边&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.a = a;<br>        <span class="hljs-built_in">this</span>.b = b;<br>        <span class="hljs-built_in">this</span>.c = c;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setA</span><span class="hljs-params">(<span class="hljs-type">double</span> a)</span> <span class="hljs-keyword">throws</span> NotTriangleException&#123;<br>        <span class="hljs-keyword">if</span>(a&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(<span class="hljs-string">&quot;三角形的边长必须是正数&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a+b&lt;=c || b+c&lt;=a || a+c&lt;=b)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(a+<span class="hljs-string">&quot;,&quot;</span> + b +<span class="hljs-string">&quot;,&quot;</span> + c +<span class="hljs-string">&quot;不能构造三角形，三角形任意两边之后必须大于第三边&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.a = a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getB</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> b;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setB</span><span class="hljs-params">(<span class="hljs-type">double</span> b)</span> <span class="hljs-keyword">throws</span> NotTriangleException &#123;<br>        <span class="hljs-keyword">if</span>(b&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(<span class="hljs-string">&quot;三角形的边长必须是正数&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a+b&lt;=c || b+c&lt;=a || a+c&lt;=b)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(a+<span class="hljs-string">&quot;,&quot;</span> + b +<span class="hljs-string">&quot;,&quot;</span> + c +<span class="hljs-string">&quot;不能构造三角形，三角形任意两边之后必须大于第三边&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.b = b;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getC</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> c;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setC</span><span class="hljs-params">(<span class="hljs-type">double</span> c)</span> <span class="hljs-keyword">throws</span> NotTriangleException &#123;<br>        <span class="hljs-keyword">if</span>(c&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(<span class="hljs-string">&quot;三角形的边长必须是正数&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(a+b&lt;=c || b+c&lt;=a || a+c&lt;=b)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotTriangleException</span>(a+<span class="hljs-string">&quot;,&quot;</span> + b +<span class="hljs-string">&quot;,&quot;</span> + c +<span class="hljs-string">&quot;不能构造三角形，三角形任意两边之后必须大于第三边&quot;</span>);<br>        &#125;<br>        <span class="hljs-built_in">this</span>.c = c;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Triangle&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;a=&quot;</span> + a +<br>                <span class="hljs-string">&quot;, b=&quot;</span> + b +<br>                <span class="hljs-string">&quot;, c=&quot;</span> + c +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.define;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestTriangle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Triangle</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Triangle</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>            System.out.println(<span class="hljs-string">&quot;三角形创建成功：&quot;</span>);<br>            System.out.println(t);<br>        &#125; <span class="hljs-keyword">catch</span> (NotTriangleException e) &#123;<br>            System.err.println(<span class="hljs-string">&quot;三角形创建失败&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span>(t != <span class="hljs-literal">null</span>) &#123;<br>                t.setA(<span class="hljs-number">1</span>);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;三角形边长修改成功&quot;</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (NotTriangleException e) &#123;<br>            System.out.println(<span class="hljs-string">&quot;三角形边长修改失败&quot;</span>);<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-练习"><a href="#7-练习" class="headerlink" title="7. 练习"></a>7. 练习</h2><p><strong>练习1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReturnExceptionDemo</span> &#123;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodA</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;进入方法A&quot;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;制造异常&quot;</span>);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;用A方法的finally&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodB</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;进入方法B&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;调用B方法的finally&quot;</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        methodA();<br>   &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>      System.out.println(e.getMessage());<br>    &#125;<br>    methodB();<br>  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><p>从键盘接收学生成绩，成绩必须在0~100之间。</p><p>自定义成绩无效异常。</p><p>编写方法接收成绩并返回该成绩，如果输入无效，则抛出自定义异常。</p><p><strong>练习3：</strong></p><p>编写应用程序EcmDef.java，接收命令行的两个参数，要求不能输入负数，计算两数相除。<br>对数据类型不一致(NumberFormatException)、缺少命令行参数(ArrayIndexOutOfBoundsException、<br>除0(ArithmeticException)及输入负数(EcDef 自定义的异常)进行异常处理。</p><p>提示：<br>(1)在主类(EcmDef)中定义异常方法(ecm)完成两数相除功能。</p><p>(2)在main()方法中使用异常处理语句进行异常处理。</p><p>(3)在程序中，自定义对应输入负数的异常类(EcDef)。</p><p>(4)运行时接受参数 java EcmDef 20 10   &#x2F;&#x2F;args[0]&#x3D;“20” args[1]&#x3D;“10”</p><p>(5)Interger类的static方法parseInt(String s)将s转换成对应的int值。<br>     如：int a&#x3D;Interger.parseInt(“314”);&#x2F;&#x2F;a&#x3D;314;</p><h2 id="8-小结与小悟"><a href="#8-小结与小悟" class="headerlink" title="8. 小结与小悟"></a>8. 小结与小悟</h2><h3 id="8-1-小结：异常处理5个关键字"><a href="#8-1-小结：异常处理5个关键字" class="headerlink" title="8.1 小结：异常处理5个关键字"></a>8.1 小结：异常处理5个关键字</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441160_watermark.png" alt="image-20220330003738109" style="zoom: 67%;" /><blockquote><p>类比：上游排污，下游治污</p></blockquote><h3 id="8-2-感悟"><a href="#8-2-感悟" class="headerlink" title="8.2 感悟"></a>8.2 感悟</h3><p><strong>小哲理：</strong></p><p>世界上最遥远的<code>距离</code>，是我在<code>if</code>里你在<code>else</code>里，似乎一直相伴又永远分离；</p><p>世界上最痴心的<code>等待</code>，是我当<code>case</code>你是<code>switch</code>，或许永远都选不上自己；</p><p>世界上最真情的<code>相依</code>，是你在<code>try</code>我在<code>catch</code>。无论你发神马脾气，我都默默承受，静静处理。到那时，再来期待我们的<code>finally</code>。</p><p><strong>歌词：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/202402281441877_watermark.png" alt="image-20220511163035280" style="zoom:67%;" />]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象编程（高级）</title>
    <link href="/2024/02/27/8.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/"/>
    <url>/2024/02/27/8.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-关键字：static"><a href="#1-关键字：static" class="headerlink" title="1. 关键字：static"></a>1. 关键字：static</h2><p><strong>回顾类中的实例变量（即非static的成员变量）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">double</span> radius;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Circle</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span>&#123;<br>        <span class="hljs-built_in">this</span>.radius=radius;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">findArea</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> Math.PI*radius*radius;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建两个Circle对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Circle c1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">2.0</span>);<span class="hljs-comment">//c1.radius=2.0</span><br>Circle c2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>(<span class="hljs-number">3.0</span>);<span class="hljs-comment">//c2.radius=3.0</span><br></code></pre></td></tr></table></figure><p>Circle类中的变量radius是一个实例变量(instance variable)，它属于类的每一个对象，c1中的radius变化不会影响c2的radius，反之亦然。</p><p><strong>如果想让一个成员变量被类的所有实例所共享，就用static修饰即可，称为类变量（或类属性）！</strong></p><h3 id="1-1-类属性、类方法的设计思想"><a href="#1-1-类属性、类方法的设计思想" class="headerlink" title="1.1 类属性、类方法的设计思想"></a>1.1 类属性、类方法的设计思想</h3><p>当我们编写一个类时，其实就是在描述其对象的属性和行为，而并没有产生实质上的对象，只有通过new关键字才会产出对象，这时系统才会分配内存空间给对象，其方法才可以供外部调用。我们有时候希望无论是否产生了对象或无论产生了多少对象的情况下，<code>某些特定的数据在内存空间里只有一份</code>。例如，所有的中国人都有个国家名称，每一个中国人都共享这个国家名称，不必在每一个中国人的实例对象中都单独分配一个用于代表国家名称的变量。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951260_watermark.png" alt="image-20220325213629311"></p><p>此外，在类中声明的实例方法，在类的外面必须要先创建对象，才能调用。但是有些方法的调用者和当前类的对象无关，这样的方法通常被声明为<code>类方法</code>，由于不需要创建对象就可以调用类方法，从而简化了方法的调用。</p><p>这里的类变量、类方法，只需要使用<code>static</code>修饰即可。所以也称为静态变量、静态方法。</p><h3 id="1-2-static关键字"><a href="#1-2-static关键字" class="headerlink" title="1.2 static关键字"></a>1.2 static关键字</h3><ul><li><p>使用范围：</p><ul><li>在Java类中，可用static修饰属性、方法、代码块、内部类</li></ul></li><li><p>被修饰后的成员具备以下特点：</p><ul><li>随着类的加载而加载</li><li>优先于对象存在</li><li>修饰的成员，被所有对象所共享</li><li>访问权限允许时，可不创建对象，直接被类调用</li></ul></li></ul><h3 id="1-3-静态变量"><a href="#1-3-静态变量" class="headerlink" title="1.3 静态变量"></a>1.3 静态变量</h3><h4 id="1-3-1-语法格式"><a href="#1-3-1-语法格式" class="headerlink" title="1.3.1 语法格式"></a>1.3.1 语法格式</h4><p>使用static修饰的成员变量就是静态变量（或类变量、类属性）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 类&#123;<br>[其他修饰符] <span class="hljs-keyword">static</span> 数据类型 变量名;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-2-静态变量的特点"><a href="#1-3-2-静态变量的特点" class="headerlink" title="1.3.2 静态变量的特点"></a>1.3.2 静态变量的特点</h4><ul><li><p>静态变量的默认值规则和实例变量一样。</p></li><li><p>静态变量值是所有对象共享。</p></li><li><p>静态变量在本类中，可以在任意方法、代码块、构造器中直接使用。</p></li><li><p>如果权限修饰符允许，在其他类中可以通过“<code>类名.静态变量</code>”直接访问，也可以通过“<code>对象.静态变量</code>”的方式访问（但是更推荐使用类名.静态变量的方式）。</p></li><li><p>静态变量的get&#x2F;set方法也静态的，当局部变量与静态变量<code>重名时</code>，使用“<code>类名.静态变量</code>”进行区分。</p></li></ul><h4 id="1-3-3-举例"><a href="#1-3-3-举例" class="headerlink" title="1.3.3 举例"></a>1.3.3 举例</h4><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Chinese</span>&#123;<br>    <span class="hljs-comment">//实例变量</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//类变量</span><br>    <span class="hljs-keyword">static</span> String nation;<span class="hljs-comment">//国籍</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Chinese</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Chinese</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Chinese&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&quot;, nation=&#x27;&quot;</span> + nation + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Chinese</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>(<span class="hljs-string">&quot;康师傅&quot;</span>,<span class="hljs-number">36</span>);<br>        c1.nation = <span class="hljs-string">&quot;中华人民共和国&quot;</span>;<br><br>        <span class="hljs-type">Chinese</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>(<span class="hljs-string">&quot;老干妈&quot;</span>,<span class="hljs-number">66</span>);<br><br>        System.out.println(c1);<br>        System.out.println(c2);<br><br>        System.out.println(Chinese.nation);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的内存结构：（以经典的JDK6内存解析为例，此时静态变量存储在方法区）</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951279_watermark.png" alt="image-20220514183814514" style="zoom:67%;" /><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> total;<span class="hljs-comment">//这里私有化，在类的外面必须使用get/set方法的方式来访问静态变量</span><br>    <span class="hljs-keyword">static</span> String company; <span class="hljs-comment">//这里缺省权限修饰符，是为了方便类外以“类名.静态变量”的方式访问</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">()</span> &#123;<br>        total++;<br>        id = total;<span class="hljs-comment">//这里使用total静态变量的值为id属性赋值</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>();<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getTotal</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> total;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setTotal</span><span class="hljs-params">(<span class="hljs-type">int</span> total)</span> &#123;<br>        Employee.total = total;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Employee&#123;company = &quot;</span> + company + <span class="hljs-string">&quot;,id = &quot;</span> + id + <span class="hljs-string">&quot; ,name=&quot;</span> + name +<span class="hljs-string">&quot;&#125;&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStaticVariable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//静态变量total的默认值是0</span><br>        System.out.println(<span class="hljs-string">&quot;Employee.total = &quot;</span> + Employee.getTotal());<br><br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">e1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-type">Employee</span> <span class="hljs-variable">e2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;李四&quot;</span>);<br>        System.out.println(e1);<span class="hljs-comment">//静态变量company的默认值是null</span><br>        System.out.println(e2);<span class="hljs-comment">//静态变量company的默认值是null</span><br>        System.out.println(<span class="hljs-string">&quot;Employee.total = &quot;</span> + Employee.getTotal());<span class="hljs-comment">//静态变量total值是2</span><br><br>        Employee.company = <span class="hljs-string">&quot;尚硅谷&quot;</span>;<br>        System.out.println(e1);<span class="hljs-comment">//静态变量company的值是尚硅谷</span><br>        System.out.println(e2);<span class="hljs-comment">//静态变量company的值是尚硅谷</span><br><br>        <span class="hljs-comment">//只要权限修饰符允许,虽然不推荐，但是也可以通过“对象.静态变量”的形式来访问</span><br>        e1.company = <span class="hljs-string">&quot;超级尚硅谷&quot;</span>;<br><br>        System.out.println(e1);<span class="hljs-comment">//静态变量company的值是超级尚硅谷</span><br>        System.out.println(e2);<span class="hljs-comment">//静态变量company的值是超级尚硅谷</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-3-4-内存解析"><a href="#1-3-4-内存解析" class="headerlink" title="1.3.4 内存解析"></a>1.3.4 内存解析</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951301_watermark.png" alt="image-20220104100145059"></p><h3 id="1-4-静态方法"><a href="#1-4-静态方法" class="headerlink" title="1.4 静态方法"></a>1.4 静态方法</h3><h4 id="1-4-1-语法格式"><a href="#1-4-1-语法格式" class="headerlink" title="1.4.1 语法格式"></a>1.4.1 语法格式</h4><p>用static修饰的成员方法就是静态方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 类&#123;<br>[其他修饰符] <span class="hljs-keyword">static</span> 返回值类型 方法名(形参列表)&#123;<br>        方法体<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-2-静态方法的特点"><a href="#1-4-2-静态方法的特点" class="headerlink" title="1.4.2 静态方法的特点"></a>1.4.2 静态方法的特点</h4><ul><li>静态方法在本类的任意方法、代码块、构造器中都可以直接被调用。</li><li>只要权限修饰符允许，静态方法在其他类中可以通过“类名.静态方法“的方式调用。也可以通过”对象.静态方法“的方式调用（但是更推荐使用类名.静态方法的方式）。</li><li>在static方法内部只能访问类的static修饰的属性或方法，不能访问类的非static的结构。</li><li>静态方法可以被子类继承，但不能被子类重写。</li><li>静态方法的调用都只看编译时类型。</li><li>因为不需要实例就可以访问static方法，因此static方法内部不能有this，也不能有super。如果有重名问题，使用“类名.”进行区别。</li></ul><h4 id="1-4-3-举例"><a href="#1-4-3-举例" class="headerlink" title="1.4.3 举例"></a>1.4.3 举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Father.method&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Father.fun&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-comment">//    @Override //尝试重写静态方法，加上@Override编译报错，去掉Override不报错，但是也不是重写</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fun</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Son.fun&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStaticMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Father.method();<br>        Son.method();<span class="hljs-comment">//继承静态方法</span><br><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        f.method();<span class="hljs-comment">//执行Father类中的method</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5-练习"><a href="#1-5-练习" class="headerlink" title="1.5 练习"></a>1.5 练习</h3><p>笔试题：如下程序执行会不会报错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 14:30</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Demo</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        test.hello();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习：</p><p>编写一个类实现银行账户的概念，包含的属性有“帐号”、“密码”、“存款余额”、“利率”、“最小余额”，定义封装这些属性的方法。<code>账号要自动生成。</code></p><p>编写主类，使用银行账户类，输入、输出3个储户的上述信息。</p><p>考虑：哪些属性可以设计成static属性。</p><h2 id="2-单例-Singleton-设计模式"><a href="#2-单例-Singleton-设计模式" class="headerlink" title="2. 单例(Singleton)设计模式"></a>2. 单例(Singleton)设计模式</h2><h3 id="2-1-设计模式概述"><a href="#2-1-设计模式概述" class="headerlink" title="2.1 设计模式概述"></a>2.1 设计模式概述</h3><p><strong>设计模式</strong>是在大量的<code>实践中总结</code>和<code>理论化</code>之后优选的代码结构、编程风格、以及解决问题的思考方式。设计模式免去我们自己再思考和摸索。就像是经典的棋谱，不同的棋局，我们用不同的棋谱。”套路”</p><p>经典的设计模式共有23种。每个设计模式均是特定环境下特定问题的处理方法。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951336_watermark.png" alt="image-20220520174508815" style="zoom: 80%;" /><blockquote><p>简单工厂模式并不是23中经典模式的一种，是其中工厂方法模式的简化版</p></blockquote><blockquote><p>对软件设计模式的研究造就了一本可能是面向对象设计方面最有影响的书籍：《设计模式》：《Design Patterns: Elements of Reusable Object-Oriented Software》（即后述《设计模式》一书），由 Erich Gamma、Richard Helm、Ralph Johnson 和 John Vlissides 合著（Addison-Wesley，1995）。这几位作者常被称为”四人组（Gang of Four）”，而这本书也就被称为”四人组（或 GoF）”书。</p></blockquote><h3 id="2-2-何为单例模式"><a href="#2-2-何为单例模式" class="headerlink" title="2.2 何为单例模式"></a>2.2 何为单例模式</h3><p>所谓类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类只提供一个取得其对象实例的方法。</p><h3 id="2-3-实现思路"><a href="#2-3-实现思路" class="headerlink" title="2.3 实现思路"></a>2.3 实现思路</h3><p>如果我们要让类在一个虚拟机中只能产生一个对象，我们首先必须将<code>类的构造器的访问权限设置为private</code>，这样，就不能用new操作符在类的外部产生类的对象了，但在类内部仍可以产生该类的对象。因为在类的外部开始还无法得到类的对象，<code>只能调用该类的某个静态方法</code>以返回类内部创建的对象，静态方法只能访问类中的静态成员变量，所以，指向类内部产生的<code>该类对象的变量也必须定义成静态的</code>。</p><h3 id="2-4-单例模式的两种实现方式"><a href="#2-4-单例模式的两种实现方式" class="headerlink" title="2.4 单例模式的两种实现方式"></a>2.4 单例模式的两种实现方式</h3><h4 id="2-4-1-饿汉式"><a href="#2-4-1-饿汉式" class="headerlink" title="2.4.1 饿汉式"></a>2.4.1 饿汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">// 1.私有化构造器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">// 2.内部提供一个当前类的实例</span><br>    <span class="hljs-comment">// 4.此实例也必须静态化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">single</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br><br>    <span class="hljs-comment">// 3.提供公共的静态的方法，返回当前类的对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> single;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-4-2-懒汉式"><a href="#2-4-2-懒汉式" class="headerlink" title="2.4.2 懒汉式"></a>2.4.2 懒汉式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>    <span class="hljs-comment">// 1.私有化构造器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-comment">// 2.内部提供一个当前类的实例</span><br>    <span class="hljs-comment">// 4.此实例也必须静态化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Singleton single;<br>    <span class="hljs-comment">// 3.提供公共的静态的方法，返回当前类的对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span>(single == <span class="hljs-literal">null</span>) &#123;<br>            single = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> single;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-4-3-饿汉式-vs-懒汉式"><a href="#2-4-3-饿汉式-vs-懒汉式" class="headerlink" title="2.4.3 饿汉式 vs 懒汉式"></a>2.4.3 饿汉式 vs 懒汉式</h4><p>饿汉式：</p><ul><li>特点：<code>立即加载</code>，即在使用类的时候已经将对象创建完毕。</li><li>优点：实现起来<code>简单</code>；没有多线程安全问题。</li><li>缺点：当类被加载的时候，会初始化static的实例，静态变量被创建并分配内存空间，从这以后，这个static的实例便一直占着这块内存，直到类被卸载时，静态变量被摧毁，并释放所占有的内存。因此在某些特定条件下会<code>耗费内存</code>。</li></ul><p>懒汉式：</p><ul><li>特点：<code>延迟加载</code>，即在调用静态方法时实例才被创建。</li><li>优点：实现起来比较简单；当类被加载的时候，static的实例未被创建并分配内存空间，当静态方法第一次被调用时，初始化实例变量，并分配内存，因此在某些特定条件下会<code>节约内存</code>。</li><li>缺点：在多线程环境中，这种实现方法是完全错误的，<code>线程不安全</code>，根本不能保证单例的唯一性。<ul><li>说明：在多线程章节，会将懒汉式改造成线程安全的模式。</li></ul></li></ul><h3 id="2-5-单例模式的优点及应用场景"><a href="#2-5-单例模式的优点及应用场景" class="headerlink" title="2.5 单例模式的优点及应用场景"></a>2.5 单例模式的优点及应用场景</h3><p>由于单例模式只生成一个实例，减少了<code>系统性能开销</code>，当一个对象的产生需要比较多的资源时，如读取配置、产生其他依赖对象时，则可以通过在应用启动时直接产生一个单例对象，然后永久驻留内存的方式来解决。</p><p>举例：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951470_watermark.png" alt="image-20220325222541203" style="zoom:67%;" /><p><strong>应用场景</strong></p><ul><li><p>Windows的Task Manager (任务管理器)就是很典型的单例模式</p></li><li><p>Windows的Recycle Bin (回收站)也是典型的单例应用。在整个系统运行过程中，回收站一直维护着仅有的一个实例。</p></li><li><p>Application 也是单例的典型应用</p></li><li><p>应用程序的日志应用，一般都使用单例模式实现，这一般是由于共享的日志文件一直处于打开状态，因为只</p><p>能有一个实例去操作，否则内容不好追加。</p></li><li><p>数据库连接池的设计一般也是采用单例模式，因为数据库连接是一种数据库资源。</p></li></ul><h2 id="3-理解main方法的语法"><a href="#3-理解main方法的语法" class="headerlink" title="3. 理解main方法的语法"></a>3. 理解main方法的语法</h2><p>由于JVM需要调用类的main()方法，所以该方法的访问权限必须是public，又因为JVM在执行main()方法时不必创建对象，所以该方法必须是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数。 </p><p>又因为main() 方法是静态的，我们不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员，这种情况，我们在之前的例子中多次碰到。</p><p><strong>命令行参数用法举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CommandPara</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            System.out.println(<span class="hljs-string">&quot;args[&quot;</span> + i + <span class="hljs-string">&quot;] = &quot;</span> + args[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//运行程序CommandPara.java</span><br>java CommandPara <span class="hljs-string">&quot;Tom&quot;</span> <span class="hljs-string">&quot;Jerry&quot;</span> <span class="hljs-string">&quot;Shkstart&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//输出结果</span><br>args[<span class="hljs-number">0</span>] = Tom<br>args[<span class="hljs-number">1</span>] = Jerry<br>args[<span class="hljs-number">2</span>] = Shkstart<br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951389_watermark.png" alt="image-20220325223215924"></p><p>IDEA工具：</p><p>（1）配置运行参数</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951857_watermark.png" alt="image-20211228101828718" style="zoom: 80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951097_watermark.png" alt="image-20211228102022216" style="zoom:67%;" /><p>（2）运行程序</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951379_watermark.png" alt="image-20211228102059327" style="zoom: 80%;" /><p>笔试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//此处，Something类的文件名叫OtherThing.java</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Something</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] something_to_do)</span> &#123;        <br>        System.out.println(<span class="hljs-string">&quot;Do something ...&quot;</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">//上述程序是否可以正常编译、运行？ </span><br><br></code></pre></td></tr></table></figure><h2 id="4-类的成员之四：代码块"><a href="#4-类的成员之四：代码块" class="headerlink" title="4. 类的成员之四：代码块"></a>4. 类的成员之四：代码块</h2><p>如果成员变量想要初始化的值不是一个硬编码的常量值，而是需要通过复杂的计算或读取文件、或读取运行环境信息等方式才能获取的一些值，该怎么办呢？此时，可以考虑代码块（或初始化块）。</p><ul><li><p>代码块(或初始化块)的<code>作用</code>：</p></li><li><p>对Java类或对象进行初始化</p></li><li><p>代码块(或初始化块)的<code>分类</code>：</p><ul><li><p>一个类中代码块若有修饰符，则只能被static修饰，称为静态代码块(static block)</p></li><li><p>没有使用static修饰的，为非静态代码块。</p></li></ul></li></ul><h3 id="4-1-静态代码块"><a href="#4-1-静态代码块" class="headerlink" title="4.1 静态代码块"></a>4.1 静态代码块</h3><p>如果想要为静态变量初始化，可以直接在静态变量的声明后面直接赋值，也可以使用静态代码块。</p><h4 id="4-1-1-语法格式"><a href="#4-1-1-语法格式" class="headerlink" title="4.1.1 语法格式"></a>4.1.1 语法格式</h4><p>在代码块的前面加static，就是静态代码块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">【修饰符】 class 类&#123;<br><span class="hljs-keyword">static</span>&#123;<br>        静态代码块<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-1-2-静态代码块的特点"><a href="#4-1-2-静态代码块的特点" class="headerlink" title="4.1.2 静态代码块的特点"></a>4.1.2 静态代码块的特点</h4><ol><li><p>可以有输出语句。</p></li><li><p>可以对类的属性、类的声明进行初始化操作。</p></li><li><p>不可以对非静态的属性初始化。即：不可以调用非静态的属性和方法。</p></li><li><p>若有多个静态的代码块，那么按照从上到下的顺序依次执行。</p></li><li><p>静态代码块的执行要先于非静态代码块。</p></li><li><p>静态代码块随着类的加载而加载，且只执行一次。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Chinese</span> &#123;<br><span class="hljs-comment">//    private static String country = &quot;中国&quot;;</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String country;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;非静态代码块，country = &quot;</span> + country);<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        country = <span class="hljs-string">&quot;中国&quot;</span>;<br>        System.out.println(<span class="hljs-string">&quot;静态代码块&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Chinese</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.keyword;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStaticBlock</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Chinese</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>(<span class="hljs-string">&quot;张三&quot;</span>);<br>        <span class="hljs-type">Chinese</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>(<span class="hljs-string">&quot;李四&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-2-非静态代码块"><a href="#4-2-非静态代码块" class="headerlink" title="4.2 非静态代码块"></a>4.2 非静态代码块</h3><h4 id="4-2-1-语法格式"><a href="#4-2-1-语法格式" class="headerlink" title="4.2.1 语法格式"></a>4.2.1 语法格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">【修饰符】 class 类&#123;<br>    &#123;<br>        非静态代码块<br>    &#125;<br>    【修饰符】 构造器名()&#123;<br>    <span class="hljs-comment">// 实例初始化代码</span><br>    &#125;<br>    【修饰符】 构造器名(参数列表)&#123;<br>        <span class="hljs-comment">// 实例初始化代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-2-2-非静态代码块的作用"><a href="#4-2-2-非静态代码块的作用" class="headerlink" title="4.2.2 非静态代码块的作用"></a>4.2.2 非静态代码块的作用</h4><p>和构造器一样，也是用于实例变量的初始化等操作。</p><h4 id="4-2-3-非静态代码块的意义"><a href="#4-2-3-非静态代码块的意义" class="headerlink" title="4.2.3 非静态代码块的意义"></a>4.2.3 非静态代码块的意义</h4><p>如果多个重载的构造器有公共代码，并且这些代码都是先于构造器其他代码执行的，那么可以将这部分代码抽取到非静态代码块中，减少冗余代码。</p><h4 id="4-2-4-非静态代码块的执行特点"><a href="#4-2-4-非静态代码块的执行特点" class="headerlink" title="4.2.4 非静态代码块的执行特点"></a>4.2.4 非静态代码块的执行特点</h4><ol><li><p>可以有输出语句。</p></li><li><p>可以对类的属性、类的声明进行初始化操作。</p></li><li><p>除了调用非静态的结构外，还可以调用静态的变量或方法。</p></li><li><p>若有多个非静态的代码块，那么按照从上到下的顺序依次执行。</p></li><li><p>每次创建对象的时候，都会执行一次。且先于构造器执行。</p></li></ol><h3 id="4-3-举例"><a href="#4-3-举例" class="headerlink" title="4.3 举例"></a>4.3 举例</h3><p><strong>举例1：</strong></p><p>（1）声明User类，</p><ul><li><p>包含属性：username（String类型），password（String类型），registrationTime（long类型），私有化</p></li><li><p>包含get&#x2F;set方法，其中registrationTime没有set方法</p></li><li><p>包含无参构造，</p><ul><li>输出“新用户注册”，</li><li>registrationTime赋值为当前系统时间，</li><li>username就默认为当前系统时间值，</li><li>password默认为“123456”</li></ul></li><li><p>包含有参构造(String username, String password)，</p><ul><li>输出“新用户注册”，</li><li>registrationTime赋值为当前系统时间，</li><li>username和password由参数赋值</li></ul></li><li><p>包含public String getInfo()方法，返回：“用户名：xx，密码：xx，注册时间：xx”</p></li></ul><p>（2）编写测试类，测试类main方法的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    System.out.println(u1.getInfo());<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">u2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;song&quot;</span>,<span class="hljs-string">&quot;8888&quot;</span>);<br>    System.out.println(u2.getInfo());<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不用非静态代码块，User类是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.block.no;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> registrationTime;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;新用户注册&quot;</span>);<br>        registrationTime = System.currentTimeMillis();<br>        username = registrationTime+<span class="hljs-string">&quot;&quot;</span>;<br>        password = <span class="hljs-string">&quot;123456&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String username,String password)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;新用户注册&quot;</span>);<br>        registrationTime = System.currentTimeMillis();<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getRegistrationTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> registrationTime;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户名：&quot;</span> + username + <span class="hljs-string">&quot;，密码：&quot;</span> + password + <span class="hljs-string">&quot;，注册时间：&quot;</span> + registrationTime;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果提取构造器公共代码到非静态代码块，User类是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.block.use;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> registrationTime;<br><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;新用户注册&quot;</span>);<br>        registrationTime = System.currentTimeMillis();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br>        username = registrationTime+<span class="hljs-string">&quot;&quot;</span>;<br>        password = <span class="hljs-string">&quot;123456&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String username, String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br>        <span class="hljs-built_in">this</span>.username = username;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getRegistrationTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> registrationTime;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;用户名：&quot;</span> + username + <span class="hljs-string">&quot;，密码：&quot;</span> + password + <span class="hljs-string">&quot;，注册时间：&quot;</span> + registrationTime;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">static</span>&#123;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>is = DBCPTest.class.getClassLoader().getResourceAsStream(<span class="hljs-string">&quot;dbcp.properties&quot;</span>);<br><span class="hljs-type">Properties</span> <span class="hljs-variable">pros</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>pros.load(is);<br><span class="hljs-comment">//调用BasicDataSourceFactory的静态方法，获取数据源。</span><br>dataSource = BasicDataSourceFactory.createDataSource(pros);<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>e.printStackTrace();<br>&#125;<span class="hljs-keyword">finally</span>&#123;<br><span class="hljs-keyword">if</span>(is != <span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">try</span> &#123;<br>is.close();<br>&#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-小结：实例变量赋值顺序"><a href="#4-4-小结：实例变量赋值顺序" class="headerlink" title="4.4 小结：实例变量赋值顺序"></a>4.4 小结：实例变量赋值顺序</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951628_watermark.png" alt="image-20220325230208941" style="zoom:67%;" /><h3 id="4-5-练习"><a href="#4-5-练习" class="headerlink" title="4.5 练习"></a>4.5 练习</h3><p>练习1：分析加载顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Root</span>&#123;<br><span class="hljs-keyword">static</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Root的静态初始化块&quot;</span>);<br>&#125;<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;Root的普通初始化块&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Root</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Root的无参数的构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mid</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Root</span>&#123;<br><span class="hljs-keyword">static</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Mid的静态初始化块&quot;</span>);<br>&#125;<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;Mid的普通初始化块&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Mid</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Mid的无参数的构造器&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Mid</span><span class="hljs-params">(String msg)</span>&#123;<br><span class="hljs-comment">//通过this调用同一类中重载的构造器</span><br><span class="hljs-built_in">this</span>();<br>System.out.println(<span class="hljs-string">&quot;Mid的带参数构造器，其参数值：&quot;</span><br>+ msg);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Leaf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Mid</span>&#123;<br><span class="hljs-keyword">static</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;Leaf的静态初始化块&quot;</span>);<br>&#125;<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;Leaf的普通初始化块&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Leaf</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//通过super调用父类中有一个字符串参数的构造器</span><br><span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;尚硅谷&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Leaf的构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeafTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Leaf</span>(); <br><span class="hljs-comment">//new Leaf();</span><br>&#125;<br>&#125;<br><br>Root的静态初始化块<br>Mid的静态初始化块<br>Leaf的静态初始化块<br>Root的普通初始化块<br>Root的无参数的构造器<br>Mid的普通初始化块<br>Mid的无参数的构造器<br>Mid的带参数构造器，其参数值：尚硅谷<br>Leaf的普通初始化块<br>Leaf的构造器<br></code></pre></td></tr></table></figure><p>练习2：分析加载顺序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">static</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;11111111111&quot;</span>);<br>&#125;<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;22222222222&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Father</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;33333333333&quot;</span>);<br><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">static</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;44444444444&quot;</span>);<br>&#125;<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;55555555555&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Son</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;66666666666&quot;</span>);<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <br>System.out.println(<span class="hljs-string">&quot;77777777777&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;************************&quot;</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>System.out.println(<span class="hljs-string">&quot;************************&quot;</span>);<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>System.out.println(<span class="hljs-string">&quot;************************&quot;</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>();<br>&#125;<br><br>&#125;<br><br><span class="hljs-number">11111111111</span><br><span class="hljs-number">44444444444</span><br><span class="hljs-number">77777777777</span><br>************************<br><span class="hljs-number">22222222222</span><br><span class="hljs-number">33333333333</span><br><span class="hljs-number">55555555555</span><br><span class="hljs-number">66666666666</span><br>************************<br><span class="hljs-number">22222222222</span><br><span class="hljs-number">33333333333</span><br><span class="hljs-number">55555555555</span><br><span class="hljs-number">66666666666</span><br>************************<br><span class="hljs-number">22222222222</span><br><span class="hljs-number">33333333333</span><br></code></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu05.field.interview;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 16:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Zi</span> <span class="hljs-variable">zi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zi</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fu</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> getNum(<span class="hljs-string">&quot;（1）i&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> getNum(<span class="hljs-string">&quot;（2）j&quot;</span>);<br>    <span class="hljs-keyword">static</span>&#123;<br>        print(<span class="hljs-string">&quot;（3）父类静态代码块&quot;</span>);<br>    &#125;<br>    &#123;<br>        print(<span class="hljs-string">&quot;（4）父类非静态代码块，又称为构造代码块&quot;</span>);<br>    &#125;<br>    Fu()&#123;<br>        print(<span class="hljs-string">&quot;（5）父类构造器&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String str)</span>&#123;<br>        System.out.println(str + <span class="hljs-string">&quot;-&gt;&quot;</span> + i);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNum</span><span class="hljs-params">(String str)</span>&#123;<br>        print(str);<br>        <span class="hljs-keyword">return</span> ++i;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fu</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> getNum(<span class="hljs-string">&quot;（6）k&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> getNum(<span class="hljs-string">&quot;（7）h&quot;</span>);<br>    <span class="hljs-keyword">static</span>&#123;<br>        print(<span class="hljs-string">&quot;（8）子类静态代码块&quot;</span>);<br>    &#125;<br>    &#123;<br>        print(<span class="hljs-string">&quot;（9）子类非静态代码块，又称为构造代码块&quot;</span>);<br>    &#125;<br>    Zi()&#123;<br>        print(<span class="hljs-string">&quot;（10）子类构造器&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(String str)</span>&#123;<br>        System.out.println(str + <span class="hljs-string">&quot;-&gt;&quot;</span> + k);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNum</span><span class="hljs-params">(String str)</span>&#123;<br>        print(str);<br>        <span class="hljs-keyword">return</span> ++k;<br>    &#125;<br>&#125;<br><br>（<span class="hljs-number">1</span>）i-&gt;<span class="hljs-number">0</span><br>（<span class="hljs-number">3</span>）父类静态代码块-&gt;<span class="hljs-number">1</span><br>（<span class="hljs-number">6</span>）k-&gt;<span class="hljs-number">0</span><br>（<span class="hljs-number">8</span>）子类静态代码块-&gt;<span class="hljs-number">1</span><br>（<span class="hljs-number">2</span>）j-&gt;<span class="hljs-number">1</span><br>（<span class="hljs-number">4</span>）父类非静态代码块，又称为构造代码块-&gt;<span class="hljs-number">2</span><br>（<span class="hljs-number">5</span>）父类构造器-&gt;<span class="hljs-number">2</span><br>（<span class="hljs-number">7</span>）h-&gt;<span class="hljs-number">1</span><br>（<span class="hljs-number">9</span>）子类非静态代码块，又称为构造代码块-&gt;<span class="hljs-number">2</span><br>（<span class="hljs-number">10</span>）子类构造器-&gt;<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="5-final关键字"><a href="#5-final关键字" class="headerlink" title="5. final关键字"></a>5. final关键字</h2><h3 id="5-1-final的意义"><a href="#5-1-final的意义" class="headerlink" title="5.1 final的意义"></a>5.1 final的意义</h3><p>final：最终的，不可更改的</p><h3 id="5-2-final的使用"><a href="#5-2-final的使用" class="headerlink" title="5.2 final的使用"></a>5.2 final的使用</h3><h4 id="5-2-1-final修饰类"><a href="#5-2-1-final修饰类" class="headerlink" title="5.2.1 final修饰类"></a>5.2.1 final修饰类</h4><p>表示这个类不能被继承，没有子类。提高安全性，提高程序的可读性。</p><p>例如：String类、System类、StringBuffer类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Eunuch</span>&#123;<span class="hljs-comment">//太监类</span><br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Eunuch</span>&#123;<span class="hljs-comment">//错误</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-2-final修饰方法"><a href="#5-2-2-final修饰方法" class="headerlink" title="5.2.2 final修饰方法"></a>5.2.2 final修饰方法</h4><p>表示这个方法不能被子类重写。</p><p>例如：Object类中的getClass()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;father&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//错误</span><br>System.out.println(<span class="hljs-string">&quot;son&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-3-final修饰变量"><a href="#5-2-3-final修饰变量" class="headerlink" title="5.2.3 final修饰变量"></a>5.2.3 final修饰变量</h4><p>final修饰某个变量（成员变量或局部变量），一旦赋值，它的值就不能被修改，即常量，常量名建议使用大写字母。</p><p>例如：final double MY_PI &#x3D; 3.14;</p><blockquote><p>如果某个成员变量用final修饰后，没有set方法，并且必须初始化（可以显式赋值、或在初始化块赋值、实例变量还可以在构造器中赋值）</p></blockquote><ul><li>修饰成员变量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">totalNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> ID;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span> &#123;<br>        ID = ++totalNumber; <span class="hljs-comment">// 可在构造器中给final修饰的“变量”赋值</span><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        System.out.println(t.ID);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ul><li>修饰局部变量：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestFinal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> MIN_SCORE ;<br>        MIN_SCORE = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_SCORE</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        MAX_SCORE = <span class="hljs-number">200</span>; <span class="hljs-comment">//非法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>错误演示：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INFO</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu&quot;</span>;  <span class="hljs-comment">//声明常量</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//The final field A.INFO cannot be  assigned</span><br>        <span class="hljs-comment">//INFO = &quot;尚硅谷&quot;; </span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-3-笔试题"><a href="#5-3-笔试题" class="headerlink" title="5.3 笔试题"></a>5.3 笔试题</h3><p>题1：排错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Something</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">addOne</span><span class="hljs-params">(<span class="hljs-keyword">final</span> <span class="hljs-type">int</span> x)</span> &#123;<br>        <span class="hljs-keyword">return</span> ++x;<br>        <span class="hljs-comment">// return x + 1;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题2：排错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Something</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Other</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Other</span>();<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Something</span>().addOne(o);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addOne</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Other o)</span> &#123;<br>        <span class="hljs-comment">// o = new Other();</span><br>        o.i++;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Other</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> i;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="6-抽象类与抽象方法-或abstract关键字"><a href="#6-抽象类与抽象方法-或abstract关键字" class="headerlink" title="6. 抽象类与抽象方法(或abstract关键字)"></a>6. 抽象类与抽象方法(或abstract关键字)</h2><h3 id="6-1-由来"><a href="#6-1-由来" class="headerlink" title="6.1 由来"></a>6.1 由来</h3><p>举例1：</p><p>随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类叫做抽象类。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951881_watermark.png" alt="image-20220325231608838"></p><p>举例2：</p><p>我们声明一些几何图形类：圆、矩形、三角形类等，发现这些类都有共同特征：求面积、求周长。那么这些共同特征应该抽取到一个共同父类：几何图形类中。但是这些方法在父类中又<code>无法给出具体的实现</code>，而是应该交给子类各自具体实现。那么父类在声明这些方法时，<code>就只有方法签名，没有方法体</code>，我们把没有方法体的方法称为<strong>抽象方法</strong>。Java语法规定，包含抽象方法的类必须是<strong>抽象类</strong>。</p><h3 id="6-2-语法格式"><a href="#6-2-语法格式" class="headerlink" title="6.2 语法格式"></a>6.2 语法格式</h3><ul><li><strong>抽象类</strong>：被abstract修饰的类。</li><li><strong>抽象方法</strong>：被abstract修饰没有方法体的方法。</li></ul><p>抽象类的语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[权限修饰符] <span class="hljs-keyword">abstract</span> class 类名&#123;<br>    <br>&#125;<br>[权限修饰符] <span class="hljs-keyword">abstract</span> class 类名 extends 父类&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>抽象方法的语法格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">[其他修饰符] <span class="hljs-keyword">abstract</span> 返回值类型 方法名([形参列表]);<br></code></pre></td></tr></table></figure><blockquote><p>注意：抽象方法没有方法体</p></blockquote><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951912_watermark.png" alt="image-20220517204707255"></p><p>代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span> <span class="hljs-params">()</span>&#123;<br>      System.out.println(<span class="hljs-string">&quot;小猫吃鱼和猫粮&quot;</span>); <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CatTest</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建子类对象</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>(); <br>       <br>        <span class="hljs-comment">// 调用eat方法</span><br>        c.eat();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>此时的方法重写，是子类对父类抽象方法的完成实现，我们将这种方法重写的操作，也叫做<strong>实现方法</strong>。</p><h3 id="6-3-使用说明"><a href="#6-3-使用说明" class="headerlink" title="6.3 使用说明"></a>6.3 使用说明</h3><ol><li><p>抽象类<strong>不能创建对象</strong>，如果创建，编译无法通过而报错。只能创建其非抽象子类的对象。</p><blockquote><p>理解：假设创建了抽象类的对象，调用抽象的方法，而抽象方法没有具体的方法体，没有意义。</p><p>抽象类是用来被继承的，抽象类的子类必须重写父类的抽象方法，并提供方法体。若没有重写全部的抽象方法，仍为抽象类。</p></blockquote></li><li><p>抽象类中，也有构造方法，是供子类创建对象时，初始化父类成员变量使用的。</p><blockquote><p>理解：子类的构造方法中，有默认的super()或手动的super(实参列表)，需要访问父类构造方法。</p></blockquote></li><li><p>抽象类中，不一定包含抽象方法，但是有抽象方法的类必定是抽象类。</p><blockquote><p>理解：未包含抽象方法的抽象类，目的就是不想让调用者创建该类对象，通常用于某些特殊的类结构设计。</p></blockquote></li><li><p>抽象类的子类，必须重写抽象父类中<strong>所有的</strong>抽象方法，否则，编译无法通过而报错。除非该子类也是抽象类。 </p><blockquote><p>理解：假设不重写所有抽象方法，则类中可能包含抽象方法。那么创建对象后，调用抽象的方法，没有意义。</p></blockquote></li></ol><h3 id="6-4-注意事项"><a href="#6-4-注意事项" class="headerlink" title="6.4 注意事项"></a>6.4 注意事项</h3><ul><li><p>不能用abstract修饰变量、代码块、构造器；</p></li><li><p>不能用abstract修饰私有方法、静态方法、final的方法、final的类。</p></li></ul><h3 id="6-5-应用举例1"><a href="#6-5-应用举例1" class="headerlink" title="6.5 应用举例1"></a>6.5 应用举例1</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951081_watermark.png" alt="image-20220325232847872"></p><p>在航运公司系统中，Vehicle类需要定义两个方法分别<code>计算运输工具的燃料效率</code>和<code>行驶距离</code>。</p><p><strong>问题：</strong>卡车(Truck)和驳船(RiverBarge)的燃料效率和行驶距离的计算方法完全不同。Vehicle类不能提供计算方法，但子类可以。</p><p><strong>解决方案：</strong>Java允许类设计者指定：超类声明一个方法但不提供实现，该方法的实现由子类提供。这样的方法称为抽象方法。有一个或更多抽象方法的类称为抽象类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Vehicle是一个抽象类，有两个抽象方法。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Vehicle</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calcFuelEfficiency</span><span class="hljs-params">()</span>;<span class="hljs-comment">//计算燃料效率的抽象方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calcTripDistance</span><span class="hljs-params">()</span>;<span class="hljs-comment">//计算行驶距离的抽象方法</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Truck</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Vehicle</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calcFuelEfficiency</span><span class="hljs-params">( )</span>   &#123; <span class="hljs-comment">//写出计算卡车的燃料效率的具体方法   &#125;</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calcTripDistance</span><span class="hljs-params">( )</span>    &#123;  <span class="hljs-comment">//写出计算卡车行驶距离的具体方法   &#125;</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RiverBarge</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Vehicle</span>&#123;<br> <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calcFuelEfficiency</span><span class="hljs-params">( )</span> &#123; <span class="hljs-comment">//写出计算驳船的燃料效率的具体方法  &#125;</span><br> <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calcTripDistance</span><span class="hljs-params">( )</span>  &#123;  <span class="hljs-comment">//写出计算驳船行驶距离的具体方法&#125;</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-6-应用举例2：模板方法设计模式-TemplateMethod"><a href="#6-6-应用举例2：模板方法设计模式-TemplateMethod" class="headerlink" title="6.6 应用举例2：模板方法设计模式(TemplateMethod)"></a>6.6 应用举例2：模板方法设计模式(TemplateMethod)</h3><p>抽象类体现的就是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。</p><p><strong>解决的问题</strong>：</p><ul><li><p>当功能内部一部分实现是确定的，另一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。</p></li><li><p>换句话说，在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种模板模式。</p></li></ul><p><strong>类比举例：</strong>英语六级模板</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951227_watermark.png" alt="image-20220503145003315" style="zoom: 80%;" /><p>制作月饼的模板：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951406_watermark.png" alt="image-20220517205013997" style="zoom: 50%;" /><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Template</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getTime</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        code();<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;执行时间是：&quot;</span> + (end - start));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">code</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SubTemplate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Template</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">code</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10000</span>; i++) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.java;<br><span class="hljs-comment">//抽象类的应用：模板方法的设计模式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TemplateMethodTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">BankTemplateMethod</span> <span class="hljs-variable">btm</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DrawMoney</span>();<br>btm.process();<br><br><span class="hljs-type">BankTemplateMethod</span> <span class="hljs-variable">btm2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ManageMoney</span>();<br>btm2.process();<br>&#125;<br>&#125;<br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BankTemplateMethod</span> &#123;<br><span class="hljs-comment">// 具体方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">takeNumber</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;取号排队&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transact</span><span class="hljs-params">()</span>; <span class="hljs-comment">// 办理具体的业务 //钩子方法</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">evaluate</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;反馈评分&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">// 模板方法，把基本操作组合到一起，子类一般不能重写</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">process</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">this</span>.takeNumber();<br><br><span class="hljs-built_in">this</span>.transact();<span class="hljs-comment">// 像个钩子，具体执行时，挂哪个子类，就执行哪个子类的实现代码</span><br><br><span class="hljs-built_in">this</span>.evaluate();<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DrawMoney</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BankTemplateMethod</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transact</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;我要取款！！！&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ManageMoney</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BankTemplateMethod</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transact</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;我要理财！我这里有2000万美元!!&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>模板方法设计模式是编程中经常用得到的模式。各个框架、类库中都有他的影子，比如常见的有：</p><ul><li><p>数据库访问的封装</p></li><li><p>Junit单元测试</p></li><li><p>JavaWeb的Servlet中关于doGet&#x2F;doPost方法调用</p></li><li><p>Hibernate中模板程序</p></li><li><p>Spring中JDBCTemlate、HibernateTemplate等</p></li></ul><h3 id="6-7-思考与练习"><a href="#6-7-思考与练习" class="headerlink" title="6.7 思考与练习"></a>6.7 思考与练习</h3><p><strong>思考：</strong></p><p>问题1：为什么抽象类不可以使用final关键字声明？</p><p>问题2：一个抽象类中可以定义构造器吗？</p><p>问题3：是否可以这样理解：抽象类就是比普通类多定义了抽象方法，除了不能直接进行类的实例化操作之外，并没有任何的不同？</p><p><strong>练习1：</strong></p><p>编写一个Employee类，声明为抽象类，包含如下三个属性：name，id，salary。提供必要的构造器和抽象方法：work()。</p><p>对于Manager类来说，他既是员工，还具有奖金(bonus)的属性。</p><p>请使用继承的思想，设计CommonEmployee类和Manager类，要求类中提供必要的方法进行属性访问。</p><p><strong>练习2：软件外包公司外派管理</strong></p><p>有一家软件外包公司，可以外派开发人员，该公司有两个角色：普通开发人员Developer和项目经理Manager。他们的关系如下图：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951970_watermark.png" alt="image-20220504164925878"></p><p>普通开发人员的工作内容是“开发项目”，项目经理的工作内容是“项目管理”。对外的报价是普通开发人员每天500,元，超过60天每天400元。项目经理每天800元，超过60天每天700元。</p><p>有一家银行需要1名项目经理、2名开发人员，现场开发90天，计算银行需要付给软件公司的总金额。</p><p>提示：创建数组 Employee[] emps &#x3D; new Employee[3]。其中存储驻场的3名员工。</p><p><strong>练习3：</strong></p><p>创建父类Shape，包含绘制形状的抽象方法draw()。</p><p>创建Shape的子类Circle和Rectangle，重写draw()方法，绘制圆形和矩形。</p><p>绘制多个圆形和矩形。</p><p><strong>练习4：</strong></p><p>1、声明抽象父类Person，包含抽象方法public abstract void eat();<br>2、声明子类中国人Chinese，重写抽象方法，打印用筷子吃饭<br>3、声明子类美国人American，重写抽象方法，打印用刀叉吃饭<br>4、声明子类印度人Indian，重写抽象方法，打印用手抓饭<br>5、声明测试类PersonTest，创建Person数组，存储各国人对象，并遍历数组，调用eat()方法</p><p><strong>练习5：工资系统设计</strong></p><p>编写工资系统，实现不同类型员工(多态)的按月发放工资。如果当月出现某个Employee对象的生日，则将该雇员的工资增加100元。</p><p>实验说明：</p><p>（1）定义一个Employee类，该类包含：</p><p>private成员变量name,number,birthday，其中birthday 为MyDate类的对象；</p><p>abstract方法earnings()；</p><p>toString()方法输出对象的name,number和birthday。</p><p>（2）MyDate类包含:</p><p>private成员变量year,month,day ；</p><p>toDateString()方法返回日期对应的字符串：xxxx年xx月xx日</p><p>（3）定义SalariedEmployee类继承Employee类，实现按月计算工资的员工处理。该类包括：private成员变量monthlySalary；</p><p>实现父类的抽象方法earnings(),该方法返回monthlySalary值；toString()方法输出员工类型信息及员工的name，number,birthday。</p><p>（4）参照SalariedEmployee类定义HourlyEmployee类，实现按小时计算工资的员工处理。该类包括：</p><p>private成员变量wage和hour；</p><p>实现父类的抽象方法earnings(),该方法返回wage*hour值；</p><p>toString()方法输出员工类型信息及员工的name，number,birthday。</p><p>（5）定义PayrollSystem类，创建Employee变量数组并初始化，该数组存放各类雇员对象的引用。利用循环结构遍历数组元素，输出各个对象的类型,name,number,birthday,以及该对象生日。当键盘输入本月月份值时，如果本月是某个Employee对象的生日，还要输出增加工资信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//提示：</span><br><span class="hljs-comment">//定义People类型的数组People c1[]=new People[10];</span><br><span class="hljs-comment">//数组元素赋值</span><br>c1[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;0001&quot;</span>,<span class="hljs-number">20</span>);<br>c1[<span class="hljs-number">1</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">People</span>(<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;0002&quot;</span>,<span class="hljs-number">19</span>);<br><span class="hljs-comment">//若People有两个子类Student和Officer，则数组元素赋值时，可以使父类类型的数组元素指向子类。</span><br>c1[<span class="hljs-number">0</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;John&quot;</span>,<span class="hljs-string">&quot;0001&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">85.0</span>);<br>c1[<span class="hljs-number">1</span>]=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Officer</span>(<span class="hljs-string">&quot;Bob&quot;</span>,<span class="hljs-string">&quot;0002&quot;</span>,<span class="hljs-number">19</span>,<span class="hljs-number">90.5</span>);<br><br></code></pre></td></tr></table></figure><h2 id="7-接口-interface"><a href="#7-接口-interface" class="headerlink" title="7. 接口(interface)"></a>7. 接口(interface)</h2><h3 id="7-1-类比"><a href="#7-1-类比" class="headerlink" title="7.1 类比"></a>7.1 类比</h3><p>生活中大家每天都在用USB接口，那么USB接口与我们今天要学习的接口有什么相同点呢？</p><pre><code class="hljs"> USB，（Universal Serial Bus，通用串行总线）是Intel公司开发的总线架构，使得在计算机上添加串行设备（鼠标、键盘、打印机、扫描仪、摄像头、充电器、MP3机、手机、数码相机、移动硬盘等）非常容易。</code></pre><p>其实，不管是电脑上的USB插口，还是其他设备上的USB插口都只是<code>遵循了USB规范</code>的一种具体设备而已。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951180_watermark.png" alt="bbcc80f541000c71b81650cfaa770c86"></p><p>只要设备遵循USB规范的，那么就可以与电脑互联，并正常通信。至于这个设备、电脑是哪个厂家制造的，内部是如何实现的，我们都无需关心。</p><p>Java的软件系统会有很多模块组成，那么各个模块之间也应该采用这种<code>面向接口</code>的<code>低耦合</code>，为系统提供更好的可扩展性和可维护性。</p><h3 id="7-2-概述"><a href="#7-2-概述" class="headerlink" title="7.2 概述"></a>7.2 概述</h3><p>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是&#x2F;要…则必须能…”的思想。继承是一个”是不是”的is-a关系，而接口实现则是 “能不能”的<code>has-a</code>关系。</p><ul><li>例如：电脑都预留了可以插入USB设备的USB接口，USB接口具备基本的数据传输的开启功能和关闭功能。你能不能用USB进行连接，或是否具备USB通信功能，就看你能否遵循USB接口规范</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951582_watermark.png" alt="image-20220517211517846" style="zoom:67%;" /><ul><li>例如：Java程序是否能够连接使用某种数据库产品，那么要看该数据库产品能否实现Java设计的JDBC规范</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951718_watermark.png" alt="image-20220325235434103" style="zoom:67%;" /><blockquote><p>接口的本质是契约、标准、规范，就像我们的法律一样。制定好后大家都要遵守。</p></blockquote><h3 id="7-3-定义格式"><a href="#7-3-定义格式" class="headerlink" title="7.3 定义格式"></a>7.3 定义格式</h3><p>接口的定义，它与定义类方式相似，但是使用 <code>interface</code> 关键字。它也会被编译成.class文件，但一定要明确它并不是类，而是另外一种引用数据类型。</p><blockquote><p>引用数据类型：数组，类，枚举，接口，注解。</p></blockquote><h4 id="7-3-1-接口的声明格式"><a href="#7-3-1-接口的声明格式" class="headerlink" title="7.3.1 接口的声明格式"></a>7.3.1 接口的声明格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] interface 接口名&#123;<br>    <span class="hljs-comment">//接口的成员列表：</span><br>    <span class="hljs-comment">// 公共的静态常量</span><br>    <span class="hljs-comment">// 公共的抽象方法</span><br>    <br>    <span class="hljs-comment">// 公共的默认方法（JDK1.8以上）</span><br>    <span class="hljs-comment">// 公共的静态方法（JDK1.8以上）</span><br>    <span class="hljs-comment">// 私有方法（JDK1.9以上）</span><br>&#125;<br></code></pre></td></tr></table></figure><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB3</span>&#123;<br>    <span class="hljs-comment">//静态常量</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">MAX_SPEED</span> <span class="hljs-operator">=</span> <span class="hljs-number">500</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;<span class="hljs-comment">//500MB/s</span><br><br>    <span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//默认方法</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;USB 3.0可以同步全速地进行读写操作&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-3-2-接口的成员说明"><a href="#7-3-2-接口的成员说明" class="headerlink" title="7.3.2 接口的成员说明"></a>7.3.2 接口的成员说明</h4><p><strong>在JDK8.0 之前</strong>，接口中只允许出现：</p><p>（1）公共的静态的常量：其中<code>public static final</code>可以省略</p><p>（2）公共的抽象的方法：其中<code>public abstract</code>可以省略</p><blockquote><p>理解：接口是从多个相似类中抽象出来的规范，不需要提供具体实现</p></blockquote><p><strong>在JDK8.0 时</strong>，接口中允许声明<code>默认方法</code>和<code>静态方法</code>：</p><p>（3）公共的默认的方法：其中public 可以省略，建议保留，但是default不能省略</p><p>（4）公共的静态的方法：其中public 可以省略，建议保留，但是static不能省略</p><p><strong>在JDK9.0 时</strong>，接口又增加了：</p><p>（5）私有方法</p><p>除此之外，接口中没有构造器，没有初始化块，因为接口中没有成员变量需要动态初始化。</p><h3 id="7-4-接口的使用规则"><a href="#7-4-接口的使用规则" class="headerlink" title="7.4 接口的使用规则"></a>7.4 接口的使用规则</h3><p><strong>1、类实现接口（implements）</strong></p><p>接口<strong>不能创建对象</strong>，但是可以被类实现（<code>implements</code> ，类似于被继承）。</p><p>类与接口的关系为实现关系，即<strong>类实现接口</strong>，该类可以称为接口的实现类。实现的动作类似继承，格式相仿，只是关键字不同，实现使用 <code> implements</code>关键字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">【修饰符】 class 实现类  implements 接口&#123;<br><span class="hljs-comment">// 重写接口中抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span><br>  <span class="hljs-comment">// 重写接口中默认方法【可选】</span><br>&#125;<br><br>【修饰符】 class 实现类 extends 父类 implements 接口&#123;<br>    <span class="hljs-comment">// 重写接口中抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span><br>  <span class="hljs-comment">// 重写接口中默认方法【可选】</span><br>&#125;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951181_watermark.png" alt="image-20220514163212312" style="zoom:80%;" /><p>注意：</p><ol><li><p>如果接口的实现类是非抽象类，那么必须<code>重写接口中所有抽象方法</code>。</p></li><li><p>默认方法可以选择保留，也可以重写。</p><blockquote><p>重写时，default单词就不要再写了，它只用于在接口中表示默认方法，到类中就没有默认方法的概念了</p></blockquote></li><li><p>接口中的静态方法不能被继承也不能被重写</p></li></ol><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB</span>&#123;<span class="hljs-comment">// </span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> ;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> ;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(USB usb)</span>&#123;<br>usb.start() ;<br>System.out.println(<span class="hljs-string">&quot;=========== USB 设备工作 ========&quot;</span>) ;<br>usb.stop() ;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Flash</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">// 重写方法</span><br>System.out.println(<span class="hljs-string">&quot;U盘开始工作。&quot;</span>) ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">// 重写方法</span><br>System.out.println(<span class="hljs-string">&quot;U盘停止工作。&quot;</span>) ;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Print</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">// 重写方法</span><br>System.out.println(<span class="hljs-string">&quot;打印机开始工作。&quot;</span>) ;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">// 重写方法</span><br>System.out.println(<span class="hljs-string">&quot;打印机停止工作。&quot;</span>) ;<br>&#125;<br>&#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterfaceDemo</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br>Computer.show(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Flash</span>()) ;<br>Computer.show(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Print</span>()) ;<br><br>c.show(<span class="hljs-keyword">new</span> <span class="hljs-title class_">USB</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;移动硬盘开始运行&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;移动硬盘停止运行&quot;</span>);<br>&#125;<br>&#125;);<br>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>2、接口的多实现（implements）</strong></p><p>之前学过，在继承体系中，一个类只能继承一个父类。而对于接口而言，一个类是可以实现多个接口的，这叫做接口的<code>多实现</code>。并且，一个类能继承一个父类，同时实现多个接口。</p><p>实现格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">【修饰符】 class 实现类  implements 接口<span class="hljs-number">1</span>，接口<span class="hljs-number">2</span>，接口<span class="hljs-number">3</span>。。。&#123;<br><span class="hljs-comment">// 重写接口中所有抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span><br>  <span class="hljs-comment">// 重写接口中默认方法【可选】</span><br>&#125;<br><br>【修饰符】 class 实现类 extends 父类 implements 接口<span class="hljs-number">1</span>，接口<span class="hljs-number">2</span>，接口<span class="hljs-number">3</span>。。。&#123;<br>    <span class="hljs-comment">// 重写接口中所有抽象方法【必须】，当然如果实现类是抽象类，那么可以不重写</span><br>  <span class="hljs-comment">// 重写接口中默认方法【可选】</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>接口中，有多个抽象方法时，实现类必须重写所有抽象方法。<strong>如果抽象方法有重名的，只需要重写一次</strong>。</p></blockquote><p>举例：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951631_watermark.png" alt="image-20220514163311418" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951817_watermark.png" alt="image-20220325235321778" style="zoom:67%;" /><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951032_watermark.png" alt="1562216188519"></p><p>定义多个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showA</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">showB</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span>,B &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showA</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;showA&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showB</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;showB&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestC</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">C</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>();<br>        c.showA();<br>        c.showB();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、接口的多继承(extends)</strong></p><p>一个接口能继承另一个或者多个接口，接口的继承也使用 <code>extends</code> 关键字，子接口继承父接口的方法。</p><p>定义父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Chargeable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">charge</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义子接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UsbC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Chargeable</span>,USB3 &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义子接口的实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeCConverter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">UsbC</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;正反面都支持&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">charge</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;可充电&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;接收数据&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;输出数据&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>所有父接口的抽象方法都有重写。</p><p>方法签名相同的抽象方法只需要实现一次。</p></blockquote><p><strong>4、接口与实现类对象构成多态引用</strong></p><p>实现类实现接口，类似于子类继承父类，因此，接口类型的变量与实现类的对象之间，也可以构成多态引用。通过接口类型的变量调用方法，最终执行的是你new的实现类对象实现的方法体。</p><p>接口的不同实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mouse</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB3</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;发送脉冲信号&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;不接收信号&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyBoard</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">USB3</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;不接收信号&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;发送按键信号&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestComputer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Computer</span> <span class="hljs-variable">computer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br>        <span class="hljs-type">USB3</span> <span class="hljs-variable">usb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mouse</span>();<br>        computer.setUsb(usb);<br>        usb.start();<br>        usb.out();<br>        usb.in();<br>        usb.stop();<br>        System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br>        usb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyBoard</span>();<br>        computer.setUsb(usb);<br>        usb.start();<br>        usb.out();<br>        usb.in();<br>        usb.stop();<br>        System.out.println(<span class="hljs-string">&quot;--------------------------&quot;</span>);<br><br>        usb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MobileHDD</span>();<br>        computer.setUsb(usb);<br>        usb.start();<br>        usb.out();<br>        usb.in();<br>        usb.stop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5、使用接口的静态成员</strong></p><p>接口不能直接创建对象，但是可以通过接口名直接调用接口的静态方法和静态常量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestUSB3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//通过“接口名.”调用接口的静态方法 (JDK8.0才能开始使用)</span><br>        USB3.show();<br>        <span class="hljs-comment">//通过“接口名.”直接使用接口的静态常量</span><br>        System.out.println(USB3.MAX_SPEED);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>6、使用接口的非静态方法</strong></p><ul><li>对于接口的静态方法，直接使用“<code>接口名.</code>”进行调用即可<ul><li>也只能使用“接口名.”进行调用，不能通过实现类的对象进行调用</li></ul></li><li>对于接口的抽象方法、默认方法，只能通过实现类对象才可以调用<ul><li>接口不能直接创建对象，只能创建实现类的对象</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMobileHDD</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建实现类对象</span><br>        <span class="hljs-type">MobileHDD</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MobileHDD</span>();<br><br>        <span class="hljs-comment">//通过实现类对象调用重写的抽象方法，以及接口的默认方法，如果实现类重写了就执行重写的默认方法，如果没有重写，就执行接口中的默认方法</span><br>        b.start();<br>        b.in();<br>        b.stop();<br><br>        <span class="hljs-comment">//通过接口名调用接口的静态方法</span><br><span class="hljs-comment">//        MobileHDD.show();</span><br><span class="hljs-comment">//        b.show();</span><br>        Usb3.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-5-JDK8中相关冲突问题"><a href="#7-5-JDK8中相关冲突问题" class="headerlink" title="7.5 JDK8中相关冲突问题"></a>7.5 JDK8中相关冲突问题</h3><h4 id="7-5-1-默认方法冲突问题"><a href="#7-5-1-默认方法冲突问题" class="headerlink" title="7.5.1 默认方法冲突问题"></a>7.5.1 默认方法冲突问题</h4><p><strong>（1）类优先原则</strong></p><p>当一个类，既继承一个父类，又实现若干个接口时，父类中的成员方法与接口中的抽象方法重名，子类就近选择执行父类的成员方法。代码如下：</p><p>定义接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Friend</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">date</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//约会</span><br>        System.out.println(<span class="hljs-string">&quot;吃喝玩乐&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义父类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">date</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//约会</span><br>        System.out.println(<span class="hljs-string">&quot;爸爸约吃饭&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Friend</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">date</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//(1)不重写默认保留父类的</span><br>        <span class="hljs-comment">//(2)调用父类被重写的</span><br><span class="hljs-comment">//        super.date();</span><br>        <span class="hljs-comment">//(3)保留父接口的</span><br><span class="hljs-comment">//        Friend.super.date();</span><br>        <span class="hljs-comment">//(4)完全重写</span><br>        System.out.println(<span class="hljs-string">&quot;跟康师傅学Java&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestSon</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        s.date();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（2）接口冲突（左右为难）</strong></p><ul><li>当一个类同时实现了多个父接口，而多个父接口中包含方法签名相同的默认方法时，怎么办呢？</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951062_watermark.jpg"></p><p>无论你多难抉择，最终都是要做出选择的。</p><p>声明接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BoyFriend</span> &#123;<br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">date</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//约会</span><br>        System.out.println(<span class="hljs-string">&quot;神秘约会&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>选择保留其中一个，通过“<code>接口名.super.方法名</code>“的方法选择保留哪个接口的默认方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Girl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Friend</span>,BoyFriend&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">date</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//(1)保留其中一个父接口的</span><br><span class="hljs-comment">//        Friend.super.date();</span><br><span class="hljs-comment">//        BoyFriend.super.date();</span><br>        <span class="hljs-comment">//(2)完全重写</span><br>        System.out.println(<span class="hljs-string">&quot;跟康师傅学Java&quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestGirl</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Girl</span> <span class="hljs-variable">girl</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Girl</span>();<br>        girl.date();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>当一个子接口同时继承了多个接口，而多个父接口中包含方法签名相同的默认方法时，怎么办呢？</li></ul><p>另一个父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB2</span> &#123;<br>    <span class="hljs-comment">//静态常量</span><br>    <span class="hljs-type">long</span> <span class="hljs-variable">MAX_SPEED</span> <span class="hljs-operator">=</span> <span class="hljs-number">60</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;<span class="hljs-comment">//60MB/s</span><br><br>    <span class="hljs-comment">//抽象方法</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">in</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">out</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">//默认方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;开始&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;USB 2.0可以高速地进行读写操作&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>子接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">USB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">USB2</span>,USB3 &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Usb.start&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Usb.stop&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>小贴士：</p><p>子接口重写默认方法时，default关键字可以保留。</p><p>子类重写默认方法时，default关键字不可以保留。</p></blockquote><h4 id="7-5-2-常量冲突问题"><a href="#7-5-2-常量冲突问题" class="headerlink" title="7.5.2 常量冲突问题"></a>7.5.2 常量冲突问题</h4><ul><li>当子类继承父类又实现父接口，而父类中存在与父接口常量同名的成员变量，并且该成员变量名在子类中仍然可见。</li><li>当子类同时实现多个接口，而多个接口存在相同同名常量。</li></ul><p>此时在子类中想要引用父类或父接口的同名的常量或成员变量时，就会有冲突问题。</p><p>父类和父接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperClass</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SuperInterface</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MotherInterface</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>子类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.interfacetype;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubClass</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SuperClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SuperInterface</span>,MotherInterface &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        System.out.println(&quot;x = &quot; + x);//模糊不清</span><br>        System.out.println(<span class="hljs-string">&quot;super.x = &quot;</span> + <span class="hljs-built_in">super</span>.x);<br>        System.out.println(<span class="hljs-string">&quot;SuperInterface.x = &quot;</span> + SuperInterface.x);<br>        System.out.println(<span class="hljs-string">&quot;MotherInterface.x = &quot;</span> + MotherInterface.x);<br>        System.out.println(<span class="hljs-string">&quot;y = &quot;</span> + y);<span class="hljs-comment">//没有重名问题，可以直接访问</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-6-接口的总结与面试题"><a href="#7-6-接口的总结与面试题" class="headerlink" title="7.6 接口的总结与面试题"></a>7.6 接口的总结与面试题</h3><ul><li>接口本身不能创建对象，只能创建接口的实现类对象，接口类型的变量可以与实现类对象构成多态引用。</li><li>声明接口用interface，接口的成员声明有限制：<ul><li>（1）公共的静态常量</li><li>（2）公共的抽象方法</li><li>（3）公共的默认方法（JDK8.0 及以上）</li><li>（4）公共的静态方法（JDK8.0 及以上）</li><li>（5）私有方法（JDK9.0 及以上）</li></ul></li><li>类可以实现接口，关键字是implements，而且支持多实现。如果实现类不是抽象类，就必须实现接口中所有的抽象方法。如果实现类既要继承父类又要实现父接口，那么继承（extends）在前，实现（implements）在后。</li><li>接口可以继承接口，关键字是extends，而且支持多继承。</li><li>接口的默认方法可以选择重写或不重写。如果有冲突问题，另行处理。子类重写父接口的默认方法，要去掉default，子接口重写父接口的默认方法，不要去掉default。</li><li>接口的静态方法不能被继承，也不能被重写。接口的静态方法只能通过“接口名.静态方法名”进行调用。</li></ul><p><strong>面试题</strong></p><p><strong>1、为什么接口中只能声明公共的静态的常量？</strong></p><p>因为接口是标准规范，那么在规范中需要声明一些底线边界值，当实现者在实现这些规范时，不能去随意修改和触碰这些底线，否则就有“危险”。</p><p>例如：USB1.0规范中规定最大传输速率是1.5Mbps，最大输出电流是5V&#x2F;500mA</p><p>​           USB3.0规范中规定最大传输速率是5Gbps(500MB&#x2F;s)，最大输出电流是5V&#x2F;900mA</p><p>例如：尚硅谷学生行为规范中规定学员，早上8:25之前进班，晚上21:30之后离开等等。</p><p><strong>2、为什么JDK8.0 之后允许接口定义静态方法和默认方法呢？因为它违反了接口作为一个抽象标准定义的概念。</strong></p><p><code>静态方法</code>：因为之前的标准类库设计中，有很多Collection&#x2F;Colletions或者Path&#x2F;Paths这样成对的接口和类，后面的类中都是静态方法，而这些静态方法都是为前面的接口服务的，那么这样设计一对API，不如把静态方法直接定义到接口中使用和维护更方便。</p><p><code>默认方法</code>：（1）我们要在已有的老版接口中提供新方法时，如果添加抽象方法，就会涉及到原来使用这些接口的类就会有问题，那么为了保持与旧版本代码的兼容性，只能允许在接口中定义默认方法实现。比如：Java8中对Collection、List、Comparator等接口提供了丰富的默认方法。（2）当我们接口的某个抽象方法，在很多实现类中的实现代码是一样的，此时将这个抽象方法设计为默认方法更为合适，那么实现类就可以选择重写，也可以选择不重写。</p><p><strong>3、为什么JDK1.9要允许接口定义私有方法呢？因为我们说接口是规范，规范是需要公开让大家遵守的。</strong></p><p><strong>私有方法</strong>：因为有了默认方法和静态方法这样具有具体实现的方法，那么就可能出现多个方法由共同的代码可以抽取，而这些共同的代码抽取出来的方法又只希望在接口内部使用，所以就增加了私有方法。</p><h3 id="7-7-接口与抽象类之间的对比"><a href="#7-7-接口与抽象类之间的对比" class="headerlink" title="7.7 接口与抽象类之间的对比"></a>7.7 接口与抽象类之间的对比</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951174_watermark.png" alt="image-20220328002053452"></p><blockquote><p>在开发中，常看到一个类不是去继承一个已经实现好的类，而是要么继承抽象类，要么实现接口。</p></blockquote><h3 id="7-8-练习"><a href="#7-8-练习" class="headerlink" title="7.8 练习"></a>7.8 练习</h3><p><strong>笔试题：</strong>排错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pX</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(x);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">C</span>().pX();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>笔试题：</strong>排错</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Playable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Bounceable</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Rollable</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Playable</span>, Bounceable &#123;<br>    <span class="hljs-type">Ball</span> <span class="hljs-variable">ball</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ball</span>(<span class="hljs-string">&quot;PingPang&quot;</span>);<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Ball</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Rollable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Ball</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">play</span><span class="hljs-params">()</span> &#123;<br>        ball = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ball</span>(<span class="hljs-string">&quot;Football&quot;</span>);<br>        System.out.println(ball.getName());<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习1：</strong></p><p>定义一个接口用来实现两个对象的比较。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">CompareObject</span>&#123;<br><span class="hljs-comment">//若返回值是 0 , 代表相等; 若为正数，代表当前对象大；负数代表当前对象小</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(Object o)</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p>定义一个Circle类，声明redius属性，提供getter和setter方法</p><p>定义一个ComparableCircle类，继承Circle类并且实现CompareObject接口。在ComparableCircle类中给出接口中方法compareTo的实现体，用来比较两个圆的半径大小。</p><p>定义一个测试类InterfaceTest，创建两个ComparableCircle对象，调用compareTo方法比较两个类的半径大小。</p><p>思考：参照上述做法定义矩形类Rectangle和ComparableRectangle类，在ComparableRectangle类中给出compareTo方法的实现，比较两个矩形的面积大小。</p><p><strong>练习2：交通工具案例</strong></p><p>阿里的一个工程师，声明的属性和方法如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951549_watermark.png" alt="image-20220504172547709"></p><p>其中，有一个乘坐交通工具的方法takingVehicle()，在此方法中调用交通工具的run()。为了出行方便，他买了一辆捷安特自行车、一辆雅迪电动车和一辆奔驰轿车。这里涉及到的相关类及接口关系如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951169_watermark.png" alt="image-20220504172918861"></p><p>其中，电动车增加动力的方式是充电，轿车增加动力的方式是加油。在具体交通工具的run()中调用其所在类的相关属性信息。</p><p>请编写相关代码，并测试。</p><p>提示：创建Vehicle[]数组，保存阿里工程师的三辆交通工具，并分别在工程师的takingVehicle()中调用。</p><h2 id="8-内部类（InnerClass"><a href="#8-内部类（InnerClass" class="headerlink" title="8. 内部类（InnerClass)"></a>8. 内部类（InnerClass)</h2><h3 id="8-1-概述"><a href="#8-1-概述" class="headerlink" title="8.1 概述"></a>8.1 概述</h3><h4 id="8-1-1-什么是内部类"><a href="#8-1-1-什么是内部类" class="headerlink" title="8.1.1 什么是内部类"></a>8.1.1 什么是内部类</h4><p>将一个类A定义在另一个类B里面，里面的那个类A就称为<code>内部类（InnerClass）</code>，类B则称为<code>外部类（OuterClass）</code>。</p><h4 id="8-1-2-为什么要声明内部类呢"><a href="#8-1-2-为什么要声明内部类呢" class="headerlink" title="8.1.2 为什么要声明内部类呢"></a>8.1.2 为什么要声明内部类呢</h4><p>具体来说，当一个事物A的内部，还有一个部分需要一个完整的结构B进行描述，而这个内部的完整的结构B又只为外部事物A提供服务，不在其他地方单独使用，那么整个内部的完整结构B最好使用内部类。</p><p>总的来说，遵循<code>高内聚、低耦合</code>的面向对象开发原则。</p><h4 id="8-1-3-内部类的分类"><a href="#8-1-3-内部类的分类" class="headerlink" title="8.1.3 内部类的分类"></a>8.1.3 内部类的分类</h4><p>根据内部类声明的位置（如同变量的分类），我们可以分为：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951372_watermark.png" alt="image-20221124223912529"></p><h3 id="8-2-成员内部类"><a href="#8-2-成员内部类" class="headerlink" title="8.2 成员内部类"></a>8.2 成员内部类</h3><h4 id="8-2-1-概述"><a href="#8-2-1-概述" class="headerlink" title="8.2.1 概述"></a>8.2.1 概述</h4><p>如果成员内部类中不使用外部类的非静态成员，那么通常将内部类声明为静态内部类，否则声明为非静态内部类。</p><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 外部类&#123;<br>    [其他修饰符] [<span class="hljs-keyword">static</span>] class 内部类&#123;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>成员内部类的使用特征，概括来讲有如下两种角色：</strong></p><ul><li>成员内部类作为<code>类的成员的角色</code>：<ul><li>和外部类不同，Inner class还可以声明为private或protected；</li><li>可以调用外部类的结构。（注意：在静态内部类中不能使用外部类的非静态成员）</li><li>Inner class 可以声明为static的，但此时就不能再使用外层类的非static的成员变量；</li></ul></li><li>成员内部类作为<code>类的角色</code>：<ul><li>可以在内部定义属性、方法、构造器等结构</li><li>可以继承自己的想要继承的父类，实现自己想要实现的父接口们，和外部类的父类和父接口无关</li><li>可以声明为abstract类 ，因此可以被其它的内部类继承</li><li>可以声明为final的，表示不能被继承</li><li>编译以后生成OuterClass$InnerClass.class字节码文件（也适用于局部内部类）</li></ul></li></ul><p>注意点：</p><ol start="2"><li><p>外部类访问成员内部类的成员，需要“内部类.成员”或“内部类对象.成员”的方式</p></li><li><p>成员内部类可以直接使用外部类的所有成员，包括私有的数据</p></li><li><p>当想要在外部类的静态成员部分使用内部类时，可以考虑内部类声明为静态的</p></li></ol><h4 id="8-2-2-创建成员内部类对象"><a href="#8-2-2-创建成员内部类对象" class="headerlink" title="8.2.2 创建成员内部类对象"></a>8.2.2 创建成员内部类对象</h4><ul><li>实例化静态内部类</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">外部类名.静态内部类名 变量 <span class="hljs-operator">=</span> 外部类名.静态内部类名()<span class="hljs-comment">;</span><br>变量.非静态方法()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>实例化非静态内部类</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">外部类名 变量<span class="hljs-number">1</span> <span class="hljs-operator">=</span> new 外部类()<span class="hljs-comment">;</span><br>外部类名.非静态内部类名 变量<span class="hljs-number">2</span> <span class="hljs-operator">=</span> 变量<span class="hljs-number">1</span>.new 非静态内部类名()<span class="hljs-comment">;</span><br>变量<span class="hljs-number">2</span>.非静态方法()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="8-2-3-举例"><a href="#8-2-3-举例" class="headerlink" title="8.2.3 举例"></a>8.2.3 举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMemberInnerClass</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建静态内部类实例，并调用方法</span><br>        Outer.<span class="hljs-type">StaticInner</span> <span class="hljs-variable">inner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>.StaticInner();<br>        inner.inFun();<br>        <span class="hljs-comment">//调用静态内部类静态方法</span><br>        Outer.StaticInner.inMethod();<br><br>        System.out.println(<span class="hljs-string">&quot;*****************************&quot;</span>);<br>        <br>        <span class="hljs-comment">//创建非静态内部类实例（方式1），并调用方法</span><br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">outer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>        Outer.<span class="hljs-type">NoStaticInner</span> <span class="hljs-variable">inner1</span> <span class="hljs-operator">=</span> outer.<span class="hljs-keyword">new</span> <span class="hljs-title class_">NoStaticInner</span>();<br>        inner1.inFun();<br><br>        <span class="hljs-comment">//创建非静态内部类实例（方式2）</span><br>        Outer.<span class="hljs-type">NoStaticInner</span> <span class="hljs-variable">inner2</span> <span class="hljs-operator">=</span> outer.getNoStaticInner();<br>        inner1.inFun();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;外部类的静态a&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">b</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;外部类的静态b&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;外部类对象的非静态c&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;外部类对象的非静态d&quot;</span>;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticInner</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;静态内部类的静态a&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;静态内部类对象的非静态c&quot;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inMethod</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;Inner.a = &quot;</span> + a);<br>            System.out.println(<span class="hljs-string">&quot;Outer.a = &quot;</span> + Outer.a);<br>            System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inFun</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;Inner.inFun&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;Outer.a = &quot;</span> + Outer.a);<br>            System.out.println(<span class="hljs-string">&quot;Inner.a = &quot;</span> + a);<br>            System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<br>            System.out.println(<span class="hljs-string">&quot;c = &quot;</span> + c);<br><span class="hljs-comment">//            System.out.println(&quot;d = &quot; + d);//不能访问外部类的非静态成员</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">NoStaticInner</span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;非静态内部类对象的非静态a&quot;</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;非静态内部类对象的非静态c&quot;</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inFun</span><span class="hljs-params">()</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;NoStaticInner.inFun&quot;</span>);<br>            System.out.println(<span class="hljs-string">&quot;Outer.a = &quot;</span> + Outer.a);<br>            System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>            System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<br>            System.out.println(<span class="hljs-string">&quot;Outer.c = &quot;</span> + Outer.<span class="hljs-built_in">this</span>.c);<br>            System.out.println(<span class="hljs-string">&quot;c = &quot;</span> + c);<br>            System.out.println(<span class="hljs-string">&quot;d = &quot;</span> + d);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> NoStaticInner <span class="hljs-title function_">getNoStaticInner</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NoStaticInner</span>();<br>    &#125;<br>&#125;<br><br>Inner.inFun<br>Outer.a = 外部类的静态a<br>Inner.a = 静态内部类的静态<span class="hljs-type">a</span><br><span class="hljs-variable">b</span> <span class="hljs-operator">=</span> 外部类的静态<span class="hljs-type">b</span><br><span class="hljs-variable">c</span> <span class="hljs-operator">=</span> 静态内部类对象的非静态c<br>Inner.a = 静态内部类的静态a<br>Outer.a = 外部类的静态<span class="hljs-type">a</span><br><span class="hljs-variable">b</span> <span class="hljs-operator">=</span> 外部类的静态b<br>*****************************<br>NoStaticInner.inFun<br>Outer.a = 外部类的静态<span class="hljs-type">a</span><br><span class="hljs-variable">a</span> <span class="hljs-operator">=</span> 非静态内部类对象的非静态<span class="hljs-type">a</span><br><span class="hljs-variable">b</span> <span class="hljs-operator">=</span> 外部类的静态b<br>Outer.c = 外部类对象的非静态<span class="hljs-type">c</span><br><span class="hljs-variable">c</span> <span class="hljs-operator">=</span> 非静态内部类对象的非静态<span class="hljs-type">c</span><br><span class="hljs-variable">d</span> <span class="hljs-operator">=</span> 外部类对象的非静态d<br>NoStaticInner.inFun<br>Outer.a = 外部类的静态<span class="hljs-type">a</span><br><span class="hljs-variable">a</span> <span class="hljs-operator">=</span> 非静态内部类对象的非静态<span class="hljs-type">a</span><br><span class="hljs-variable">b</span> <span class="hljs-operator">=</span> 外部类的静态b<br>Outer.c = 外部类对象的非静态<span class="hljs-type">c</span><br><span class="hljs-variable">c</span> <span class="hljs-operator">=</span> 非静态内部类对象的非静态<span class="hljs-type">c</span><br><span class="hljs-variable">d</span> <span class="hljs-operator">=</span> 外部类对象的非静态d<br></code></pre></td></tr></table></figure><h3 id="8-3-局部内部类"><a href="#8-3-局部内部类" class="headerlink" title="8.3 局部内部类"></a>8.3 局部内部类</h3><h4 id="8-3-1-非匿名局部内部类"><a href="#8-3-1-非匿名局部内部类" class="headerlink" title="8.3.1 非匿名局部内部类"></a>8.3.1 非匿名局部内部类</h4><p>语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 外部类&#123;<br>    [修饰符] 返回值类型  方法名(形参列表)&#123;<br>            [<span class="hljs-keyword">final</span>/<span class="hljs-keyword">abstract</span>] class 内部类&#123;<br>    &#125;<br>    &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>编译后有自己的独立的字节码文件，只不过在内部类名前面冠以外部类名、$符号、编号。<ul><li>这里有编号是因为同一个外部类中，不同的方法中存在相同名称的局部内部类</li></ul></li></ul><ul><li>和成员内部类不同的是，它前面不能有权限修饰符等</li><li>局部内部类如同局部变量一样，有作用域</li><li>局部内部类中是否能访问外部类的非静态的成员，取决于所在的方法</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: TestLocalInner</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span> 17:19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestLocalInner</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Outer.outMethod();<br>        System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);<br><br>        <span class="hljs-type">Outer</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outer</span>();<br>        out.outTest();<br>        System.out.println(<span class="hljs-string">&quot;-------------------&quot;</span>);<br><br>        <span class="hljs-type">Runner</span> <span class="hljs-variable">runner</span> <span class="hljs-operator">=</span> Outer.getRunner();<br>        runner.run();<br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">outMethod</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Outer.outMethod&quot;</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;局部变量c&quot;</span>;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inMethod</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;Inner.inMethod&quot;</span>);<br>                System.out.println(c);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        in.inMethod();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">outTest</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">inMethod1</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;Inner.inMethod1&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        in.inMethod1();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Runner <span class="hljs-title function_">getRunner</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">LocalRunner</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runner</span>&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                System.out.println(<span class="hljs-string">&quot;LocalRunner.run&quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LocalRunner</span>();<br>    &#125;<br><br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Runner</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>;<br>&#125;<br><br>Outer.outMethod<br>Inner.inMethod<br>局部变量c<br>-------------------<br>Inner.inMethod1<br>-------------------<br></code></pre></td></tr></table></figure><h4 id="8-3-2-匿名内部类"><a href="#8-3-2-匿名内部类" class="headerlink" title="8.3.2 匿名内部类"></a>8.3.2 匿名内部类</h4><p>因为考虑到这个子类或实现类是一次性的，那么我们“费尽心机”的给它取名字，就显得多余。那么我们完全可以使用匿名内部类的方式来实现，避免给类命名的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 父类([实参列表])&#123;<br>    重写方法...<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> 父接口()&#123;<br>    重写方法...<br>&#125;<br></code></pre></td></tr></table></figure><p>举例1：使用匿名内部类的对象直接调用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;aaaa&quot;</span>);<br>&#125;<br>    &#125;.a();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例2：通过父类或父接口的变量多态引用匿名内部类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <span class="hljs-type">A</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>()&#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;aaaa&quot;</span>);<br>&#125;<br>    &#125;;<br>    obj.a();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例3：匿名内部类的对象作为实参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">A</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(A a)</span>&#123;<br>    a.method();<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    test(<span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>()&#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;aaaa&quot;</span>);<br>&#125;<br>    &#125;);<br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-4-练习"><a href="#8-4-练习" class="headerlink" title="8.4 练习"></a>8.4 练习</h3><p>练习：判断输出结果为何？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        s1.a = <span class="hljs-number">10</span>;<br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        s2.a = <span class="hljs-number">20</span>;<br>        Test.<span class="hljs-type">Inner</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>.Inner();<br>        System.out.println(s3.a);<br>    &#125;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Test</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>        <span class="hljs-type">Inner</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> t.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<br>        System.out.println(r.a);<br>    &#125;<br>&#125;<br><br><span class="hljs-number">5</span><br><span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>练习2：</p><p>编写一个匿名内部类，它继承Object，并在匿名内部类中，声明一个方法public void test()打印尚硅谷。</p><p>请编写代码调用这个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test01;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test01</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;尚硅谷&quot;</span>);<br>&#125;<br>&#125;.test();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="9-枚举类"><a href="#9-枚举类" class="headerlink" title="9. 枚举类"></a>9. 枚举类</h2><h3 id="9-1-概述"><a href="#9-1-概述" class="headerlink" title="9.1 概述"></a>9.1 概述</h3><ul><li><p>枚举类型本质上也是一种类，只不过是这个类的对象是有限的、固定的几个，不能让用户随意创建。</p></li><li><p>枚举类的例子举不胜举：</p><ul><li><code>星期</code>：Monday(星期一)……Sunday(星期天)</li><li><code>性别</code>：Man(男)、Woman(女)</li><li><code>月份</code>：January(1月)……December(12月)</li><li><code>季节</code>：Spring(春节)……Winter(冬天)</li><li><code>三原色</code>：red(红色)、green(绿色)、blue(蓝色)</li><li><code>支付方式</code>：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银行卡)、CreditCard(信用卡)</li><li><code>就职状态</code>：Busy(忙碌)、Free(空闲)、Vocation(休假)、Dimission(离职)</li><li><code>订单状态</code>：Nonpayment（未付款）、Paid（已付款）、Fulfilled（已配货）、Delivered（已发货）、Checked（已确认收货）、Return（退货）、Exchange（换货）、Cancel（取消）</li><li><code>线程状态</code>：创建、就绪、运行、阻塞、死亡</li></ul></li><li><p><strong>若枚举只有一个对象, 则可以作为一种单例模式的实现方式。</strong></p></li><li><p>枚举类的实现：</p><ul><li>在JDK5.0 之前，需要程序员自定义枚举类型。</li><li>在JDK5.0 之后，Java支持<code>enum</code>关键字来快速定义枚举类型。</li></ul></li></ul><h3 id="9-2-定义枚举类（JDK5-0-之前）"><a href="#9-2-定义枚举类（JDK5-0-之前）" class="headerlink" title="9.2 定义枚举类（JDK5.0 之前）"></a>9.2 定义枚举类（JDK5.0 之前）</h3><p>在JDK5.0 之前如何声明枚举类呢？</p><ul><li><code>私有化</code>类的构造器，保证不能在类的外部创建其对象</li><li>在类的内部创建枚举类的实例。声明为：<code>public static final</code> ，对外暴露这些常量对象</li><li>对象如果有<code>实例变量</code>，应该声明为<code>private final</code>（建议，不是必须），并在构造器中初始化</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Season</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SEASONNAME;<span class="hljs-comment">//季节的名称</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SEASONDESC;<span class="hljs-comment">//季节的描述</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season</span><span class="hljs-params">(String seasonName,String seasonDesc)</span>&#123;<br>        <span class="hljs-built_in">this</span>.SEASONNAME = seasonName;<br>        <span class="hljs-built_in">this</span>.SEASONDESC = seasonDesc;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SPRING</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;春天&quot;</span>, <span class="hljs-string">&quot;春暖花开&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">SUMMER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;夏天&quot;</span>, <span class="hljs-string">&quot;夏日炎炎&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">AUTUMN</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;秋天&quot;</span>, <span class="hljs-string">&quot;秋高气爽&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">WINTER</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;冬天&quot;</span>, <span class="hljs-string">&quot;白雪皑皑&quot;</span>);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Season&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;SEASONNAME=&#x27;&quot;</span> + SEASONNAME + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, SEASONDESC=&#x27;&quot;</span> + SEASONDESC + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SeasonTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(Season.AUTUMN);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-3-定义枚举类（JDK5-0-之后）"><a href="#9-3-定义枚举类（JDK5-0-之后）" class="headerlink" title="9.3 定义枚举类（JDK5.0 之后）"></a>9.3 定义枚举类（JDK5.0 之后）</h3><h4 id="9-3-1-enum关键字声明枚举"><a href="#9-3-1-enum关键字声明枚举" class="headerlink" title="9.3.1 enum关键字声明枚举"></a>9.3.1 enum关键字声明枚举</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">【修饰符】 <span class="hljs-keyword">enum</span> 枚举类名&#123;<br>    常量对象列表<br>&#125;<br><br>【修饰符】 <span class="hljs-keyword">enum</span> 枚举类名&#123;<br>    常量对象列表;<br>    <br>    对象的实例变量列表;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.enumeration;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Week</span> &#123;<br>    MONDAY,TUESDAY,WEDNESDAY,THURSDAY,FRIDAY,SATURDAY,SUNDAY;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestEnum</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Season</span> <span class="hljs-variable">spring</span> <span class="hljs-operator">=</span> Season.SPRING;<br>System.out.println(spring);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="9-3-2-enum方式定义的要求和特点"><a href="#9-3-2-enum方式定义的要求和特点" class="headerlink" title="9.3.2 enum方式定义的要求和特点"></a>9.3.2 enum方式定义的要求和特点</h4><ul><li>枚举类的常量对象列表必须在枚举类的首行，因为是常量，所以建议大写。</li><li>列出的实例系统会自动添加 public static final 修饰。</li><li>如果常量对象列表后面没有其他代码，那么“；”可以省略，否则不可以省略“；”。</li><li>编译器给枚举类默认提供的是private的无参构造，如果枚举类需要的是无参构造，就不需要声明，写常量对象列表时也不用加参数</li><li>如果枚举类需要的是有参构造，需要手动定义，有参构造的private可以省略，调用有参构造的方法就是在常量对象名后面加(实参列表)就可以。</li><li>枚举类默认继承的是java.lang.Enum类，因此不能再继承其他的类型。</li><li>JDK5.0 之后switch，提供支持枚举类型，case后面可以写枚举常量名，无需添加枚举类作为限定。</li></ul><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SeasonEnum</span> &#123;<br>    SPRING(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;春风又绿江南岸&quot;</span>),<br>    SUMMER(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;映日荷花别样红&quot;</span>),<br>    AUTUMN(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;秋水共长天一色&quot;</span>),<br>    WINTER(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;窗含西岭千秋雪&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String seasonDesc;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SeasonEnum</span><span class="hljs-params">(String seasonName, String seasonDesc)</span> &#123;<br>        <span class="hljs-built_in">this</span>.seasonName = seasonName;<br>        <span class="hljs-built_in">this</span>.seasonDesc = seasonDesc;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSeasonName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> seasonName;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSeasonDesc</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> seasonDesc;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.enumeration;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Week</span> &#123;<br>    MONDAY(<span class="hljs-string">&quot;星期一&quot;</span>),<br>    TUESDAY(<span class="hljs-string">&quot;星期二&quot;</span>),<br>    WEDNESDAY(<span class="hljs-string">&quot;星期三&quot;</span>),<br>    THURSDAY(<span class="hljs-string">&quot;星期四&quot;</span>),<br>    FRIDAY(<span class="hljs-string">&quot;星期五&quot;</span>),<br>    SATURDAY(<span class="hljs-string">&quot;星期六&quot;</span>),<br>    SUNDAY(<span class="hljs-string">&quot;星期日&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String description;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Week</span><span class="hljs-params">(String description)</span>&#123;<br>        <span class="hljs-built_in">this</span>.description = description;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.toString() +<span class="hljs-string">&quot;:&quot;</span>+ description;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.enumeration;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestWeek</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Week</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> Week.MONDAY;<br>        System.out.println(week);<br><br>        <span class="hljs-keyword">switch</span> (week)&#123;<br>            <span class="hljs-keyword">case</span> MONDAY:<br>                System.out.println(<span class="hljs-string">&quot;怀念周末，困意很浓&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> TUESDAY:<br>                System.out.println(<span class="hljs-string">&quot;进入学习状态&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> WEDNESDAY:<br>                System.out.println(<span class="hljs-string">&quot;死撑&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> THURSDAY:<br>                System.out.println(<span class="hljs-string">&quot;小放松&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> FRIDAY:<br>                System.out.println(<span class="hljs-string">&quot;又信心满满&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SATURDAY:<br>                System.out.println(<span class="hljs-string">&quot;开始盼周末，无心学习&quot;</span>);<span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> SUNDAY:<br>                System.out.println(<span class="hljs-string">&quot;一觉到下午&quot;</span>);<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>经验之谈：</p><p>开发中，当需要定义一组常量时，强烈建议使用枚举类。</p></blockquote><h3 id="9-4-enum中常用方法"><a href="#9-4-enum中常用方法" class="headerlink" title="9.4 enum中常用方法"></a>9.4 enum中常用方法</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">String <span class="hljs-title">toString</span>(): 默认返回的是常量名（对象名），可以继续手动重写该方法！</span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-keyword">static</span> 枚举类型[] <span class="hljs-title">values</span>():返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值，是一个静态方法</span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-keyword">static</span> 枚举类型 <span class="hljs-title">valueOf</span>(<span class="hljs-params">String name</span>)：可以把一个字符串转为对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：IllegalArgumentException。</span><br><span class="hljs-function">    </span><br><span class="hljs-function">String <span class="hljs-title">name</span>():得到当前枚举常量的名称。建议优先使用<span class="hljs-title">toString</span>()。</span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">ordinal</span>():返回当前枚举常量的次序号，默认从0开始</span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.enumeration;<br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestEnumMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//values()</span><br>        Week[] values = Week.values();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; values.length; i++) &#123;<br>            <span class="hljs-comment">//ordinal()、name()</span><br>            System.out.println((values[i].ordinal()+<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;-&gt;&quot;</span> + values[i].name());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;------------------------&quot;</span>);<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入星期值：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">weekValue</span> <span class="hljs-operator">=</span> input.nextInt();<br>        <span class="hljs-type">Week</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> values[weekValue-<span class="hljs-number">1</span>];<br>        <span class="hljs-comment">//toString()</span><br>        System.out.println(week);<br><br>        System.out.print(<span class="hljs-string">&quot;请输入星期名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">weekName</span> <span class="hljs-operator">=</span> input.next();<br>        <span class="hljs-comment">//valueOf()</span><br>        week = Week.valueOf(weekName);<br>        System.out.println(week);<br><br>        input.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-5-实现接口的枚举类"><a href="#9-5-实现接口的枚举类" class="headerlink" title="9.5 实现接口的枚举类"></a>9.5 实现接口的枚举类</h3><ul><li>和普通 Java 类一样，枚举类可以实现一个或多个接口</li><li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只要统一实现该方法即可。</li><li>若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式，则可以让每个枚举值分别来实现该方法</li></ul><p>语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、枚举类可以像普通的类一样，实现接口，并且可以多个，但要求必须实现里面所有的抽象方法！</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">A</span> implements 接口<span class="hljs-number">1</span>，接口<span class="hljs-number">2</span>&#123;<br><span class="hljs-comment">//抽象方法的实现</span><br>&#125;<br><br><span class="hljs-comment">//2、如果枚举类的常量可以继续重写抽象方法!</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">A</span> implements 接口<span class="hljs-number">1</span>，接口<span class="hljs-number">2</span>&#123;<br>    常量名<span class="hljs-number">1</span>(参数)&#123;<br>        <span class="hljs-comment">//抽象方法的实现或重写</span><br>    &#125;,<br>    常量名<span class="hljs-number">2</span>(参数)&#123;<br>        <span class="hljs-comment">//抽象方法的实现或重写</span><br>    &#125;,<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Info</span>&#123;<br><span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-comment">//使用enum关键字定义枚举类</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Info</span>&#123;<br><span class="hljs-comment">//1. 创建枚举类中的对象,声明在enum枚举类的首位</span><br>SPRING(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;春暖花开&quot;</span>)&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;春天在哪里？&quot;</span>);<br>&#125;<br>&#125;,<br>SUMMER(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;夏日炎炎&quot;</span>)&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;宁静的夏天&quot;</span>);<br>&#125;<br>&#125;,<br>AUTUMN(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;秋高气爽&quot;</span>)&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;秋天是用来分手的季节&quot;</span>);<br>&#125;<br>&#125;,<br>WINTER(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;白雪皑皑&quot;</span>)&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;2002年的第一场雪&quot;</span>);<br>&#125;<br>&#125;;<br><br><span class="hljs-comment">//2. 声明每个对象拥有的属性:private final修饰</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SEASON_NAME;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String SEASON_DESC;<br><br><span class="hljs-comment">//3. 私有化类的构造器</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">Season1</span><span class="hljs-params">(String seasonName,String seasonDesc)</span>&#123;<br><span class="hljs-built_in">this</span>.SEASON_NAME = seasonName;<br><span class="hljs-built_in">this</span>.SEASON_DESC = seasonDesc;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSEASON_NAME</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> SEASON_NAME;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSEASON_DESC</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> SEASON_DESC;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-注解-Annotation"><a href="#10-注解-Annotation" class="headerlink" title="10. 注解(Annotation)"></a>10. 注解(Annotation)</h2><h3 id="10-1-注解概述"><a href="#10-1-注解概述" class="headerlink" title="10.1 注解概述"></a>10.1 注解概述</h3><h4 id="10-1-1-什么是注解"><a href="#10-1-1-什么是注解" class="headerlink" title="10.1.1 什么是注解"></a>10.1.1 什么是注解</h4><p>注解（Annotation）是从<code>JDK5.0</code>开始引入，以“<code>@注解名</code>”在代码中存在。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Deprecated</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings(value=”unchecked”)</span><br></code></pre></td></tr></table></figure><p>Annotation 可以像修饰符一样被使用，可用于修饰包、类、构造器、方法、成员变量、参数、局部变量的声明。还可以添加一些参数值，这些信息被保存在 Annotation 的 “name&#x3D;value” 对中。</p><p>注解可以在类编译、运行时进行加载，体现不同的功能。</p><h4 id="10-1-2-注解与注释"><a href="#10-1-2-注解与注释" class="headerlink" title="10.1.2 注解与注释"></a>10.1.2 注解与注释</h4><p>注解也可以看做是一种注释，通过使用 Annotation，程序员可以在不改变原有逻辑的情况下，在源文件中嵌入一些补充信息。但是，注解，不同于单行注释和多行注释。</p><ul><li>对于单行注释和多行注释是给程序员看的。</li><li>而注解是可以被编译器或其他程序读取的。程序还可以根据注解的不同，做出相应的处理。</li></ul><h4 id="10-1-3-注解的重要性"><a href="#10-1-3-注解的重要性" class="headerlink" title="10.1.3 注解的重要性"></a>10.1.3 注解的重要性</h4><p>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。在<code>JavaEE/Android中注解占据了更重要的角色</code>，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的<code>繁冗代码</code>和<code>XML配置</code>等。</p><p>未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，Struts2有一部分也是基于注解的了。<code>注解是一种趋势</code>，一定程度上可以说：<code>框架 = 注解 + 反射 + 设计模式</code>。</p><h3 id="10-2-常见的Annotation作用"><a href="#10-2-常见的Annotation作用" class="headerlink" title="10.2 常见的Annotation作用"></a>10.2 常见的Annotation作用</h3><p><strong>示例1：生成文档相关的注解</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@author</span> 标明开发该类模块的作者，多个作者之间使用,分割<br><span class="hljs-meta">@version</span> 标明该类模块的版本<br><span class="hljs-meta">@see</span> 参考转向，也就是相关主题<br><span class="hljs-meta">@since</span> 从哪个版本开始增加的<br><span class="hljs-meta">@param</span> 对方法中某参数的说明，如果没有参数就不能写<br><span class="hljs-meta">@return</span> 对方法返回值的说明，如果方法的返回值类型是<span class="hljs-keyword">void</span>就不能写<br><span class="hljs-meta">@exception</span> 对方法可能抛出的异常进行说明 ，如果方法没有用<span class="hljs-keyword">throws</span>显式抛出的异常就不能写<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.annotation.javadoc;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@see</span> Math.java</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavadocTest</span> &#123;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 程序的主方法，程序的入口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> args String[] 命令行参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 求圆面积的方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> radius double 半径值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> double 圆的面积</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">(<span class="hljs-type">double</span> radius)</span>&#123;<br><span class="hljs-keyword">return</span> Math.PI * radius * radius;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>示例2：在编译时进行格式检查(JDK内置的三个基本注解)</strong></p><p><code>@Override</code>: 限定重写父类方法，该注解只能用于方法</p><p><code>@Deprecated</code>: 用于表示所修饰的元素(类，方法等)已过时。通常是因为所修饰的结构危险或存在更好的选择</p><p><code>@SuppressWarnings</code>: 抑制编译器警告</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.annotation.javadoc;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationTest</span>&#123;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-meta">@SuppressWarnings(&quot;unused&quot;)</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>&#125;<br><span class="hljs-meta">@Deprecated</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;过时的方法&quot;</span>);<br>&#125;<br> <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;重写的toString方法()&quot;</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>示例3：跟踪代码依赖性，实现替代配置文件功能</strong></p><ul><li>Servlet3.0提供了注解(annotation)，使得不再需要在web.xml文件中进行Servlet的部署。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/login&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123; &#125;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> &#123;<br>        doGet(request, response);<br>&#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.servlet.LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>LoginServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/login<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br><br></code></pre></td></tr></table></figure><ul><li>Spring框架中关于“事务”的管理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional(propagation=Propagation.REQUIRES_NEW,isolation=Isolation.READ_COMMITTED,readOnly=false,timeout=3)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">buyBook</span><span class="hljs-params">(String username, String isbn)</span> &#123;<br><span class="hljs-comment">//1.查询书的单价</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> bookShopDao.findBookPriceByIsbn(isbn);<br>    <span class="hljs-comment">//2. 更新库存</span><br>    bookShopDao.updateBookStock(isbn);<br>    <span class="hljs-comment">//3. 更新用户的余额</span><br>    bookShopDao.updateUserAccount(username, price);<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 配置事务属性 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;dataSourceTransactionManager&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>       <span class="hljs-comment">&lt;!-- 配置每个方法使用的事务属性 --&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;buyBook&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRES_NEW&quot;</span> </span><br><span class="hljs-tag"> <span class="hljs-attr">isolation</span>=<span class="hljs-string">&quot;READ_COMMITTED&quot;</span>  <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;false&quot;</span>  <span class="hljs-attr">timeout</span>=<span class="hljs-string">&quot;3&quot;</span> /&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="10-3-三个最基本的注解"><a href="#10-3-三个最基本的注解" class="headerlink" title="10.3 三个最基本的注解"></a>10.3 三个最基本的注解</h3><h4 id="10-3-1-Override"><a href="#10-3-1-Override" class="headerlink" title="10.3.1 @Override"></a>10.3.1 @Override</h4><ul><li><p>用于检测被标记的方法为有效的重写方法，如果不是，则报编译错误！</p></li><li><p>只能标记在方法上。</p></li><li><p>它会被编译器程序读取。</p></li></ul><h4 id="10-3-2-Deprecated"><a href="#10-3-2-Deprecated" class="headerlink" title="10.3.2 @Deprecated"></a>10.3.2 @Deprecated</h4><ul><li><p>用于表示被标记的数据已经过时，不推荐使用。</p></li><li><p>可以用于修饰 属性、方法、构造、类、包、局部变量、参数。</p></li><li><p>它会被编译器程序读取。</p></li></ul><h4 id="10-3-3-SuppressWarnings"><a href="#10-3-3-SuppressWarnings" class="headerlink" title="10.3.3 @SuppressWarnings"></a>10.3.3 @SuppressWarnings</h4><ul><li><p>抑制编译警告。当我们不希望看到警告信息的时候，可以使用 SuppressWarnings 注解来抑制警告信息</p></li><li><p>可以用于修饰类、属性、方法、构造、局部变量、参数</p></li><li><p>它会被编译器程序读取。</p></li><li><p>可以指定的警告类型有（了解）</p><ul><li>all，抑制所有警告</li><li>unchecked，抑制与未检查的作业相关的警告</li><li>unused，抑制与未用的程式码及停用的程式码相关的警告</li><li>deprecation，抑制与淘汰的相关警告</li><li>nls，抑制与非 nls 字串文字相关的警告</li><li>null，抑制与空值分析相关的警告</li><li>rawtypes，抑制与使用 raw 类型相关的警告</li><li>static-access，抑制与静态存取不正确相关的警告</li><li>static-method，抑制与可能宣告为 static 的方法相关的警告</li><li>super，抑制与置换方法相关但不含 super 呼叫的警告</li><li>…</li></ul></li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.annotation;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestAnnotation</span> &#123;<br>    <span class="hljs-meta">@SuppressWarnings(&quot;all&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> i;<br><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">list</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        list.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>        list.add(<span class="hljs-number">123</span>);<br>        list.add(<span class="hljs-string">&quot;world&quot;</span>);<br><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        f.show();<br>        f.methodOl();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-meta">@Deprecated</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Father.show&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodOl</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Father Method&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-comment">/*@Override</span><br><span class="hljs-comment">void method01() &#123;</span><br><span class="hljs-comment">System.out.println(&quot;Son Method&quot;);</span><br><span class="hljs-comment">&#125;*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-4-元注解"><a href="#10-4-元注解" class="headerlink" title="10.4 元注解"></a>10.4 元注解</h3><p>JDK1.5在java.lang.annotation包定义了4个标准的meta-annotation类型，它们被用来提供对其它 annotation类型作说明。</p><p>（1）**@Target：**用于描述注解的使用范围</p><ul><li>可以通过枚举类型ElementType的10个常量对象来指定</li><li>TYPE，METHOD，CONSTRUCTOR，PACKAGE…..</li></ul><p>（2）**@Retention：**用于描述注解的生命周期</p><ul><li>可以通过枚举类型RetentionPolicy的3个常量对象来指定</li><li>SOURCE（源代码）、CLASS（字节码）、RUNTIME（运行时）</li><li><code>唯有RUNTIME阶段才能被反射读取到</code>。</li></ul><p>（3）**@Documented**：表明这个注解应该被 javadoc工具记录。</p><p>（4）**@Inherited：**允许子类继承父类中的注解</p><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Target(ElementType.METHOD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Override &#123;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.annotation.ElementType.*;<br><br><span class="hljs-meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.SOURCE)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SuppressWarnings &#123;<br>    String[] value();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> java.lang;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.lang.annotation.ElementType.*;<br><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Deprecated &#123;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>拓展：元数据</p><p>String name &#x3D; “Tom”;</p></blockquote><h3 id="10-5-自定义注解的使用"><a href="#10-5-自定义注解的使用" class="headerlink" title="10.5 自定义注解的使用"></a>10.5 自定义注解的使用</h3><p>一个完整的注解应该包含三个部分：<br>（1）声明<br>（2）使用<br>（3）读取</p><h4 id="10-5-1-声明自定义注解"><a href="#10-5-1-声明自定义注解" class="headerlink" title="10.5.1 声明自定义注解"></a>10.5.1 声明自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">【元注解】<br>【修饰符】 <span class="hljs-meta">@interface</span> 注解名&#123;<br>    【成员列表】<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>自定义注解可以通过四个元注解@Retention,@Target，@Inherited,@Documented，分别说明它的声明周期，使用位置，是否被继承，是否被生成到API文档中。</li><li>Annotation 的成员在 Annotation 定义中以无参数有返回值的抽象方法的形式来声明，我们又称为配置参数。返回值类型只能是八种基本数据类型、String类型、Class类型、enum类型、Annotation类型、以上所有类型的数组</li><li>可以使用 default 关键字为抽象方法指定默认返回值</li><li>如果定义的注解含有抽象方法，那么使用时必须指定返回值，除非它有默认值。格式是“方法名 &#x3D; 返回值”，如果只有一个抽象方法需要赋值，且方法名为value，可以省略“value&#x3D;”，所以如果注解只有一个抽象方法成员，建议使用方法名value。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Target(ElementType.TYPE)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Table &#123;<br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.annotation;<br><br><span class="hljs-keyword">import</span> java.lang.annotation.*;<br><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@Target(ElementType.FIELD)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Column &#123;<br>    String <span class="hljs-title function_">columnName</span><span class="hljs-params">()</span>;<br>    String <span class="hljs-title function_">columnType</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="10-5-2-使用自定义注解"><a href="#10-5-2-使用自定义注解" class="headerlink" title="10.5.2 使用自定义注解"></a>10.5.2 使用自定义注解</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.annotation;<br><br><span class="hljs-meta">@Table(&quot;t_stu&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-meta">@Column(columnName = &quot;sid&quot;,columnType = &quot;int&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-meta">@Column(columnName = &quot;sname&quot;,columnType = &quot;varchar(20)&quot;)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Student&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="10-5-3-读取和处理自定义注解"><a href="#10-5-3-读取和处理自定义注解" class="headerlink" title="10.5.3 读取和处理自定义注解"></a>10.5.3 读取和处理自定义注解</h4><p>自定义注解必须配上注解的信息处理流程才有意义。</p><p>我们自己定义的注解，只能使用反射的代码读取。所以自定义注解的声明周期必须是RetentionPolicy.RUNTIME。</p><p>具体的使用见<code>《尚硅谷_宋红康_第17章_反射机制.md》</code>。</p><h3 id="10-6-JUnit单元测试"><a href="#10-6-JUnit单元测试" class="headerlink" title="10.6 JUnit单元测试"></a>10.6 JUnit单元测试</h3><h4 id="10-6-1-测试分类"><a href="#10-6-1-测试分类" class="headerlink" title="10.6.1 测试分类"></a>10.6.1 测试分类</h4><p><strong>黑盒测试：</strong>不需要写代码，给输入值，看程序是否能够输出期望的值。 </p><p><strong>白盒测试：</strong>需要写代码的。关注程序具体的执行流程。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951704_watermark.png" alt="image-20220511181800694" style="zoom: 50%;" /><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270951314_watermark.png" alt="image-20220524102038600"></p><h4 id="10-6-2-JUnit单元测试介绍"><a href="#10-6-2-JUnit单元测试介绍" class="headerlink" title="10.6.2 JUnit单元测试介绍"></a>10.6.2 JUnit单元测试介绍</h4><p>JUnit 是由 Erich Gamma 和 Kent Beck 编写的一个测试框架（regression testing framework），供Java开发人员编写单元测试之用。</p><p><strong>JUnit测试是程序员测试，即所谓白盒测试，因为程序员知道被测试的软件如何（How）完成功能和完成什么样（What）的功能。</strong></p><p>要使用JUnit，必须在项目的编译路径中<code>引入JUnit的库</code>，即相关的.class文件组成的jar包。jar就是一个压缩包，压缩包都是开发好的第三方（Oracle公司第一方，我们自己第二方，其他都是第三方）工具类，都是以class文件形式存在的。</p><h4 id="10-6-3-引入本地JUnit-jar"><a href="#10-6-3-引入本地JUnit-jar" class="headerlink" title="10.6.3 引入本地JUnit.jar"></a>10.6.3 引入本地JUnit.jar</h4><p>第1步：在项目中File-Project Structure中操作：添加Libraries库</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952651_watermark.png" alt="image-20211228180938922" style="zoom:80%;" /><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952653_watermark.png" alt="image-20221002195547325"></p><p>其中，junit-libs包内容如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952861_watermark.png" alt="image-20220813005206452"></p><p>第2步：选择要在哪些module中应用JUnit库</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952135_watermark.png" alt="image-20220813005511062"></p><p>第3步：检查是否应用成功</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952347_watermark.png" alt="image-20220813005729233"></p><p><strong>注意Scope：选择Compile，否则编译时，无法使用JUnit。</strong></p><p>第4步：下次如果有新的模块要使用该libs库，这样操作即可</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952773_watermark.png" alt="image-20220813005944022"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952092_watermark.png" alt="image-20220813010018152"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952418_watermark.png" alt="image-20220813010055217"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952837_watermark.png" alt="image-20220813010124381"></p><h4 id="10-6-4-编写和运行-Test单元测试方法"><a href="#10-6-4-编写和运行-Test单元测试方法" class="headerlink" title="10.6.4 编写和运行@Test单元测试方法"></a>10.6.4 编写和运行@Test单元测试方法</h4><p>JUnit4版本，要求@Test标记的方法必须满足如下要求：</p><ul><li>所在的类必须是public的，非抽象的，包含唯一的无参构造器。</li><li>@Test标记的方法本身必须是public，非抽象的，非静态的，void无返回值，()无参数的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.junit;<br><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestJUnit</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;TestJUnit.test01&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;TestJUnit.test02&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;TestJUnit.test03&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952206_watermark.png" alt="image-20220106152412245"></p><h4 id="10-6-5-设置执行JUnit用例时支持控制台输入"><a href="#10-6-5-设置执行JUnit用例时支持控制台输入" class="headerlink" title="10.6.5 设置执行JUnit用例时支持控制台输入"></a>10.6.5 设置执行JUnit用例时支持控制台输入</h4><p><strong>1. 设置数据：</strong></p><p>默认情况下，在单元测试方法中使用Scanner时，并不能实现控制台数据的输入。需要做如下设置：</p><p>在<code>idea64.exe.vmoptions配置文件</code>中加入下面一行设置，重启idea后生效。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">-Deditable.java.test.console</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><p><strong>2. 配置文件位置：</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952556_watermark.png" alt="image-20220813011625546"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952874_watermark.png" alt="image-20220813011642180"></p><p>添加完成之后，重启IDEA即可。</p><p><strong>3. 如果上述位置设置不成功，需要继续修改如下位置</strong></p><p>修改位置1：IDEA安装目录的bin目录（例如：<code>D:\develop_tools\IDEA\IntelliJ IDEA 2022.1.2\bin</code>）下的idea64.exe.vmoptions文件。 </p><p>修改位置2：C盘的用户目录<code>C:\Users\用户名\AppData\Roaming\JetBrains\IntelliJIdea2022.1</code> 下的idea64.exe.vmoptions&#96;件。</p><h4 id="10-6-6-定义test测试方法模板"><a href="#10-6-6-定义test测试方法模板" class="headerlink" title="10.6.6 定义test测试方法模板"></a>10.6.6 定义test测试方法模板</h4><p>选中自定义的模板组，点击”+”（1.Live Template）来定义模板。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952267_watermark.png" alt="image-20211229100040505"></p><h2 id="11-包装类"><a href="#11-包装类" class="headerlink" title="11. 包装类"></a>11. 包装类</h2><h3 id="11-1-为什么需要包装类"><a href="#11-1-为什么需要包装类" class="headerlink" title="11.1 为什么需要包装类"></a>11.1 为什么需要包装类</h3><p>Java提供了两个类型系统，<code>基本数据类型</code>与<code>引用数据类型</code>。使用基本数据类型在于效率，然而当要使用只针对对象设计的API或新特性（例如泛型），怎么办呢？例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//情况1：方法形参</span><br>Object类的equals(Object obj)<br><br><span class="hljs-comment">//情况2：方法形参</span><br>ArrayList类的add(Object obj)<br><span class="hljs-comment">//没有如下的方法：</span><br>add(<span class="hljs-type">int</span> number)<br>add(<span class="hljs-type">double</span> d)<br>add(<span class="hljs-type">boolean</span> b)<br><br><span class="hljs-comment">//情况3：泛型</span><br>Set&lt;T&gt;<br>List&lt;T&gt;<br>Cllection&lt;T&gt;<br>Map&lt;K,V&gt;<br></code></pre></td></tr></table></figure><h3 id="11-2-有哪些包装类"><a href="#11-2-有哪些包装类" class="headerlink" title="11.2 有哪些包装类"></a>11.2 有哪些包装类</h3><p>Java针对八种基本数据类型定义了相应的引用类型：包装类（封装类）。有了类的特点，就可以调用类中的方法，Java才是真正的面向对象。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952621_watermark.png" alt="image-20220329001912486" style="zoom:80%;" /><p>封装以后的，内存结构对比：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">520</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">520</span>);<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952865_watermark.png" alt="image-20220514163725830" style="zoom:80%;" /><h3 id="11-3-自定义包装类"><a href="#11-3-自定义包装类" class="headerlink" title="11.3 自定义包装类"></a>11.3 自定义包装类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInteger</span> &#123;<br>    <span class="hljs-type">int</span> value;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyInteger</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyInteger</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> String.valueOf(value);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="11-4-包装类与基本数据类型间的转换"><a href="#11-4-包装类与基本数据类型间的转换" class="headerlink" title="11.4 包装类与基本数据类型间的转换"></a>11.4 包装类与基本数据类型间的转换</h3><h4 id="11-4-1-装箱"><a href="#11-4-1-装箱" class="headerlink" title="11.4.1 装箱"></a>11.4.1 装箱</h4><p> <strong>装箱：把基本数据类型转为包装类对象</strong></p><blockquote><p>转为包装类的对象，是为了使用专门为对象设计的API和特性</p></blockquote><p>基本数值—-&gt;包装对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">obj1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">4</span>);<span class="hljs-comment">//使用构造函数函数</span><br><span class="hljs-type">Float</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Float</span>(“<span class="hljs-number">4.56</span>”);<br><span class="hljs-type">Long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Long</span>(“asdf”);  <span class="hljs-comment">//NumberFormatException</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">obj2</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-number">4</span>);<span class="hljs-comment">//使用包装类中的valueOf方法</span><br></code></pre></td></tr></table></figure><h4 id="11-4-2-拆箱"><a href="#11-4-2-拆箱" class="headerlink" title="11.4.2 拆箱"></a>11.4.2 拆箱</h4><p><strong>拆箱：把包装类对象拆为基本数据类型</strong></p><blockquote><p>转为基本数据类型，一般是因为需要运算，Java中的大多数运算符是为基本数据类型设计的。比较、算术等</p></blockquote><p>包装对象—-&gt;基本数值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">4</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> obj.intValue();<br></code></pre></td></tr></table></figure><p><strong>自动装箱与拆箱：</strong></p><p>由于我们经常要做基本类型与包装类之间的转换，从<code>JDK5.0 </code>开始，基本类型与包装类的装箱、拆箱动作可以自动完成。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<span class="hljs-comment">//自动装箱。相当于Integer i = Integer.valueOf(4);</span><br>i = i + <span class="hljs-number">5</span>;<span class="hljs-comment">//等号右边：将i对象转成基本数值(自动拆箱) i.intValue() + 5;</span><br><span class="hljs-comment">//加法运算完成后，再次装箱，把基本数值转成对象。</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：只能与自己对应的类型之间才能实现自动装箱与拆箱。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">Double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//错误的，1是int类型</span><br></code></pre></td></tr></table></figure><h3 id="11-5-基本数据类型、包装类与字符串间的转换"><a href="#11-5-基本数据类型、包装类与字符串间的转换" class="headerlink" title="11.5 基本数据类型、包装类与字符串间的转换"></a>11.5 基本数据类型、包装类与字符串间的转换</h3><p><strong>（1）基本数据类型转为字符串</strong></p><p><strong>方式1：</strong>调用字符串重载的valueOf()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">//String str = a;//错误的</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> String.valueOf(a);<br></code></pre></td></tr></table></figure><p><strong>方式2：</strong>更直接的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> a + <span class="hljs-string">&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>（2）字符串转为基本数据类型</strong></p><p><strong>方式1：</strong>除了Character类之外，其他所有包装类都具有parseXxx静态方法可以将字符串参数转换为对应的基本类型，例如：</p><ul><li><code>public static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</li><li><code>public static long parseLong(String s)</code>：将字符串参数转换为对应的long基本类型。</li><li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li></ul><p><strong>方式2：</strong>字符串转为包装类，然后可以自动拆箱为基本数据类型</p><ul><li><code>public static Integer valueOf(String s)</code>：将字符串参数转换为对应的Integer包装类，然后可以自动拆箱为int基本类型</li><li><code>public static Long valueOf(String s)</code>：将字符串参数转换为对应的Long包装类，然后可以自动拆箱为long基本类型</li><li><code>public static Double valueOf(String s)</code>：将字符串参数转换为对应的Double包装类，然后可以自动拆箱为double基本类型</li></ul><p>注意:如果字符串参数的内容无法正确转换为对应的基本类型，则会抛出<code>java.lang.NumberFormatException</code>异常。</p><p><strong>方式3：</strong>通过包装类的构造器实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Integer.parseInt(<span class="hljs-string">&quot;整数的字符串&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> Double.parseDouble(<span class="hljs-string">&quot;小数的字符串&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Boolean.parseBoolean(<span class="hljs-string">&quot;true或false&quot;</span>);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> Integer.valueOf(<span class="hljs-string">&quot;整数的字符串&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> Double.valueOf(<span class="hljs-string">&quot;小数的字符串&quot;</span>);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> Boolean.valueOf(<span class="hljs-string">&quot;true或false&quot;</span>);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(“<span class="hljs-number">12</span>”);<br><br></code></pre></td></tr></table></figure><p>其他方式小结：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E9%AB%98%E7%BA%A7%EF%BC%89/202402270952470_watermark.png" alt="image-20220813012801907"></p><h3 id="11-6-包装类的其它API"><a href="#11-6-包装类的其它API" class="headerlink" title="11.6 包装类的其它API"></a>11.6 包装类的其它API</h3><h4 id="11-6-1-数据类型的最大最小值"><a href="#11-6-1-数据类型的最大最小值" class="headerlink" title="11.6.1 数据类型的最大最小值"></a>11.6.1 数据类型的最大最小值</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer.MAX_VALUE和Integer.MIN_VALUE<br>    <br>Long.MAX_VALUE和Long.MIN_VALUE<br>    <br>Double.MAX_VALUE和Double.MIN_VALUE<br></code></pre></td></tr></table></figure><h4 id="11-6-2-字符转大小写"><a href="#11-6-2-字符转大小写" class="headerlink" title="11.6.2 字符转大小写"></a>11.6.2 字符转大小写</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Character.toUpperCase(<span class="hljs-string">&#x27;x&#x27;</span>);<br><br>Character.toLowerCase(<span class="hljs-string">&#x27;X&#x27;</span>);<br></code></pre></td></tr></table></figure><h4 id="11-6-3-整数转进制"><a href="#11-6-3-整数转进制" class="headerlink" title="11.6.3 整数转进制"></a>11.6.3 整数转进制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer.toBinaryString(<span class="hljs-type">int</span> i) <br>    <br>Integer.toHexString(<span class="hljs-type">int</span> i)<br>    <br>Integer.toOctalString(<span class="hljs-type">int</span> i)<br></code></pre></td></tr></table></figure><h4 id="11-6-4-比较的方法"><a href="#11-6-4-比较的方法" class="headerlink" title="11.6.4 比较的方法"></a>11.6.4 比较的方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Double.compare(<span class="hljs-type">double</span> d1, <span class="hljs-type">double</span> d2)<br>    <br>Integer.compare(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y) <br></code></pre></td></tr></table></figure><h3 id="11-7-包装类对象的特点"><a href="#11-7-包装类对象的特点" class="headerlink" title="11.7 包装类对象的特点"></a>11.7 包装类对象的特点</h3><h4 id="11-7-1-包装类缓存对象"><a href="#11-7-1-包装类缓存对象" class="headerlink" title="11.7.1 包装类缓存对象"></a>11.7.1 包装类缓存对象</h4><table><thead><tr><th>包装类</th><th>缓存对象</th></tr></thead><tbody><tr><td>Byte</td><td>-128~127</td></tr><tr><td>Short</td><td>-128~127</td></tr><tr><td>Integer</td><td>-128~127</td></tr><tr><td>Long</td><td>-128~127</td></tr><tr><td>Float</td><td>没有</td></tr><tr><td>Double</td><td>没有</td></tr><tr><td>Character</td><td>0~127</td></tr><tr><td>Boolean</td><td>true和false</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>System.out.println(a == b);<span class="hljs-comment">//true</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>System.out.println(i == j);<span class="hljs-comment">//false</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//新new的在堆中</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//这个用的是缓冲的常量对象，在方法区</span><br>System.out.println(m == n);<span class="hljs-comment">//false</span><br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//新new的在堆中</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<span class="hljs-comment">//另一个新new的在堆中</span><br>System.out.println(x == y);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>;<br><span class="hljs-type">Double</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>;<br>System.out.println(d1==d2);<span class="hljs-comment">//false 比较地址，没有缓存对象，每一个都是新new的</span><br></code></pre></td></tr></table></figure><h4 id="11-7-2-类型转换问题"><a href="#11-7-2-类型转换问题" class="headerlink" title="11.7.2 类型转换问题"></a>11.7.2 类型转换问题</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>System.out.println(i==j);<span class="hljs-comment">//true  会先将i自动拆箱为int，然后根据基本数据类型“自动类型转换”规则，转为double比较</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>System.out.println(i==j);<span class="hljs-comment">//true 会自动拆箱，按照基本数据类型进行比较</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">Double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span><br>System.out.println(i==d);<span class="hljs-comment">//编译报错</span><br></code></pre></td></tr></table></figure><h4 id="11-7-3-包装类对象不可变"><a href="#11-7-3-包装类对象不可变" class="headerlink" title="11.7.3 包装类对象不可变"></a>11.7.3 包装类对象不可变</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestExam</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">2</span>);<br><span class="hljs-type">Circle</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Circle</span>();<br>change(i,j,c);<br>System.out.println(<span class="hljs-string">&quot;i = &quot;</span> + i);<span class="hljs-comment">//1</span><br>System.out.println(<span class="hljs-string">&quot;j = &quot;</span> + j);<span class="hljs-comment">//2</span><br>System.out.println(<span class="hljs-string">&quot;c.radius = &quot;</span> + c.radius);<span class="hljs-comment">//10.0</span><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 方法的参数传递机制：</span><br><span class="hljs-comment"> * （1）基本数据类型：形参的修改完全不影响实参</span><br><span class="hljs-comment"> * （2）引用数据类型：通过形参修改对象的属性值，会影响实参的属性值</span><br><span class="hljs-comment"> * 这类Integer等包装类对象是“不可变”对象，即一旦修改，就是新对象，和实参就无关了</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">change</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,Integer b,Circle c )</span>&#123;<br>a += <span class="hljs-number">10</span>;<br><span class="hljs-comment">//b += 10;//等价于  b = new Integer(b+10);</span><br>c.radius += <span class="hljs-number">10</span>;<br><span class="hljs-comment">/*c = new Circle();</span><br><span class="hljs-comment">c.radius+=10;*/</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span>&#123;<br><span class="hljs-type">double</span> radius;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-8-练习"><a href="#11-8-练习" class="headerlink" title="11.8 练习"></a>11.8 练习</h3><p>笔试题：如下两个题目输出结果相同吗？各是什么。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span> ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>) : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>);<br>System.out.println(o1);<span class="hljs-comment">//1.0</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Object o2;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>)<br>    o2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">else</span><br>    o2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Double</span>(<span class="hljs-number">2.0</span>);<br>System.out.println(o2);<span class="hljs-comment">//1</span><br><br></code></pre></td></tr></table></figure><p>面试题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(<span class="hljs-number">1</span>);<br>    System.out.println(i == j);<br><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    System.out.println(m == n);<span class="hljs-comment">//</span><br><br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>    <span class="hljs-type">Integer</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">128</span>;<br>    System.out.println(x == y);<span class="hljs-comment">//</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p>练习：</p><p>利用Vector代替数组处理：从键盘读入学生成绩（以负数代表输入结束），找出最高分，并输出学生成绩等级。</p><ul><li><p>提示：数组一旦创建，长度就固定不变，所以在创建数组前就需要知道它的长度。而向量类java.util.Vector可以根据需要动态伸缩。</p></li><li><p>创建Vector对象：Vector v&#x3D;new Vector();</p></li><li><p>给向量添加元素：v.addElement(Object obj);  &#x2F;&#x2F;obj必须是对象</p></li><li><p>取出向量中的元素：Object obj&#x3D;v.elementAt(0);</p><ul><li>注意第一个元素的下标是0，返回值是Object类型的。</li></ul></li><li><p>计算向量的长度：v.size();</p></li><li><p>若与最高分相差10分内：A等；20分内：B等；30分内：C等；其它：D等</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对象编程（基础）</title>
    <link href="/2024/02/23/6.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    <url>/2024/02/23/6.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="第06章-面向对象编程（基础）"><a href="#第06章-面向对象编程（基础）" class="headerlink" title="第06章_面向对象编程（基础）"></a>第06章_面向对象编程（基础）</h1><h2 id="1-面向对象编程概述-了解"><a href="#1-面向对象编程概述-了解" class="headerlink" title="1. 面向对象编程概述(了解)"></a>1. 面向对象编程概述(了解)</h2><h3 id="1-1-程序设计的思路"><a href="#1-1-程序设计的思路" class="headerlink" title="1.1 程序设计的思路"></a>1.1 程序设计的思路</h3><p>面向对象，是软件开发中的一类编程风格、开发范式。除了<code>面向对象</code>，还有<code>面向过程</code>、<code>指令式编程</code>和<code>函数式编程</code>。在所有的编程范式中，我们接触最多的还是面向过程和面向对象两种。</p><blockquote><p>类比：史书类型</p><ul><li>纪传体：以人物传记为中心，“本纪”叙述帝王，“世家”记叙王侯封国和特殊人物，“列传”记叙民间人物。</li><li>编年体：按年、月、日顺序编写。</li><li>国别体：是一部分国记事的历史散文，分载多国历史。</li></ul></blockquote><p>早期先有面向过程思想，随着软件规模的扩大，问题复杂性的提高，面向过程的<code>弊端</code>越来越明显，出现了面向对象思想并成为目前主流的方式。</p><p><strong>1. 面向过程的程序设计思想（Process-Oriented Programming）</strong>，简称<code>POP</code></p><ul><li>关注的焦点是<code>过程</code>：过程就是操作数据的步骤。如果某个过程的实现代码重复出现，那么就可以把这个过程抽取为一个<code>函数</code>。这样就可以大大简化冗余代码，便于维护。</li><li>典型的语言：C语言</li><li>代码结构：以<code>函数</code>为组织单位。</li><li>是一种“<code>执行者思维</code>”，适合解决简单问题。扩展能力差、后期维护难度较大。</li></ul><p><strong>2. 面向对象的程序设计思想（ Object Oriented Programming）</strong>，简称<code>OOP</code></p><ul><li>关注的焦点是<code>类</code>：在计算机程序设计过程中，参照现实中事物，将事物的属性特征、行为特征抽象出来，用类来表示。</li><li>典型的语言：Java、C#、C++、Python、Ruby和PHP等</li><li>代码结构：以<code>类</code>为组织单位。每种事物都具备自己的<code>属性</code>和<code>行为/功能</code>。</li><li>是一种“<code>设计者思维</code>”，适合解决复杂问题。代码扩展性强、可维护性高。</li></ul><h3 id="1-2-由实际问题考虑如何设计程序"><a href="#1-2-由实际问题考虑如何设计程序" class="headerlink" title="1.2 由实际问题考虑如何设计程序"></a>1.2 由实际问题考虑如何设计程序</h3><p><strong>思考1：如何开车？</strong></p><p>面向过程思想思考问题时，我们首先思考“<code>怎么按步骤实现？</code>”并将步骤对应成方法，一步一步，最终完成。 这个适合<code>简单任务</code>，不需要<code>过多协作</code>的情况。针对如何开车，可以列出步骤：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231501095_watermark.png" alt="image-20220520154055429" style="zoom: 90%;" /><p>面向过程适合简单、不需要协作的事务，重点关注如何执行。 </p><p><strong>思考2：如何造车？</strong></p><p>造车太复杂，需要<code>很多协作</code>才能完成。此时我们思考的是“<code>车怎么设计？</code>”，而不是“怎么按特定步骤造车的问题”。这就是思维方式的转变，前者就是面向对象思想。所以，面向对象(Oriented-Object)思想更契合人的思维模式。</p><p>用面向对象思想思考“如何设计车”：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231501630_watermark.png" alt="a49bd1fc8152291f0c5b43ee3322672d" style="zoom: 25%;" /><p>自然地，我们就会从“车由什么组成”开始思考。发现，车由如下结构组成：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231456513_watermark.png" alt="image-20220520155357634" style="zoom: 67%;" /><p>我们找轮胎厂完成制造轮胎的步骤，发动机厂完成制造发动机的步骤，…；这样，大家可以同时进行车的制造，最终进行组装，大大提高了效率。但是，具体到轮胎厂的一个流水线操作，仍然是有步骤的，还是离不开面向过程思维！</p><p>因此，<strong>面向对象可以帮助我们从宏观上把握、从整体上分析整个系统。</strong> 但是，具体到实现部分的微观操作（就是一个个方法），仍然需要面向过程的思路去处理。</p><blockquote><p>注意：</p><p>我们千万不要把面向过程和面向对象对立起来。他们是相辅相成的。面向对象离不开面向过程！</p></blockquote><p><strong>类比举例1：</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231456638_watermark.jpeg" alt="tuandui"></p><blockquote><p>当需求单一，或者简单时，我们一步步去操作没问题，并且效率也挺高。</p><p>可随着需求的更改，功能的增多，发现需要面对每一个步骤很麻烦了，这时就开始思索，<strong>能不能把这些步骤和功能进行封装，封装时根据不同的功能，进行不同的封装，功能类似的封装在一起。</strong>这样结构就清晰了很多。用的时候，找到对应的类就可以了。这就是面向对象的思想。</p></blockquote><p><strong>类比举例2：人把大象装进冰箱</strong></p><ul><li><p>面向过程</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">1.打开冰箱<br><br>2.把大象装进冰箱<br><br>3.把冰箱门关住<br><br></code></pre></td></tr></table></figure><p>面向对象</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gcode">人&#123;<br>    打开（冰箱）&#123;<br>冰箱.开门<span class="hljs-comment">()</span>;<br>    &#125;<br>    操作<span class="hljs-comment">(大象)</span>&#123;<br>             大象.进入<span class="hljs-comment">(冰箱)</span>;<br>    &#125;<br>    关闭<span class="hljs-comment">(冰箱)</span>&#123;   <br>          冰箱.关门<span class="hljs-comment">()</span>;     <br>    &#125;<br>&#125;<br><br>冰箱&#123;<br>     开门<span class="hljs-comment">()</span>&#123; &#125;  <br>     关门<span class="hljs-comment">()</span>&#123; &#125;<br>&#125;<br><br>大象&#123;<br>     进入<span class="hljs-comment">(冰箱)</span>&#123;  &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><p><strong>练习：</strong>抽象出下面系统中的“类”及其关系</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231456593_watermark.png" alt="image-20220319180839009" style="zoom:80%;" /><h3 id="1-3-如何掌握这种思想？"><a href="#1-3-如何掌握这种思想？" class="headerlink" title="1.3 如何掌握这种思想？"></a>1.3 如何掌握这种思想？</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231456550_watermark.png" alt="image-20220319180301856" style="zoom: 67%;" /><h2 id="2-Java语言的基本元素：类和对象"><a href="#2-Java语言的基本元素：类和对象" class="headerlink" title="2. Java语言的基本元素：类和对象"></a>2. Java语言的基本元素：类和对象</h2><h3 id="2-1-引入"><a href="#2-1-引入" class="headerlink" title="2.1 引入"></a>2.1 引入</h3><p>人认识世界，其实就是面向对象的。比如，我们认识一下美人鱼（都没见过）</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231501760_watermark.png" alt="image-20220520162643547" style="zoom:67%;" /><p>经过“仔细学习”，发现美人鱼通常具备一些特征：</p><ul><li>女孩</li><li>有鱼尾</li><li>美丽</li></ul><p>这个总结的过程，其实是<code>抽象化</code>的过程。抽象出来的美人鱼的特征，可以归纳为一个<code>美人鱼类</code>。而图片中的都是这个类呈现出来的<code>具体的对象</code>。</p><h3 id="2-2-类和对象概述"><a href="#2-2-类和对象概述" class="headerlink" title="2.2 类和对象概述"></a>2.2 类和对象概述</h3><p><code>类(Class)</code>和<code>对象(Object)</code>是面向对象的核心概念。</p><p><strong>1、什么是类</strong></p><p><strong>类</strong>：具有相同特征的事物的抽象描述，是<code>抽象的</code>、概念上的定义。</p><p><strong>2、什么是对象</strong></p><p><strong>对象</strong>：实际存在的该类事物的<code>每个个体</code>，是<code>具体的</code>，因而也称为<code>实例(instance)</code>。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231456595_watermark.png" alt="image-20220319210405983"></p><p>可以理解为：<code>类 =&gt; 抽象概念的人</code>；<code>对象 =&gt; 实实在在的某个人</code></p><hr><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231538507.jpeg" style="zoom:85%;" /><hr><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457152_watermark.png" alt="image-20220503101940126" style="zoom:67%;" /><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p><strong>3、类与对象的关系错误理解</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs">曰：“白马非马，可乎？”<br>曰：“可。”<br>曰：“何哉？”<br>曰：“马者，所以命形也。白者，所以命色也。命色者，非命形也，故曰白马非马。”<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457212_watermark.png" alt="image-20220319214213898"></p><h3 id="2-3-类的成员概述"><a href="#2-3-类的成员概述" class="headerlink" title="2.3 类的成员概述"></a>2.3 类的成员概述</h3><blockquote><p>面向对象程序设计的重点是<code>类的设计</code></p><p>类的设计，其实就是<code>类的成员的设计</code></p></blockquote><ul><li><p>现实世界的生物体，大到鲸鱼，小到蚂蚁，都是由最基本的<code>细胞</code>构成的。同理，Java代码世界是由诸多个不同功能的<code>类</code>构成的。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457746_watermark.png" alt="image-20220319211527249" style="zoom:67%;" /></li><li><p>现实生物世界中的细胞又是由什么构成的呢？细胞核、细胞质、… </p><p>Java中用类class来描述事物也是如此。类，是一组相关<code>属性</code>和<code>行为</code>的集合，这也是类最基本的两个成员。</p><ul><li><strong>属性</strong>：该类事物的状态信息。对应类中的<code>成员变量</code><ul><li><strong>成员变量 &lt;&#x3D;&gt; 属性 &lt;&#x3D;&gt; Field</strong></li></ul></li><li><strong>行为</strong>：该类事物要做什么操作，或者基于事物的状态能做什么。对应类中的<code>成员方法</code><ul><li><strong>(成员)方法 &lt;&#x3D;&gt; 函数 &lt;&#x3D;&gt; Method</strong></li></ul></li></ul></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457464_watermark.jpeg" alt="20220319_211611" style="zoom: 67%;" /><ul><li>举例：</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457353_watermark.png" alt="image-20220319211859026"></p><h3 id="2-4-面向对象完成功能的三步骤（重要）"><a href="#2-4-面向对象完成功能的三步骤（重要）" class="headerlink" title="2.4 面向对象完成功能的三步骤（重要）"></a>2.4 面向对象完成功能的三步骤（重要）</h3><h4 id="步骤1：类的定义"><a href="#步骤1：类的定义" class="headerlink" title="步骤1：类的定义"></a>步骤1：类的定义</h4><p>类的定义使用关键字：class。格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 类名&#123;<br>属性声明;<br>    方法声明;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-comment">//声明属性age</span><br>    <span class="hljs-type">int</span> age ;                   <br>    <br>    <span class="hljs-comment">//声明方法showAge()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;        <br>    System.out.println(<span class="hljs-string">&quot;人吃饭&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br>    <span class="hljs-comment">//声明属性</span><br>String type; <span class="hljs-comment">//种类</span><br>String nickName; <span class="hljs-comment">//昵称</span><br>String hostName; <span class="hljs-comment">//主人名称</span><br><br>    <span class="hljs-comment">//声明方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123; <span class="hljs-comment">//吃东西</span><br>System.out.println(<span class="hljs-string">&quot;狗狗进食&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    String name;<br>    <span class="hljs-type">char</span> gender;<br>    Dog dog;<br>    <br>    <span class="hljs-comment">//喂宠物</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">()</span>&#123;<br>        dog.eat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="步骤2：对象的创建"><a href="#步骤2：对象的创建" class="headerlink" title="步骤2：对象的创建"></a>步骤2：对象的创建</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457157_watermark.png" alt="image-20220319213201568" style="zoom: 50%;" /><ul><li>创建对象，使用关键字：<strong>new</strong></li><li>创建对象语法：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1：给创建的对象命名</span><br><span class="hljs-comment">//把创建的对象用一个引用数据类型的变量保存起来，这样就可以反复使用这个对象了</span><br>类名 对象名 = <span class="hljs-keyword">new</span> 类名();<br><br><span class="hljs-comment">//方式2：</span><br><span class="hljs-keyword">new</span> 类名()<span class="hljs-comment">//也称为匿名对象</span><br><br></code></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-comment">//创建Person类的对象</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">per</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-comment">//创建Dog类的对象</span><br><span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="步骤3：对象调用属性或方法"><a href="#步骤3：对象调用属性或方法" class="headerlink" title="步骤3：对象调用属性或方法"></a>步骤3：对象调用属性或方法</h4><ul><li><p>对象是类的一个<strong>实例</strong>，必然具备该类事物的属性和行为（即方法）。</p></li><li><p>使用”<code>对象名.属性</code>“ 或 “<code>对象名.方法</code>“的方式访问对象成员（包括属性和方法）</p></li></ul><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明Animal类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123; <span class="hljs-comment">//动物类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> legs;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Eating.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Move.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//声明测试类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnimalTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">xb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>();<br>        xb.legs = <span class="hljs-number">4</span>;<span class="hljs-comment">//访问属性</span><br>        System.out.println(xb.legs);<br>        xb.eat();<span class="hljs-comment">//访问方法</span><br>        xb.move();<span class="hljs-comment">//访问方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>图示理解：<img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457907_watermark.png" alt="image-20220319213753668"></p><p>举例2：针对前面步骤1的举例2：类的实例化（创建类的对象）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Game</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        <span class="hljs-comment">//通过Person对象调用属性</span><br>        p.name = <span class="hljs-string">&quot;康师傅&quot;</span>;<br>        p.gender = <span class="hljs-string">&#x27;男&#x27;</span>;<br>        p.dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(); <span class="hljs-comment">//给Person对象的dog属性赋值</span><br>        <br>        <span class="hljs-comment">//给Person对象的dog属性的type、nickname属性赋值</span><br>        p.dog.type = <span class="hljs-string">&quot;柯基犬&quot;</span>;<br>        p.dog.nickName = <span class="hljs-string">&quot;小白&quot;</span>;<br>        <br>        <span class="hljs-comment">//通过Person对象调用方法</span><br>        p.feed();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-匿名对象-anonymous-object"><a href="#2-5-匿名对象-anonymous-object" class="headerlink" title="2.5 匿名对象 (anonymous object)"></a>2.5 匿名对象 (anonymous object)</h3><ul><li><p>我们也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。</p><ul><li>如：new Person().shout();</li></ul></li><li><p>使用情况</p><ul><li>如果一个对象只需要进行一次方法调用，那么就可以使用匿名对象。 </li><li>我们经常将匿名对象作为实参传递给一个方法调用。</li></ul></li></ul><h2 id="3-对象的内存解析"><a href="#3-对象的内存解析" class="headerlink" title="3. 对象的内存解析"></a>3. 对象的内存解析</h2><h3 id="3-1-JVM内存结构划分"><a href="#3-1-JVM内存结构划分" class="headerlink" title="3.1 JVM内存结构划分"></a>3.1 JVM内存结构划分</h3><p>HotSpot Java虚拟机的架构图如下。其中我们主要关心的是运行时数据区部分（Runtime Data Area）。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457907_watermark.png" alt="JVM架构-简图"></p><p>其中：</p><p><code>堆（Heap）</code>：此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配。</p><p><code>栈（Stack）</code>：是指虚拟机栈。虚拟机栈用于存储局部变量等。局部变量表存放了编译期可知长度的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，是对象在堆内存的首地址）。 方法执行完，自动释放。</p><p><code>方法区（Method Area）</code>：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><h3 id="3-2-对象内存解析"><a href="#3-2-对象内存解析" class="headerlink" title="3.2 对象内存解析"></a>3.2 对象内存解析</h3><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123; <span class="hljs-comment">//类：人</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">boolean</span> isMale;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonTest</span> &#123; <span class="hljs-comment">//测试类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p1.name = <span class="hljs-string">&quot;赵同学&quot;</span>;<br>        p1.age = <span class="hljs-number">20</span>;<br>        p1.isMale = <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p2.age = <span class="hljs-number">10</span>;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p3</span> <span class="hljs-operator">=</span> p1;<br>        p3.name = <span class="hljs-string">&quot;郭同学&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内存解析图：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457445_watermark.png" alt="image-20220319215723183" style="zoom:67%;" /><blockquote><p>说明：</p><ul><li>堆：凡是new出来的结构(对象、数组)都放在堆空间中。</li><li>对象的属性存放在堆空间中。</li><li>创建一个类的多个对象（比如p1、p2），则每个对象都拥有当前类的一套”副本”（即属性）。当通过一个对象修改其属性时，不会影响其它对象此属性的值。</li><li>当声明一个新的变量使用现有的对象进行赋值时（比如p3 &#x3D; p1），此时并没有在堆空间中创建新的对象。而是两个变量共同指向了堆空间中同一个对象。当通过一个对象修改属性时，会影响另外一个对象对此属性的调用。</li></ul></blockquote><p><strong>面试题：对象名中存储的是什么呢？</strong></p><p>答：对象地址</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentTest</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>());<span class="hljs-comment">//Student@7852e922</span><br><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>        System.out.println(stu);<span class="hljs-comment">//Student@4e25154f</span><br>        <br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br>System.out.println(arr);<span class="hljs-comment">//[I@70dea4e</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接打印对象名和数组名都是显示“类型@对象的hashCode值”，所以说<strong>类、数组都是引用数据类型，引用数据类型的变量中存储的是对象的地址，或者说指向堆中对象的首地址。</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457510_watermark.png" alt="1561597909862"></p><h3 id="3-3-练习"><a href="#3-3-练习" class="headerlink" title="3.3 练习"></a>3.3 练习</h3><p>根据代码，画出内存图</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Car</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;red&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;color=&quot;</span> + color + <span class="hljs-string">&quot;,num=&quot;</span> + num);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CarTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Car</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();   <span class="hljs-comment">//建立对象c1</span><br>        <span class="hljs-type">Car</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Car</span>();   <span class="hljs-comment">//建立对象c2</span><br>        c1.color = <span class="hljs-string">&quot;blue&quot;</span>;   <span class="hljs-comment">//对对象的属性进行修改</span><br>        c1.show();   <span class="hljs-comment">//使用对象的方法</span><br>        c2.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-类的成员之一：成员变量-field"><a href="#4-类的成员之一：成员变量-field" class="headerlink" title="4. 类的成员之一：成员变量(field)"></a>4. 类的成员之一：成员变量(field)</h2><h3 id="4-1-如何声明成员变量"><a href="#4-1-如何声明成员变量" class="headerlink" title="4.1 如何声明成员变量"></a>4.1 如何声明成员变量</h3><ul><li>语法格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符<span class="hljs-number">1</span>] class 类名&#123;<br>    [修饰符<span class="hljs-number">2</span>] 数据类型 成员变量名 [= 初始化值]; <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>说明：<ul><li>位置要求：必须在类中，方法外</li><li>修饰符2(暂不考虑)<ul><li>常用的权限修饰符有：private、缺省、protected、public</li><li>其他修饰符：static、final</li></ul></li><li>数据类型<ul><li>任何基本数据类型(如int、Boolean) 或 任何引用数据类型。</li></ul></li><li>成员变量名<ul><li>属于标识符，符合命名规则和规范即可。</li></ul></li><li>初始化值<ul><li>根据情况，可以显式赋值；也可以不赋值，使用默认值</li></ul></li></ul></li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;             <span class="hljs-comment">//声明private变量 age</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> “Lila”;    <span class="hljs-comment">//声明public变量 name</span><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-2-成员变量-vs-局部变量"><a href="#4-2-成员变量-vs-局部变量" class="headerlink" title="4.2 成员变量 vs 局部变量"></a>4.2 成员变量 vs 局部变量</h3><p><strong>1、变量的分类：成员变量与局部变量</strong></p><ul><li>在方法体外，类体内声明的变量称为成员变量。</li><li>在方法体内部等位置声明的变量称为局部变量。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457161_watermark.png" alt="image-20220511101608038" style="zoom:67%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457822_watermark.png" alt="image-20220319230744617" style="zoom:80%;" /><blockquote><p>其中，static可以将成员变量分为两大类，静态变量和非静态变量。其中静态变量又称为类变量，非静态变量又称为实例变量或者属性。接下来先学习实例变量。</p></blockquote><p><strong>2、成员变量 与 局部变量 的对比</strong></p><ul><li><p>相同点</p><ul><li>变量声明的格式相同： 数据类型  变量名 &#x3D; 初始化值</li></ul><ul><li><pre><code class="hljs">        变量必须先声明、后初始化、再使用。</code></pre></li></ul><ul><li>变量都有其对应的作用域。只在其作用域内是有效的</li></ul></li><li><p>不同点</p></li></ul><p>1、声明位置和方式<br>（1）实例变量：在类中方法外<br>（2）局部变量：在方法体{}中或方法的形参列表、代码块中</p><p>2、在内存中存储的位置不同<br>（1）实例变量：堆<br>（2）局部变量：栈</p><p>3、生命周期<br>（1）实例变量：和对象的生命周期一样，随着对象的创建而存在，随着对象被GC回收而消亡，<br>            而且每一个对象的实例变量是独立的。<br>（2）局部变量：和方法调用的生命周期一样，每一次方法被调用而在存在，随着方法执行的结束而消亡，<br>            而且每一次方法调用都是独立。</p><p>4、作用域<br>（1）实例变量：通过对象就可以使用，本类中直接调用，其他类中“对象.实例变量”<br>（2）局部变量：出了作用域就不能使用</p><p>5、修饰符（后面来讲）<br>（1）实例变量：public,protected,private,final,volatile,transient等<br>（2）局部变量：final</p><p>6、默认值<br>（1）实例变量：有默认值<br>（2）局部变量：没有，必须手动初始化。其中的形参比较特殊，靠实参给它初始化。</p><p><strong>3、对象属性的默认初始化赋值</strong></p><p>当一个对象被创建时，会对其中各种类型的成员变量自动进行初始化赋值。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231457348_watermark.png" alt="image-20220319231821747" style="zoom:80%;" /><p><strong>4、举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<span class="hljs-comment">//人类</span><br>    <span class="hljs-comment">//1.属性</span><br>    String name;<span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//年龄</span><br>    <span class="hljs-type">boolean</span> isMale;<span class="hljs-comment">//是否是男性</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String nation)</span> &#123;<br>        <span class="hljs-comment">//nation:局部变量</span><br>        String color;<span class="hljs-comment">//color:局部变量</span><br>        color = <span class="hljs-string">&quot;yellow&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//测试类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p.show(<span class="hljs-string">&quot;CHN&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458656_watermark.png" alt="image-20220319231703240" style="zoom:80%;" /><h2 id="5-类的成员之二：方法-method"><a href="#5-类的成员之二：方法-method" class="headerlink" title="5. 类的成员之二：方法(method)"></a>5. 类的成员之二：方法(method)</h2><h3 id="5-1-方法的引入"><a href="#5-1-方法的引入" class="headerlink" title="5.1 方法的引入"></a>5.1 方法的引入</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458995_watermark.jpeg"/><p>《街霸》游戏中，每次人物出拳、出脚或跳跃等动作都需要编写50-80行的代码，在每次出拳、出脚或跳跃的地方都需要重复地编写这50-80行代码，这样程序会变得<code>很臃肿</code>，可读性也非常差。为了解决代码重复编写的问题，可以将出拳、出脚或跳跃的代码提取出来放在一个{}中，并为这段代码起个名字，这样在每次的出拳、出脚或跳跃的地方通过这个名字来调用这个{}的代码就可以了。</p><p>上述过程中，所提取出来的代码可以被看作是程序中定义的一个方法，程序在需要出拳、出脚或跳跃时调用该方法即可。</p><h3 id="5-2-方法-method、函数-的理解"><a href="#5-2-方法-method、函数-的理解" class="headerlink" title="5.2 方法(method、函数)的理解"></a>5.2 方法(method、函数)的理解</h3><ul><li><p><code>方法</code>是类或对象行为特征的抽象，用来完成某个功能操作。在某些语言中也称为<code>函数</code>或<code>过程</code>。 </p></li><li><p>将功能封装为方法的目的是，可以<code>实现代码重用，减少冗余，简化代码</code></p></li><li><p>Java里的方法<code>不能独立存在</code>，所有的方法必须定义在类里。</p></li><li><p>举例1：</p><ul><li>Math.random()的random()方法</li><li>Math.sqrt(x)的sqrt(x)方法</li><li>System.out.println(x)的println(x)方法</li><li>new Scanner(System.in).nextInt()的nextInt()方法</li><li>Arrays类中的binarySearch()方法、sort()方法、equals()方法</li></ul></li><li><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>  &#123;  <span class="hljs-comment">//声明方法getAge()</span><br><span class="hljs-keyword">return</span> age; <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;  <span class="hljs-comment">//声明方法setAge</span><br>age = i;        <span class="hljs-comment">//将参数i的值赋给类的成员变量age</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="5-3-如何声明方法"><a href="#5-3-如何声明方法" class="headerlink" title="5.3 如何声明方法"></a>5.3 如何声明方法</h3><p><strong>1、声明方法的语法格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] 返回值类型 方法名([形参列表])[<span class="hljs-keyword">throws</span> 异常列表]&#123;<br>        方法体的功能代码<br>&#125;<br></code></pre></td></tr></table></figure><p>（1）一个完整的方法 &#x3D; 方法头 + 方法体。</p><ul><li>方法头就是<code>[修饰符] 返回值类型 方法名([形参列表])[throws 异常列表]</code>，也称为<code>方法签名</code>。通常调用方法时只需要关注方法头就可以，从方法头可以看出这个方法的功能和调用格式。</li><li>方法体就是方法被调用后要执行的代码。对于调用者来说，不了解方法体如何实现的，并不影响方法的使用。</li></ul><p><strong>（2）方法头可能包含5个部分</strong></p><ul><li><p><strong>修饰符</strong>：可选的。方法的修饰符也有很多，例如：public、protected、private、static、abstract、native、final、synchronized等，后面会一一学习。</p><ul><li>其中，权限修饰符有public、protected、private。在讲封装性之前，我们先默认使用pulbic修饰方法。</li><li>其中，根据是否有static，可以将方法分为静态方法和非静态方法。其中静态方法又称为类方法，非静态方法又称为实例方法。咱们在讲static前先学习实例方法。</li></ul></li><li><p><strong>返回值类型</strong>： 表示方法运行的结果的数据类型，方法执行后将结果返回到调用者。</p><ul><li>无返回值，则声明：void</li><li>有返回值，则声明出返回值类型（可以是任意类型）。与方法体中“<code>return 返回值</code>”搭配使用</li></ul></li><li><p><strong>方法名</strong>：属于标识符，命名时遵循标识符命名规则和规范，“见名知意”</p></li><li><p><strong>形参列表</strong>：表示完成方法体功能时需要外部提供的数据列表。可以包含零个，一个或多个参数。</p><ul><li>无论是否有参数，()不能省略</li><li>如果有参数，每一个参数都要指定数据类型和参数名，多个参数之间使用逗号分隔，例如：<ul><li>一个参数： (数据类型  参数名)</li><li>二个参数： (数据类型1  参数1,  数据类型2  参数2)</li></ul></li><li>参数的类型可以是基本数据类型、引用数据类型</li></ul></li><li><p><strong>throws 异常列表</strong>：可选，在【第09章-异常处理】章节再讲</p></li></ul><p><strong>（3）方法体</strong>：方法体必须有{}括起来，在{}中编写完成方法功能的代码</p><p><strong>（4）关于方法体中return语句的说明：</strong></p><ul><li><p>return语句的作用是结束方法的执行，并将方法的结果返回去</p></li><li><p>如果返回值类型不是void，方法体中必须保证一定有 return 返回值; 语句，并且要求该返回值结果的类型与声明的返回值类型一致或兼容。</p></li><li><p>如果返回值类型为void时，方法体中可以没有return语句，如果要用return语句提前结束方法的执行，那么return后面不能跟返回值，直接写return ; 就可以。</p></li><li><p>return语句后面就不能再写其他代码了，否则会报错：Unreachable code</p></li></ul><p>补充：方法的分类：按照是否有形参及返回值</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458413_watermark.png" alt="image-20220320000047155" style="zoom: 50%;" /><p><strong>2、类比举例</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458261_watermark.png" alt="image-20220503102323689" style="zoom:67%;" /><p><strong>3、代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test04.method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法定义案例演示</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodDefineDemo</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无参无返回值方法的演示</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有参无返回值方法的演示</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> length int 第一个参数，表示矩形的长</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> width int 第二个参数，表示矩形的宽</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> sign char 第三个参数，表示填充矩形图形的符号</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printRectangle</span><span class="hljs-params">(<span class="hljs-type">int</span> length, <span class="hljs-type">int</span> width, <span class="hljs-type">char</span> sign)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= length ; i++) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>; j &lt;= width; j++)&#123;<br>                System.out.print(sign);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 无参有返回值方法的演示</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getIntBetweenOneToHundred</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">100</span>+<span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 有参有返回值方法的演示</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> a int 第一个参数，要比较大小的整数之一</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> b int 第二个参数，要比较大小的整数之二</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> int 比较大小的两个整数中较大者的值</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-4-如何调用实例方法"><a href="#5-4-如何调用实例方法" class="headerlink" title="5.4 如何调用实例方法"></a>5.4 如何调用实例方法</h3><p>方法通过方法名被调用，且只有被调用才会执行。</p><p><strong>1、方法调用语法格式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">对象.方法名([实参列表])<br></code></pre></td></tr></table></figure><p><strong>2、示例</strong></p><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test04.method;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 方法调用案例演示</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodInvokeDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//创建对象</span><br>        <span class="hljs-type">MethodDefineDemo</span> <span class="hljs-variable">md</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodDefineDemo</span>();<br><br>        System.out.println(<span class="hljs-string">&quot;-----------------------方法调用演示-------------------------&quot;</span>);<br><br>        <span class="hljs-comment">//调用MethodDefineDemo类中无参无返回值的方法sayHello</span><br>        md.sayHello();<br>        md.sayHello();<br>        md.sayHello();<br>        <span class="hljs-comment">//调用一次，执行一次，不调用不执行</span><br><br>        System.out.println(<span class="hljs-string">&quot;------------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//调用MethodDefineDemo类中有参无返回值的方法printRectangle</span><br>        md.printRectangle(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>,<span class="hljs-string">&#x27;@&#x27;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;------------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//调用MethodDefineDemo类中无参有返回值的方法getIntBetweenOneToHundred</span><br>        md.getIntBetweenOneToHundred();<span class="hljs-comment">//语法没问题，就是结果丢失</span><br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> md.getIntBetweenOneToHundred();<br>        System.out.println(<span class="hljs-string">&quot;num = &quot;</span> + num);<br><br>        System.out.println(md.getIntBetweenOneToHundred());<br>        <span class="hljs-comment">//上面的代码调用了getIntBetweenOneToHundred三次，这个方法执行了三次</span><br><br>        System.out.println(<span class="hljs-string">&quot;------------------------------------------------&quot;</span>);<br>        <span class="hljs-comment">//调用MethodDefineDemo类中有参有返回值的方法max</span><br>        md.max(<span class="hljs-number">3</span>,<span class="hljs-number">6</span>);<span class="hljs-comment">//语法没问题，就是结果丢失</span><br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">bigger</span> <span class="hljs-operator">=</span> md.max(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>);<br>        System.out.println(<span class="hljs-string">&quot;bigger = &quot;</span> + bigger);<br><br>        System.out.println(<span class="hljs-string">&quot;8,3中较大者是：&quot;</span> + md.max(<span class="hljs-number">8</span>,<span class="hljs-number">9</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、创建Scanner的对象</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//System.in默认代表键盘输入</span><br><br><span class="hljs-comment">//2、提示输入xx</span><br>System.out.print(<span class="hljs-string">&quot;请输入一个整数：&quot;</span>); <span class="hljs-comment">//对象.非静态方法(实参列表)</span><br><br><span class="hljs-comment">//3、接收输入内容</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> input.nextInt();  <span class="hljs-comment">//对象.非静态方法()</span><br></code></pre></td></tr></table></figure><h3 id="5-5-使用的注意点"><a href="#5-5-使用的注意点" class="headerlink" title="5.5  使用的注意点"></a>5.5  使用的注意点</h3><p>（1）必须先声明后使用，且方法必须定义在类的内部</p><p>（2）调用一次就执行一次，不调用不执行。</p><p>（3）方法中可以调用类中的方法或属性，不可以在方法内部定义方法。</p><p>正确示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">类&#123;<br>    方法<span class="hljs-number">1</span>()&#123;<br>        <br>    &#125;<br>    方法<span class="hljs-number">2</span>()&#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>错误示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">类&#123;<br>    方法<span class="hljs-number">1</span>()&#123;<br>        方法<span class="hljs-number">2</span>()&#123;  <span class="hljs-comment">//位置错误</span><br>        <br>   &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-6-关键字return的使用"><a href="#5-6-关键字return的使用" class="headerlink" title="5.6 关键字return的使用"></a>5.6 关键字return的使用</h3><ul><li>return在方法中的作用：<ul><li>作用1：结束一个方法</li><li>作用2：结束一个方法的同时，可以返回数据给方法的调用者</li></ul></li><li>注意点：在return关键字的直接后面不能声明执行语句</li></ul><h3 id="5-7-方法调用内存分析"><a href="#5-7-方法调用内存分析" class="headerlink" title="5.7 方法调用内存分析"></a>5.7 方法调用内存分析</h3><ul><li><p>方法<code>没有被调用</code>的时候，都在<code>方法区</code>中的字节码文件(.class)中存储。</p></li><li><p>方法<code>被调用</code>的时候，需要进入到<code>栈内存</code>中运行。方法每调用一次就会在栈中有一个<code>入栈</code>动作，即给当前方法开辟一块独立的内存区域，用于存储当前方法的局部变量的值。</p></li><li><p>当方法执行结束后，会释放该内存，称为<code>出栈</code>，如果方法有返回值，就会把结果返回调用处，如果没有返回值，就直接结束，回到调用处继续执行下一条指令。</p></li><li><p>栈结构：先进后出，后进先出。</p></li></ul><p>举例分析：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 9:21</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>        p1.eat();<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        sleep();<br>        System.out.println(<span class="hljs-string">&quot;人：吃饭&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人：睡觉&quot;</span>);<br>        doSport();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSport</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;人：运动&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内存分析：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458899_watermark.png" alt="image-20220524104951449"></p><h3 id="5-8-练习"><a href="#5-8-练习" class="headerlink" title="5.8 练习"></a>5.8 练习</h3><p><strong>练习1：</strong>创建一个Person类，其定义如下：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458440_watermark.png" alt="image-20220320001337145" style="zoom:67%;" /><p>要求：</p><p>(1)创建Person类的对象，设置该对象的name、age和sex属性，调用study方法，输出字符串“studying”，调用showAge()方法显示age值，调用addAge()方法给对象的age属性值增加2岁。<br>(2)创建第二个对象，执行上述操作，体会同一个类的不同对象之间的关系。</p><p><strong>练习2：</strong>利用面向对象的编程方法，设计圆类Circle，包含属性（半径）和计算圆面积的方法。定义测试类，创建该Circle类的对象，并进行测试。</p><p><strong>练习3：</strong></p><p>3.1 编写程序，声明一个method方法，在方法中打印一个<code>10*8的*型矩形</code>，在main方法中调用该方法。</p><p>3.2 修改上一个程序，在method方法中，除打印一个<code>10*8的*型矩形</code>外，再计算该矩形的面积，并将其作为方法返回值。在main方法中调用该方法，接收返回的面积值并打印。</p><p>3.3 修改上一个程序，在method方法提供m和n两个参数，方法中打印一个<code>m*n的*型矩形</code>，并计算该矩形的面积， 将其作为方法返回值。在main方法中调用该方法，接收返回的面积值并打印。</p><p><strong>练习4：</strong>声明一个日期类型MyDate：有属性：年year,月month，日day。创建2个日期对象，分别赋值为：你的出生日期，你对象的出生日期，并显示信息。</p><p><strong>练习5（课下练习）：</strong>用面向对象的方式编写用户登录程序。</p><p>用户类：</p><ul><li>属性：用户名，密码</li><li>方法：登录</li></ul><p>界面类：</p><ul><li>在界面类中添加main方法，接受用户输入，并调用用户类的登录方法进行验证。<ul><li>输出：<ul><li>登录失败：用户名或密码错误！</li><li>登录成功：欢迎你，用户名！</li></ul></li></ul></li></ul><p>参考代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    String name;<br>    String password;<span class="hljs-comment">//密码</span><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 实现用户登录的判断</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputName 输入的用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputPwd  输入的密码</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(String inputName,String inputPwd)</span>&#123;<br>        <span class="hljs-keyword">if</span>(name.equals(inputName) &amp;&amp; password.equals(inputPwd))&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录成功：欢迎你，&quot;</span> + name);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败：用户名或密码错误！&quot;</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  实现用户登录的判断</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputName 输入的用户名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> inputPwd 输入的密码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> true:登录成功  false:登录失败</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">login1</span><span class="hljs-params">(String inputName,String inputPwd)</span>&#123;<br><span class="hljs-comment">//        if(name.equals(inputName) &amp;&amp; password.equals(inputPwd))&#123;</span><br><span class="hljs-comment">//            return true;</span><br><span class="hljs-comment">//        &#125;else&#123;</span><br><span class="hljs-comment">//            return false;</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//简化为：</span><br>        <span class="hljs-keyword">return</span> name.equals(inputName) &amp;&amp; password.equals(inputPwd);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * 用户界面类UserInterface：</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * - 在用户界面类中添加main方法，接受用户输入，并调用用户类的登录方法进行验证。</span><br><span class="hljs-comment"> * - 输出：</span><br><span class="hljs-comment"> *     - 登录失败：用户名或密码错误！</span><br><span class="hljs-comment"> *     - 登录成功：欢迎你，用户名！</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 9:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInterface</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">u1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        u1.name = <span class="hljs-string">&quot;Tom&quot;</span>;<br>        u1.password = <span class="hljs-string">&quot;abc123&quot;</span>;<br><br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入用户名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br>        System.out.print(<span class="hljs-string">&quot;请输入密码：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> scanner.next();<br><br>        <span class="hljs-comment">//演示1：</span><br><span class="hljs-comment">//        u1.login(name,pwd);</span><br><br>        <span class="hljs-comment">//演示2：</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isLogin</span> <span class="hljs-operator">=</span> u1.login1(name, pwd);<br>        <span class="hljs-keyword">if</span>(isLogin)&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录成功：欢迎你，&quot;</span> + u1.name);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;登录失败：用户名或密码错误！&quot;</span>);<br>        &#125;<br><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-对象数组"><a href="#6-对象数组" class="headerlink" title="6. 对象数组"></a>6. 对象数组</h2><p>数组的元素可以是基本数据类型，也可以是引用数据类型。当元素是引用类型中的类时，我们称为对象数组。</p><p><strong>1、案例</strong></p><p>定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。</p><p>问题一：打印出3年级(state值为3）的学生信息。</p><p>问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</p><p>提示：</p><ol><li><p>生成随机数：Math.random()，返回值类型double; </p></li><li><p>四舍五入取整：Math.round(double d)，返回值类型long。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br><br><span class="hljs-type">int</span> number;<span class="hljs-comment">//学号</span><br><span class="hljs-type">int</span> state;<span class="hljs-comment">//年级</span><br><span class="hljs-type">int</span> score;<span class="hljs-comment">//成绩</span><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;number : &quot;</span> + number <br>+ <span class="hljs-string">&quot;,state : &quot;</span> + state + <span class="hljs-string">&quot;,score : &quot;</span> + score);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StudentTest</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">// Student s1 = new Student();</span><br><span class="hljs-comment">// s1.number = 1;</span><br><span class="hljs-comment">// s1.state = (int)(Math.random() * 6 + 1);//[1,6]</span><br><span class="hljs-comment">// s1.score = (int)(Math.random() * 101);//[0,100]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Student s2 = new Student();</span><br><span class="hljs-comment">// s2.number = 2;</span><br><span class="hljs-comment">// s2.state = (int)(Math.random() * 6 + 1);//[1,6]</span><br><span class="hljs-comment">// s2.score = (int)(Math.random() * 101);//[0,100]</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// //....</span><br><span class="hljs-comment">// 对象数组</span><br><span class="hljs-comment">// String[] arr = new String[10];</span><br><span class="hljs-comment">// 数组的创建</span><br>Student[] students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>[<span class="hljs-number">20</span>];<br><span class="hljs-comment">// 通过循环结构给数组的属性赋值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.length; i++) &#123;<br><span class="hljs-comment">// 数组元素的赋值</span><br>students[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><span class="hljs-comment">// 数组元素是一个对象，给对象的各个属性赋值</span><br>students[i].number = (i + <span class="hljs-number">1</span>);<br>students[i].state = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">6</span> + <span class="hljs-number">1</span>);<span class="hljs-comment">// [1,6]</span><br>students[i].score = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">101</span>);<span class="hljs-comment">// [0,100]</span><br>&#125;<br><br><span class="hljs-comment">// 问题一：打印出3年级(state值为3）的学生信息。</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.length; i++) &#123;<br><br><span class="hljs-keyword">if</span> (students[i].state == <span class="hljs-number">3</span>) &#123;<br><span class="hljs-comment">//System.out.println(</span><br><span class="hljs-comment">//&quot;number:&quot; + students[i].number + &quot;,state:&quot; + students[i].state + &quot;,score:&quot; + students[i].score);</span><br>students[i].info();<br><br>&#125;<br><br>&#125;<br>System.out.println(<span class="hljs-string">&quot;******************************&quot;</span>);<br><span class="hljs-comment">// 问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</span><br><span class="hljs-comment">// 排序前</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.length; i++) &#123;<br><span class="hljs-comment">//System.out.println(</span><br><span class="hljs-comment">//&quot;number:&quot; + students[i].number + &quot;,state:&quot; + </span><br><span class="hljs-comment">//students[i].state + &quot;,score:&quot; + students[i].score);</span><br><br>students[i].info();<br>&#125;<br><br>System.out.println();<br><span class="hljs-comment">// 排序：</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; students.length - <span class="hljs-number">1</span> - i; j++) &#123;<br><span class="hljs-keyword">if</span> (students[j].score &gt; students[j + <span class="hljs-number">1</span>].score) &#123;<br><span class="hljs-type">Student</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> students[j];<br>students[j] = students[j + <span class="hljs-number">1</span>];<br>students[j + <span class="hljs-number">1</span>] = temp;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 排序后：</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; students.length; i++) &#123;<br><span class="hljs-comment">//System.out.println(</span><br><span class="hljs-comment">//&quot;number:&quot; + students[i].number + &quot;,state:&quot; + </span><br><span class="hljs-comment">//students[i].state + &quot;,score:&quot; + students[i].score);</span><br><br>students[i].info();<br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458414_watermark.png" alt="image-20220320001627445"></p><p><strong>2、注意点</strong></p><p>对象数组，首先要创建数组对象本身，即确定数组的长度，然后再创建每一个元素对象，如果不创建，数组的元素的默认值就是<code>null</code>，所以很容易出现<code>空指针异常NullPointerException</code>。</p><p><strong>3、练习</strong></p><p>（1）定义矩形类Rectangle，包含长、宽属性，area()返回矩形面积的方法，perimeter()返回矩形周长的方法，String getInfo()返回圆对象的详细信息（如：长、宽、面积、周长等数据）的方法</p><p>（2）在测试类中创建长度为3的Rectangle[]数组，用来装3个矩形对象，并给3个矩形对象的长分别赋值为10,20,30，宽分别赋值为5,15,25，遍历输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test08.array;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-type">double</span> length;<br>    <span class="hljs-type">double</span> width;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//面积</span><br>        <span class="hljs-keyword">return</span> length * width;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">perimeter</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//周长</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * (length + width);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;长：&quot;</span> + length +<br>                <span class="hljs-string">&quot;，宽：&quot;</span> + width +<br>                <span class="hljs-string">&quot;，面积：&quot;</span> + area() +<br>                <span class="hljs-string">&quot;，周长：&quot;</span> + perimeter();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test08.array;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectArrayTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//声明并创建一个长度为3的矩形对象数组</span><br>        Rectangle[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>[<span class="hljs-number">3</span>];<br><br>        <span class="hljs-comment">//创建3个矩形对象，并为对象的实例变量赋值，</span><br>        <span class="hljs-comment">//3个矩形对象的长分别是10,20,30</span><br>        <span class="hljs-comment">//3个矩形对象的宽分别是5,15,25</span><br>        <span class="hljs-comment">//调用矩形对象的getInfo()返回对象信息后输出</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; array.length; i++) &#123;<br>            <span class="hljs-comment">//创建矩形对象</span><br>            array[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>();<br><br>            <span class="hljs-comment">//为矩形对象的成员变量赋值</span><br>            array[i].length = (i+<span class="hljs-number">1</span>) * <span class="hljs-number">10</span>;<br>            array[i].width = (<span class="hljs-number">2</span>*i+<span class="hljs-number">1</span>) * <span class="hljs-number">5</span>;<br><br>            <span class="hljs-comment">//获取并输出对象对象的信息</span><br>            System.out.println(array[i].getInfo());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458147_watermark.png" alt="image-20211228153827819"></p><h2 id="7-再谈方法"><a href="#7-再谈方法" class="headerlink" title="7. 再谈方法"></a>7. 再谈方法</h2><h3 id="7-1-方法的重载（overload）"><a href="#7-1-方法的重载（overload）" class="headerlink" title="7.1 方法的重载（overload）"></a>7.1 方法的重载（overload）</h3><h4 id="7-1-1-概念及特点"><a href="#7-1-1-概念及特点" class="headerlink" title="7.1.1 概念及特点"></a>7.1.1 概念及特点</h4><ul><li><strong>方法重载</strong>：在同一个类中，允许存在一个以上的同名方法，只要它们的参数列表不同即可。<ul><li>参数列表不同，意味着参数个数或参数类型的不同</li></ul></li><li><strong>重载的特点</strong>：与修饰符、返回值类型无关，只看参数列表，且参数列表必须不同。(参数个数或参数类型)。调用时，根据方法参数列表的不同来区别。</li><li><strong>重载方法调用</strong>：JVM通过方法的参数列表，调用匹配的方法。<ul><li>先找个数、类型最匹配的</li><li>再找个数和类型可以兼容的，如果同时多个方法可以兼容将会报错</li></ul></li></ul><h4 id="7-1-2-示例"><a href="#7-1-2-示例" class="headerlink" title="7.1.2 示例"></a>7.1.2 示例</h4><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//System.out.println()方法就是典型的重载方法，其内部的声明形式如下：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrintStream</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">byte</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">short</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">long</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">float</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">char</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(<span class="hljs-type">double</span> x)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">()</span><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-number">1.2f</span>);<br>        System.out.println(<span class="hljs-string">&quot;hello!&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//返回两个整数的和</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x+y;<br>&#125;<br><br><span class="hljs-comment">//返回三个整数的和</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,<span class="hljs-type">int</span> z)</span>&#123;<br>    <span class="hljs-keyword">return</span> x+y+z;<br>&#125;<br><span class="hljs-comment">//返回两个小数的和</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">double</span> x,<span class="hljs-type">double</span> y)</span>&#123;<br>    <span class="hljs-keyword">return</span> x+y;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>​举例3：方法的重载和返回值类型无关</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathTools</span> &#123;<br>    <span class="hljs-comment">//以下方法不是重载，会报错</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOneToHundred</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">100</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getOneToHundred</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> Math.random()*<span class="hljs-number">100</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="7-1-3-练习"><a href="#7-1-3-练习" class="headerlink" title="7.1.3 练习"></a>7.1.3 练习</h4><p><strong>练习1：</strong>判 断与<code>void show(int a,char b,double c)&#123;&#125;</code>构成重载的有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">a)<span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">char</span> y,<span class="hljs-type">double</span> z)</span>&#123;&#125;     <span class="hljs-comment">// no</span><br><br>b)<span class="hljs-type">int</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">double</span> c,<span class="hljs-type">char</span> b)</span>&#123;&#125;      <span class="hljs-comment">// yes</span><br><br>c) <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">double</span> c,<span class="hljs-type">char</span> b)</span>&#123;&#125;    <span class="hljs-comment">// yes</span><br><br>d) <span class="hljs-type">boolean</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> c,<span class="hljs-type">char</span> b)</span>&#123;&#125;          <span class="hljs-comment">// yes</span><br><br>e) <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">double</span> c)</span>&#123;&#125;                 <span class="hljs-comment">// yes</span><br><br>f) <span class="hljs-type">double</span> <span class="hljs-title function_">show</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">char</span> y,<span class="hljs-type">double</span> z)</span>&#123;&#125;  <span class="hljs-comment">// no</span><br><br>g) <span class="hljs-keyword">void</span> <span class="hljs-title function_">shows</span><span class="hljs-params">()</span>&#123;<span class="hljs-type">double</span> c&#125;                <span class="hljs-comment">// no</span><br></code></pre></td></tr></table></figure><p><strong>练习2</strong>：编写程序，定义三个重载方法并调用。</p><ul><li><p>方法名为mOL。</p></li><li><p>三个方法分别接收一个int参数、两个int参数、一个字符串参数。分别执行平方运算并输出结果，相乘并输出结果，输出字符串信息。</p></li><li><p>在主类的main ()方法中分别用参数区别调用三个方法。</p></li></ul><p><strong>练习3</strong>：定义三个重载方法max()，第一个方法求两个int值中的最大值，第二个方法求两个double值中的最大值，第三个方法求三个double值中的最大值，并分别调用三个方法。</p><h3 id="7-2-可变个数的形参"><a href="#7-2-可变个数的形参" class="headerlink" title="7.2 可变个数的形参"></a>7.2 可变个数的形参</h3><p>在**JDK 5.0 <strong>中提供了</strong>Varargs(<strong>variable number of arguments</strong>)**机制。即当定义一个方法时，形参的类型可以确定，但是形参的个数不确定，那么可以考虑使用可变个数的形参。</p><p><strong>格式：</strong></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">方法名<span class="hljs-comment">(参数的类型名 ...参数名)</span><br></code></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//JDK 5.0以前：采用数组形参来定义方法，传入多个同一类型变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,String[] books)</span>;<br><br><span class="hljs-comment">//JDK5.0：采用可变个数形参来定义方法，传入多个同一类型变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a ,String...books)</span>;<br><br></code></pre></td></tr></table></figure><p><strong>特点：</strong></p><ol><li><p>可变参数：方法参数部分指定类型的参数个数是可变多个：0个，1个或多个</p></li><li><p>可变个数形参的方法与同名的方法之间，彼此构成重载</p></li><li><p>可变参数方法的使用与方法参数部分使用数组是一致的，二者不能同时声明，否则报错。</p></li><li><p>方法的参数部分有可变形参，需要放在形参声明的最后</p></li><li><p>在一个方法的形参中，最多只能声明一个可变个数的形参</p></li></ol><p><strong>案例分析：</strong></p><p>案例1：n个字符串进行拼接，每一个字符串之间使用某字符进行分割，如果没有传入字符串，那么返回空字符串””</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringTools</span> &#123;<br>    String <span class="hljs-title function_">concat</span><span class="hljs-params">(<span class="hljs-type">char</span> seperator, String... args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; args.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>                str += args[i];<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                str += seperator + args[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> str;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.test05.param;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringToolsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">StringTools</span> <span class="hljs-variable">tools</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTools</span>();<br><br>        System.out.println(tools.concat(<span class="hljs-string">&#x27;-&#x27;</span>));<br>        System.out.println(tools.concat(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&quot;hello&quot;</span>));<br>        System.out.println(tools.concat(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>));<br>        System.out.println(tools.concat(<span class="hljs-string">&#x27;-&#x27;</span>,<span class="hljs-string">&quot;hello&quot;</span>,<span class="hljs-string">&quot;world&quot;</span>,<span class="hljs-string">&quot;java&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例2：求n个整数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberTools</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">total</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            sum += nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            sum += nums[i];<br>        &#125;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestVarParam</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">NumberTools</span> <span class="hljs-variable">tools</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NumberTools</span>();<br><br>        System.out.println(tools.sum());<span class="hljs-comment">//0个实参</span><br>        System.out.println(tools.sum(<span class="hljs-number">5</span>));<span class="hljs-comment">//1个实参</span><br>        System.out.println(tools.sum(<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>));<span class="hljs-comment">//4个实参</span><br>        System.out.println(tools.sum(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;));<span class="hljs-comment">//传入数组实参</span><br><br>        System.out.println(<span class="hljs-string">&quot;------------------------------------&quot;</span>);<br>        System.out.println(tools.total(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;&#125;));<span class="hljs-comment">//0个元素的数组</span><br>        System.out.println(tools.total(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">5</span>&#125;));<span class="hljs-comment">//1个元素的数组</span><br>        System.out.println(tools.total(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;));<span class="hljs-comment">//传入数组实参</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例3：如下的方法彼此构成重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MathTools</span> &#123;<br>    <span class="hljs-comment">//求两个整数的最大值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a&gt;b?a:b;<br>    &#125;<br><br>    <span class="hljs-comment">//求两个小数的最大值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a&gt;b?a:b;<br>    &#125;<br><br>    <span class="hljs-comment">//求三个整数的最大值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span>&#123;<br>        <span class="hljs-keyword">return</span> max(max(a,b),c);<br>    &#125;<br>    <br>    <span class="hljs-comment">//求n个整数的最大值</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span>... nums)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>];<span class="hljs-comment">//如果没有传入整数，或者传入null，这句代码会报异常</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(nums[i] &gt; max)&#123;<br>                max = nums[i];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> max;<br>    &#125;<br>    <span class="hljs-comment">/*    //求n整数的最大值</span><br><span class="hljs-comment">    public int max(int[] nums)&#123;  //编译就报错，与(int... nums)无法区分</span><br><span class="hljs-comment">        int max = nums[0];//如果没有传入整数，或者传入null，这句代码会报异常</span><br><span class="hljs-comment">        for (int i = 1; i &lt; nums.length; i++) &#123;</span><br><span class="hljs-comment">            if(nums[i] &gt; max)&#123;</span><br><span class="hljs-comment">                max = nums[i];</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return max;</span><br><span class="hljs-comment">    &#125;*/</span><br><br><span class="hljs-comment">/*    //求n整数的最大值</span><br><span class="hljs-comment">    public int max(int first, int... nums)&#123;  //当前类不报错，但是调用时会引起多个方法同时匹配</span><br><span class="hljs-comment">        int max = first;</span><br><span class="hljs-comment">        for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="hljs-comment">            if(nums[i] &gt; max)&#123;</span><br><span class="hljs-comment">                max = nums[i];</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        return max;</span><br><span class="hljs-comment">    &#125;*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-方法的参数传递机制"><a href="#7-3-方法的参数传递机制" class="headerlink" title="7.3 方法的参数传递机制"></a>7.3 方法的参数传递机制</h3><h4 id="7-3-1-形参和实参"><a href="#7-3-1-形参和实参" class="headerlink" title="7.3.1 形参和实参"></a>7.3.1 形参和实参</h4><ul><li>形参（formal parameter）：在定义方法时，方法名后面括号()中声明的变量称为形式参数，简称形参。</li><li>实参（actual parameter）：在调用方法时，方法名后面括号()中的使用的值&#x2F;变量&#x2F;表达式称为实际参数，简称实参。</li></ul><h4 id="7-3-2-参数传递机制：值传递"><a href="#7-3-2-参数传递机制：值传递" class="headerlink" title="7.3.2 参数传递机制：值传递"></a>7.3.2 参数传递机制：值传递</h4><p>Java里方法的参数传递方式只有一种：<code>值传递</code>。 即将实际参数值的副本（复制品）传入方法内，而参数本身不受影响。</p><ul><li><p>形参是基本数据类型：将实参基本数据类型变量的“数据值”传递给形参</p></li><li><p>形参是引用数据类型：将实参引用数据类型变量的“地址值”传递给形参</p></li></ul><h4 id="7-3-3-举例"><a href="#7-3-3-举例" class="headerlink" title="7.3.3 举例"></a>7.3.3 举例</h4><p><strong>1、形参是基本数据类型</strong></p><p>案例：编写方法，交换两个整型变量的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br><span class="hljs-comment">//交换m和n的值</span><br><span class="hljs-comment">//int temp = m;</span><br><span class="hljs-comment">//m = n;</span><br><span class="hljs-comment">//n = temp;</span><br><br><span class="hljs-type">ValueTransferTest1</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueTransferTest1</span>();<br>test.swap(m, n);<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> n)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> m;<br>m = n;<br>n = temp;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458807_watermark.png" alt="image-20221120153322455"></p><p><strong>2、形参是引用数据类型</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Data</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Data</span>();<br>d1.m = <span class="hljs-number">10</span>;<br>d1.n = <span class="hljs-number">20</span>;<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + d1.m + <span class="hljs-string">&quot;, n = &quot;</span> + d1.n);<br><br><span class="hljs-comment">//实现 换序</span><br><br><span class="hljs-type">ValueTransferTest2</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueTransferTest2</span>();<br>test.swap(d1);<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + d1.m + <span class="hljs-string">&quot;, n = &quot;</span> + d1.n);<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(Data data)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> data.m;<br>data.m = data.n;<br>data.n = temp;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Data</span>&#123;<br><span class="hljs-type">int</span> m;<br><span class="hljs-type">int</span> n;<br>&#125;<br></code></pre></td></tr></table></figure><p>内存解析：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458643_watermark.png" alt="image-20221120153442447"></p><h4 id="7-3-4-练习"><a href="#7-3-4-练习" class="headerlink" title="7.3.4 练习"></a>7.3.4 练习</h4><p>练习1：判断如下程序输出的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AssignNewObject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(MyData my)</span>&#123;<br>        my = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyData</span>(); <span class="hljs-comment">//考虑堆空间此新创建的对象，和main中的data对象是否有关</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> my.x;<br>        my.x = my.y;<br>        my.y = temp;<br>     <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">AssignNewObject</span> <span class="hljs-variable">tools</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AssignNewObject</span>();<br>        <br>        <span class="hljs-type">MyData</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyData</span>();<br>        data.x = <span class="hljs-number">1</span>;<br>        data.y = <span class="hljs-number">2</span>;<br>        System.out.println(<span class="hljs-string">&quot;交换之前：x = &quot;</span> + data.x +<span class="hljs-string">&quot;,y = &quot;</span> + data.y);<span class="hljs-comment">//</span><br>        tools.swap(data);<span class="hljs-comment">//调用完之后，x与y的值交换？</span><br>        System.out.println(<span class="hljs-string">&quot;交换之后：x = &quot;</span> + data.x +<span class="hljs-string">&quot;,y = &quot;</span> + data.y);<span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyData</span>&#123;<br>    <span class="hljs-type">int</span> x ;<br>    <span class="hljs-type">int</span> y;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习2：如下操作是否可以实现数组排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTypeParam</span> &#123;<br><br>    <span class="hljs-comment">//冒泡排序，实现数组从小到大排序</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                    arr[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//打印数组的元素</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot; &quot;</span>);<br>        &#125;<br>        System.out.println();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ArrayTypeParam</span> <span class="hljs-variable">tools</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayTypeParam</span>();<br><br>        <span class="hljs-type">int</span>[] nums = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;排序之前：&quot;</span>);<br>        tools.print(nums);<br><br>        tools.sort(nums);<span class="hljs-comment">//对nums数组进行排序</span><br><br>        System.out.println(<span class="hljs-string">&quot;排序之后：&quot;</span>);<br>        tools.print(nums);<span class="hljs-comment">//输出nums数组的元素</span><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习3：通过内存结构图，写出如下程序的输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//栈：每个方法在调用时，都会有以栈帧的方法压入栈中。栈帧中保存了当前方法中声明的变量：方法内声明的，形参</span><br><span class="hljs-comment">//堆：存放new出来的&quot;东西&quot;：对象（成员变量在对象中）、数组实体（数组元素）。 </span><br><span class="hljs-comment">//注意：变量前如果声明有类型，那么这就是一个新的刚要定义的变量。如果变量前没有声明类型，那就说明此变量在之前已经声明过。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TransferTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">TransferTest3</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TransferTest3</span>();<br>        test.first();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">first</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>        <span class="hljs-type">Value</span> <span class="hljs-variable">v</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Value</span>();<br>        v.i = <span class="hljs-number">25</span>;<br>        second(v, i);<br>        System.out.println(v.i);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">second</span><span class="hljs-params">(Value v, <span class="hljs-type">int</span> i)</span> &#123;<br>        i = <span class="hljs-number">0</span>;<br>        v.i = <span class="hljs-number">20</span>;<br>        <span class="hljs-type">Value</span> <span class="hljs-variable">val</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Value</span>();<br>        v = val;<br>        System.out.println(v.i + <span class="hljs-string">&quot; &quot;</span> + i);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Value</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>内存解析：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458235_watermark.jpeg" alt="20220320_233145" style="zoom:80%;" /><p>练习4：<code>貌似是</code>考查方法的参数传递</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458353_watermark.png" alt="image-20220320233402122"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//法一：</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>       <span class="hljs-comment">// 在不改变原本题目的前提下，如何写这个函数才能在main函数中输出a=100，b=200？ </span><br>       a = a * <span class="hljs-number">10</span>;<br>       b = b * <span class="hljs-number">20</span>;<br>       System.out.println(a);<br>       System.out.println(b);<br>       System.exit(<span class="hljs-number">0</span>);<br>   &#125;<br><br>   <span class="hljs-comment">//法二：</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br><br>       <span class="hljs-type">PrintStream</span> <span class="hljs-variable">ps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintStream</span>(System.out) &#123;<br>           <span class="hljs-meta">@Override</span><br>           <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">println</span><span class="hljs-params">(String x)</span> &#123;<br><br>               <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;a=10&quot;</span>.equals(x)) &#123;<br>                   x = <span class="hljs-string">&quot;a=100&quot;</span>;<br>               &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;b=10&quot;</span>.equals(x)) &#123;<br>                   x = <span class="hljs-string">&quot;b=200&quot;</span>;<br>               &#125;<br>               <span class="hljs-built_in">super</span>.println(x);<br>           &#125;<br>       &#125;;<br><br>       System.setOut(ps);<br><br>   &#125;<br></code></pre></td></tr></table></figure><p>练习5：将对象作为参数传递给方法</p><p>（1）定义一个Circle类，包含一个double型的radius属性代表圆的半径，一个findArea()方法返回圆的面积。<br>（2）定义一个类PassObject，在类中定义一个方法printAreas()，该方法的定义如下：public void printAreas(Circle c, int time)，在printAreas方法中打印输出1到time之间的每个整数半径值，以及对应的面积。例如，times为5，则输出半径1，2，3，4，5，以及对应的圆面积。<br>（3）在main方法中调用printAreas()方法，调用完毕后输出当前半径值。程序运行结果如图所示。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231458851_watermark.png" alt="image-20220320233626003"></p><h3 id="7-4-递归-recursion-方法"><a href="#7-4-递归-recursion-方法" class="headerlink" title="7.4 递归(recursion)方法"></a>7.4 递归(recursion)方法</h3><p>举例1：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459062_watermark.png" alt="image-20220521160246138" style="zoom: 67%;" /><p>举例2：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs erlang">从前有座山,山上有座庙,庙里有个老和尚,老和尚在给小和尚讲故事,讲的啥?<br>      从前有座山,山上有座庙,庙里有个老和尚,老和尚在给小和尚讲故事,讲的啥?<br>          从前有座山,山上有座庙,庙里有个老和尚,老和尚在给小和尚讲故事,讲的啥?<br>              从前有座山,山上有座庙,庙里有个老和尚,老和尚在给小和尚讲故事,讲的啥?...<br>    ...<br>老和尚没了,庙塌了,小和尚还俗结婚了。<br></code></pre></td></tr></table></figure><p><strong>递归方法调用</strong>：方法自己调用自己的现象就称为递归。</p><p>**递归的分类:**直接递归、间接递归。</p><ul><li><p>直接递归：方法自身调用自己。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">methodA</span><span class="hljs-params">()</span>&#123;<br>methodA();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>间接递归：可以理解为A()方法调用B()方法，B()方法调用C()方法，C()方法调用A()方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">A</span><span class="hljs-params">()</span>&#123;<br>B();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">B</span><span class="hljs-params">()</span>&#123;<br>C();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">C</span><span class="hljs-params">()</span>&#123;<br>A();<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><p><strong>说明</strong>：</p><ul><li>递归方法包含了一种<code>隐式的循环</code>。</li><li>递归方法会<code>重复执行</code>某段代码，但这种重复执行无须循环控制。</li><li>递归一定要向<code>已知方向</code>递归，否则这种递归就变成了无穷递归，停不下来，类似于<code>死循环</code>。最终发生<code>栈内存溢出</code>。</li></ul><p><strong>举例：</strong></p><p>举例1：计算1 ~ n的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RecursionDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">RecursionDemo</span> <span class="hljs-variable">demo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RecursionDemo</span>();<br><span class="hljs-comment">//计算1~num的和，使用递归完成</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>      <span class="hljs-comment">// 调用求和的方法</span><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> demo.getSum(num);<br>      <span class="hljs-comment">// 输出结果</span><br>System.out.println(sum);<br><br>&#125;<br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">    通过递归算法实现.</span><br><span class="hljs-comment">    参数列表:int </span><br><span class="hljs-comment">    返回值类型: int </span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>      <span class="hljs-comment">/* </span><br><span class="hljs-comment">         num为1时,方法返回1,</span><br><span class="hljs-comment">         相当于是方法的出口,num总有是1的情况</span><br><span class="hljs-comment">      */</span><br><span class="hljs-keyword">if</span>(num == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">          num不为1时,方法返回 num +(num-1)的累和</span><br><span class="hljs-comment">          递归调用getSum方法</span><br><span class="hljs-comment">        */</span><br><span class="hljs-keyword">return</span> num + getSum(num-<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码执行图解：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459762_watermark.png"></p><p>举例2：递归方法计算n!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">multiply</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-keyword">if</span>(num == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> num * multiply(num - <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459858_watermark.png" alt="image-20220520150018655"></p><p>举例3：已知有一个数列：f(0) &#x3D; 1，f(1) &#x3D; 4，f(n+2)&#x3D;2*f(n+1) + f(n)，其中n是大于0的整数，求f(10)的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-keyword">if</span>(num == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * f(num - <span class="hljs-number">1</span>) + f(num - <span class="hljs-number">2</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例4：已知一个数列：f(20) &#x3D; 1,f(21) &#x3D; 4,f(n+2) &#x3D; 2*f(n+1)+f(n)，其中n是大于0的整数，求f(10)的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">func</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br><span class="hljs-keyword">if</span>(num == <span class="hljs-number">20</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num == <span class="hljs-number">21</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">4</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> func(num + <span class="hljs-number">2</span>) - <span class="hljs-number">2</span> * func(num + <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例5：计算斐波那契数列（Fibonacci）的第n个值，斐波那契数列满足如下规律，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">8</span>,<span class="hljs-number">13</span>,<span class="hljs-number">21</span>,<span class="hljs-number">34</span>,<span class="hljs-number">55</span>,....<br></code></pre></td></tr></table></figure><p>即从第三个数开始，一个数等于前两个数之和。假设f(n)代表斐波那契数列的第n个值，那么f(n)满足：<br>f(n) &#x3D; f(n-2) + f(n-1); </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用递归的写法</span><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<span class="hljs-comment">//计算斐波那契数列第n个值是多少</span><br>       <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//负数是返回特殊值1，表示不计算负数情况</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> f(n - <span class="hljs-number">2</span>) + f(n - <span class="hljs-number">1</span>);<br>   &#125;<br><br>   <span class="hljs-comment">//不用递归</span><br>   <span class="hljs-type">int</span> <span class="hljs-title function_">fValue</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<span class="hljs-comment">//计算斐波那契数列第n个值是多少</span><br>       <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//负数是返回特殊值1，表示不计算负数情况</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>       &#125;<br>       <span class="hljs-comment">//从第三个数开始，  等于 前两个整数相加</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">beforeBefore</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//相当于n=1时的值</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">before</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//相当于n=2时的值</span><br>       <span class="hljs-type">int</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> beforeBefore + before; <span class="hljs-comment">//相当于n=3的值</span><br>       <span class="hljs-comment">//再完后</span><br>       <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>; i &lt;= n; i++) &#123;<br>           beforeBefore = before;<br>           before = current;<br>           current = beforeBefore + before;<br>           <span class="hljs-comment">/*</span><br><span class="hljs-comment">           假设i=4</span><br><span class="hljs-comment">               beforeBefore = before; //相当于n=2时的值</span><br><span class="hljs-comment">               before = current; //相当于n=3的值</span><br><span class="hljs-comment">               current = beforeBefore + before; //相当于n = 4的值</span><br><span class="hljs-comment">           假设i=5</span><br><span class="hljs-comment">               beforeBefore = before; //相当于n=3的值</span><br><span class="hljs-comment">               before = current; //相当于n = 4的值</span><br><span class="hljs-comment">               current = beforeBefore + before; //相当于n = 5的值</span><br><span class="hljs-comment">               ....</span><br><span class="hljs-comment">            */</span><br>       &#125;<br>       <span class="hljs-keyword">return</span> current;<br>   &#125;<br></code></pre></td></tr></table></figure><p>举例6：面试题</p><blockquote><p>宋老师，我今天去百度面试，遇到一个一个双重递归调用的问题，我琢磨了一下，完全不知道为什么。打断点了，也还是没看懂为什么程序会那样走。您有空可以看一下，求指教。</p></blockquote><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459806_watermark.png" alt="image-20220320235105406"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">recursion</span><span class="hljs-params">(<span class="hljs-type">int</span> k)</span> &#123;<br>       count++;<br>       System.out.println(<span class="hljs-string">&quot;count1:&quot;</span> + count + <span class="hljs-string">&quot;  k:&quot;</span> + k);<br>       <span class="hljs-keyword">if</span> (k &lt;= <span class="hljs-number">0</span>) &#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>       &#125;<br>       <span class="hljs-keyword">return</span> recursion(k - <span class="hljs-number">1</span>) + recursion(k - <span class="hljs-number">2</span>);<span class="hljs-comment">//287</span><br>       <span class="hljs-comment">//return recursion(k - 1);//11</span><br>       <span class="hljs-comment">//return recursion(k - 1) + recursion(k - 1);//2047</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>剖析：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459423_watermark.png" alt="image-20220320235229941" style="zoom:67%;" /><blockquote><p>最后说两句：</p><ol><li><p>递归调用会占用大量的系统堆栈，内存耗用多，在递归调用层次多时速度要比循环<code>慢的多</code>，所以在使用递归时要慎重。</p></li><li><p>在要求高性能的情况下尽量避免使用递归，递归调用既花时间又<code>耗内存</code>。考虑使用循环迭代</p></li></ol></blockquote><h2 id="8-关键字：package、import"><a href="#8-关键字：package、import" class="headerlink" title="8. 关键字：package、import"></a>8. 关键字：package、import</h2><h3 id="8-1-package-包"><a href="#8-1-package-包" class="headerlink" title="8.1 package(包)"></a>8.1 package(包)</h3><p>package，称为包，用于指明该文件中定义的类、接口等结构所在的包。</p><h4 id="8-1-1-语法格式"><a href="#8-1-1-语法格式" class="headerlink" title="8.1.1 语法格式"></a>8.1.1 语法格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 顶层包名.子包名 ;<br></code></pre></td></tr></table></figure><p>举例：pack1\pack2\PackageTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> pack1.pack2;    <span class="hljs-comment">//指定类PackageTest属于包pack1.pack2</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PackageTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;in  method display()&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>一个源文件只能有一个声明包的package语句</li><li>package语句作为Java源文件的第一条语句出现。若缺省该语句，则指定为无名包。</li><li>包名，属于标识符，满足标识符命名的规则和规范（全部小写）、见名知意<ul><li>包通常使用所在公司域名的倒置：com.atguigu.xxx。</li><li>大家取包名时不要使用”<code>java.xx</code>“包</li></ul></li><li>包对应于文件系统的目录，package语句中用 “.” 来指明包(目录)的层次，每.一次就表示一层文件目录。</li><li>同一个包下可以声明多个结构（类、接口），但是不能定义同名的结构（类、接口）。不同的包下可以定义同名的结构（类、接口）</li></ul><h4 id="8-1-2-包的作用"><a href="#8-1-2-包的作用" class="headerlink" title="8.1.2 包的作用"></a>8.1.2 包的作用</h4><ul><li>包可以包含类和子包，划分<code>项目层次</code>，便于管理</li><li>帮助<code>管理大型软件</code>系统：将功能相近的类划分到同一个包中。比如：MVC的设计模式</li><li>解决<code>类命名冲突</code>的问题</li><li>控制<code>访问权限</code></li></ul><h4 id="8-1-3-应用举例"><a href="#8-1-3-应用举例" class="headerlink" title="8.1.3 应用举例"></a>8.1.3 应用举例</h4><p>举例1：某航运软件系统包括：一组域对象、GUI和reports子系统</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459121_watermark.png" alt="image-20220321233025157"></p><p><strong>举例2：MVC设计模式</strong></p><p>MVC是一种软件构件模式，目的是为了降低程序开发中代码业务的耦合度。</p><p>MVC设计模式将整个程序分为三个层次：<code>视图模型(Viewer)层</code>，<code>控制器(Controller)层</code>，与<code>数据模型(Model)层</code>。这种将程序输入输出、数据处理，以及数据的展示分离开来的设计模式使程序结构变的灵活而且清晰，同时也描述了程序各个对象间的通信方式，降低了程序的耦合性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">视图层viewer：显示数据,为用户提供使用界面，与用户直接进行交互。<br> &gt;相关工具类   view.utils<br> &gt;自定义view  view.ui<br><br>控制层controller：解析用户请求，处理业务逻辑，给予用户响应<br> &gt;应用界面相关    controller.activity<br> &gt;存放fragment   controller.fragment<br> &gt;显示列表的适配器 controller.adapter<br> &gt;服务相关的        controller.service<br> &gt;抽取的基类        controller.base<br>    <br>模型层model：主要承载数据、处理数据<br> &gt;数据对象封装 model.bean/domain<br> &gt;数据库操作类 model.dao<br> &gt;数据库      model.db<br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459077_watermark.png" alt="image-20220321233153448"></p><h4 id="8-1-4-JDK中主要的包介绍"><a href="#8-1-4-JDK中主要的包介绍" class="headerlink" title="8.1.4 JDK中主要的包介绍"></a>8.1.4 JDK中主要的包介绍</h4><p><code>java.lang</code>—-包含一些Java语言的核心类，如String、Math、Integer、 System和Thread，提供常用功能<br><code>java.net</code>—-包含执行与网络相关的操作的类和接口。<br><code>java.io</code>   —-包含能提供多种输入&#x2F;输出功能的类。<br><code>java.util</code>—-包含一些实用工具类，如定义系统特性、接口的集合框架类、使用与日期日历相关的函数。<br><code>java.text</code>—-包含了一些java格式化相关的类<br><code>java.sql</code>—-包含了java进行JDBC数据库编程的相关类&#x2F;接口<br><code>java.awt</code>—-包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。  </p><h3 id="8-2-import-导入"><a href="#8-2-import-导入" class="headerlink" title="8.2 import(导入)"></a>8.2 import(导入)</h3><p>为了使用定义在其它包中的Java类，需用import语句来显式引入指定包下所需要的类。相当于<code>import语句告诉编译器到哪里去寻找这个类</code>。</p><h4 id="8-2-1-语法格式"><a href="#8-2-1-语法格式" class="headerlink" title="8.2.1 语法格式"></a>8.2.1 语法格式</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">import 包名.类名<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h4 id="8-2-2-应用举例"><a href="#8-2-2-应用举例" class="headerlink" title="8.2.2 应用举例"></a>8.2.2 应用举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> pack1.pack2.Test;   <span class="hljs-comment">//import pack1.pack2.*;表示引入pack1.pack2包中的所有结构</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PackTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span>&#123;<br><span class="hljs-type">Test</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();          <span class="hljs-comment">//Test类在pack1.pack2包中定义</span><br>t.display();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="8-2-3-注意事项"><a href="#8-2-3-注意事项" class="headerlink" title="8.2.3 注意事项"></a>8.2.3 注意事项</h4><ul><li><p>import语句，声明在包的声明和类的声明之间。</p></li><li><p>如果需要导入多个类或接口，那么就并列显式多个import语句即可</p></li><li><p>如果使用<code>a.*</code>导入结构，表示可以导入a包下的所有的结构。举例：可以使用java.util.*的方式，一次性导入util包下所有的类或接口。</p></li><li><p>如果导入的类或接口是java.lang包下的，或者是当前包下的，则可以省略此import语句。</p></li><li><p>如果已经导入java.a包下的类，那么如果需要使用a包的子包下的类的话，仍然需要导入。</p></li><li><p>如果在代码中使用不同包下的同名的类，那么就需要使用类的全类名的方式指明调用的是哪个类。</p></li><li><p>（了解）<code>import static</code>组合的使用：调用指定类或接口下的静态的属性或方法</p></li></ul><h2 id="9-面向对象特征一：封装性-encapsulation"><a href="#9-面向对象特征一：封装性-encapsulation" class="headerlink" title="9. 面向对象特征一：封装性(encapsulation)"></a>9. 面向对象特征一：封装性(encapsulation)</h2><h3 id="9-1-为什么需要封装？"><a href="#9-1-为什么需要封装？" class="headerlink" title="9.1 为什么需要封装？"></a>9.1 为什么需要封装？</h3><ul><li>我要用洗衣机，只需要按一下开关和洗涤模式就可以了。有必要了解洗衣机内部的结构吗？有必要碰电动机吗？</li><li>我要开车，我不需要懂离合、油门、制动等原理和维修也可以驾驶。</li></ul><ul><li>客观世界里每一个事物的内部信息都隐藏在其内部，外界无法直接操作和修改，只能通过指定的方式进行访问和修改。</li></ul><p>随着我们系统越来越复杂，类会越来越多，那么类之间的访问边界必须把握好，面向对象的开发原则要遵循“<code>高内聚、低耦合</code>”。</p><blockquote><p>高内聚、低耦合是软件工程中的概念，也是UNIX 操作系统设计的经典原则。</p><p>内聚，指一个模块内各个元素彼此结合的紧密程度；耦合指一个软件结构内不同模块之间互连程度的度量。内聚意味着重用和独立，耦合意味着多米诺效应牵一发动全身。</p></blockquote><p>而“高内聚，低耦合”的体现之一：</p><ul><li><code>高内聚</code>：类的内部数据操作细节自己完成，不允许外部干涉；</li><li><code>低耦合</code>：仅暴露少量的方法给外部使用，尽量方便外部调用。</li></ul><h3 id="9-2-何为封装性？"><a href="#9-2-何为封装性？" class="headerlink" title="9.2 何为封装性？"></a>9.2 何为封装性？</h3><p>所谓封装，就是把客观事物封装成抽象概念的类，并且类可以把自己的数据和方法只向可信的类或者对象开放，向没必要开放的类或者对象隐藏信息。</p><p><strong>通俗的讲，把该隐藏的隐藏起来，该暴露的暴露出来。这就是封装性的设计思想。</strong></p><h3 id="9-3-Java如何实现数据封装"><a href="#9-3-Java如何实现数据封装" class="headerlink" title="9.3 Java如何实现数据封装"></a>9.3 Java如何实现数据封装</h3><ul><li><p>实现封装就是控制类或成员的可见性范围。这就需要依赖访问控制修饰符，也称为权限修饰符来控制。</p></li><li><p>权限修饰符：<code>public</code>、<code>protected</code>、<code>缺省</code>、<code>private</code>。具体访问范围如下：</p></li></ul><table><thead><tr><th>修饰符</th><th>本类内部</th><th>本包内</th><th>其他包的子类</th><th>其他包非子类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>缺省</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><ul><li>具体修饰的结构：<ul><li>外部类：public、缺省</li><li>成员变量、成员方法、构造器、成员内部类：public、protected、缺省、private</li></ul></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459344_watermark.png" alt="image-20220321222327616" style="zoom:67%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459061_watermark.png" alt="image-20220617164042390" style="zoom:80%;" /><h3 id="9-4-封装性的体现"><a href="#9-4-封装性的体现" class="headerlink" title="9.4 封装性的体现"></a>9.4 封装性的体现</h3><h4 id="9-4-1-成员变量-属性私有化"><a href="#9-4-1-成员变量-属性私有化" class="headerlink" title="9.4.1 成员变量&#x2F;属性私有化"></a>9.4.1 成员变量&#x2F;属性私有化</h4><p><strong>概述：私有化类的成员变量，提供公共的get和set方法，对外暴露获取和修改属性的功能。</strong></p><p>实现步骤：</p><p><strong>①</strong> 使用 <code>private</code> 修饰成员变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> 数据类型 变量名 ；<br></code></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> marry;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>②</strong> 提供 <code>getXxx</code>方法 &#x2F; <code>setXxx</code> 方法，可以访问成员变量，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> marry;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String n)</span> &#123;<br>name = n;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>&#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        age = a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMarry</span><span class="hljs-params">(<span class="hljs-type">boolean</span> m)</span>&#123;<br>        marry = m;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMarry</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> marry;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>③</strong> 测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><br>        <span class="hljs-comment">//实例变量私有化，跨类是无法直接使用的</span><br><span class="hljs-comment">/* p.name = &quot;张三&quot;;</span><br><span class="hljs-comment">        p.age = 23;</span><br><span class="hljs-comment">        p.marry = true;*/</span><br><br>        p.setName(<span class="hljs-string">&quot;张三&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;p.name = &quot;</span> + p.getName());<br><br>        p.setAge(<span class="hljs-number">23</span>);<br>        System.out.println(<span class="hljs-string">&quot;p.age = &quot;</span> + p.getAge());<br><br>        p.setMarry(<span class="hljs-literal">true</span>);<br>        System.out.println(<span class="hljs-string">&quot;p.marry = &quot;</span> + p.isMarry());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>成员变量封装的好处：</strong></p><ul><li>让使用者只能通过事先预定的方法来<code>访问数据</code>，从而可以在该方法里面加入控制逻辑，限制对成员变量的不合理访问。还可以进行数据检查，从而有利于保证对象信息的完整性。</li><li><code>便于修改</code>，提高代码的可维护性。主要说的是隐藏的部分，在内部修改了，如果其对外可以的访问方式不变的话，外部根本感觉不到它的修改。例如：Java8-&gt;Java9，String从char[]转为byte[]内部实现，而对外的方法不变，我们使用者根本感觉不到它内部的修改。</li></ul><p><strong>开心一笑：</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">A <span class="hljs-keyword">man</span> and woman are <span class="hljs-keyword">in</span> a computer programming lecture. The <span class="hljs-keyword">man</span> touches the woman&#x27;s breasts.<br><br><span class="hljs-string">&quot;Hey!&quot;</span> <span class="hljs-keyword">she</span> says. <span class="hljs-string">&quot;Those are private!&quot;</span><br><br>The <span class="hljs-keyword">man</span> says, <span class="hljs-string">&quot;But we&#x27;re in the same class!&quot;</span><br><br></code></pre></td></tr></table></figure><h4 id="9-4-2-私有化方法"><a href="#9-4-2-私有化方法" class="headerlink" title="9.4.2 私有化方法"></a>9.4.2 私有化方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 自定义的操作数组的工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康 Email:shkstart@126.com</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span></span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayUtil</span> &#123;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 求int型数组的最大值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">maxValue</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt; arr.length;i++)&#123;<br><span class="hljs-keyword">if</span>(maxValue &lt; arr[i])&#123;<br>maxValue = arr[i];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> maxValue;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 求int型数组的最小值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">min</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">minValue</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt; arr.length;i++)&#123;<br><span class="hljs-keyword">if</span>(minValue &gt; arr[i])&#123;<br>minValue = arr[i];<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> minValue;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 求int型数组的总和</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>sum += arr[i];<br>&#125;<br><span class="hljs-keyword">return</span> sum;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 求int型数组的元素的平均值</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">avg</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">sumValue</span> <span class="hljs-operator">=</span> sum(arr);<br><span class="hljs-keyword">return</span> sumValue / arr.length;<br>&#125;<br><br><span class="hljs-comment">// 创建一系列重载的上述方法</span><br><span class="hljs-comment">// public double max(double[] arr)&#123;&#125;</span><br><span class="hljs-comment">// public float max(float[] arr)&#123;&#125;</span><br><span class="hljs-comment">// public byte max(byte[] arr)&#123;&#125;</span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 遍历数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>System.out.print(arr[i] + <span class="hljs-string">&quot;  &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 复制数组arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] copy(<span class="hljs-type">int</span>[] arr) &#123;<br><span class="hljs-type">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>arr1[i] = arr[i];<br>&#125;<br><span class="hljs-keyword">return</span> arr1;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 反转数组</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reverse</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,j = arr.length - <span class="hljs-number">1</span>;i &lt; j;i++,j--)&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>arr[i] = arr[j];<br>arr[j] = temp;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 数组的排序</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> desc 指明排序的方式。 ascend:升序    descend:降序</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sort</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,String desc)</span> &#123;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;ascend&quot;</span>.equals(desc))&#123;<span class="hljs-comment">//if(desc.equals(&quot;ascend&quot;))&#123;</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br><span class="hljs-comment">//int temp = arr[j];</span><br><span class="hljs-comment">//arr[j] = arr[j + 1];</span><br><span class="hljs-comment">//arr[j + 1] = temp;</span><br>swap(arr,j,j+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;descend&quot;</span>.equals(desc))&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[j] &lt; arr[j + <span class="hljs-number">1</span>]) &#123;<br><span class="hljs-comment">//int temp = arr[j];</span><br><span class="hljs-comment">//arr[j] = arr[j + 1];</span><br><span class="hljs-comment">//arr[j + 1] = temp;</span><br>swap(arr,j,j+<span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;您输入的排序方式有误！&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr,<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>arr[i] = arr[j];<br>arr[j] = temp;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 查找指定的value值在arr数组中出现的位置</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> arr</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> value</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 返回value值出现的位置 或 -1：未找到</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getValue</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr, <span class="hljs-type">int</span> value)</span> &#123;<br><span class="hljs-comment">//方法：线性查找</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br><span class="hljs-keyword">if</span>(value == arr[i])&#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> - <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><blockquote><p>注意：</p><p>开发中，一般成员实例变量都习惯使用private修饰，再提供相应的public权限的get&#x2F;set方法访问。</p><p>对于final的实例变量，不提供set()方法。（后面final关键字的时候讲）</p><p>对于static final的成员变量，习惯上使用public修饰。</p></blockquote><h3 id="9-5-练习"><a href="#9-5-练习" class="headerlink" title="9.5 练习"></a>9.5 练习</h3><p>练习1：</p><p>创建程序：在其中定义两个类：Person和PersonTest类。定义如下：</p><p>用setAge()设置人的合法年龄(0~130)，用getAge()返回人的年龄。在PersonTest类中实例化Person类的对象b，调用setAge()和getAge()方法，体会Java的封装性。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459985_watermark.png" alt="image-20220321223633916" style="zoom:80%;" /><p>练习2：</p><p>自定义图书类。设定属性包括：书名bookName，作者author，出版社名publisher，价格price；方法包括：相应属性的get&#x2F;set方法，图书信息介绍等。</p><h2 id="10-类的成员之三：构造器-Constructor"><a href="#10-类的成员之三：构造器-Constructor" class="headerlink" title="10. 类的成员之三：构造器(Constructor)"></a>10. 类的成员之三：构造器(Constructor)</h2><p>我们new完对象时，所有成员变量都是默认值，如果我们需要赋别的值，需要挨个为它们再赋值，太麻烦了。我们能不能在new对象时，直接为当前对象的某个或所有成员变量直接赋值呢？</p><p>可以，Java给我们提供了<code>构造器（Constructor)</code>，也称为<code>构造方法</code>。</p><h3 id="10-1-构造器的作用"><a href="#10-1-构造器的作用" class="headerlink" title="10.1 构造器的作用"></a>10.1 构造器的作用</h3><p>new对象，并在new对象的时候为实例变量赋值。</p><p>举例：Person p &#x3D; new <code>Person(“Peter”,15)</code>;</p><p>解释：如同我们规定每个“人”一出生就必须先洗澡，我们就可以在“人”的构造器中加入完成“洗澡”的程序代码，于是每个“人”一出生就会自动完成“洗澡”，程序就不必再在每个人刚出生时一个一个地告诉他们要“洗澡”了。</p><h3 id="10-2-构造器的语法格式"><a href="#10-2-构造器的语法格式" class="headerlink" title="10.2 构造器的语法格式"></a>10.2 构造器的语法格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 类名&#123;<br>    [修饰符] 构造器名()&#123;<br>    <span class="hljs-comment">// 实例初始化代码</span><br>    &#125;<br>    [修饰符] 构造器名(参数列表)&#123;<br>        <span class="hljs-comment">// 实例初始化代码</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说明：</p><ol><li>构造器名必须与它所在的类名必须相同。</li><li>它没有返回值，所以不需要返回值类型，也不需要void。</li><li>构造器的修饰符只能是权限修饰符，不能被其他任何修饰。比如，不能被static、final、synchronized、abstract、native修饰，不能有return语句返回值。</li></ol><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">// 无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;&#125;<br><br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String n,<span class="hljs-type">int</span> a)</span> &#123;<br>        name = n;<br>        age = a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String n)</span> &#123;<br>        name = n;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        age = a;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span> + name +<span class="hljs-string">&quot;，年龄：&quot;</span> + age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestStudent</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//调用无参构造创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br>        <span class="hljs-comment">//调用有参构造创建学生对象</span><br>        <span class="hljs-type">Student</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">23</span>);<br><br>        System.out.println(s1.getInfo());<br>        System.out.println(s2.getInfo());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="10-3-使用说明"><a href="#10-3-使用说明" class="headerlink" title="10.3 使用说明"></a>10.3 使用说明</h3><ol><li><p>当我们没有显式的声明类中的构造器时，系统会默认提供一个无参的构造器并且该构造器的修饰符默认与类的修饰符相同</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231459951_watermark.png" alt="image-20220524143937454"></p></li><li><p>当我们显式的定义类的构造器以后，系统就不再提供默认的无参的构造器了。</p></li><li><p>在类中，至少会存在一个构造器。</p></li><li><p>构造器是可以重载的。</p></li></ol><h3 id="10-4-练习"><a href="#10-4-练习" class="headerlink" title="10.4 练习"></a>10.4 练习</h3><p><strong>练习1：</strong>编写两个类，TriAngle和TriAngleTest，其中TriAngle类中声明私有的底边长base和高height，同时声明公共方法访问私有变量。此外，提供类必要的构造器。另一个类中使用这些公共方法，计算三角形的面积。</p><p><strong>练习2：</strong></p><p>(1)定义Student类,有4个属性：<br>  String name;<br>  int age;<br>  String school;<br>  String major;</p><p>(2)定义Student类的3个构造器:</p><ul><li>第一个构造器Student(String n, int a)设置类的name和age属性；</li><li>第二个构造器Student(String n, int a, String s)设置类的name, age 和school属性；</li><li>第三个构造器Student(String n, int a, String s, String m)设置类的name, age ,school和major属性；</li></ul><p>(3)在main方法中分别调用不同的构造器创建的对象，并输出其属性值。</p><p><strong>练习3：</strong></p><p>1、写一个名为Account的类模拟账户。该类的属性和方法如下图所示。</p><p>该类包括的属性：账号id，余额balance，年利率annualInterestRate；</p><p>包含的方法：访问器方法（getter和setter方法），取款方法withdraw()，存款方法deposit()。</p><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231500062_watermark.png" alt="image-20220321235241752"></p><p><strong>提示：</strong>在提款方法withdraw中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示。</p><ol start="2"><li>创建Customer类。</li></ol><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231500674_watermark.png" alt="image-20220321235324156"></p><p>a. 声明三个私有对象属性：firstName、lastName和account。<br>b. 声明一个公有构造器，这个构造器带有两个代表对象属性的参数（f和l）<br>c. 声明两个公有存取器来访问该对象属性，方法getFirstName和getLastName返回相应的属性。<br>d. 声明setAccount 方法来对account属性赋值。<br>e. 声明getAccount 方法以获取account属性。</p><p>3.写一个测试程序。</p><p>（1）创建一个Customer ，名字叫 Jane Smith, 他有一个账号为1000，余额为2000元，年利率为 1.23％ 的账户。<br>（2）对Jane Smith操作。<br>存入 100 元，再取出960元。再取出2000元。<br>打印出Jane Smith 的基本信息</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript">成功存入 ：<span class="hljs-number">100.0</span><br>成功取出：<span class="hljs-number">960.0</span><br>余额不足，取款失败<br>Customer [Smith, Jane] has a account: <span class="hljs-built_in">id</span> <span class="hljs-keyword">is</span> <span class="hljs-number">1000</span>, annualInterestRate <span class="hljs-keyword">is</span> <span class="hljs-number">1.23</span>％, balance <span class="hljs-keyword">is</span> <span class="hljs-number">1140.0</span><br></code></pre></td></tr></table></figure><h2 id="11-阶段性知识补充"><a href="#11-阶段性知识补充" class="headerlink" title="11. 阶段性知识补充"></a>11. 阶段性知识补充</h2><h3 id="11-1-类中属性赋值过程"><a href="#11-1-类中属性赋值过程" class="headerlink" title="11.1 类中属性赋值过程"></a>11.1 类中属性赋值过程</h3><p><strong>1、在类的属性中，可以有哪些位置给属性赋值？</strong></p><p>① 默认初始化</p><p>② 显式初始化</p><p>③ 构造器中初始化</p><p>④ 通过”对象.属性”或”对象.方法”的方式，给属性赋值</p><p><strong>2、这些位置执行的先后顺序是怎样？</strong></p><p>顺序：① - ② - ③ - ④</p><p>3、说明：</p><ul><li>上述中的①、②、③在对象创建过程中，只执行一次。</li></ul><ul><li>④ 是在对象创建后执行的，可以根据需求多次执行。</li></ul><h3 id="11-2-JavaBean"><a href="#11-2-JavaBean" class="headerlink" title="11.2 JavaBean"></a>11.2 JavaBean</h3><ul><li><p>JavaBean是一种Java语言写成的可重用组件。</p><ul><li>好比你做了一个扳手，这个扳手会在很多地方被拿去用。这个扳手也提供多种功能(你可以拿这个扳手扳、锤、撬等等)，而这个扳手就是一个组件。</li></ul></li><li><p>所谓JavaBean，是指符合如下标准的Java类：</p><ul><li>类是公共的</li><li>有一个无参的公共的构造器</li><li>有属性，且有对应的get、set方法</li></ul></li><li><p>用户可以使用JavaBean将功能、处理、值、数据库访问和其他任何可以用Java代码创造的对象进行打包，并且其他的开发者可以通过内部的JSP页面、Servlet、其他JavaBean、applet程序或者应用来使用这些对象。用户可以认为JavaBean提供了一种随时随地的复制和粘贴的功能，而不用关心任何改变。</p></li><li><p>《Think in Java》中提到，JavaBean最初是为Java GUI的可视化编程实现的。你拖动IDE构建工具创建一个GUI 组件（如多选框），其实是工具给你创建Java类，并提供将类的属性暴露出来给你修改调整，将事件监听器暴露出来。</p></li><li><p>示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JavaBean</span> &#123;<br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">// 属性一般定义为private</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">JavaBean</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        age = a;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String n)</span> &#123;<br>        name = n;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul><h3 id="11-3-UML类图"><a href="#11-3-UML类图" class="headerlink" title="11.3 UML类图"></a>11.3 UML类图</h3><ul><li><p>UML（Unified Modeling Language，统一建模语言），用来描述<code>软件模型</code>和<code>架构</code>的图形化语言。</p></li><li><p>常用的UML工具软件有<code>PowerDesinger</code>、<code>Rose</code>和<code>Enterprise Architect</code>。</p></li><li><p>UML工具软件不仅可以绘制软件开发中所需的各种图表，还可以生成对应的源代码。</p></li><li><p>在软件开发中，使用<code>UML类图</code>可以更加直观地描述类内部结构（类的属性和操作）以及类之间的关系（如关联、依赖、聚合等）。</p><ul><li>+表示 public 类型， - 表示 private 类型，#表示protected类型</li><li>方法的写法:<br>方法的类型(+、-)  方法名(参数名： 参数类型)：返回值类型</li><li>斜体表示抽象方法或类。</li></ul></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231500345_watermark.png" alt="image-20220321232230831" style="zoom:80%;" /><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/202402231500229_watermark.png" alt="image-20220503111301602"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组</title>
    <link href="/2024/02/23/5.%20%E6%95%B0%E7%BB%84/"/>
    <url>/2024/02/23/5.%20%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h2 id="1-数组的概述"><a href="#1-数组的概述" class="headerlink" title="1. 数组的概述"></a>1. 数组的概述</h2><h3 id="1-1-为什么需要数组"><a href="#1-1-为什么需要数组" class="headerlink" title="1.1 为什么需要数组"></a>1.1 为什么需要数组</h3><p><strong>需求分析1：</strong></p><p>需要统计某公司50个员工的工资情况，例如计算平均工资、找到最高工资等。用之前知识，首先需要声明<code>50个变量</code>来分别记录每位员工的工资，这样会很麻烦。因此我们可以将所有的数据全部存储到一个容器中统一管理，并使用容器进行计算。</p><p><strong>需求分析2：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911112_watermark.jpeg" alt="snipaste_20220317_000101" style="zoom: 50%;" /><p>容器的概念：</p><ul><li><strong>生活中的容器：</strong>水杯（装水等液体），衣柜（装衣服等物品），集装箱（装货物等）。</li><li><strong>程序中的容器：</strong>将多个数据存储到一起，每个数据称为该容器的元素。</li></ul><h3 id="1-2-数组的概念"><a href="#1-2-数组的概念" class="headerlink" title="1.2 数组的概念"></a>1.2 数组的概念</h3><ul><li><p>数组(Array)，是多个相同类型数据按一定顺序排列的集合，并使用一个名字命名，并通过编号的方式对这些数据进行统一管理。</p></li><li><p>数组中的概念</p><ul><li>数组名</li><li>下标（或索引）</li><li>元素</li><li>数组的长度</li></ul></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911339_watermark.png" alt="image-20220317000952499"></p><p><strong>数组的特点：</strong></p><ul><li>数组本身是<code>引用数据类型</code>，而数组中的元素可以是<code>任何数据类型</code>，包括基本数据类型和引用数据类型。</li><li>创建数组对象会在内存中开辟一整块<code>连续的空间</code>。占据的空间的大小，取决于数组的长度和数组中元素的类型。</li><li>数组中的元素在内存中是依次紧密排列的，有序的。</li><li>数组，一旦初始化完成，其长度就是确定的。数组的<code>长度一旦确定，就不能修改</code>。</li><li>我们可以直接通过下标(或索引)的方式调用指定位置的元素，速度很快。</li><li>数组名中引用的是这块连续空间的首地址。</li></ul><h3 id="1-3-数组的分类"><a href="#1-3-数组的分类" class="headerlink" title="1.3 数组的分类"></a>1.3 数组的分类</h3><p><strong>1、按照元素类型分：</strong></p><ul><li>基本数据类型元素的数组：每个元素位置存储基本数据类型的值</li><li>引用数据类型元素的数组：每个元素位置存储对象（本质是存储对象的首地址）（在面向对象部分讲解）</li></ul><p><strong>2、按照维度分：</strong></p><ul><li>一维数组：存储一组数据</li><li>二维数组：存储多组数据，相当于二维表，一行代表一组数据，只是这里的二维表每一行长度不要求一样。</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911881_watermark.png" alt="image-20211221164709624"></p><h2 id="2-一维数组的使用"><a href="#2-一维数组的使用" class="headerlink" title="2. 一维数组的使用"></a>2. 一维数组的使用</h2><h3 id="2-1-一维数组的声明"><a href="#2-1-一维数组的声明" class="headerlink" title="2.1 一维数组的声明"></a>2.1 一维数组的声明</h3><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//推荐</span><br>元素的数据类型[] 一维数组的名称;<br><br><span class="hljs-comment">//不推荐</span><br>元素的数据类型  一维数组名[];<br></code></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr;<br><span class="hljs-type">int</span> arr1[];<br><span class="hljs-type">double</span>[] arr2;<br>String[] arr3;  <span class="hljs-comment">//引用类型变量数组</span><br></code></pre></td></tr></table></figure><p><strong>数组的声明，需要明确：</strong></p><p>（1）数组的维度：在Java中数组的符号是[]，[]表示一维，[][]表示二维。</p><p>（2）数组的元素类型：即创建的数组容器可以存储什么数据类型的数据。元素的类型可以是任意的Java的数据类型。例如：int、String、Student等。</p><p>（3）数组名：就是代表某个数组的标识符，数组名其实也是变量名，按照变量的命名规范来命名。数组名是个引用数据类型的变量，因为它代表一组数据。</p><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//比如，要存储一个小组的成绩</span><br>        <span class="hljs-type">int</span>[] scores;<br>        <span class="hljs-type">int</span> grades[];<br><span class="hljs-comment">//        System.out.println(scores);//未初始化不能使用</span><br><br>        <span class="hljs-comment">//比如，要存储一组字母</span><br>        <span class="hljs-type">char</span>[] letters;<br><br>        <span class="hljs-comment">//比如，要存储一组姓名</span><br>        String[] names;<br><br>        <span class="hljs-comment">//比如，要存储一组价格</span><br>        <span class="hljs-type">double</span>[] prices;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：Java语言中声明数组时不能指定其长度(数组中元素的个数)。 例如： int a[5]; &#x2F;&#x2F;非法</p><h3 id="2-2-一维数组的初始化"><a href="#2-2-一维数组的初始化" class="headerlink" title="2.2 一维数组的初始化"></a>2.2 一维数组的初始化</h3><h4 id="2-2-1-静态初始化"><a href="#2-2-1-静态初始化" class="headerlink" title="2.2.1 静态初始化"></a>2.2.1 静态初始化</h4><ul><li><p>如果数组变量的初始化和数组元素的赋值操作同时进行，那就称为静态初始化。</p></li><li><p>静态初始化，本质是用静态数据（编译时已知）为数组初始化。此时数组的长度由静态数据的个数决定。</p></li><li><p><strong>一维数组声明和静态初始化格式1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 数组名 = <span class="hljs-keyword">new</span> 数据类型[]&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,元素<span class="hljs-number">3</span>,...&#125;;<br><br>或<br>    <br>数据类型[] 数组名;<br>数组名 = <span class="hljs-keyword">new</span> 数据类型[]&#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,元素<span class="hljs-number">3</span>,...&#125;;<br></code></pre></td></tr></table></figure><ul><li>new：关键字，创建数组使用的关键字。因为数组本身是引用数据类型，所以要用new创建数组实体。</li></ul></li></ul><p>例如，定义存储1，2，3，4，5整数的数组容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//正确</span><br><span class="hljs-comment">//或</span><br><span class="hljs-type">int</span>[] arr;<br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//正确</span><br></code></pre></td></tr></table></figure><ul><li><strong>一维数组声明和静态初始化格式2：</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型[] 数组名 = &#123;元素<span class="hljs-number">1</span>,元素<span class="hljs-number">2</span>,元素<span class="hljs-number">3.</span>..&#125;;<span class="hljs-comment">//必须在一个语句中完成，不能分成两个语句写</span><br></code></pre></td></tr></table></figure><p>例如，定义存储1，2，3，4，5整数的数组容器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//正确</span><br><br><span class="hljs-type">int</span>[] arr;<br>arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//错误</span><br></code></pre></td></tr></table></figure><p><strong>举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//右边不需要写new int[]</span><br><br>        <span class="hljs-type">int</span>[] nums;<br>        nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">10</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40</span>&#125;; <span class="hljs-comment">//声明和初始化在两个语句完成，就不能使用new int[]</span><br><br>        <span class="hljs-type">char</span>[] word = &#123;<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>&#125;;<br><br>        String[] heros = &#123;<span class="hljs-string">&quot;袁隆平&quot;</span>,<span class="hljs-string">&quot;邓稼先&quot;</span>,<span class="hljs-string">&quot;钱学森&quot;</span>&#125;;<br><br>        System.out.println(<span class="hljs-string">&quot;arr数组：&quot;</span> + arr);<span class="hljs-comment">//arr数组：[I@1b6d3586</span><br>        System.out.println(<span class="hljs-string">&quot;nums数组：&quot;</span> + nums);<span class="hljs-comment">//nums数组：[I@4554617c</span><br>        System.out.println(<span class="hljs-string">&quot;word数组：&quot;</span> + word);<span class="hljs-comment">//word数组：[C@74a14482</span><br>        System.out.println(<span class="hljs-string">&quot;heros数组：&quot;</span> + heros);<span class="hljs-comment">//heros数组：[Ljava.lang.String;@1540e19d</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-2-动态初始化"><a href="#2-2-2-动态初始化" class="headerlink" title="2.2.2 动态初始化"></a>2.2.2 动态初始化</h4><p>数组变量的初始化和数组元素的赋值操作分开进行，即为动态初始化。</p><p>动态初始化中，只确定了元素的个数（即数组的长度），而元素值此时只是默认值，还并未真正赋自己期望的值。真正期望的数据需要后续单独一个一个赋值。</p><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">数组存储的元素的数据类型[] 数组名字 = <span class="hljs-keyword">new</span> 数组存储的元素的数据类型[长度];<br><br>或<br><br>数组存储的数据类型[] 数组名字;<br>数组名字 = <span class="hljs-keyword">new</span> 数组存储的数据类型[长度];<br></code></pre></td></tr></table></figure><ul><li><p>[长度]：数组的长度，表示数组容器中可以最多存储多少个元素。</p></li><li><p><strong>注意：数组有定长特性，长度一旦指定，不可更改。</strong>和水杯道理相同，买了一个2升的水杯，总容量就是2升是固定的。</p></li></ul><p><strong>举例1：正确写法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><br><span class="hljs-type">int</span>[] arr;<br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><br></code></pre></td></tr></table></figure><p><strong>举例2：错误写法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//错误的，后面有&#123;&#125;指定元素列表，就不需要在[]中指定元素个数了。</span><br></code></pre></td></tr></table></figure><h3 id="2-3-一维数组的使用"><a href="#2-3-一维数组的使用" class="headerlink" title="2.3 一维数组的使用"></a>2.3 一维数组的使用</h3><h4 id="2-3-1-数组的长度"><a href="#2-3-1-数组的长度" class="headerlink" title="2.3.1  数组的长度"></a>2.3.1  数组的长度</h4><ul><li>数组的元素总个数，即数组的长度</li><li>每个数组都有一个属性length指明它的长度，例如：arr.length 指明数组arr的长度(即元素个数)</li><li>每个数组都具有长度，而且一旦初始化，其长度就是确定，且是不可变的。</li></ul><h4 id="2-3-2-数组元素的引用"><a href="#2-3-2-数组元素的引用" class="headerlink" title="2.3.2 数组元素的引用"></a>2.3.2 数组元素的引用</h4><p><strong>如何表示数组中的一个元素？</strong></p><p>每一个存储到数组的元素，都会自动的拥有一个编号，从0开始，这个自动编号称为<code>数组索引(index)或下标</code>，可以通过数组的索引&#x2F;下标访问到数组中的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数组名[索引/下标]<br></code></pre></td></tr></table></figure><p><strong>数组的下标范围？</strong></p><p>Java中数组的下标从[0]开始，下标范围是[0, 数组的长度-1]，即[0, 数组名.length-1]</p><p>数组元素下标可以是整型常量或整型表达式。如a[3] , b[i] , c[6*i];</p><p><strong>举例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br><br>        System.out.println(<span class="hljs-string">&quot;arr数组的长度：&quot;</span> + arr.length);<br>        System.out.println(<span class="hljs-string">&quot;arr数组的第1个元素：&quot;</span> + arr[<span class="hljs-number">0</span>]);<span class="hljs-comment">//下标从0开始</span><br>        System.out.println(<span class="hljs-string">&quot;arr数组的第2个元素：&quot;</span> + arr[<span class="hljs-number">1</span>]);<br>        System.out.println(<span class="hljs-string">&quot;arr数组的第3个元素：&quot;</span> + arr[<span class="hljs-number">2</span>]);<br>        System.out.println(<span class="hljs-string">&quot;arr数组的第4个元素：&quot;</span> + arr[<span class="hljs-number">3</span>]);<br>        System.out.println(<span class="hljs-string">&quot;arr数组的第5个元素：&quot;</span> + arr[<span class="hljs-number">4</span>]);<br><br>        <span class="hljs-comment">//修改第1个元素的值</span><br>        <span class="hljs-comment">//此处arr[0]相当于一个int类型的变量</span><br>        arr[<span class="hljs-number">0</span>] = <span class="hljs-number">100</span>;<br>        System.out.println(<span class="hljs-string">&quot;arr数组的第1个元素：&quot;</span> + arr[<span class="hljs-number">0</span>]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-一维数组的遍历"><a href="#2-4-一维数组的遍历" class="headerlink" title="2.4 一维数组的遍历"></a>2.4 一维数组的遍历</h3><p>将数组中的每个元素分别获取出来，就是<code>遍历</code>。for循环与数组的遍历是绝配。</p><p><strong>举例1</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-comment">//打印数组的属性，输出结果是5</span><br>        System.out.println(<span class="hljs-string">&quot;数组的长度：&quot;</span> + arr.length);<br><br>        <span class="hljs-comment">//遍历输出数组中的元素</span><br>        System.out.println(<span class="hljs-string">&quot;数组的元素有：&quot;</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例2</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>];<br><br>        System.out.println(<span class="hljs-string">&quot;arr数组的长度：&quot;</span> + arr.length);<br>        System.out.print(<span class="hljs-string">&quot;存储数据到arr数组之前：[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>                System.out.print(arr[i]);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.print(<span class="hljs-string">&quot;,&quot;</span> + arr[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;]&quot;</span>);<br><br>        <span class="hljs-comment">//初始化</span><br> <span class="hljs-comment">/* </span><br><span class="hljs-comment"> arr[0] = 2;</span><br><span class="hljs-comment">        arr[1] = 4;</span><br><span class="hljs-comment">        arr[2] = 6;</span><br><span class="hljs-comment">        arr[3] = 8;</span><br><span class="hljs-comment">        arr[4] = 10;</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            arr[i] = (i+<span class="hljs-number">1</span>) * <span class="hljs-number">2</span>;<br>        &#125;<br><br>        System.out.print(<span class="hljs-string">&quot;存储数据到arr数组之后：[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>                System.out.print(arr[i]);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.print(<span class="hljs-string">&quot;,&quot;</span> + arr[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-数组元素的默认值"><a href="#2-5-数组元素的默认值" class="headerlink" title="2.5 数组元素的默认值"></a>2.5 数组元素的默认值</h3><p>数组是引用类型，当我们使用动态初始化方式创建数组时，元素值只是默认值。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest6</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String argv[])</span>&#123;<br><span class="hljs-type">int</span> a[]= <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>]; <br>System.out.println(a[<span class="hljs-number">3</span>]); <span class="hljs-comment">//a[3]的默认值为0</span><br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>对于基本数据类型而言，默认初始化值各有不同。</p><p>对于引用数据类型而言，默认初始化值为null（注意与0不同！)</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911970_watermark.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest7</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//存储26个字母</span><br>        <span class="hljs-type">char</span>[] letters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[<span class="hljs-number">26</span>];<br>        System.out.println(<span class="hljs-string">&quot;letters数组的长度：&quot;</span> + letters.length);<br>        System.out.print(<span class="hljs-string">&quot;存储字母到letters数组之前：[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; letters.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>                System.out.print(letters[i]);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.print(<span class="hljs-string">&quot;,&quot;</span> + letters[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;]&quot;</span>);<br><br>       <span class="hljs-comment">//存储5个姓名</span><br>        String[] names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">5</span>];<br>        System.out.println(<span class="hljs-string">&quot;names数组的长度：&quot;</span> + names.length);<br>        System.out.print(<span class="hljs-string">&quot;存储姓名到names数组之前：[&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; names.length; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>                System.out.print(names[i]);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.print(<span class="hljs-string">&quot;,&quot;</span> + names[i]);<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-一维数组内存分析"><a href="#3-一维数组内存分析" class="headerlink" title="3. 一维数组内存分析"></a>3. 一维数组内存分析</h2><h3 id="3-1-Java虚拟机的内存划分"><a href="#3-1-Java虚拟机的内存划分" class="headerlink" title="3.1 Java虚拟机的内存划分"></a>3.1 Java虚拟机的内存划分</h3><p>为了提高运算效率，就对空间进行了不同区域的划分，因为每一片区域都有特定的处理数据方式和内存管理方式。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911024_watermark.png" alt="JVM架构-简图"></p><table><thead><tr><th>区域名称</th><th>作用</th></tr></thead><tbody><tr><td><code>虚拟机栈</code></td><td>用于存储正在执行的每个Java方法的局部变量表等。局部变量表存放了编译期可知长度<br/>的各种基本数据类型、对象引用，方法执行完，自动释放。</td></tr><tr><td><code>堆内存</code></td><td>存储对象（包括数组对象），new来创建的，都存储在堆内存。</td></tr><tr><td><code>方法区</code></td><td>存储已被虚拟机加载的类信息、常量、（静态变量）、即时编译器编译后的代码等数据。</td></tr><tr><td>本地方法栈</td><td>当程序中调用了native的本地方法时，本地方法执行期间的内存区域</td></tr><tr><td>程序计数器</td><td>程序计数器是CPU中的寄存器，它包含每一个线程下一条要执行的指令的地址</td></tr></tbody></table><h3 id="3-2-一维数组在内存中的存储"><a href="#3-2-一维数组在内存中的存储" class="headerlink" title="3.2 一维数组在内存中的存储"></a>3.2 一维数组在内存中的存储</h3><h4 id="1、一个一维数组内存图"><a href="#1、一个一维数组内存图" class="headerlink" title="1、一个一维数组内存图"></a>1、一个一维数组内存图</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>  <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>  System.out.println(arr);<span class="hljs-comment">//[I@5f150435</span><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911186_watermark.jpeg"></p><h4 id="2、数组下标为什么是0开始"><a href="#2、数组下标为什么是0开始" class="headerlink" title="2、数组下标为什么是0开始"></a>2、数组下标为什么是0开始</h4><p>因为第一个元素距离数组首地址间隔0个单元格。</p><h4 id="3、两个一维数组内存图"><a href="#3、两个一维数组内存图" class="headerlink" title="3、两个一维数组内存图"></a>3、两个一维数组内存图</h4><p>两个数组独立</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>    <span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>    System.out.println(arr);<br>    System.out.println(arr2);<br>&#125;<br><br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230911219_watermark.jpeg" style="zoom:67%;" /><h4 id="4、两个变量指向一个一维数组"><a href="#4、两个变量指向一个一维数组" class="headerlink" title="4、两个变量指向一个一维数组"></a>4、两个变量指向一个一维数组</h4><p>两个数组变量本质上代表同一个数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">// 定义数组，存储3个元素</span><br>    <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>    <span class="hljs-comment">//数组索引进行赋值</span><br>    arr[<span class="hljs-number">0</span>] = <span class="hljs-number">5</span>;<br>    arr[<span class="hljs-number">1</span>] = <span class="hljs-number">6</span>;<br>    arr[<span class="hljs-number">2</span>] = <span class="hljs-number">7</span>;<br>    <span class="hljs-comment">//输出3个索引上的元素值</span><br>    System.out.println(arr[<span class="hljs-number">0</span>]);<br>    System.out.println(arr[<span class="hljs-number">1</span>]);<br>    System.out.println(arr[<span class="hljs-number">2</span>]);<br>    <span class="hljs-comment">//定义数组变量arr2，将arr的地址赋值给arr2</span><br>    <span class="hljs-type">int</span>[] arr2 = arr;<br>    arr2[<span class="hljs-number">1</span>] = <span class="hljs-number">9</span>;<br>    System.out.println(arr[<span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230912307_watermark.jpeg" style="zoom:67%;" /><h2 id="4-一维数组的应用"><a href="#4-一维数组的应用" class="headerlink" title="4. 一维数组的应用"></a>4. 一维数组的应用</h2><p><strong>案例1：</strong>升景坊单间短期出租4个月，550元&#x2F;月（水电煤公摊，网费35元&#x2F;月），空调、卫生间、厨房齐全。屋内均是IT行业人士，喜欢安静。所以要求来租者最好是同行或者刚毕业的年轻人，爱干净、安静。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayTest</span> &#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>      <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>&#125;;<br>      <span class="hljs-type">int</span>[] index = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125;;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">tel</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; index.length;i++)&#123;<br>            tel += arr[index[i]];<br>      &#125;<br>      System.out.println(<span class="hljs-string">&quot;联系方式：&quot;</span> + tel);<br>      &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>案例2：输出英文星期几</p><p>用一个数组，保存星期一到星期天的7个英语单词，从键盘输入1-7，显示对应的单词<br>{“Monday”,”Tuesday”,”Wednesday”,”Thursday”,”Friday”,”Saturday”,”Sunday”}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 14:37</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WeekArrayTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//1. 声明并初始化星期的数组</span><br>        String[] weeks = &#123;<span class="hljs-string">&quot;Monday&quot;</span>,<span class="hljs-string">&quot;Tuesday&quot;</span>,<span class="hljs-string">&quot;Wednesday&quot;</span>,<span class="hljs-string">&quot;Thursday&quot;</span>,<span class="hljs-string">&quot;Friday&quot;</span>,<span class="hljs-string">&quot;Saturday&quot;</span>,<span class="hljs-string">&quot;Sunday&quot;</span>&#125;;<br><br>        <span class="hljs-comment">//2. 使用Scanner从键盘获取1-7范围的整数</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入[1-7]范围的整数：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-keyword">if</span>(number &lt; <span class="hljs-number">1</span> || number &gt; <span class="hljs-number">7</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;你输入的输入非法&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br><br>            <span class="hljs-comment">//3. 根据输入的整数，到数组中相应的索引位置获取指定的元素（即：星期几）</span><br>            System.out.println(<span class="hljs-string">&quot;对应的星期为：&quot;</span> + weeks[number - <span class="hljs-number">1</span>]);<br><br>        &#125;<br>        <br>        scanner.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>从键盘读入学生成绩，找出最高分，并输出学生成绩等级。</p><ul><li><p>成绩&gt;&#x3D;最高分-10  等级为’A’  </p></li><li><p>成绩&gt;&#x3D;最高分-20  等级为’B’</p></li><li><p>成绩&gt;&#x3D;最高分-30  等级为’C’  </p></li><li><p>其余            等级为’D’</p></li></ul><p>提示：先读入学生人数，根据人数创建int数组，存放学生成绩。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230913240_watermark.png" alt="image-20220317004637748" style="zoom:80%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 14:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScoreTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//1. 根据提示，获取学生人数</span><br>        System.out.print(<span class="hljs-string">&quot;请输入学生人数：&quot;</span>);<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-comment">//2. 根据学生人数，创建指定长度的数组 (使用动态初始化)</span><br>        <span class="hljs-type">int</span>[] scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[count];<br><br>        <span class="hljs-comment">//3. 使用循环，依次给数组的元素赋值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxScore</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//记录最高分</span><br>        System.out.println(<span class="hljs-string">&quot;请输入&quot;</span> + count + <span class="hljs-string">&quot;个成绩&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123;<br>            scores[i] = scanner.nextInt();<br>            <span class="hljs-comment">//4. 获取数组中元素的最大值，即为最高分</span><br>            <span class="hljs-keyword">if</span>(maxScore &lt; scores[i])&#123;<br>                maxScore = scores[i];<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;最高分是：&quot;</span> + maxScore);<br><br>        <span class="hljs-comment">//5. 遍历数组元素，输出各自的分数，并根据其分数与最高分的差值，获取各自的等级</span><br>        <span class="hljs-type">char</span> grade;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123;<br><br>            <span class="hljs-keyword">if</span>(scores[i] &gt;= maxScore - <span class="hljs-number">10</span>)&#123;<br>                grade = <span class="hljs-string">&#x27;A&#x27;</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scores[i] &gt;= maxScore - <span class="hljs-number">20</span>)&#123;<br>                grade = <span class="hljs-string">&#x27;B&#x27;</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(scores[i] &gt;= maxScore - <span class="hljs-number">30</span>)&#123;<br>                grade = <span class="hljs-string">&#x27;C&#x27;</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                grade = <span class="hljs-string">&#x27;D&#x27;</span>;<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;student &quot;</span> + i + <span class="hljs-string">&quot; socre is &quot;</span> + scores[i] + <span class="hljs-string">&quot;, grade is &quot;</span> + grade);<br>        &#125;<br>        <span class="hljs-comment">//关闭资源</span><br>        scanner.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-多维数组的使用"><a href="#5-多维数组的使用" class="headerlink" title="5. 多维数组的使用"></a>5. 多维数组的使用</h2><h3 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h3><ul><li><p>Java 语言里提供了支持多维数组的语法。</p></li><li><p>如果说可以把一维数组当成几何中的<code>线性图形</code>，那么二维数组就相当于是<code>一个表格</code>，像Excel中的表格、围棋棋盘一样。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230913509_watermark.png" alt="image-20220317004810263" style="zoom:80%;" /></li><li><p><strong>应用举例1：</strong></p><p>某公司2022年全年各个月份的销售额进行登记。按月份存储，可以使用一维数组。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] monthData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">23</span>,<span class="hljs-number">43</span>,<span class="hljs-number">22</span>,<span class="hljs-number">34</span>,<span class="hljs-number">55</span>,<span class="hljs-number">65</span>,<span class="hljs-number">44</span>,<span class="hljs-number">67</span>,<span class="hljs-number">45</span>,<span class="hljs-number">78</span>,<span class="hljs-number">67</span>,<span class="hljs-number">66</span>&#125;;<br></code></pre></td></tr></table></figure><p>如果改写为按<code>季度</code>为单位存储怎么办呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] quarterData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">23</span>,<span class="hljs-number">43</span>,<span class="hljs-number">22</span>&#125;,&#123;<span class="hljs-number">34</span>,<span class="hljs-number">55</span>,<span class="hljs-number">65</span>&#125;,&#123;<span class="hljs-number">44</span>,<span class="hljs-number">67</span>,<span class="hljs-number">45</span>&#125;,&#123;<span class="hljs-number">78</span>,<span class="hljs-number">67</span>,<span class="hljs-number">66</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><ul><li><strong>应用举例2：</strong></li></ul></li></ul><p>高一年级三个班级均由多个学生姓名构成一个个数组。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">String[] class1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;段誉&quot;</span>,<span class="hljs-string">&quot;令狐冲&quot;</span>,<span class="hljs-string">&quot;任我行&quot;</span>&#125;;<br><br>String[] class2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;张三丰&quot;</span>,<span class="hljs-string">&quot;周芷若&quot;</span>&#125;;<br><br>String[] class3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;赵敏&quot;</span>,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;韦小宝&quot;</span>,<span class="hljs-string">&quot;杨过&quot;</span>&#125;;<br><br></code></pre></td></tr></table></figure><p>那从整个年级看，我们可以声明一个二维数组。如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">String[][] grade = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[][]&#123;&#123;<span class="hljs-string">&quot;段誉&quot;</span>,<span class="hljs-string">&quot;令狐冲&quot;</span>,<span class="hljs-string">&quot;任我行&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;张三丰&quot;</span>,<span class="hljs-string">&quot;周芷若&quot;</span>&#125;,&#123;<span class="hljs-string">&quot;赵敏&quot;</span>,<span class="hljs-string">&quot;张无忌&quot;</span>,<span class="hljs-string">&quot;韦小宝&quot;</span>,<span class="hljs-string">&quot;杨过&quot;</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><ul><li><strong>应用举例3：</strong></li></ul><p>  <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230913788_watermark.png" alt="image-20220516095701345"></p><p>蓝框的几个元素，可以使用一维数组来存储。但现在发现每个元素下还有下拉框，其内部还有元素，那就需要使用二维数组来存储：</p><p>  <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914608_watermark.png" alt="image-20220516095829526"></p><ul><li><p>使用说明</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914165_watermark.png" alt="1561524724397"></p></li></ul><blockquote><ul><li>对于二维数组的理解，可以看成是一维数组array1又作为另一个一维数组array2的元素而存在。</li><li>其实，从数组底层的运行机制来看，其实没有多维数组。</li></ul></blockquote><h3 id="5-2-声明与初始化"><a href="#5-2-声明与初始化" class="headerlink" title="5.2 声明与初始化"></a>5.2 声明与初始化</h3><h4 id="5-2-1-声明"><a href="#5-2-1-声明" class="headerlink" title="5.2.1 声明"></a>5.2.1 声明</h4><p>二维数组声明的语法格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//推荐</span><br>元素的数据类型[][] 二维数组的名称;<br><br><span class="hljs-comment">//不推荐</span><br>元素的数据类型  二维数组名[][];<br><span class="hljs-comment">//不推荐</span><br>元素的数据类型[]  二维数组名[];<br></code></pre></td></tr></table></figure><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test20TwoDimensionalArrayDefine</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//存储多组成绩</span><br>        <span class="hljs-type">int</span>[][] grades;<br><br>        <span class="hljs-comment">//存储多组姓名</span><br>        String[][] names;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>面试：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">int</span><span class="hljs-selector-attr">[]</span> <span class="hljs-selector-tag">x</span>, <span class="hljs-selector-tag">y</span><span class="hljs-selector-attr">[]</span>;<br><span class="hljs-comment">//x是一维数组，y是二维数组</span><br></code></pre></td></tr></table></figure><h4 id="5-2-2-静态初始化"><a href="#5-2-2-静态初始化" class="headerlink" title="5.2.2 静态初始化"></a>5.2.2 静态初始化</h4><p><strong>格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">3</span>,<span class="hljs-number">8</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">2</span>,<span class="hljs-number">7</span>&#125;,&#123;<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">6</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><p>定义一个名称为arr的二维数组，二维数组中有三个一维数组</p><ul><li>每一个一维数组中具体元素也都已初始化<ul><li>第一个一维数组 arr[0] &#x3D; {3,8,2};</li><li>第二个一维数组 arr[1] &#x3D; {2,7};</li><li>第三个一维数组 arr[2] &#x3D; {9,0,1,6};</li></ul></li><li>第三个一维数组的长度表示方式：arr[2].length;</li></ul><blockquote><ul><li>注意特殊写法情况：int[] x,y[]; x是一维数组，y是二维数组。</li></ul></blockquote><ul><li>举例1：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;&#125;;<span class="hljs-comment">//声明与初始化必须在一句完成</span><br><br><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;&#125;;<br><br><span class="hljs-type">int</span>[][] arr;<br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;&#125;;<br><br>arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;&#125;;<span class="hljs-comment">//错误，静态初始化右边new 数据类型[][]中不能写数字</span><br></code></pre></td></tr></table></figure><ul><li>举例2：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TwoDimensionalArrayInitialize</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//存储多组成绩</span><br>        <span class="hljs-type">int</span>[][] grades = &#123;<br>                    &#123;<span class="hljs-number">89</span>,<span class="hljs-number">75</span>,<span class="hljs-number">99</span>,<span class="hljs-number">100</span>&#125;,<br>                    &#123;<span class="hljs-number">88</span>,<span class="hljs-number">96</span>,<span class="hljs-number">78</span>,<span class="hljs-number">63</span>,<span class="hljs-number">100</span>,<span class="hljs-number">86</span>&#125;,<br>                    &#123;<span class="hljs-number">56</span>,<span class="hljs-number">63</span>,<span class="hljs-number">58</span>&#125;,<br>                    &#123;<span class="hljs-number">99</span>,<span class="hljs-number">66</span>,<span class="hljs-number">77</span>,<span class="hljs-number">88</span>&#125;<br>                &#125;;<br><br>        <span class="hljs-comment">//存储多组姓名</span><br>        String[][] names = &#123;<br>            &#123;<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;赵六&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;刘备&quot;</span>,<span class="hljs-string">&quot;关羽&quot;</span>,<span class="hljs-string">&quot;张飞&quot;</span>,<span class="hljs-string">&quot;诸葛亮&quot;</span>,<span class="hljs-string">&quot;赵云&quot;</span>,<span class="hljs-string">&quot;马超&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;曹丕&quot;</span>,<span class="hljs-string">&quot;曹植&quot;</span>,<span class="hljs-string">&quot;曹冲&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;孙权&quot;</span>,<span class="hljs-string">&quot;周瑜&quot;</span>,<span class="hljs-string">&quot;鲁肃&quot;</span>,<span class="hljs-string">&quot;黄盖&quot;</span>&#125;<br>        &#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5-2-3-动态初始化"><a href="#5-2-3-动态初始化" class="headerlink" title="5.2.3 动态初始化"></a>5.2.3 动态初始化</h4><p>如果二维数组的每一个数据，甚至是每一行的列数，需要后期单独确定，那么就只能使用动态初始化方式了。动态初始化方式分为两种格式：</p><p><strong>格式1：规则二维表：每一行的列数是相同的</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）确定行数和列数</span><br>元素的数据类型[][] 二维数组名 = <span class="hljs-keyword">new</span> 元素的数据类型[m][n];<br><span class="hljs-comment">//其中，m:表示这个二维数组有多少个一维数组。或者说一共二维表有几行</span><br><span class="hljs-comment">//其中，n:表示每一个一维数组的元素有多少个。或者说每一行共有一个单元格</span><br><br><span class="hljs-comment">//此时创建完数组，行数、列数确定，而且元素也都有默认值</span><br><br><span class="hljs-comment">//（2）再为元素赋新值</span><br>二维数组名[行下标][列下标] = 值;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br></code></pre></td></tr></table></figure><ul><li><p>定义了名称为arr的二维数组</p></li><li><p>二维数组中有3个一维数组</p></li><li><p>每一个一维数组中有2个元素</p></li><li><p>一维数组的名称分别为arr[0], arr[1], arr[2]</p></li><li><p>给第一个一维数组1脚标位赋值为78写法是：<code>arr[0][1] = 78;</code></p></li></ul><p><strong>格式2：不规则：每一行的列数不一样</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//（1）先确定总行数</span><br>元素的数据类型[][] 二维数组名 = <span class="hljs-keyword">new</span> 元素的数据类型[总行数][];<br><br><span class="hljs-comment">//此时只是确定了总行数，每一行里面现在是null</span><br><br><span class="hljs-comment">//（2）再确定每一行的列数，创建每一行的一维数组</span><br>二维数组名[行下标] = <span class="hljs-keyword">new</span> 元素的数据类型[该行的总列数];<br><br><span class="hljs-comment">//此时已经new完的行的元素就有默认值了，没有new的行还是null</span><br><br><span class="hljs-comment">//(3)再为元素赋值</span><br>二维数组名[行下标][列下标] = 值;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][];<br></code></pre></td></tr></table></figure><ul><li>二维数组中有3个一维数组。</li><li>每个一维数组都是默认初始化值null (注意：区别于格式1）</li><li>可以对这个三个一维数组分别进行初始化：arr[0] &#x3D; new int[3];    arr[1] &#x3D; new int[1];   arr[2] &#x3D; new int[2];</li><li>注：<code>int[][]arr = new int[][3]; </code> &#x2F;&#x2F;非法</li></ul><p>练习：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 1</span><br><span class="hljs-comment"> 2 2</span><br><span class="hljs-comment"> 3 3 3</span><br><span class="hljs-comment"> 4 4 4 4</span><br><span class="hljs-comment"> 5 5 5 5 5</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test25DifferentElementCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//1、声明一个二维数组，并且确定行数</span><br>        <span class="hljs-comment">//因为每一行的列数不同，这里无法直接确定列数</span><br>        <span class="hljs-type">int</span>[][]  arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>][];<br><br>        <span class="hljs-comment">//2、确定每一行的列数</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">arr[0] 的列数是1</span><br><span class="hljs-comment">arr[1] 的列数是2</span><br><span class="hljs-comment">arr[2] 的列数是3</span><br><span class="hljs-comment">arr[3] 的列数是4</span><br><span class="hljs-comment">arr[4] 的列数是5</span><br><span class="hljs-comment">*/</span><br>            arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i+<span class="hljs-number">1</span>];<br>        &#125;<br><br>        <span class="hljs-comment">//3、确定元素的值</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;arr[i].length; j++)&#123;<br>                arr[i][j] = i+<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//4、遍历显示</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;arr[i].length; j++)&#123;<br>                System.out.print(arr[i][j] + <span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-数组的长度和角标"><a href="#5-3-数组的长度和角标" class="headerlink" title="5.3 数组的长度和角标"></a>5.3 数组的长度和角标</h3><ul><li>二维数组的长度&#x2F;行数：二维数组名.length</li><li>二维数组的某一行：二维数组名[行下标]，此时相当于获取其中一组数据。它本质上是一个一维数组。行下标的范围：[0, 二维数组名.length-1]。此时把二维数组看成一维数组的话，元素是行对象。</li><li>某一行的列数：二维数组名[行下标].length，因为二维数组的每一行是一个一维数组。</li><li>某一个元素：二维数组名[行下标][列下标]，即先确定行&#x2F;组，再确定列。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test22TwoDimensionalArrayUse</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//存储3个小组的学员的成绩，分开存储，使用二维数组。</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">int[][] scores1;</span><br><span class="hljs-comment">int scores2[][];</span><br><span class="hljs-comment">int[] scores3[];*/</span><br><br>        <span class="hljs-type">int</span>[][] scores = &#123;<br>                &#123;<span class="hljs-number">85</span>,<span class="hljs-number">96</span>,<span class="hljs-number">85</span>,<span class="hljs-number">75</span>&#125;,<br>                &#123;<span class="hljs-number">99</span>,<span class="hljs-number">96</span>,<span class="hljs-number">74</span>,<span class="hljs-number">72</span>,<span class="hljs-number">75</span>&#125;,<br>                &#123;<span class="hljs-number">52</span>,<span class="hljs-number">42</span>,<span class="hljs-number">56</span>,<span class="hljs-number">75</span>&#125;<br>        &#125;;<br><br>        System.out.println(scores);<span class="hljs-comment">//[[I@15db9742</span><br>        System.out.println(<span class="hljs-string">&quot;一共有&quot;</span> + scores.length +<span class="hljs-string">&quot;组成绩.&quot;</span>);<br><br>        <span class="hljs-comment">//[[：代表二维数组，I代表元素类型是int</span><br>        System.out.println(scores[<span class="hljs-number">0</span>]);<span class="hljs-comment">//[I@6d06d69c</span><br>        <span class="hljs-comment">//[：代表一维数组，I代表元素类型是int</span><br>        System.out.println(scores[<span class="hljs-number">1</span>]);<span class="hljs-comment">//[I@7852e922</span><br>        System.out.println(scores[<span class="hljs-number">2</span>]);<span class="hljs-comment">//[I@4e25154f</span><br>        <span class="hljs-comment">//System.out.println(scores[3]);//ArrayIndexOutOfBoundsException: 3</span><br><br>        System.out.println(<span class="hljs-string">&quot;第1组有&quot;</span> + scores[<span class="hljs-number">0</span>].length +<span class="hljs-string">&quot;个学员.&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;第2组有&quot;</span> + scores[<span class="hljs-number">1</span>].length +<span class="hljs-string">&quot;个学员.&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;第3组有&quot;</span> + scores[<span class="hljs-number">2</span>].length +<span class="hljs-string">&quot;个学员.&quot;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;第1组的每一个学员成绩如下：&quot;</span>);<br>        <span class="hljs-comment">//第一行的元素</span><br>        System.out.println(scores[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<span class="hljs-comment">//85</span><br>        System.out.println(scores[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<span class="hljs-comment">//96</span><br>        System.out.println(scores[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>]);<span class="hljs-comment">//85</span><br>        System.out.println(scores[<span class="hljs-number">0</span>][<span class="hljs-number">3</span>]);<span class="hljs-comment">//75</span><br>        <span class="hljs-comment">//System.out.println(scores[0][4]);//java.lang.ArrayIndexOutOfBoundsException: 4</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-4-二维数组的遍历"><a href="#5-4-二维数组的遍历" class="headerlink" title="5.4 二维数组的遍历"></a>5.4 二维数组的遍历</h3><ul><li>格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;二维数组名.length; i++)&#123; <span class="hljs-comment">//二维数组对象.length</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;二维数组名[i].length; j++)&#123;<span class="hljs-comment">//二维数组行对象.length</span><br>        System.out.print(二维数组名[i][j]);<br>    &#125;<br>    System.out.println();<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>举例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test23TwoDimensionalArrayIterate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//存储3个小组的学员的成绩，分开存储，使用二维数组。</span><br>        <span class="hljs-type">int</span>[][] scores = &#123;<br>                &#123;<span class="hljs-number">85</span>,<span class="hljs-number">96</span>,<span class="hljs-number">85</span>,<span class="hljs-number">75</span>&#125;,<br>                &#123;<span class="hljs-number">99</span>,<span class="hljs-number">96</span>,<span class="hljs-number">74</span>,<span class="hljs-number">72</span>,<span class="hljs-number">75</span>&#125;,<br>                &#123;<span class="hljs-number">52</span>,<span class="hljs-number">42</span>,<span class="hljs-number">56</span>,<span class="hljs-number">75</span>&#125;<br>        &#125;;<br><br>        System.out.println(<span class="hljs-string">&quot;一共有&quot;</span> + scores.length +<span class="hljs-string">&quot;组成绩.&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; scores.length; i++) &#123;<br>            System.out.print(<span class="hljs-string">&quot;第&quot;</span> + (i+<span class="hljs-number">1</span>) +<span class="hljs-string">&quot;组有&quot;</span> + scores[i].length + <span class="hljs-string">&quot;个学员，成绩如下：&quot;</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; scores[i].length; j++) &#123;<br>                System.out.print(scores[i][j]+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-5-内存解析"><a href="#5-5-内存解析" class="headerlink" title="5.5 内存解析"></a>5.5 内存解析</h3><p>二维数组本质上是元素类型是一维数组的一维数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] arr = &#123;<br>    &#123;<span class="hljs-number">1</span>&#125;,<br>    &#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>&#125;,<br>    &#123;<span class="hljs-number">3</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>&#125;,<br>    &#123;<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>,<span class="hljs-number">4</span>&#125;,<br>    &#123;<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914775_watermark.png" alt="1562112672215"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、声明二维数组，并确定行数和列数</span><br><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>][<span class="hljs-number">5</span>];<br><br><span class="hljs-comment">//2、确定元素的值</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length; j++) &#123;<br>        arr[i][j] = i + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914424_watermark.png" alt="1562113179785"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1、声明一个二维数组，并且确定行数</span><br><span class="hljs-comment">//因为每一行的列数不同，这里无法直接确定列数</span><br><span class="hljs-type">int</span>[][]  arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">5</span>][];<br><br><span class="hljs-comment">//2、确定每一行的列数</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">arr[0] 的列数是1</span><br><span class="hljs-comment">arr[1] 的列数是2</span><br><span class="hljs-comment">arr[2] 的列数是3</span><br><span class="hljs-comment">arr[3] 的列数是4</span><br><span class="hljs-comment">arr[4] 的列数是5</span><br><span class="hljs-comment">*/</span><br>    arr[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i+<span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-comment">//3、确定元素的值</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;arr[i].length; j++)&#123;<br>        arr[i][j] = i+<span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914152_watermark.png" alt="1562113981079"></p><h3 id="5-6-应用举例"><a href="#5-6-应用举例" class="headerlink" title="5.6 应用举例"></a>5.6 应用举例</h3><p><strong>案例1：</strong>获取arr数组中所有元素的和。</p><p>提示：使用for的嵌套循环即可。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914693_watermark.png" alt="image-20220317005436209"></p><p><strong>案例2：</strong>声明：int[] x,y[]; 在给x,y变量赋值以后，以下选项允许通过编译的是： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">声明：<span class="hljs-type">int</span>[] x,y[]; 在给x,y变量赋值以后，以下选项允许通过编译的是：<br>a)    x[<span class="hljs-number">0</span>] = y;                 <span class="hljs-comment">//no</span><br>b)    y[<span class="hljs-number">0</span>] = x;                 <span class="hljs-comment">//yes</span><br>c)    y[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = x;              <span class="hljs-comment">//no</span><br>d)    x[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = y;              <span class="hljs-comment">//no</span><br>e)    y[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = x[<span class="hljs-number">0</span>];           <span class="hljs-comment">//yes</span><br>f)    x = y;                    <span class="hljs-comment">//no</span><br><br>提示：<br>一维数组：<span class="hljs-type">int</span>[] x  或者<span class="hljs-type">int</span> x[]   <br>二维数组：<span class="hljs-type">int</span>[][] y 或者  <span class="hljs-type">int</span>[] y[]  或者 <span class="hljs-type">int</span>  y[][]<br><br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>使用二维数组打印一个 10 行杨辉三角。</p><p>提示：</p><ol><li><p>第一行有 1 个元素, 第 n 行有 n 个元素</p></li><li><p>每一行的第一个元素和最后一个元素都是 1</p></li><li><p>从第三行开始, 对于非第一个元素和最后一个元素的元素。即：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">yanghui<span class="hljs-comment">[i]</span><span class="hljs-comment">[j]</span> = yanghui<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j-1]</span> + yanghui<span class="hljs-comment">[i-1]</span><span class="hljs-comment">[j]</span>;<br></code></pre></td></tr></table></figure></li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914841_watermark.png" alt="image-20220317005549522"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 10:11</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">YangHuiTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//1. 动态初始化的方式创建二维数组</span><br>        <span class="hljs-type">int</span>[][] yangHui = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">10</span>][];<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; yangHui.length; i++) &#123;<br>            yangHui[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[i + <span class="hljs-number">1</span>];<br><br>            <span class="hljs-comment">//2. 给数组元素赋值</span><br>            <span class="hljs-comment">// 2.1 给外层数组元素中的首元素和末元素赋值</span><br>            yangHui[i][<span class="hljs-number">0</span>] = yangHui[i][i] = <span class="hljs-number">1</span>;<br><br>            <span class="hljs-comment">//2.2 给外层数组元素中的非首元素和非末元素赋值（难）</span><br>            <span class="hljs-comment">//if(i &gt; 1)&#123; //从 i == 2 开始执行</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt; yangHui[i].length - <span class="hljs-number">1</span>;j++)&#123; <span class="hljs-comment">//非首元素和非末元素的角标范围</span><br>                    yangHui[i][j] = yangHui[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>] + yangHui[i-<span class="hljs-number">1</span>][j];<br><br>                &#125;<br>            <span class="hljs-comment">//&#125;</span><br>        &#125;<br><br><br><br>        <span class="hljs-comment">//3. 遍历二维数组</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; yangHui.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; yangHui[i].length; j++) &#123;<br>                System.out.print(yangHui[i][j] + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br><br>            System.out.println();<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-数组的常见算法"><a href="#6-数组的常见算法" class="headerlink" title="6. 数组的常见算法"></a>6. 数组的常见算法</h2><h3 id="6-1-数值型数组特征值统计"><a href="#6-1-数值型数组特征值统计" class="headerlink" title="6.1 数值型数组特征值统计"></a>6.1 数值型数组特征值统计</h3><ul><li>这里的特征值涉及到：平均值、最大值、最小值、总和等</li></ul><p><strong>举例1：</strong>数组统计：求总和、均值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayElementSum</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-comment">//求总和、均值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//因为0加上任何数都不影响结果</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            sum += arr[i];<br>        &#125;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">avg</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)sum/arr.length;<br><br>        System.out.println(<span class="hljs-string">&quot;sum = &quot;</span> + sum);<br>        System.out.println(<span class="hljs-string">&quot;avg = &quot;</span> + avg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例2：</strong>求数组元素的总乘积</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayElementMul</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br><br>        <span class="hljs-comment">//求总乘积</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<span class="hljs-comment">//因为1乘以任何数都不影响结果</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            result *= arr[i];<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例3：</strong>求数组元素中偶数的个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayElementEvenCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-comment">//统计偶数个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">evenCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i]%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>                evenCount++;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;evenCount = &quot;</span> + evenCount);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例4：</strong>求数组元素的最大值</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914883_watermark.png" alt="1574577970893"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayMax</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-comment">//找最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;arr.length; i++)&#123;<span class="hljs-comment">//此处i从1开始，是max不需要与arr[0]再比较一次了</span><br>            <span class="hljs-keyword">if</span>(arr[i] &gt; max)&#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;max = &quot;</span> + max);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例5：</strong>找最值及其第一次出现的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestMaxIndex</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-comment">//找最大值以及第一个最大值下标</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i] &gt; max)&#123;<br>                max = arr[i];<br>                index = i;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;max = &quot;</span> + max);<br>        System.out.println(<span class="hljs-string">&quot;index = &quot;</span> + index);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例6：</strong>找最值及其所有最值的下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test13AllMaxIndex</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-comment">//找最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i] &gt; max)&#123;<br>                max = arr[i];<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;最大值是：&quot;</span> + max);<br>        System.out.print(<span class="hljs-string">&quot;最大值的下标有：&quot;</span>);<br><br>        <span class="hljs-comment">//遍历数组，看哪些元素和最大值是一样的</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(max == arr[i])&#123;<br>                System.out.print(i+<span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>        &#125;<br>        System.out.println();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test13AllMaxIndex2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">9</span>,<span class="hljs-number">3</span>&#125;;<br>        <span class="hljs-comment">//找最大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> arr[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;0&quot;</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i] &gt; max)&#123;<br>                max = arr[i];<br>                index = i + <span class="hljs-string">&quot;&quot;</span>;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr[i] == max)&#123;<br>                index += <span class="hljs-string">&quot;,&quot;</span> + i;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;最大值是&quot;</span> + max);<br>        System.out.println(<span class="hljs-string">&quot;最大值的下标是[&quot;</span> + index+<span class="hljs-string">&quot;]&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例7(难)：</strong>输入一个整形数组，数组里有正数也有负数。数组中连续的一个或多个整数组成一个子数组，每个子数组都有一个和。求所有子数组的和的最大值。要求时间复杂度为O(n)。<br>例如：输入的数组为1, -2, 3, -10, -4, 7, 2, -5，和最大的子数组为3, 10, -4, 7, 2，因此输出为该子数组的和18。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test5</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">10</span>, -<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>, -<span class="hljs-number">5</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> getGreatestSum(arr);<br>System.out.println(i);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getGreatestSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] arr)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">greatestSum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(arr == <span class="hljs-literal">null</span> || arr.length == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> greatestSum;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>temp += arr[i];<br><br><span class="hljs-keyword">if</span>(temp &lt; <span class="hljs-number">0</span>)&#123;<br>temp = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(temp &gt; greatestSum)&#123;<br>greatestSum = temp;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(greatestSum == <span class="hljs-number">0</span>)&#123;<br>greatestSum = arr[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt; arr.length;i++)&#123;<br><span class="hljs-keyword">if</span>(greatestSum &lt; arr[i])&#123;<br>greatestSum = arr[i];<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> greatestSum;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例8：评委打分</strong></p><p>分析以下需求，并用代码实现：</p><p>（1）在编程竞赛中，有10位评委为参赛的选手打分，分数分别为：5，4，6，8，9，0，1，2，7，3</p><p>（2）求选手的最后得分（去掉一个最高分和一个最低分后其余8位评委打分的平均值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 10:03</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayExer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] scores = &#123;<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">7</span>,<span class="hljs-number">3</span>&#125;;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> scores[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> scores[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; scores.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(max &lt; scores[i])&#123;<br>                max = scores[i];<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(min &gt; scores[i])&#123;<br>                min = scores[i];<br>            &#125;<br><br>            sum += scores[i];<br>        &#125;<br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">avg</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)(sum - max - min) / (scores.length - <span class="hljs-number">2</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;选手去掉最高分和最低分之后的平均分为：&quot;</span> + avg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-数组元素的赋值与数组复制"><a href="#6-2-数组元素的赋值与数组复制" class="headerlink" title="6.2 数组元素的赋值与数组复制"></a>6.2 数组元素的赋值与数组复制</h3><p><strong>举例1：</strong>杨辉三角（见二维数组课后案例）</p><p><strong>举例2：</strong>使用简单数组</p><p>(1)创建一个名为ArrayTest的类，在main()方法中声明array1和array2两个变量，他们是int[]类型的数组。</p><p>(2)使用大括号{}，把array1初始化为8个素数：2,3,5,7,11,13,17,19。</p><p>(3)显示array1的内容。</p><p>(4)赋值array2变量等于array1，修改array2中的偶索引元素，使其等于索引值(如array[0]&#x3D;0,array[2]&#x3D;2)。打印出array1。 array2 &#x3D; array1;</p><p><strong>思考：</strong>array1和array2是什么关系？</p><p><strong>拓展：</strong>修改题目，实现array2对array1数组的复制</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914804_watermark.png" alt="image-20230613093213820" style="zoom:50%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914157_watermark.png" alt="image-20230613093256869" style="zoom:50%;" /><p><strong>举例3：</strong>一个数组，让数组的每个元素去除第一个元素，得到的商作为被除数所在位置的新值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">12</span>,<span class="hljs-number">43</span>,<span class="hljs-number">65</span>,<span class="hljs-number">3</span>,-<span class="hljs-number">8</span>,<span class="hljs-number">64</span>,<span class="hljs-number">2</span>&#125;;<br><br><span class="hljs-comment">//for(int i = 0;i &lt; arr.length;i++)&#123;</span><br><span class="hljs-comment">//arr[i] = arr[i] / arr[0];</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> arr.length -<span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i--)&#123;<br>arr[i] = arr[i] / arr[<span class="hljs-number">0</span>];<br>&#125;<br><span class="hljs-comment">//遍历arr</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>System.out.print(arr[i] + <span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>举例4：</strong>创建一个长度为6的int型数组，要求数组元素的值都在1-30之间，且是随机赋值。同时，要求元素的值各不相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test4</span> &#123;<br><span class="hljs-comment">// 5-67 Math.random() * 63 + 5;</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">6</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<span class="hljs-comment">// [0,1) [0,30) [1,31)</span><br>arr[i] = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">30</span>) + <span class="hljs-number">1</span>;<br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[i] == arr[j]) &#123;<br>flag = <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (flag) &#123;<br>arr[i] = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">30</span>) + <span class="hljs-number">1</span>;<br>flag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>System.out.println(arr[i]);<br>&#125;<br>&#125;<br><span class="hljs-comment">//更优的方法</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">6</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<span class="hljs-comment">// [0,1) [0,30) [1,31)</span><br>arr[i] = (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">30</span>) + <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br><span class="hljs-keyword">if</span> (arr[i] == arr[j]) &#123;<br>i--;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>System.out.println(arr[i]);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>举例5：</strong>扑克牌</p><p>案例：遍历扑克牌</p><p>遍历扑克牌，效果如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914545_watermark.png" alt="pk" style="zoom:67%;" /><p>提示：使用两个字符串数组，分别保存花色和点数，再用一个字符串数组保存最后的扑克牌。 String[] hua &#x3D; {“黑桃”,”红桃”,”梅花”,”方片”}; String[] dian &#x3D; {“A”,”2”,”3”,”4”,”5”,”6”,”7”,”8”,”9”,”10”,”J”,”Q”,”K”};</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu3.common_algorithm.exer5;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrayExer05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        String[] hua = &#123;<span class="hljs-string">&quot;黑桃&quot;</span>,<span class="hljs-string">&quot;红桃&quot;</span>,<span class="hljs-string">&quot;梅花&quot;</span>,<span class="hljs-string">&quot;方片&quot;</span>&#125;;<br>        String[] dian = &#123;<span class="hljs-string">&quot;A&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>,<span class="hljs-string">&quot;3&quot;</span>,<span class="hljs-string">&quot;4&quot;</span>,<span class="hljs-string">&quot;5&quot;</span>,<span class="hljs-string">&quot;6&quot;</span>,<span class="hljs-string">&quot;7&quot;</span>,<span class="hljs-string">&quot;8&quot;</span>,<span class="hljs-string">&quot;9&quot;</span>,<span class="hljs-string">&quot;10&quot;</span>,<span class="hljs-string">&quot;J&quot;</span>,<span class="hljs-string">&quot;Q&quot;</span>,<span class="hljs-string">&quot;K&quot;</span>&#125;;<br><br><br>        String[] pai = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[hua.length * dian.length];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; hua.length;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j &lt; dian.length;j++)&#123;<br>                pai[k++] = hua[i] + dian[j];<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pai.length; i++) &#123;<br>            System.out.print(pai[i] + <span class="hljs-string">&quot;  &quot;</span>);<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">13</span> == <span class="hljs-number">12</span>)&#123;<br>                System.out.println();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>拓展：在上述基础上，增加大王、小王。</p><p><strong>举例6：</strong>回形数</p><p>从键盘输入一个整数（1~20） ，则以该数字为矩阵的大小，把1,2,3…n*n 的数字按照顺时针螺旋的形式填入其中。</p><p>例如： 输入数字2，则程序输出： 1 2 4 3 </p><p>输入数字3，则程序输出： 1 2 3 8 9 4 7 6 5 输入数字4， 则程序输出： 1 2 3 4 12 13 14 5 11 16 15 6 10 9 8 7</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RectangleTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>System.out.println(<span class="hljs-string">&quot;输入一个数字&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len][len];<br><br><span class="hljs-type">int</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> len * len;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * k = 1:向右</span><br><span class="hljs-comment"> * k = 2:向下</span><br><span class="hljs-comment"> * k = 3:向左</span><br><span class="hljs-comment"> * k = 4:向上</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,j = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;m &lt;= s;m++)&#123;<br><span class="hljs-keyword">if</span>(k == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(j &lt; len &amp;&amp; arr[i][j] == <span class="hljs-number">0</span>)&#123;<br>arr[i][j++] = m;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>k = <span class="hljs-number">2</span>;<br>i++;  <br>j--;<br>m--;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k == <span class="hljs-number">2</span>)&#123;<br><span class="hljs-keyword">if</span>(i &lt; len &amp;&amp; arr[i][j] == <span class="hljs-number">0</span>)&#123;<br>arr[i++][j] = m;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>k = <span class="hljs-number">3</span>;<br>i--;<br>j--;<br>m--;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k == <span class="hljs-number">3</span>)&#123;<br><span class="hljs-keyword">if</span>(j &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[i][j] == <span class="hljs-number">0</span>)&#123;<br>arr[i][j--] = m;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>k = <span class="hljs-number">4</span>;<br>i--;<br>j++;<br>m--;<br>&#125;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(k == <span class="hljs-number">4</span>)&#123;<br><span class="hljs-keyword">if</span>(i &gt;= <span class="hljs-number">0</span> &amp;&amp; arr[i][j] == <span class="hljs-number">0</span>)&#123;<br>arr[i--][j] = m;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>k = <span class="hljs-number">1</span>;<br>i++;<br>j++;<br>m--;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//遍历</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;m &lt; arr.length;m++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;n &lt; arr[m].length;n++)&#123;<br>System.out.print(arr[m][n] + <span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//方式2</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">01 02 03 04 05 06 07 </span><br><span class="hljs-comment">24 25 26 27 28 29 08 </span><br><span class="hljs-comment">23 40 41 42 43 30 09 </span><br><span class="hljs-comment">22 39 48 49 44 31 10 </span><br><span class="hljs-comment">21 38 47 46 45 32 11 </span><br><span class="hljs-comment">20 37 36 35 34 33 12 </span><br><span class="hljs-comment">19 18 17 16 15 14 13 </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RectangleTest1</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">7</span>;<br><span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n][n];<br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//要显示的数据</span><br><span class="hljs-type">int</span> <span class="hljs-variable">maxX</span> <span class="hljs-operator">=</span> n-<span class="hljs-number">1</span>; <span class="hljs-comment">//x轴的最大下标</span><br><span class="hljs-type">int</span> <span class="hljs-variable">maxY</span> <span class="hljs-operator">=</span> n-<span class="hljs-number">1</span>; <span class="hljs-comment">//Y轴的最大下标</span><br><span class="hljs-type">int</span> <span class="hljs-variable">minX</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//x轴的最小下标</span><br><span class="hljs-type">int</span> <span class="hljs-variable">minY</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//Y轴的最小下标</span><br><span class="hljs-keyword">while</span>(minX&lt;=maxX) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=minX;x&lt;=maxX;x++) &#123;<br>arr[minY][x] = ++count;<br>&#125;<br>minY++;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> y=minY;y&lt;=maxY;y++) &#123;<br>arr[y][maxX] = ++count;<br>&#125;<br>maxX--;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> x=maxX;x&gt;=minX;x--) &#123;<br>arr[maxY][x] = ++count;<br>&#125;<br>maxY--;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> y=maxY;y&gt;=minY;y--) &#123;<br>arr[y][minX] = ++count;<br>&#125;<br>minX++;<br>&#125;<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;arr.length;i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;arr.length;j++) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">space</span> <span class="hljs-operator">=</span> (arr[i][j]+<span class="hljs-string">&quot;&quot;</span>).length()==<span class="hljs-number">1</span> ? <span class="hljs-string">&quot;0&quot;</span>:<span class="hljs-string">&quot;&quot;</span>;<br>System.out.print(space+arr[i][j]+<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-3-数组元素的反转"><a href="#6-3-数组元素的反转" class="headerlink" title="6.3 数组元素的反转"></a>6.3 数组元素的反转</h3><p><strong>实现思想：</strong>数组对称位置的元素互换。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914986_watermark.png" alt="image-20230613093708530" style="zoom: 50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayReverse1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;反转之前：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><br>        <span class="hljs-comment">//反转</span><br>         <span class="hljs-comment">/*</span><br><span class="hljs-comment">        思路：首尾对应位置的元素交换</span><br><span class="hljs-comment">        （1）确定交换几次</span><br><span class="hljs-comment">           次数 = 数组.length / 2</span><br><span class="hljs-comment">        （2）谁和谁交换</span><br><span class="hljs-comment">        for(int i=0; i&lt;次数; i++)&#123;</span><br><span class="hljs-comment">             int temp = arr[i];</span><br><span class="hljs-comment">             arr[i] = arr[arr.length-1-i];</span><br><span class="hljs-comment">             arr[arr.length-1-i] = temp;</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length/<span class="hljs-number">2</span>; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[i];<br>            arr[i] = arr[arr.length-<span class="hljs-number">1</span>-i];<br>            arr[arr.length-<span class="hljs-number">1</span>-i] = temp;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;反转之后：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>或</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914731_watermark.png" alt="image-20230613093753449" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayReverse2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;反转之前：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br><br>        <span class="hljs-comment">//反转</span><br>        <span class="hljs-comment">//左右对称位置交换</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> left=<span class="hljs-number">0</span>,right=arr.length-<span class="hljs-number">1</span>; left&lt;right; left++,right--)&#123;<br>            <span class="hljs-comment">//首  与  尾交换</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[left];<br>            arr[left] = arr[right];<br>            arr[right] = temp;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;反转之后：&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-4-数组的扩容与缩容"><a href="#6-4-数组的扩容与缩容" class="headerlink" title="6.4 数组的扩容与缩容"></a>6.4 数组的扩容与缩容</h3><p><strong>数组的扩容</strong></p><p>题目：现有数组 int[] arr &#x3D; new int[]{1,2,3,4,5}; ，现将数组长度扩容1倍，并将10,20,30三个数据添加到arr数组中，如何操作？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        <span class="hljs-type">int</span>[] newArr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length &lt;&lt; <span class="hljs-number">1</span>];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>            newArr[i] = arr[i];<br>        &#125;<br><br>        newArr[arr.length] = <span class="hljs-number">10</span>;<br>        newArr[arr.length + <span class="hljs-number">1</span>] = <span class="hljs-number">20</span>;<br>        newArr[arr.length + <span class="hljs-number">2</span>] = <span class="hljs-number">30</span>;<br><br>        arr = newArr;<br><br>        <span class="hljs-comment">//遍历arr</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>数组的缩容</strong></p><p>题目：现有数组 int[] arr&#x3D;{1,2,3,4,5,6,7}。现需删除数组中索引为4的元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArrTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>&#125;;<br>        <span class="hljs-comment">//删除数组中索引为4的元素</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">delIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br>        <span class="hljs-comment">//方案1：</span><br>        <span class="hljs-comment">/*//创建新数组</span><br><span class="hljs-comment">        int[] newArr = new int[arr.length - 1];</span><br><span class="hljs-comment">        for (int i = 0; i &lt; delIndex; i++) &#123;</span><br><span class="hljs-comment">            newArr[i] = arr[i];</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        for (int i = delIndex + 1; i &lt; arr.length; i++) &#123;</span><br><span class="hljs-comment">            newArr[i - 1] = arr[i];</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        arr = newArr;</span><br><span class="hljs-comment">        for (int i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="hljs-comment">            System.out.println(arr[i]);</span><br><span class="hljs-comment">        &#125;*/</span><br>        <span class="hljs-comment">//方案2：</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> delIndex; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            arr[i] = arr[i + <span class="hljs-number">1</span>];<br>        &#125;<br>        arr[arr.length - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.println(arr[i]);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="6-5-数组的元素查找"><a href="#6-5-数组的元素查找" class="headerlink" title="6.5 数组的元素查找"></a>6.5 数组的元素查找</h3><p><strong>1、顺序查找</strong></p><p>顺序查找：挨个查看</p><p>要求：对数组元素的顺序没要求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayOrderSearch</span> &#123;<br>    <span class="hljs-comment">//查找value第一次在数组中出现的index</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>,<span class="hljs-number">9</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(arr[i] == value)&#123;<br>                index = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(index==-<span class="hljs-number">1</span>)&#123;<br>            System.out.println(value + <span class="hljs-string">&quot;不存在&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(value + <span class="hljs-string">&quot;的下标是&quot;</span> + index);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2、二分查找</strong></p><p>举例：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914669_watermark.png" alt="image-20230613094130589" style="zoom:50%;" /><p>实现步骤：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914746_watermark.png" alt="image-20230613094151435" style="zoom:50%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//二分法查找：要求此数组必须是有序的。</span><br><span class="hljs-type">int</span>[] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">99</span>,-<span class="hljs-number">54</span>,-<span class="hljs-number">2</span>,<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">33</span>,<span class="hljs-number">43</span>,<span class="hljs-number">256</span>,<span class="hljs-number">999</span>&#125;;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">256</span>;<br><span class="hljs-comment">//int value = 25;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">head</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//首索引位置</span><br><span class="hljs-type">int</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> arr3.length - <span class="hljs-number">1</span>;<span class="hljs-comment">//尾索引位置</span><br><span class="hljs-keyword">while</span>(head &lt;= end)&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">middle</span> <span class="hljs-operator">=</span> (head + end) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">if</span>(arr3[middle] == value)&#123;<br>        System.out.println(<span class="hljs-string">&quot;找到指定的元素，索引为：&quot;</span> + middle);<br>        isFlag = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(arr3[middle] &gt; value)&#123;<br>        end = middle - <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//arr3[middle] &lt; value</span><br>        head = middle + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(isFlag)&#123;<br>    System.out.println(<span class="hljs-string">&quot;未找打指定的元素&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-6-数组元素排序"><a href="#6-6-数组元素排序" class="headerlink" title="6.6 数组元素排序"></a>6.6 数组元素排序</h3><h4 id="6-6-1-算法概述"><a href="#6-6-1-算法概述" class="headerlink" title="6.6.1 算法概述"></a>6.6.1 算法概述</h4><ul><li><p><strong>定义</strong></p><ul><li><p>排序：假设含有n个记录的序列为{R1，R2，…,Rn},其相应的关键字序列为{K1，K2，…,Kn}。将这些记录重新排序为{Ri1,Ri2,…,Rin},使得相应的关键字值满足条Ki1&lt;&#x3D;Ki2&lt;&#x3D;…&lt;&#x3D;Kin,这样的一种操作称为排序。</p></li><li><p>​通常来说，排序的目的是快速查找。</p></li></ul></li><li><p><strong>衡量排序算法的优劣：</strong></p><ul><li><p>时间复杂度：分析关键字的比较次数和记录的移动次数</p></li><li><p>常见的算法时间复杂度由小到大依次为：Ο(1)＜Ο(log2n)＜Ο(n)＜Ο(nlog2n)＜Ο(n2)＜Ο(n3)＜…＜Ο(2n)＜Ο(n!)&lt;O(nn)</p></li><li><p>空间复杂度：分析排序算法中需要多少辅助内存</p><p>一个算法的空间复杂度S(n)定义为该算法所耗费的存储空间，它也是问题规模n的函数。</p></li><li><p>稳定性：若两个记录A和B的关键字值相等，但排序后A、B的先后次序保持不变，则称这种排序算法是稳定的。</p></li></ul></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914394_watermark.png" alt="image-20230613094421576" style="zoom:50%;" /><h4 id="6-6-2-排序算法概述"><a href="#6-6-2-排序算法概述" class="headerlink" title="6.6.2 排序算法概述"></a>6.6.2 排序算法概述</h4><ul><li><strong>排序算法分类：内部排序和外部排序</strong><ul><li>内部排序：整个排序过程不需要借助于外部存储器（如磁盘等），所有排序操作都在内存中完成。</li><li>外部排序：参与排序的数据非常多，数据量非常大，计算机无法把整个排序过程放在内存中完成，必须借助于外部存储器（如磁盘）。外部排序最常见的是多路归并排序。可以认为外部排序是由多次内部排序组成。</li></ul></li><li><strong>十大内部排序算法</strong></li></ul><p> 数组的排序算法很多，实现方式各不相同，时间复杂度、空间复杂度、稳定性也各不相同：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914475_watermark.png" alt="image-20211222111142684"></p><p>常见时间复杂度所消耗的时间从小到大排序：</p><p><strong>O(1) &lt; O(logn) &lt; O(n) &lt; O(nlogn) &lt; O(n^2) &lt; O(n^3) &lt; O(2^n) &lt; O(n!) &lt; O(n^n)</strong></p><p>注意，经常将以2为底n的对数简写成logn。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914468_watermark.png" alt="image-20220824003440106"></p><h4 id="6-6-3-冒泡排序（Bubble-Sort）"><a href="#6-6-3-冒泡排序（Bubble-Sort）" class="headerlink" title="6.6.3 冒泡排序（Bubble Sort）"></a>6.6.3 冒泡排序（Bubble Sort）</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914410_watermark.png" alt="image-20220516094637228" style="zoom:67%;" /><p><strong>排序思想：</strong></p><ol><li><p>比较相邻的元素。如果第一个比第二个大（升序），就交换他们两个。</p></li><li><p>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</p></li><li><p>针对所有的元素重复以上的步骤，除了最后一个。</p></li><li><p>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较为止。</p></li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914191_watermark.png" alt="BubbleSort"></p><p><strong>动态演示：</strong><a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1、冒泡排序（最经典）</span><br><span class="hljs-comment">思想：每一次比较“相邻（位置相邻）”元素，如果它们不符合目标顺序（例如：从小到大），</span><br><span class="hljs-comment">     就交换它们，经过多轮比较，最终实现排序。</span><br><span class="hljs-comment"> （例如：从小到大） 每一轮可以把最大的沉底，或最小的冒顶。</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">过程：arr&#123;6,9,2,9,1&#125;  目标：从小到大</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">第一轮：</span><br><span class="hljs-comment">第1次，arr[0]与arr[1]，6&gt;9不成立，满足目标要求，不交换</span><br><span class="hljs-comment">第2次，arr[1]与arr[2]，9&gt;2成立，不满足目标要求，交换arr[1]与arr[2] &#123;6,2,9,9,1&#125;</span><br><span class="hljs-comment">第3次，arr[2]与arr[3]，9&gt;9不成立，满足目标要求，不交换</span><br><span class="hljs-comment">第4次，arr[3]与arr[4]，9&gt;1成立，不满足目标要求，交换arr[3]与arr[4] &#123;6,2,9,1,9&#125;</span><br><span class="hljs-comment">第一轮所有元素&#123;6,9,2,9,1&#125;已经都参与了比较，结束。</span><br><span class="hljs-comment">第一轮的结果：第“一”最大值9沉底（本次是后面的9沉底），即到&#123;6,2,9,1,9&#125;元素的最右边</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">第二轮：</span><br><span class="hljs-comment">第1次，arr[0]与arr[1]，6&gt;2成立，不满足目标要求，交换arr[0]与arr[1] &#123;2,6,9,1,9&#125;</span><br><span class="hljs-comment">第2次，arr[1]与arr[2]，6&gt;9不成立，满足目标要求，不交换</span><br><span class="hljs-comment">第3次：arr[2]与arr[3]，9&gt;1成立，不满足目标要求，交换arr[2]与arr[3] &#123;2,6,1,9,9&#125;</span><br><span class="hljs-comment">第二轮未排序的所有元素 &#123;6,2,9,1&#125;已经都参与了比较，结束。</span><br><span class="hljs-comment">第二轮的结果：第“二”最大值9沉底（本次是前面的9沉底），即到&#123;2,6,1,9&#125;元素的最右边</span><br><span class="hljs-comment">第三轮：</span><br><span class="hljs-comment">第1次，arr[0]与arr[1]，2&gt;6不成立，满足目标要求，不交换</span><br><span class="hljs-comment">第2次，arr[1]与arr[2]，6&gt;1成立，不满足目标要求，交换arr[1]与arr[2] &#123;2,1,6,9,9&#125;</span><br><span class="hljs-comment">第三轮未排序的所有元素&#123;2,6,1&#125;已经都参与了比较，结束。</span><br><span class="hljs-comment">第三轮的结果：第三最大值6沉底，即到 &#123;2,1,6&#125;元素的最右边</span><br><span class="hljs-comment">第四轮：</span><br><span class="hljs-comment">第1次，arr[0]与arr[1]，2&gt;1成立，不满足目标要求，交换arr[0]与arr[1] &#123;1,2,6,9,9&#125;</span><br><span class="hljs-comment">第四轮未排序的所有元素&#123;2,1&#125;已经都参与了比较，结束。</span><br><span class="hljs-comment">第四轮的结果：第四最大值2沉底，即到&#123;1,2&#125;元素的最右边</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test19BubbleSort</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>,<span class="hljs-number">1</span>&#125;;<br><br>        <span class="hljs-comment">//目标：从小到大</span><br>        <span class="hljs-comment">//冒泡排序的轮数 = 元素的总个数 - 1</span><br>        <span class="hljs-comment">//轮数是多轮，每一轮比较的次数是多次，需要用到双重循环，即循环嵌套</span><br>        <span class="hljs-comment">//外循环控制 轮数，内循环控制每一轮的比较次数和过程</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;arr.length; i++)&#123; <span class="hljs-comment">//循环次数是arr.length-1次/轮</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">假设arr.length=5</span><br><span class="hljs-comment">i=1,第1轮，比较4次</span><br><span class="hljs-comment">arr[0]与arr[1]</span><br><span class="hljs-comment">arr[1]与arr[2]</span><br><span class="hljs-comment">arr[2]与arr[3]</span><br><span class="hljs-comment">arr[3]与arr[4]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">arr[j]与arr[j+1]，int j=0;j&lt;4; j++</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">i=2,第2轮，比较3次</span><br><span class="hljs-comment">arr[0]与arr[1]</span><br><span class="hljs-comment">arr[1]与arr[2]</span><br><span class="hljs-comment">arr[2]与arr[3]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">arr[j]与arr[j+1]，int j=0;j&lt;3; j++</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">i=3,第3轮，比较2次</span><br><span class="hljs-comment">arr[0]与arr[1]</span><br><span class="hljs-comment">arr[1]与arr[2]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">arr[j]与arr[j+1]，int j=0;j&lt;2; j++</span><br><span class="hljs-comment">i=4,第4轮，比较1次</span><br><span class="hljs-comment">arr[0]与arr[1]</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">arr[j]与arr[j+1]，int j=0;j&lt;1; j++</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">int j=0; j&lt;arr.length-i; j++</span><br><span class="hljs-comment">*/</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>; j&lt;arr.length-i; j++)&#123;<br>                <span class="hljs-comment">//希望的是arr[j] &lt; arr[j+1]</span><br>                <span class="hljs-keyword">if</span>(arr[j] &gt; arr[j+<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-comment">//交换arr[j]与arr[j+1]</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                    arr[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//完成排序，遍历结果</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;arr.length; i++)&#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot;  &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>冒泡排序优化（选讲）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">思考：冒泡排序是否可以优化</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test19BubbleSort2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;;<br><br>        <span class="hljs-comment">//从小到大排序</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//假设数组已经是有序的</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; arr.length - <span class="hljs-number">1</span> - i; j++) &#123;<br>                <span class="hljs-comment">//希望的是arr[j] &lt; arr[j+1]</span><br>                <span class="hljs-keyword">if</span> (arr[j] &gt; arr[j + <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-comment">//交换arr[j]与arr[j+1]</span><br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j + <span class="hljs-number">1</span>];<br>                    arr[j + <span class="hljs-number">1</span>] = temp;<br><br>                    flag = <span class="hljs-literal">false</span>;<span class="hljs-comment">//如果元素发生了交换，那么说明数组还没有排好序</span><br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//完成排序，遍历结果</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            System.out.print(arr[i] + <span class="hljs-string">&quot;  &quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="6-6-4-快速排序"><a href="#6-6-4-快速排序" class="headerlink" title="6.6.4 快速排序"></a>6.6.4 快速排序</h4><p>快速排序（Quick Sort）由<code>图灵奖</code>获得者<code>Tony Hoare</code>发明，被列为<code>20世纪十大算法之一</code>，是迄今为止所有内排序算法中速度最快的一种，快速排序的时间复杂度为O(nlog(n))。</p><p>快速排序通常明显比同为O(nlogn)的其他算法更快，因此常被采用，而且快排采用了分治法的思想，所以在很多笔试面试中能经常看到快排的影子。</p><p>排序思想：</p><ol><li><p>从数列中挑出一个元素，称为”基准”（pivot），</p></li><li><p>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</p></li><li><p>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p></li><li><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p></li></ol><p><strong>动态演示：</strong><a href="https://visualgo.net/zh/sorting">https://visualgo.net/zh/sorting</a></p><p>图示1：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914768_watermark.png" alt="image-20220317235922776"></p><p>图示2：</p><p>第一轮操作：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914583_watermark.png" alt="image-20221117205612230"></p><p>第二轮操作：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914352_watermark.png" alt="image-20221117205719427"></p><h4 id="6-6-5-内部排序性能比较与选择"><a href="#6-6-5-内部排序性能比较与选择" class="headerlink" title="6.6.5 内部排序性能比较与选择"></a>6.6.5 内部排序性能比较与选择</h4><ul><li><p>性能比较</p><ul><li><strong>从平均时间而言</strong>：快速排序最佳。但在最坏情况下时间性能不如堆排序和归并排序。</li><li><strong>从算法简单性看</strong>：由于直接选择排序、直接插入排序和冒泡排序的算法比较简单，将其认为是简单算法。对于Shell排序、堆排序、快速排序和归并排序算法，其算法比较复杂，认为是复杂排序。</li><li><strong>从稳定性看</strong>：直接插入排序、冒泡排序和归并排序时稳定的；而直接选择排序、快速排序、 Shell排序和堆排序是不稳定排序</li><li><strong>从待排序的记录数n的大小看</strong>，n较小时，宜采用简单排序；而n较大时宜采用改进排序。</li></ul></li><li><p>选择</p><ul><li>若n较小(如n≤50)，可采用直接插入或直接选择排序。<br>当记录规模较小时，直接插入排序较好；否则因为直接选择移动的记录数少于直接插入，应选直接选择排序为宜。</li><li>若文件初始状态基本有序(指正序)，则应选用直接插入、冒泡或随机的快速排序为宜；</li><li>若n较大，则应采用时间复杂度为O(nlgn)的排序方法：快速排序、堆排序或归并排序。</li></ul></li></ul><h2 id="7-Arrays工具类的使用"><a href="#7-Arrays工具类的使用" class="headerlink" title="7. Arrays工具类的使用"></a>7. Arrays工具类的使用</h2><p>java.util.Arrays类即为操作数组的工具类，包含了用来操作数组（比如排序和搜索）的各种方法。 比如：</p><ul><li><code>数组元素拼接</code><ul><li>static String toString(int[] a) ：字符串表示形式由数组的元素列表组成，括在方括号（”[]”）中。相邻元素用字符 “, “（逗号加空格）分隔。形式为：[元素1，元素2，元素3。。。]</li><li>static String toString(Object[] a) ：字符串表示形式由数组的元素列表组成，括在方括号（”[]”）中。相邻元素用字符 “, “（逗号加空格）分隔。元素将自动调用自己从Object继承的toString方法将对象转为字符串进行拼接，如果没有重写，则返回类型@hash值，如果重写则按重写返回的字符串进行拼接。</li></ul></li><li><code>数组排序</code><ul><li>static void sort(int[] a) ：将a数组按照从小到大进行排序</li><li>static void sort(int[] a, int fromIndex, int toIndex) ：将a数组的[fromIndex, toIndex)部分按照升序排列</li><li>static void sort(Object[] a) ：根据元素的自然顺序对指定对象数组按升序进行排序。</li><li>static <T> void sort(T[] a, Comparator&lt;? super T&gt; c) ：根据指定比较器产生的顺序对指定对象数组进行排序。</li></ul></li><li><code>数组元素的二分查找</code><ul><li>static int binarySearch(int[] a, int key)  、static int binarySearch(Object[] a, Object key) ：要求数组有序，在数组中查找key是否存在，如果存在返回第一次找到的下标，不存在返回负数。</li></ul></li><li><code>数组的复制</code><ul><li>static int[] copyOf(int[] original, int newLength)  ：根据original原数组复制一个长度为newLength的新数组，并返回新数组</li><li>static <T> T[] copyOf(T[] original,int newLength)：根据original原数组复制一个长度为newLength的新数组，并返回新数组</li><li>static int[] copyOfRange(int[] original, int from, int to) ：复制original原数组的[from,to)构成新数组，并返回新数组</li><li>static <T> T[] copyOfRange(T[] original,int from,int to)：复制original原数组的[from,to)构成新数组，并返回新数组</li></ul></li><li><code>比较两个数组是否相等</code><ul><li>static boolean equals(int[] a, int[] a2) ：比较两个数组的长度、元素是否完全相同</li><li>static boolean equals(Object[] a,Object[] a2)：比较两个数组的长度、元素是否完全相同</li></ul></li><li><code>填充数组</code><ul><li>static void fill(int[] a, int val) ：用val值填充整个a数组</li><li>static void fill(Object[] a,Object val)：用val对象填充整个a数组</li><li>static void fill(int[] a, int fromIndex, int toIndex, int val)：将a数组[fromIndex,toIndex)部分填充为val值</li><li>static void fill(Object[] a, int fromIndex, int toIndex, Object val) ：将a数组[fromIndex,toIndex)部分填充为val对象</li></ul></li></ul><p>举例：java.util.Arrays类的sort()方法提供了数组元素排序功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SortTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>&#125;;<br>        System.out.println(<span class="hljs-string">&quot;排序前&quot;</span> + Arrays.toString(arr));<br>        Arrays.sort(arr);<br>        System.out.println(<span class="hljs-string">&quot;排序后&quot;</span> + Arrays.toString(arr));<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="8-数组中的常见异常"><a href="#8-数组中的常见异常" class="headerlink" title="8. 数组中的常见异常"></a>8. 数组中的常见异常</h2><h3 id="8-1-数组角标越界异常"><a href="#8-1-数组角标越界异常" class="headerlink" title="8.1 数组角标越界异常"></a>8.1 数组角标越界异常</h3><p>当访问数组元素时，下标指定超出[0, 数组名.length-1]的范围时，就会报数组下标越界异常：ArrayIndexOutOfBoundsException。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestArrayIndexOutOfBoundsException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>       <span class="hljs-comment">// System.out.println(&quot;最后一个元素：&quot; + arr[3]);//错误，下标越界</span><br>      <span class="hljs-comment">//  System.out.println(&quot;最后一个元素：&quot; + arr[arr.length]);//错误，下标越界</span><br>        System.out.println(<span class="hljs-string">&quot;最后一个元素：&quot;</span> + arr[arr.length-<span class="hljs-number">1</span>]);<span class="hljs-comment">//对</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>创建数组，赋值3个元素，数组的索引就是0，1，2，没有3索引，因此我们不能访问数组中不存在的索引，程序运行后，将会抛出 <code>ArrayIndexOutOfBoundsException</code>  数组越界异常。在开发中，数组的越界异常是<strong>不能出现</strong>的，一旦出现了，就必须要修改我们编写的代码。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914961_watermark.jpeg"></p><h3 id="8-2-空指针异常"><a href="#8-2-空指针异常" class="headerlink" title="8.2 空指针异常"></a>8.2 空指针异常</h3><p>观察一下代码，运行后会出现什么结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestNullPointerException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义数组</span><br>        <span class="hljs-type">int</span>[][] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>][];<br><br>        System.out.println(arr[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<span class="hljs-comment">//NullPointerException</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为此时数组的每一行还未分配具体存储元素的空间，此时arr[0]是null，此时访问arr[0][0]会抛出<code>NullPointerException</code> 空指针异常。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914494_watermark.jpeg"></p><p><strong>空指针异常在内存图中的表现</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%95%B0%E7%BB%84/202402230914088_watermark.png" alt="1572338767825"></p><p><strong>小结：空指针异常情况</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//举例一：</span><br><span class="hljs-comment">//int[] arr1 = new int[10];</span><br><span class="hljs-comment">//arr1 = null;</span><br><span class="hljs-comment">//System.out.println(arr1[9]);</span><br><br><span class="hljs-comment">//举例二：</span><br><span class="hljs-comment">//int[][] arr2 = new int[5][];</span><br><span class="hljs-comment">////arr2[3] = new int[10];</span><br><span class="hljs-comment">//System.out.println(arr2[3][3]);</span><br><br><span class="hljs-comment">//举例三：</span><br>String[] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">10</span>];<br>System.out.println(arr3[<span class="hljs-number">2</span>].toString());<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IntelliJ IDEA 常用快捷键一览表</title>
    <link href="/2024/02/22/4.%20IntelliJ%20IDEA%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%80%E8%A7%88%E8%A1%A8/"/>
    <url>/2024/02/22/4.%20IntelliJ%20IDEA%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%80%E8%A7%88%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-IDEA的日常快捷键"><a href="#1-IDEA的日常快捷键" class="headerlink" title="1-IDEA的日常快捷键"></a>1-IDEA的日常快捷键</h2><h3 id="第1组：通用型"><a href="#第1组：通用型" class="headerlink" title="第1组：通用型"></a>第1组：通用型</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>复制代码-copy</td><td>ctrl + c</td></tr><tr><td>粘贴-paste</td><td>ctrl + v</td></tr><tr><td>剪切-cut</td><td>ctrl + x</td></tr><tr><td>撤销-undo</td><td>ctrl + z</td></tr><tr><td>反撤销-redo</td><td>ctrl + shift + z</td></tr><tr><td>保存-save all</td><td>ctrl + s</td></tr><tr><td>全选-select all</td><td>ctrl + a</td></tr></tbody></table><h3 id="第2组：提高编写速度（上）"><a href="#第2组：提高编写速度（上）" class="headerlink" title="第2组：提高编写速度（上）"></a>第2组：提高编写速度（上）</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>智能提示-edit</td><td>alt + enter</td></tr><tr><td>提示代码模板-insert live template</td><td>ctrl+j</td></tr><tr><td>使用xx块环绕-surround with …</td><td>ctrl+alt+t</td></tr><tr><td>调出生成getter&#x2F;setter&#x2F;构造器等结构-generate …</td><td>alt+insert</td></tr><tr><td>自动生成返回值变量-introduce variable …</td><td>ctrl+alt+v</td></tr><tr><td>复制指定行的代码-duplicate line or selection</td><td>ctrl+d</td></tr><tr><td>删除指定行的代码-delete line</td><td>ctrl+y</td></tr><tr><td>切换到下一行代码空位-start new line</td><td>shift + enter</td></tr><tr><td>切换到上一行代码空位-start new line before current</td><td>ctrl +alt+ enter</td></tr><tr><td>向上移动代码-move statement up</td><td>ctrl+shift+↑</td></tr><tr><td>向下移动代码-move statement down</td><td>ctrl+shift+↓</td></tr><tr><td>向上移动一行-move line up</td><td>alt+shift+↑</td></tr><tr><td>向下移动一行-move line down</td><td>alt+shift+↓</td></tr><tr><td>方法的形参列表提醒-parameter info</td><td>ctrl+p</td></tr></tbody></table><h3 id="第3组：提高编写速度（下）"><a href="#第3组：提高编写速度（下）" class="headerlink" title="第3组：提高编写速度（下）"></a>第3组：提高编写速度（下）</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>批量修改指定的变量名、方法名、类名等-rename</td><td>shift+f6</td></tr><tr><td>抽取代码重构方法-extract method …</td><td>ctrl+alt+m</td></tr><tr><td>重写父类的方法-override methods …</td><td>ctrl+o</td></tr><tr><td>实现接口的方法-implements methods …</td><td>ctrl+i</td></tr><tr><td>选中的结构的大小写的切换-toggle case</td><td>ctrl+shift+u</td></tr><tr><td>批量导包-optimize imports</td><td>ctrl+alt+o</td></tr></tbody></table><h3 id="第4组：类结构、查找和查看源码"><a href="#第4组：类结构、查找和查看源码" class="headerlink" title="第4组：类结构、查找和查看源码"></a>第4组：类结构、查找和查看源码</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>如何查看源码-go to class…</td><td>ctrl + 选中指定的结构 或 ctrl+n</td></tr><tr><td>显示当前类结构，支持搜索指定的方法、属性等-file structure</td><td>ctrl+f12</td></tr><tr><td>退回到前一个编辑的页面-back</td><td>ctrl+alt+←</td></tr><tr><td>进入到下一个编辑的页面-forward</td><td>ctrl+alt+→</td></tr><tr><td>打开的类文件之间切换-select previous&#x2F;next tab</td><td>alt+←&#x2F;→</td></tr><tr><td>光标选中指定的类，查看继承树结构-Type Hierarchy</td><td>ctrl+h</td></tr><tr><td>查看方法文档-quick documentation</td><td>ctrl+q</td></tr><tr><td>类的UML关系图-show uml popup</td><td>ctrl+alt+u</td></tr><tr><td>定位某行-go to line&#x2F;column</td><td>ctrl+g</td></tr><tr><td>回溯变量或方法的来源-go to implementation(s)</td><td>ctrl+alt+b</td></tr><tr><td>折叠方法实现-collapse all</td><td>ctrl+shift+ -</td></tr><tr><td>展开方法实现-expand all</td><td>ctrl+shift+ +</td></tr></tbody></table><h3 id="第5组：查找、替换与关闭"><a href="#第5组：查找、替换与关闭" class="headerlink" title="第5组：查找、替换与关闭"></a>第5组：查找、替换与关闭</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>查找指定的结构</td><td>ctlr+f</td></tr><tr><td>快速查找：选中的Word快速定位到下一个-find next</td><td>ctrl+l</td></tr><tr><td>查找与替换-replace</td><td>ctrl+r</td></tr><tr><td>直接定位到当前行的首位-move caret to line start</td><td>home</td></tr><tr><td>直接定位到当前行的末位 -move caret to line end</td><td>end</td></tr><tr><td>查询当前元素在当前文件中的引用，然后按 F3 可以选择</td><td>ctrl+f7</td></tr><tr><td>全项目搜索文本-find in path …</td><td>ctrl+shift+f</td></tr><tr><td>关闭当前窗口-close</td><td>ctrl+f4</td></tr></tbody></table><h3 id="第6组：调整格式"><a href="#第6组：调整格式" class="headerlink" title="第6组：调整格式"></a>第6组：调整格式</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>格式化代码-reformat code</td><td>ctrl+alt+l</td></tr><tr><td>使用单行注释-comment with line comment</td><td>ctrl + &#x2F;</td></tr><tr><td>使用&#x2F;取消多行注释-comment with block comment</td><td>ctrl + shift + &#x2F;</td></tr><tr><td>选中数行，整体往后移动-tab</td><td>tab</td></tr><tr><td>选中数行，整体往前移动-prev tab</td><td>shift + tab</td></tr></tbody></table><h2 id="2-Debug快捷键"><a href="#2-Debug快捷键" class="headerlink" title="2-Debug快捷键"></a>2-Debug快捷键</h2><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>单步调试（不进入函数内部）- step over</td><td>F8</td></tr><tr><td>单步调试（进入函数内部）- step into</td><td>F7</td></tr><tr><td>强制单步调试（进入函数内部） - force step into</td><td>alt+shift+f7</td></tr><tr><td>选择要进入的函数 - smart step into</td><td>shift + F7</td></tr><tr><td>跳出函数 - step out</td><td>shift + F8</td></tr><tr><td>运行到断点 - run to cursor</td><td>alt + F9</td></tr><tr><td>继续执行，进入下一个断点或执行完程序 - resume program</td><td>F9</td></tr><tr><td>停止 - stop</td><td>Ctrl+F2</td></tr><tr><td>查看断点 - view breakpoints</td><td>Ctrl+Shift+F8</td></tr><tr><td>关闭 - close</td><td>Ctrl+F4</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA的安装与使用（下）</title>
    <link href="/2024/02/22/4.%20IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/2024/02/22/4.%20IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="8-快捷键的使用"><a href="#8-快捷键的使用" class="headerlink" title="8. 快捷键的使用"></a>8. 快捷键的使用</h2><h3 id="8-1-查看快捷键"><a href="#8-1-查看快捷键" class="headerlink" title="8.1 查看快捷键"></a>8.1 查看快捷键</h3><h4 id="1、已知快捷键操作名，未知快捷键"><a href="#1、已知快捷键操作名，未知快捷键" class="headerlink" title="1、已知快捷键操作名，未知快捷键"></a>1、已知快捷键操作名，未知快捷键</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956581_watermark.png"></p><h4 id="2、已知快捷键，不知道对应的操作名"><a href="#2、已知快捷键，不知道对应的操作名" class="headerlink" title="2、已知快捷键，不知道对应的操作名"></a>2、已知快捷键，不知道对应的操作名</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956652_watermark.png"></p><h3 id="8-2-自定义快捷键"><a href="#8-2-自定义快捷键" class="headerlink" title="8.2 自定义快捷键"></a>8.2 自定义快捷键</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956820_watermark.png"></p><h3 id="8-3-使用其它平台快捷键"><a href="#8-3-使用其它平台快捷键" class="headerlink" title="8.3 使用其它平台快捷键"></a>8.3 使用其它平台快捷键</h3><p>苹果电脑或者是用惯Eclipse快捷的，可以选择其他快捷键插件。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956949_watermark.png"></p><h2 id="9-IDEA断点调试-Debug"><a href="#9-IDEA断点调试-Debug" class="headerlink" title="9. IDEA断点调试(Debug)"></a>9. IDEA断点调试(Debug)</h2><h3 id="9-1-为什么需要Debug"><a href="#9-1-为什么需要Debug" class="headerlink" title="9.1 为什么需要Debug"></a>9.1 为什么需要Debug</h3><p>编好的程序在执行过程中如果出现错误，该如何查找或定位错误呢？简单的代码直接就可以看出来，但如果代码比较复杂，就需要借助程序调试工具（Debug）来查找错误了。</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">运行编写好的程序时，可能出现的几种情况：<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">情况<span class="hljs-number">1</span>：没有任何bug,程序执行正确！</span><br><br>====================如果出现如下的三种情况，都又必要使用debug=============================<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">情况<span class="hljs-number">2</span>：运行以后，出现了错误或异常信息。但是通过日志文件或控制台，显示了异常信息的位置。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">情况<span class="hljs-number">3</span>：运行以后，得到了结果，但是结果不是我们想要的。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">情况<span class="hljs-number">4</span>：运行以后，得到了结果，结果大概率是我们想要的。但是多次运行的话，可能会出现不是我们想要的情况。</span><br>        比如：多线程情况下，处理线程安全问题。<br>        <br></code></pre></td></tr></table></figure><h3 id="9-2-Debug的步骤"><a href="#9-2-Debug的步骤" class="headerlink" title="9.2 Debug的步骤"></a>9.2 Debug的步骤</h3><p>Debug(调试)程序步骤如下：</p><p>1、添加断点</p><p>2、启动调试</p><p>3、单步执行</p><p>4、观察变量和执行流程，找到并解决问题</p><h4 id="1、添加断点"><a href="#1、添加断点" class="headerlink" title="1、添加断点"></a>1、添加断点</h4><p>在源代码文件中，在想要设置断点的代码行的前面的标记行处，单击鼠标左键就可以设置断点，在相同位置再次单击即可取消断点。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956740_watermark.png"></p><h4 id="2、启动调试"><a href="#2、启动调试" class="headerlink" title="2、启动调试"></a>2、启动调试</h4><p>IDEA提供多种方式来启动程序(Launch)的调试，分别是通过菜单(Run –&gt; Debug)、图标(“绿色臭虫”<img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956503_watermark.png">等等</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956367_watermark.png"></p><h4 id="3、单步调试工具介绍"><a href="#3、单步调试工具介绍" class="headerlink" title="3、单步调试工具介绍"></a>3、单步调试工具介绍</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956590_watermark.png"></p><p>或</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956328_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956801_watermark.png">：Step Over（F8)：进入下一步，如果当前行断点是调用一个方法，则不进入当前方法体内</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956135_watermark.png">：Step Into（F7)：进入下一步，如果当前行断点是调用一个自定义方法，则进入该方法体内</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956168_watermark.png">：Force Step Into（Alt +Shift  + F7)：进入下一步，如果当前行断点是调用一个核心类库方法，则进入该方法体内</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956581_watermark.png">：Step Out（Shift  + F8)：跳出当前方法体</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956830_watermark.png">：Run to Cursor（Alt + F9)：直接跳到光标处继续调试</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956480_watermark.png">：Resume Program（F9)：恢复程序运行，但如果该断点下面代码还有断点则停在下一个断点上</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956876_watermark.png">：Stop（Ctrl + F2）：结束调试</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956177_watermark.png">：View Breakpoints（Ctrl + Shift  + F8)：查看所有断点</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956496_watermark.png">：Mute Breakpoints：使得当前代码后面所有的断点失效， 一下执行到底 </p><blockquote><p>说明：在Debug过程中，可以动态的下断点。</p></blockquote><h3 id="9-3-多种Debug情况介绍"><a href="#9-3-多种Debug情况介绍" class="headerlink" title="9.3 多种Debug情况介绍"></a>9.3 多种Debug情况介绍</h3><h4 id="9-3-1-行断点"><a href="#9-3-1-行断点" class="headerlink" title="9.3.1 行断点"></a>9.3.1 行断点</h4><ul><li>断点打在代码所在的行上。执行到此行时，会停下来。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug01</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示1：行断点  &amp;  测试debug各个常见操作按钮</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 18:44</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;,n = &quot;</span> + n);<br>        swap(m, n);<br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;,n = &quot;</span> + n);<br><br>        <span class="hljs-comment">//2.</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        System.out.println(arr);<span class="hljs-comment">//地址值</span><br><br>        <span class="hljs-type">char</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[] &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>        System.out.println(arr1);<span class="hljs-comment">//abc</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> m;<br>        m = n;<br>        n = temp;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="9-3-2-方法断点"><a href="#9-3-2-方法断点" class="headerlink" title="9.3.2 方法断点"></a>9.3.2 方法断点</h4><ul><li>断点设置在方法的签名上，默认当进入时，断点可以被唤醒。</li><li>也可以设置在方法退出时，断点也被唤醒</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956836_watermark.png"></p><ul><li>在多态的场景下，在父类或接口的方法上打断点，会自动调入到子类或实现类的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug02</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示2： 方法断点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 21:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-type">Son</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        instance.test();<br>        <span class="hljs-comment">//2.</span><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        instance1.test();<br><br>        <span class="hljs-comment">//3.</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsumerImpl</span>();<br>        con.accept(<span class="hljs-string">&quot;atguigu&quot;</span>);<br><br>        <span class="hljs-comment">//4.</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>);<br>        map.put(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">11</span>);<br>        map.put(<span class="hljs-string">&quot;Tony&quot;</span>,<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Father : test&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Son : test&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Consumer</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String str)</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Consumer</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String str)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConsumerImple:&quot;</span> + str);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="9-3-3-字段断点"><a href="#9-3-3-字段断点" class="headerlink" title="9.3.3 字段断点"></a>9.3.3 字段断点</h4><ul><li>在类的属性声明上打断点，默认对属性的修改操作进行监控</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956288_watermark.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug03</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示3：字段断点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 21:34</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">3</span>);<br><br>        System.out.println(p1);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    &#123;<br>        id = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="9-3-4-条件断点"><a href="#9-3-4-条件断点" class="headerlink" title="9.3.4 条件断点"></a>9.3.4 条件断点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug04</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示4：条件断点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 21:49</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>&#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> arr[i];<br>            System.out.println(target);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>针对上述代码，在满足arr[i] % 3 &#x3D;&#x3D; 0的条件下，执行断点。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956854_watermark.png"></p><h4 id="9-3-5-异常断点（暂略）"><a href="#9-3-5-异常断点（暂略）" class="headerlink" title="9.3.5 异常断点（暂略）"></a>9.3.5 异常断点（暂略）</h4><ul><li>对异常进行跟踪。如果程序出现指定异常，程序就会执行断点，自动停住。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug05</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示5：异常断点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 22:01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> m / n;<br>        System.out.println(result);<br><br><br><span class="hljs-comment">//        Person p1 = new Person(1001);</span><br><span class="hljs-comment">//        System.out.println(p1.getName().toUpperCase());</span><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过下图的方式，对指定的异常进行监控：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956337_watermark.png"></p><h4 id="9-3-6-线程调试（暂略）"><a href="#9-3-6-线程调试（暂略）" class="headerlink" title="9.3.6 线程调试（暂略）"></a>9.3.6 线程调试（暂略）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug06</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示6：线程调试</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 22:46</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug06</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        test(<span class="hljs-string">&quot;Thread1&quot;</span>);<br>        test(<span class="hljs-string">&quot;Thread2&quot;</span>);<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String threadName)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<br>                () -&gt; System.out.println(Thread.currentThread().getName()),<br>                threadName<br>        ).start();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956697_watermark.png"></p><h4 id="9-3-7-强制结束"><a href="#9-3-7-强制结束" class="headerlink" title="9.3.7 强制结束"></a>9.3.7 强制结束</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug07</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示7：强制结束</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 23:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;获取请求的数据&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;调用写入数据库的方法&quot;</span>);<br>        insert();<br>        System.out.println(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;进入insert()方法&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;获取数据库连接&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;将数据写入数据表中&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;写出操作完成&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;断开连接&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956944_watermark.png"></p><h3 id="9-4-自定义调试数据视图（暂略）"><a href="#9-4-自定义调试数据视图（暂略）" class="headerlink" title="9.4 自定义调试数据视图（暂略）"></a>9.4 自定义调试数据视图（暂略）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug08</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示8：用户自定义数据视图</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 23:21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        HashMap&lt;Integer,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;高铁&quot;</span>);<br>        map.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;网购&quot;</span>);<br>        map.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;支付宝&quot;</span>);<br>        map.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;共享单车&quot;</span>);<br><br>        System.out.println(map);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>设置如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956442_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956864_watermark.png"></p><h3 id="9-5-常见问题"><a href="#9-5-常见问题" class="headerlink" title="9.5 常见问题"></a>9.5 常见问题</h3><p>问题：使用Step Into时，会出现无法进入源码的情况。如何解决？</p><p>方案1：使用 force step into 即可</p><p>方案2：点击Setting -&gt; Build,Execution,Deployment -&gt; Debugger -&gt; Stepping</p><p>把Do not step into the classess中的<code>java.*</code>、<code>javax.*</code> 取消勾选即可。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956608_watermark.png" alt="image-20220516200427750" style="zoom:75%;" /><p>小结：</p><blockquote><p>经验：初学者对于在哪里加断点，缺乏经验，这也是调试程序最麻烦的地方，需要一定的经验。</p><p>简单来说，在可能发生错误的代码的前面加断点。如果不会判断，就在程序执行的起点处加断点。</p></blockquote><h2 id="10-IDEA常用插件"><a href="#10-IDEA常用插件" class="headerlink" title="10. IDEA常用插件"></a>10. IDEA常用插件</h2><h3 id="推荐1：Alibaba-Java-Coding-Guidelines"><a href="#推荐1：Alibaba-Java-Coding-Guidelines" class="headerlink" title="推荐1：Alibaba Java Coding Guidelines"></a>推荐1：Alibaba Java Coding Guidelines</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956031_watermark.png"></p><p>阿里巴巴Java编码规范检查插件，检测代码是否存在问题，以及是否符合规范。</p><p>使用：在类中，右键，选择编码规约扫描，在下方显示扫描规约和提示。根据提示规范代码，提高代码质量。</p><h3 id="推荐2：jclasslib-bytecode-viewer"><a href="#推荐2：jclasslib-bytecode-viewer" class="headerlink" title="推荐2：jclasslib bytecode viewer"></a>推荐2：jclasslib bytecode viewer</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956697_watermark.png"></p><p>可视化的字节码查看器。</p><p>使用：</p><ol><li>在 IDEA 打开想研究的类。</li><li>编译该类或者直接编译整个项目（ 如果想研究的类在 jar 包中，此步可略过）。</li><li>打开“view” 菜单，选择“Show Bytecode With jclasslib” 选项。</li><li>选择上述菜单项后 IDEA 中会弹出 jclasslib 工具窗口。</li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957202_watermark.png" alt="image-20221023225239838"></p><p>英文设置：</p><p>在 Help -&gt; Edit Custom VM Options …，加上</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">-Duser.language</span>=en<br></code></pre></td></tr></table></figure><h3 id="推荐3：Translation"><a href="#推荐3：Translation" class="headerlink" title="推荐3：Translation"></a>推荐3：Translation</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957646_watermark.png"></p><p>注册翻译服务（有道智云、百度翻译开放平台、阿里云机器翻译）帐号，开通翻译服务并获取其应用ID和密钥<br>绑定应用ID和密钥：偏好设置（设置） &gt; 工具 &gt; 翻译 &gt; 常规 &gt; 翻译引擎 &gt; 配置…</p><p>使用：鼠标选中文本，点击右键即可自动翻译成多国语言。</p><p>注：请注意保管好你的应用密钥，防止其泄露。</p><h3 id="推荐4：GenerateAllSetter"><a href="#推荐4：GenerateAllSetter" class="headerlink" title="推荐4：GenerateAllSetter"></a>推荐4：GenerateAllSetter</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957057_watermark.png"></p><p>实际开发中还有一个非常常见的场景： 我们创建一个对象后，想依次调用 Setter 函数对属性赋值，如果属性较多很容易遗漏或者重复。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957557_watermark.png" alt="image-20221023230812560" style="zoom:80%;" /><p>可以使用这 GenerateAllSetter 提供的功能，快速生成对象的所有 Setter 函数（可填充默认值），然后自己再跟进实际需求设置属性值。</p><h3 id="插件5：Rainbow-Brackets"><a href="#插件5：Rainbow-Brackets" class="headerlink" title="插件5：Rainbow Brackets"></a>插件5：Rainbow Brackets</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957331_watermark.png"></p><p>给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957812_watermark.png"></p><h3 id="推荐6：CodeGlance-Pro"><a href="#推荐6：CodeGlance-Pro" class="headerlink" title="推荐6：CodeGlance Pro"></a>推荐6：CodeGlance Pro</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957419_watermark.png"></p><p>在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957993_watermark.png" alt="image-20221023231842846" style="zoom:80%;" /><h3 id="推荐7：Statistic"><a href="#推荐7：Statistic" class="headerlink" title="推荐7：Statistic"></a>推荐7：Statistic</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957425_watermark.png"></p><p>代码统计工具。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957003_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957497_watermark.png"></p><h3 id="推荐8：Presentation-Assistant"><a href="#推荐8：Presentation-Assistant" class="headerlink" title="推荐8：Presentation Assistant"></a>推荐8：Presentation Assistant</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957067_watermark.png"></p><p>显示快捷键操作的按键</p><h3 id="推荐9：Key-Promoter-X"><a href="#推荐9：Key-Promoter-X" class="headerlink" title="推荐9：Key Promoter X"></a>推荐9：Key Promoter X</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957499_watermark.png"></p><p>快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。</p><h3 id="推荐10：JavaDoc"><a href="#推荐10：JavaDoc" class="headerlink" title="推荐10：JavaDoc"></a>推荐10：JavaDoc</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957953_watermark.png"></p><p>按<code>alt+insert</code>，执行操作：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957359_watermark.png"></p><h3 id="推荐11：-LeetCode-Editor"><a href="#推荐11：-LeetCode-Editor" class="headerlink" title="推荐11： LeetCode Editor"></a>推荐11： LeetCode Editor</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957831_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957509_watermark.png"></p><p>在 IDEA 里刷力扣算法题</p><h3 id="推荐12：GsonFormatPlus"><a href="#推荐12：GsonFormatPlus" class="headerlink" title="推荐12：GsonFormatPlus"></a>推荐12：GsonFormatPlus</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957056_watermark.png"></p><p>根据 json 生成对象。</p><p>使用：使用alt + s 或 alt + insert调取。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957580_watermark.png"></p><p>举例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tom&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;18&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;man&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hometown&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;province&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;河北省&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;石家庄市&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;county&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;正定县&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="插件13：Material-Theme-UI"><a href="#插件13：Material-Theme-UI" class="headerlink" title="插件13：Material Theme UI"></a>插件13：Material Theme UI</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957975_watermark.png"></p><p>对于很多人而言，写代码时略显枯燥的，如果能够安装自己喜欢的主题将为开发工作带来些许乐趣。</p><p>IDEA 支持各种主题插件，其中最出名的当属 Material Theme UI。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957907_watermark.png"></p><p>安装后，可以从该插件内置的各种风格个选择自己最喜欢的一种。</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA的安装与使用（上）</title>
    <link href="/2024/02/22/4.%20IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/2024/02/22/4.%20IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-认识IntelliJ-IDEA"><a href="#1-认识IntelliJ-IDEA" class="headerlink" title="1. 认识IntelliJ IDEA"></a>1. 认识IntelliJ IDEA</h2><h3 id="1-1-JetBrains-公司介绍"><a href="#1-1-JetBrains-公司介绍" class="headerlink" title="1.1 JetBrains  公司介绍"></a>1.1 JetBrains  公司介绍</h3><p>IDEA，是 JetBrains (<a href="https://www.jetbrains.com/)%E5%85%AC%E5%8F%B8%E7%9A%84%E4%BA%A7%E5%93%81%EF%BC%8C%E8%AF%A5%E5%85%AC%E5%8F%B8%E6%88%90%E7%AB%8B%E4%BA%8E2000%E5%B9%B4%EF%BC%8C%E6%80%BB%E9%83%A8%E4%BD%8D%E4%BA%8E%E6%8D%B7%E5%85%8B%E7%9A%84%E5%B8%83%E6%8B%89%E6%A0%BC%EF%BC%8C%E8%87%B4%E5%8A%9B%E4%BA%8E%E4%B8%BA%E5%BC%80%E5%8F%91%E8%80%85%E6%89%93%E9%80%A0%E6%9C%80%E9%AB%98%E6%95%88%E6%99%BA%E8%83%BD%E7%9A%84%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E3%80%82">https://www.jetbrains.com/)公司的产品，该公司成立于2000年，总部位于捷克的布拉格，致力于为开发者打造最高效智能的开发工具。</a></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943460_watermark.png" alt="1576217376761" style="zoom:80%;" /><p>公司旗下还有其它产品，比如：</p><ul><li>WebStorm：用于开发 JavaScript、HTML5、CSS3 等前端技术</li><li>PyCharm：用于开发 python</li><li>PhpStorm：用于开发 PHP</li><li>RubyMine：用于开发 Ruby&#x2F;Rails</li><li>AppCode：用于开发 Objective - C&#x2F;Swift</li><li>CLion：用于开发 C&#x2F;C++</li><li>DataGrip：用于开发数据库和 SQL</li><li>Rider：用于开发.NET</li><li>GoLand：用于开发 Go</li></ul><p>用于开发 Android的Android Studio，也是Google 基于 IDEA 社区版进行迭代的。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943680_watermark.png"></p><h3 id="1-2-IntelliJ-IDEA-介绍"><a href="#1-2-IntelliJ-IDEA-介绍" class="headerlink" title="1.2 IntelliJ IDEA  介绍"></a>1.2 IntelliJ IDEA  介绍</h3><p>IDEA，全称 <code>IntelliJ IDEA</code>，是 Java 语言的集成开发环境，目前已经（基本）<code>代替</code>了Eclipse的使用。IDEA 在业界被公认为是最好的 Java 开发工具（之一），因其<code>功能强悍</code>、<code>设置人性化</code>，而深受Java、大数据、移动端程序员的喜爱。</p><p>IntelliJ IDEA 在 2015 年的官网上这样介绍自己：</p><blockquote><p>Excel at enterprise, mobile and web development with Java, Scala and Groovy,with all the latest modern technologies and frameworks available out of thebox.</p></blockquote><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943600_watermark.png"></p><h3 id="1-3-IDEA的主要优势：-vs-Eclipse"><a href="#1-3-IDEA的主要优势：-vs-Eclipse" class="headerlink" title="1.3 IDEA的主要优势：(vs Eclipse)"></a>1.3 IDEA的主要优势：(vs Eclipse)</h3><p><strong>功能强大：</strong></p><p>① 强大的整合能力。比如：Git、Maven、Spring等</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943546_watermark.png" alt="1576218068631" style="zoom: 67%;" /><p>② 开箱即用的体验（集成版本控制系统、多语言支持的框架随时可用，无需额外安装插件）</p><p><strong>符合人体工程学：</strong></p><p>① 高度智能（快速的智能代码补全、实时代码分析、可靠的重构工具）</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943891_watermark.png"></p><p>② 提示功能的快速、便捷、范围广</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943400_watermark.jpeg"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943956_watermark.png"></p><p>③ 好用的快捷键和代码模板</p><p>④ 精准搜索</p><h3 id="1-4-IDEA-的下载"><a href="#1-4-IDEA-的下载" class="headerlink" title="1.4 IDEA  的下载"></a>1.4 IDEA  的下载</h3><ul><li><p>下载网址： <a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a></p></li><li><p>IDEA 分为两个版本： <code>旗舰版(Ultimate)</code>和 <code>社区版(Community)</code>。</p></li><li><p>IDEA的大版本每年迭代一次，大版本下的小版本（如：2022.x）迭代时间不固定，一般每年3个小版本。</p></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943549_watermark.png" alt="image-20220606191620253"></p><p>两个不同版本的详细对比，可以参照官网：<br><a href="https://www.jetbrains.com/idea/features/editions_comparison_matrix.html">https://www.jetbrains.com/idea/features/editions_comparison_matrix.html</a></p><p>官网提供的详细使用文档：<br><a href="https://www.jetbrains.com/help/idea/meet-intellij-idea.html">https://www.jetbrains.com/help/idea/meet-intellij-idea.html</a></p><h2 id="2-卸载与安装"><a href="#2-卸载与安装" class="headerlink" title="2. 卸载与安装"></a>2. 卸载与安装</h2><h3 id="2-1-卸载过程"><a href="#2-1-卸载过程" class="headerlink" title="2.1 卸载过程"></a>2.1 卸载过程</h3><p>这里以卸载2022.1.2版本为例说明。在【控制面板】找到【卸载程序】</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943386_watermark.png" alt="image-20221019120032582" style="zoom: 80%;" /><p>右键点击或左键双击IntelliJ IDEA 2022.1.2进行卸载：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943944_watermark.png" alt="image-20221019121258294" style="zoom:80%;" /><p>如果需要保留下述数据，就不要打√。如果想彻底删除IDEA所有数据，那就打上√。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943598_watermark.png" alt="image-20221019122135368" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944198_watermark.png" alt="image-20221019122323575" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944700_watermark.png" alt="image-20221019122349195" style="zoom:80%;" /><p>软件卸载完以后，还需要删除其它几个位置的残留：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944085_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944867_watermark.png"></p><h3 id="2-2-安装前的准备"><a href="#2-2-安装前的准备" class="headerlink" title="2.2 安装前的准备"></a>2.2 安装前的准备</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944544_watermark.png"></p><ul><li>64 位 Microsoft Windows 11、10、8</li><li>最低 2 GB 可用 RAM，推荐 8 GB 系统总 RAM</li><li>2.5 GB 硬盘空间，推荐 SSD</li><li>最低屏幕分辨率 1024x768</li></ul><p>从安装上来看，IntelliJ IDEA 对硬件的要求<code>似乎不是很高</code>。可是在实际开发中并不是这样的，因为 IntelliJ IDEA 执行时会有大量的缓存、索引文件，所以如果你正在使用 Eclipse &#x2F; MyEclipse，想通过 IntelliJ IDEA 来解决计算机的卡、慢等问题，这基本上是不可能的，本质上你应该对自己的硬件设备进行升级。</p><h3 id="2-3-安装过程"><a href="#2-3-安装过程" class="headerlink" title="2.3 安装过程"></a>2.3 安装过程</h3><p>1、下载完安装包，双击直接安装<img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944078_watermark.png"></p><p>2、欢迎安装</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944982_watermark.png"></p><p>3、是否删除电脑上低版本的IDEA（如果有，可以选择忽略）</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944842_watermark.png"></p><ul><li><p>如果电脑上有低版本的IDEA，可以选择删除或保留。</p></li><li><p>这里没有卸载旧版本，如果需要卸载，记得勾选下面的保留旧的设置和配置。</p></li></ul><p>4、选择安装目录</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944476_watermark.png"></p><p>选择安装目录，目录中要避免中文和空格。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944212_watermark.png"></p><p>5、创建桌面快捷图标等</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944247_watermark.png"></p><p>确认是否与.java、.groovy、.kt 格式文件进行关联。这里建议不关联。</p><p>6、在【开始】菜单新建一个文件夹（这里需要确认文件夹的名称），来管理IDEA的相关内容。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944825_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944500_watermark.png"></p><p>7、完成安装</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944168_watermark.png"></p><p>重启以后，单击登录：<img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944886_watermark.png"></p><h3 id="2-4-注册"><a href="#2-4-注册" class="headerlink" title="2.4 注册"></a>2.4 注册</h3><p>首先，需要通过用户协议：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944759_watermark.png" alt="image-20221019170223226" style="zoom:80%;" /><p>是否同意发送用户数据（特性、使用的插件、硬件与软件配置等），建议选择：不发送。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944620_watermark.png" alt="image-20221019170301256" style="zoom:80%;" /><p>接着，会提示我们进行注册。</p><ul><li><p>选择1：试用30天。在IDEA2022.1.2版本中，需要先登录，才能开启试用。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944660_watermark.png" alt="image-20221019170638164" style="zoom:80%;" /></li><li><p>选择2：付费购买旗舰版</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944335_watermark.png" alt="image-20221019170740875" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944316_watermark.png" alt="image-20221019170820975" style="zoom:50%;" /></li></ul><h3 id="2-5-闪退问题"><a href="#2-5-闪退问题" class="headerlink" title="2.5 闪退问题"></a>2.5 闪退问题</h3><p>问题描述：2022.1启动不了，双击桌面图标，没有响应。</p><p>解决办法：</p><p>打开<code>C:\Users\songhk\AppData\Roaming\JetBrains\IntelliJIdea2022.1\idea64.exe.vmoptions</code> 这个文件。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944223_watermark.png"></p><p>内容如下所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944169_watermark.png"></p><p>删除红框的数据以后，再登录即可正常进入。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944911_watermark.png"></p><p>原因：之前使用过的比如2021.2.2版本，pojie了。新版IEDA太智能了，把现有的启运参数也都复制过去了。又因为最新的IDEA，不兼容pojie程序-javaagent:D:\develop_tools\IDEA\IntelliJ IDEA 2021.2.2\bin\jetbrains-agent.jar了，所以报错了，所以JVM结束了，所以没有启动画面，凉凉了。</p><h2 id="3-HelloWorld的实现"><a href="#3-HelloWorld的实现" class="headerlink" title="3. HelloWorld的实现"></a>3. HelloWorld的实现</h2><h3 id="3-1-新建Project-Class"><a href="#3-1-新建Project-Class" class="headerlink" title="3.1 新建Project - Class"></a>3.1 新建Project - Class</h3><p>选择”New Project”：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944533_watermark.png" alt="image-20221019174051967" style="zoom:80%;" /><p>指名工程名、使用的JDK版本等信息。如下所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944347_watermark.png"></p><p>接着创建Java类：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944009_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944892_watermark.png"></p><h3 id="3-2-编写代码"><a href="#3-2-编写代码" class="headerlink" title="3.2 编写代码"></a>3.2 编写代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-运行"><a href="#3-3-运行" class="headerlink" title="3.3 运行"></a>3.3 运行</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944389_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944654_watermark.png"></p><h2 id="4-JDK相关设置"><a href="#4-JDK相关设置" class="headerlink" title="4. JDK相关设置"></a>4. JDK相关设置</h2><h3 id="4-1-项目的JDK设置"><a href="#4-1-项目的JDK设置" class="headerlink" title="4.1 项目的JDK设置"></a>4.1 项目的JDK设置</h3><p><code>File--&gt;Project Structure...--&gt;Platform Settings --&gt;SDKs</code></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944177_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944932_watermark.png"></p><ul><li>注1：SDKs全称是Software Development Kit ，这里一定是选择JDK的安装根目录，不是JRE的目录。</li><li>注2：这里还可以从本地添加多个JDK。使用“+”即可实现。</li></ul><h3 id="4-2-out目录和编译版本"><a href="#4-2-out目录和编译版本" class="headerlink" title="4.2 out目录和编译版本"></a>4.2 out目录和编译版本</h3><p><code>File--&gt;Project Structure...--&gt;Project Settings --&gt;Project</code></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944449_watermark.png"></p><h2 id="5-详细设置"><a href="#5-详细设置" class="headerlink" title="5. 详细设置"></a>5. 详细设置</h2><h3 id="5-1-如何打开详细配置界面"><a href="#5-1-如何打开详细配置界面" class="headerlink" title="5.1 如何打开详细配置界面"></a>5.1 如何打开详细配置界面</h3><p>1、显示工具栏</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944125_watermark.png"></p><p>2、选择详细配置菜单或按钮</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944877_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945421_watermark.png"></p><h3 id="5-2-系统设置"><a href="#5-2-系统设置" class="headerlink" title="5.2 系统设置"></a>5.2 系统设置</h3><h4 id="1、默认启动项目配置"><a href="#1、默认启动项目配置" class="headerlink" title="1、默认启动项目配置"></a>1、默认启动项目配置</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945220_watermark.png"></p><p>启动IDEA时，默认自动打开上次开发的项目？还是自己选择？</p><p>如果去掉Reopen projects on startup前面的对勾，每次启动IDEA就会出现如下界面：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945994_watermark.png"></p><h4 id="2、取消自动更新"><a href="#2、取消自动更新" class="headerlink" title="2、取消自动更新"></a>2、取消自动更新</h4><p>Settings–&gt;Appearance &amp; Behavior-&gt;System Settings -&gt; Updates</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945449_watermark.png"></p><p>默认都打√了，建议检查IDE更新的√去掉，检查插件更新的√选上。</p><h3 id="5-3-设置整体主题"><a href="#5-3-设置整体主题" class="headerlink" title="5.3 设置整体主题"></a>5.3 设置整体主题</h3><h4 id="1、选择主题"><a href="#1、选择主题" class="headerlink" title="1、选择主题"></a>1、选择主题</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945795_watermark.png"></p><h4 id="2、设置菜单和窗口字体和大小"><a href="#2、设置菜单和窗口字体和大小" class="headerlink" title="2、设置菜单和窗口字体和大小"></a>2、设置菜单和窗口字体和大小</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945736_watermark.png"></p><h4 id="3、设置IDEA背景图"><a href="#3、设置IDEA背景图" class="headerlink" title="3、设置IDEA背景图"></a>3、设置IDEA背景图</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945901_watermark.png"></p><p>选择一张合适的图片作为背景，即可。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945114_watermark.png"></p><h3 id="5-4-设置编辑器主题样式"><a href="#5-4-设置编辑器主题样式" class="headerlink" title="5.4 设置编辑器主题样式"></a>5.4 设置编辑器主题样式</h3><h4 id="1、编辑器主题"><a href="#1、编辑器主题" class="headerlink" title="1、编辑器主题"></a>1、编辑器主题</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945741_watermark.png"></p><h4 id="2、字体大小"><a href="#2、字体大小" class="headerlink" title="2、字体大小"></a>2、字体大小</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945710_watermark.png"></p><p>更详细的字体与颜色如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945310_watermark.png"></p><blockquote><p>温馨提示：如果选择某个font字体，中文乱码，可以在fallback font（备选字体）中选择一个支持中文的字体。</p></blockquote><h4 id="3、注释的字体颜色"><a href="#3、注释的字体颜色" class="headerlink" title="3、注释的字体颜色"></a>3、注释的字体颜色</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945619_watermark.png"></p><ul><li>Block comment：修改多行注释的字体颜色</li><li>Doc Comment –&gt; Text：修改文档注释的字体颜色</li><li>Line comment：修改单行注释的字体颜色</li></ul><h3 id="5-5-显示行号与方法分隔符"><a href="#5-5-显示行号与方法分隔符" class="headerlink" title="5.5 显示行号与方法分隔符"></a>5.5 显示行号与方法分隔符</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945956_watermark.png"></p><h3 id="5-6-代码智能提示功能"><a href="#5-6-代码智能提示功能" class="headerlink" title="5.6 代码智能提示功能"></a>5.6 代码智能提示功能</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945813_watermark.png"></p><p>IntelliJ IDEA 的代码提示和补充功能有一个特性：<code>区分大小写</code>。 如果想不区分大小写的话，就把这个对勾去掉。<code>建议去掉勾选</code>。</p><h3 id="5-7-自动导包配置"><a href="#5-7-自动导包配置" class="headerlink" title="5.7 自动导包配置"></a>5.7 自动导包配置</h3><ul><li>默认需要自己手动导包，Alt+Enter快捷键</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945731_watermark.png"></p><ul><li>自动导包设置<ul><li>动态导入明确的包：Add unambiguous imports on the fly，该设置具有全局性；</li><li>优化动态导入的包：Optimize imports on the fly，该设置只对当前项目有效；</li></ul></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945757_watermark.png"></p><h3 id="5-8-设置项目文件编码（一定要改）"><a href="#5-8-设置项目文件编码（一定要改）" class="headerlink" title="5.8 设置项目文件编码（一定要改）"></a>5.8 设置项目文件编码（一定要改）</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945515_watermark.png"></p><p>说明： Transparent native-to-ascii conversion主要用于转换ascii，显式原生内容。一般都要勾选。</p><h3 id="5-9-设置控制台的字符编码"><a href="#5-9-设置控制台的字符编码" class="headerlink" title="5.9 设置控制台的字符编码"></a>5.9 设置控制台的字符编码</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945136_watermark.png"></p><h3 id="5-10-修改类头的文档注释信息"><a href="#5-10-修改类头的文档注释信息" class="headerlink" title="5.10 修改类头的文档注释信息"></a>5.10 修改类头的文档注释信息</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945852_watermark.png"></p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ClassName: $&#123;NAME&#125;</span><br><span class="hljs-comment">* Package: $&#123;PACKAGE_NAME&#125;</span><br><span class="hljs-comment">* Description: </span><br><span class="hljs-comment">* <span class="hljs-doctag">@Author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Create</span> $&#123;DATE&#125; $&#123;TIME&#125; </span><br><span class="hljs-comment">* <span class="hljs-doctag">@Version</span> 1.0   </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>常用的预设的变量，这里直接贴出官网给的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;PACKAGE_NAME&#125; - the name of the target <span class="hljs-keyword">package</span> where the <span class="hljs-keyword">new</span> <span class="hljs-title class_">class</span> or <span class="hljs-keyword">interface</span> <span class="hljs-title class_">will</span> be created. <br>$&#123;PROJECT_NAME&#125; - the name of the current project. <br>$&#123;FILE_NAME&#125; - the name of the PHP file that will be created. <br>$&#123;NAME&#125; - the name of the <span class="hljs-keyword">new</span> <span class="hljs-title class_">file</span> which you specify in the New File dialog box during the file creation. <br>$&#123;USER&#125; - the login name of the current user. <br>$&#123;DATE&#125; - the current system date. <br>$&#123;TIME&#125; - the current system time. <br>$&#123;YEAR&#125; - the current year. <br>$&#123;MONTH&#125; - the current month. <br>$&#123;DAY&#125; - the current day of the month. <br>$&#123;HOUR&#125; - the current hour. <br>$&#123;MINUTE&#125; - the current minute. <br>$&#123;PRODUCT_NAME&#125; - the name of the IDE in which the file will be created. <br>$&#123;MONTH_NAME_SHORT&#125; - the first <span class="hljs-number">3</span> letters of the month name. Example: Jan, Feb, etc. <br>$&#123;MONTH_NAME_FULL&#125; - full name of a month. Example: January, February, etc.<br><br></code></pre></td></tr></table></figure><h3 id="5-11-设置自动编译"><a href="#5-11-设置自动编译" class="headerlink" title="5.11 设置自动编译"></a>5.11 设置自动编译</h3><p><code>Settings--&gt;Build,Execution,Deployment--&gt;Compiler</code></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945536_watermark.png" alt="1655109415450" style="zoom: 67%;" /><h3 id="5-12-设置为省电模式-可忽略"><a href="#5-12-设置为省电模式-可忽略" class="headerlink" title="5.12 设置为省电模式 (可忽略)"></a>5.12 设置为省电模式 (可忽略)</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945170_watermark.png"></p><p>IntelliJ IDEA 有一种叫做<code>省电模式</code>的状态，开启这种模式之后 IntelliJ IDEA 会<code>关掉代码检查</code>和<code>代码提示</code>等功能。所以一般也可认为这是一种<code>阅读模式</code>，如果你在开发过程中遇到突然代码文件不能进行检查和提示，可以来看看这里是否有开启该功能。</p><h3 id="5-13-取消双击shift搜索"><a href="#5-13-取消双击shift搜索" class="headerlink" title="5.13 取消双击shift搜索"></a>5.13 取消双击shift搜索</h3><p>因为我们按shift切换中英文输入方式，经常被按到，总是弹出搜索框，太麻烦了。可以取消它。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945771_watermark.png" alt="1659191272699" style="zoom:80%;" /><ul><li>方式1：适用于IDEA 2022.1.2版本</li></ul><p>在2022.1版本中，采用如下方式消双击shift出现搜索框：搜索double即可，勾选Disable double modifier key shortcuts，禁用这个选项。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945200_watermark.png"></p><ul><li>方式2：适用于IDEA 2022.1.2之前版本</li></ul><p>双击shift 或 ctrl + shift + a，打开如下搜索窗口：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945951_watermark.png"></p><p>选择registry…，找到”ide.suppress.double.click.handler”，把复选框打上勾就可以取消双击shift出现搜索框了。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945804_watermark.png"></p><h2 id="6-工程与模块管理"><a href="#6-工程与模块管理" class="headerlink" title="6. 工程与模块管理"></a>6. 工程与模块管理</h2><h3 id="6-1-IDEA项目结构"><a href="#6-1-IDEA项目结构" class="headerlink" title="6.1 IDEA项目结构"></a>6.1 IDEA项目结构</h3><p><strong>层级关系：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">project</span>(工程) - <span class="hljs-built_in">module</span>(模块) - <span class="hljs-built_in">package</span>(包) - <span class="hljs-built_in">class</span>(类)<br></code></pre></td></tr></table></figure><p><strong>具体的：</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">一个project中可以创建多个<span class="hljs-keyword">module</span><br><br>一个<span class="hljs-keyword">module</span>中可以创建多个<span class="hljs-keyword">package</span><br><br>一个<span class="hljs-keyword">package</span>中可以创建多个<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><blockquote><p>这些结构的划分，是为了方便管理功能代码。</p></blockquote><h3 id="6-2-Project和Module的概念"><a href="#6-2-Project和Module的概念" class="headerlink" title="6.2 Project和Module的概念"></a>6.2 Project和Module的概念</h3><p>在 IntelliJ IDEA 中，提出了Project和Module这两个概念。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945054_watermark.png" alt="image-20220523014358169" style="zoom:80%;" /><p>在 IntelliJ IDEA 中Project是<code>最顶级的结构单元</code>，然后就是Module。目前，主流的大型项目结构基本都是多Module的结构，这类项目一般是<code>按功能划分</code>的，比如：user-core-module、user-facade-module和user-hessian-module等等，模块之间彼此可以<code>相互依赖</code>，有着不可分割的业务关系。因此，对于一个Project来说：</p><ul><li>当为单Module项目的时候，这个单独的Module实际上就是一个Project。</li><li>当为多Module项目的时候，多个模块处于同一个Project之中，此时彼此之间具有<code>互相依赖</code>的关联关系。</li><li>当然多个模块没有建立依赖关系的话，也可以作为单独一个“小项目”运行。</li></ul><h3 id="6-3-Module和Package"><a href="#6-3-Module和Package" class="headerlink" title="6.3 Module和Package"></a>6.3 Module和Package</h3><p>在一个module下，可以声明多个包（package），一般命名规范如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>.不要有中文<br><span class="hljs-number">2</span>.不要以数字开头<br><span class="hljs-number">3</span>.给包取名时一般都是公司域名倒着写,而且都是小写<br>  比如：尚硅谷网址是www<span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.com</span><br>  那么我们的package包名应该写成：com<span class="hljs-selector-class">.atguigu</span>.子名字。<br></code></pre></td></tr></table></figure><h3 id="6-4-创建Module"><a href="#6-4-创建Module" class="headerlink" title="6.4 创建Module"></a>6.4 创建Module</h3><p>建议创建“Empty空工程”，然后创建多模块，每一个模块可以独立运行，相当于一个小项目。JavaSE阶段不涉及到模块之间的依赖。后期再学习模块之间的依赖。</p><p>步骤：</p><p>（1）选择创建模块</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945543_watermark.png"></p><p>（2）选择模块类型：这里选择创建Java模块，给模块命名，确定存放位置</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945364_watermark.png"></p><p>（4）模块声明在工程下面</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946315_watermark.png"></p><h3 id="6-5-删除模块"><a href="#6-5-删除模块" class="headerlink" title="6.5 删除模块"></a>6.5 删除模块</h3><p>（1）移除模块</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946229_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946245_watermark.png"></p><p>（2）彻底删除模块</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946649_watermark.png"></p><h3 id="6-6-导入老师的模块"><a href="#6-6-导入老师的模块" class="headerlink" title="6.6 导入老师的模块"></a>6.6 导入老师的模块</h3><p>（1）将老师的模块<code>teacher_chapter04</code>整个的复制到自己IDEA项目的路径下</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946306_watermark.png"></p><p>接着打开自己IDEA的项目，会在项目目录下看到拷贝过来的module，只不过不是以模块的方式呈现。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946604_watermark.png"></p><p>（2）查看Project Structure，选择import module</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946568_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946599_watermark.png"></p><p>（3）选择要导入的module：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946293_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946054_watermark.png"></p><p>（4）接着可以一路Next下去，最后选择Overwrite</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946985_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946653_watermark.png"></p><p>最后点击OK即可了。</p><h3 id="6-7-同时打开两个IDEA项目工程"><a href="#6-7-同时打开两个IDEA项目工程" class="headerlink" title="6.7 同时打开两个IDEA项目工程"></a>6.7 同时打开两个IDEA项目工程</h3><h4 id="1、两个IDEA项目工程效果"><a href="#1、两个IDEA项目工程效果" class="headerlink" title="1、两个IDEA项目工程效果"></a>1、两个IDEA项目工程效果</h4><p>有些同学想要把上课练习代码和作业代码分开两个IDEA项目工程。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946384_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946014_watermark.png"></p><h4 id="2、新建一个IDEA项目"><a href="#2、新建一个IDEA项目" class="headerlink" title="2、新建一个IDEA项目"></a>2、新建一个IDEA项目</h4><p>注意：第一次需要新建，之后直接打开项目工程即可</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946470_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946835_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946798_watermark.png"></p><h4 id="3、打开两个IDEA项目"><a href="#3、打开两个IDEA项目" class="headerlink" title="3、打开两个IDEA项目"></a>3、打开两个IDEA项目</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946369_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946102_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946757_watermark.png"></p><h3 id="6-8-导入前几章非IDEA工程代码"><a href="#6-8-导入前几章非IDEA工程代码" class="headerlink" title="6.8 导入前几章非IDEA工程代码"></a>6.8 导入前几章非IDEA工程代码</h3><p><strong>1、创建chapter01、chapter02、chapter03等章节的module</strong></p><p>将相应章节的源文件粘贴到module的src下。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946320_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946790_watermark.png"></p><p>打开其中各个源文件，会发现有乱码。比如：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946490_watermark.png"></p><p><strong>2、设置编码</strong></p><p>当前项目是UTF-8。如果原来的.java文件都是GBK的（如果原来.java文件有的是GBK，有的是UTF-8就比较麻烦了）。</p><p>可以单独把这两个模块设置为GBK编码的。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946004_watermark.png"></p><p>改为GBK，确认即可。如图：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946364_watermark.png"></p><h2 id="7-代码模板的使用"><a href="#7-代码模板的使用" class="headerlink" title="7. 代码模板的使用"></a>7. 代码模板的使用</h2><h3 id="7-1-查看Postfix-Completion模板-后缀补全"><a href="#7-1-查看Postfix-Completion模板-后缀补全" class="headerlink" title="7.1 查看Postfix Completion模板(后缀补全)"></a>7.1 查看Postfix Completion模板(后缀补全)</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946298_watermark.png"></p><h3 id="7-2-查看Live-Templates模板-实时模板"><a href="#7-2-查看Live-Templates模板-实时模板" class="headerlink" title="7.2 查看Live Templates模板(实时模板)"></a>7.2 查看Live Templates模板(实时模板)</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946225_watermark.jpeg"></p><h3 id="7-3-常用代码模板"><a href="#7-3-常用代码模板" class="headerlink" title="7.3 常用代码模板"></a>7.3 常用代码模板</h3><h4 id="1、非空判断"><a href="#1、非空判断" class="headerlink" title="1、非空判断"></a>1、非空判断</h4><ul><li>变量.null：if(变量 &#x3D;&#x3D; null)</li><li>变量.nn：if(变量 !&#x3D; null) </li><li>变量.notnull：if(变量 !&#x3D; null) </li><li>ifn：if(xx  &#x3D;&#x3D; null)</li><li>inn：if(xx  !&#x3D; null)</li></ul><h4 id="2、遍历数组和集合"><a href="#2、遍历数组和集合" class="headerlink" title="2、遍历数组和集合"></a>2、遍历数组和集合</h4><ul><li>数组或集合变量.fori：for循环</li><li>数组或集合变量.for：增强for循环</li><li>数组或集合变量.forr：反向for循环</li><li>数组或集合变量.iter：增强for循环遍历数组或集合</li></ul><h4 id="3、输出语句"><a href="#3、输出语句" class="headerlink" title="3、输出语句"></a>3、输出语句</h4><ul><li>sout：相当于System.out.println</li><li>soutm：打印当前方法的名称</li><li>soutp：打印当前方法的形参及形参对应的实参值</li><li>soutv：打印方法中声明的最近的变量的值</li><li>变量.sout：打印当前变量值</li><li>变量.soutv：打印当前变量名及变量值</li></ul><h4 id="4、对象操作"><a href="#4、对象操作" class="headerlink" title="4、对象操作"></a>4、对象操作</h4><ul><li>创建对象<ul><li>Xxx.new  .var ：创建Xxx类的对象，并赋给相应的变量</li><li>Xxx.new  .field：会将方法内刚创建的Xxx对象抽取为一个属性</li></ul></li><li>强转<ul><li>对象.cast：将对象进行强转</li><li>对象.castvar：将对象强转后，并赋给一个变量</li></ul></li></ul><h4 id="5、静态常量声明"><a href="#5、静态常量声明" class="headerlink" title="5、静态常量声明"></a>5、静态常量声明</h4><ul><li>psf：public static final</li><li>psfi：public static final int</li><li>psfs：public static final String</li><li>prsf：private static final</li></ul><h3 id="7-4-自定义代码模板"><a href="#7-4-自定义代码模板" class="headerlink" title="7.4 自定义代码模板"></a>7.4 自定义代码模板</h3><h4 id="7-4-1-自定义后缀补全模板"><a href="#7-4-1-自定义后缀补全模板" class="headerlink" title="7.4.1 自定义后缀补全模板"></a>7.4.1 自定义后缀补全模板</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946866_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946462_watermark.png"></p><h4 id="7-4-2-自定义Live-Templates"><a href="#7-4-2-自定义Live-Templates" class="headerlink" title="7.4.2 自定义Live Templates"></a>7.4.2 自定义Live Templates</h4><p>例如：定义sop代表System.out.print();语句</p><p>①在Live Templates中增加模板</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946103_watermark.png"></p><p>②先定义一个模板的组，这样方便管理所有自定义的代码模板</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946859_watermark.png"></p><p>③在模板组里新建模板</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946819_watermark.png"></p><p>④定义模板（以输出语句为例）</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947459_watermark.png"></p><ul><li>Abbreviation：模板的缩略名称</li><li>Description：模板的描述</li><li>Template text：模板的代码片段</li><li>模板应用范围。比如点击Define。选择如下：应用在java代码中。</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947412_watermark.png"></p><p><strong>其它模板1：单元测试模板：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> test$var1$()&#123;<br>    $var2$<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947280_watermark.png"></p><p><strong>其它模板2：创建多线程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        $<span class="hljs-keyword">var</span>$<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947793_watermark.png"></p><p><strong>其它模板3：冒泡排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">$INDEX$</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; $INDEX$ &lt; $ARRAY$.length; $INDEX$++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">$INDEX2$</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; $INDEX2$ &lt; $ARRAY$.length-$INDEX$; $INDEX2$++) &#123;<br>        <span class="hljs-keyword">if</span>($ARRAY$[$INDEX2$] &gt; $ARRAY$[$INDEX2$+<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-type">$ELEMENT_TYPE$</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> $ARRAY$[$INDEX2$];<br>            $ARRAY$[$INDEX2$] = $ARRAY$[$INDEX2$+<span class="hljs-number">1</span>];<br>            $ARRAY$[$INDEX2$+<span class="hljs-number">1</span>] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947748_watermark.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流程控制语句</title>
    <link href="/2024/02/22/3.%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/02/22/3.%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1. 顺序结构"></a>1. 顺序结构</h2><p>顺序结构就是程序<code>从上到下逐行</code>地执行。表达式语句都是顺序执行的。并且上一行对某个变量的修改对下一行会产生影响。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732479_watermark.png" alt="image-20211218093256771"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatementTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>System.out.println(<span class="hljs-string">&quot;x = &quot;</span> + x);<br>        System.out.println(<span class="hljs-string">&quot;y = &quot;</span> + y);<br>        <span class="hljs-comment">//对x、y的值进行修改</span><br>        x++;<br>        y = <span class="hljs-number">2</span> * x + y;<br>        x = x * <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;x = &quot;</span> + x);<br>        System.out.println(<span class="hljs-string">&quot;y = &quot;</span> + y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java中定义变量时采用合法的<code>前向引用</code>。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num1 + <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>错误形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num1 + <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-分支语句"><a href="#2-分支语句" class="headerlink" title="2. 分支语句"></a>2. 分支语句</h2><h3 id="2-1-if-else条件判断结构"><a href="#2-1-if-else条件判断结构" class="headerlink" title="2.1 if-else条件判断结构"></a>2.1 if-else条件判断结构</h3><h4 id="2-1-1-基本语法"><a href="#2-1-1-基本语法" class="headerlink" title="2.1.1 基本语法"></a>2.1.1 基本语法</h4><p><strong>结构1：单分支条件判断：if</strong></p><p><code>格式：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(条件表达式)｛<br>  语句块;<br>｝<br></code></pre></td></tr></table></figure><p><code>说明：</code>条件表达式必须是布尔表达式（关系表达式或逻辑表达式）或 布尔变量。</p><p><code>执行流程：</code></p><ol><li>首先判断条件表达式看其结果是true还是false</li><li>如果是true就执行语句块</li><li>如果是false就不执行语句块</li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732538_watermark.png" alt="image-20220514160139926"></p><p><strong>结构2：双分支条件判断：if…else</strong></p><p><code>格式：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(条件表达式) &#123; <br>  语句块<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>  语句块<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>执行流程：</code></p><ol><li>首先判断条件表达式看其结果是true还是false</li><li>如果是true就执行语句块1</li><li>如果是false就执行语句块2</li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732497_watermark.png" alt="image-20220514160243421"></p><p><strong>结构3：多分支条件判断：if…else if…else</strong></p><p><code>格式：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;<br>  语句块<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>) &#123;<br>  语句块<span class="hljs-number">2</span>;<br>&#125;<br>...<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式n) &#123;<br> 语句块n;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  语句块n+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>说明：</code>一旦条件表达式为true，则进入执行相应的语句块。执行完对应的语句块之后，就跳出当前结构。</p><p><code>执行流程：</code></p><ol><li>首先判断关系表达式1看其结果是true还是false</li><li>如果是true就执行语句块1，然后结束当前多分支</li><li>如果是false就继续判断关系表达式2看其结果是true还是false</li><li>如果是true就执行语句块2，然后结束当前多分支</li><li>如果是false就继续判断关系表达式…看其结果是true还是false</li></ol><p>​    …</p><p>   n.  如果没有任何关系表达式为true，就执行语句块n+1，然后结束当前多分支。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732574_watermark.png" alt="image-20220514160538651"></p><h4 id="2-1-2-应用举例"><a href="#2-1-2-应用举例" class="headerlink" title="2.1.2 应用举例"></a>2.1.2 应用举例</h4><p><strong>案例1：</strong>成年人心率的正常范围是每分钟60-100次。体检时，如果心率不在此范围内，则提示需要做进一步的检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">heartBeats</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br><br>        <span class="hljs-keyword">if</span>(heartBeats &lt; <span class="hljs-number">60</span> || heartBeats &gt; <span class="hljs-number">100</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;你需要做进一步的检查&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;体检结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>定义一个整数，判定是偶数还是奇数    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-keyword">if</span>(a % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(a + <span class="hljs-string">&quot;是偶数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            System.out.println(a + <span class="hljs-string">&quot;是奇数&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">岳小鹏参加Java考试，他和父亲岳不群达成承诺：<br>如果：<br>成绩为<span class="hljs-number">100</span>分时，奖励一辆跑车；<br>成绩为(<span class="hljs-number">80</span>，<span class="hljs-number">99</span>]时，奖励一辆山地自行车；<br>当成绩为<span class="hljs-selector-attr">[60,80]</span>时，奖励环球影城一日游；<br>其它时，胖揍一顿。<br><br>说明：默认成绩是在<span class="hljs-selector-attr">[0,100]</span>范围内<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">67</span>;<span class="hljs-comment">//岳小鹏的期末成绩</span><br>        <span class="hljs-comment">//写法一：默认成绩范围为[0,100]</span><br>        <span class="hljs-keyword">if</span>(score == <span class="hljs-number">100</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励一辆跑车&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">80</span> &amp;&amp; score &lt;= <span class="hljs-number">99</span>)&#123;    <span class="hljs-comment">//错误的写法：&#125;else if(80 &lt; score &lt;= 99)&#123;</span><br>            System.out.println(<span class="hljs-string">&quot;奖励一辆山地自行车&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">60</span> &amp;&amp; score &lt;= <span class="hljs-number">80</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励环球影城玩一日游&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//else&#123;</span><br>        <span class="hljs-comment">//System.out.println(&quot;胖揍一顿&quot;);</span><br>        <span class="hljs-comment">//&#125;</span><br><br><br>        <span class="hljs-comment">//写法二：</span><br>        <span class="hljs-comment">// 默认成绩范围为[0,100]</span><br>        <span class="hljs-keyword">if</span>(score == <span class="hljs-number">100</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励一辆跑车&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">80</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励一辆山地自行车&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">60</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励环球影城玩一日游&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;胖揍一顿&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732610_watermark.png" alt="image-20221027185234087"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732592_watermark.png" alt="image-20221027185500389"></p><blockquote><p>当条件表达式之间是“<code>互斥</code>”关系时（即彼此没有交集），条件判断语句及执行语句间顺序无所谓。</p><p>当条件表达式之间是“<code>包含</code>”关系时，“<code>小上大下 / 子上父下</code>”，否则范围小的条件表达式将不可能被执行。</p></blockquote><h4 id="2-1-3-if…else嵌套"><a href="#2-1-3-if…else嵌套" class="headerlink" title="2.1.3 if…else嵌套"></a>2.1.3 if…else嵌套</h4><p>在 if 的语句块中，或者是在else语句块中，又包含了另外一个条件判断（可以是单分支、双分支、多分支），就构成了<code>嵌套结构</code>。</p><p><strong>执行的特点：</strong><br>（1）如果是嵌套在if语句块中的，只有当外部的if条件满足，才会去判断内部的条件<br>（2）如果是嵌套在else语句块中的，只有当外部的if条件不满足，进入else后，才会去判断内部的条件</p><p><strong>案例4：</strong>由键盘输入三个整数分别存入变量num1、num2、num3，对它们进行排序(使用 if-else if-else)，并且从小到大输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//声明num1,num2,num3三个变量并赋值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>,num2 = <span class="hljs-number">32</span>,num3 = <span class="hljs-number">12</span>;<br><br><span class="hljs-keyword">if</span>(num1 &gt;= num2)&#123;<br><br><span class="hljs-keyword">if</span>(num3 &gt;= num1)<br>System.out.println(num2 + <span class="hljs-string">&quot;-&quot;</span> + num1 + <span class="hljs-string">&quot;-&quot;</span> + num3);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num3 &lt;= num2)<br>System.out.println(num3 + <span class="hljs-string">&quot;-&quot;</span> + num2 + <span class="hljs-string">&quot;-&quot;</span> + num1);<br><span class="hljs-keyword">else</span><br>System.out.println(num2 + <span class="hljs-string">&quot;-&quot;</span> + num3 + <span class="hljs-string">&quot;-&quot;</span> + num1);<br>&#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//num1 &lt; num2</span><br><br><span class="hljs-keyword">if</span>(num3 &gt;= num2)&#123;<br>System.out.println(num1 + <span class="hljs-string">&quot;-&quot;</span> + num2 + <span class="hljs-string">&quot;-&quot;</span> + num3);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num3 &lt;= num1)&#123;<br>System.out.println(num3 + <span class="hljs-string">&quot;-&quot;</span> + num1 + <span class="hljs-string">&quot;-&quot;</span> + num2);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(num1 + <span class="hljs-string">&quot;-&quot;</span> + num3 + <span class="hljs-string">&quot;-&quot;</span> + num2);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-4-其它说明"><a href="#2-1-4-其它说明" class="headerlink" title="2.1.4 其它说明"></a>2.1.4 其它说明</h4><ul><li>语句块只有一条执行语句时，一对<code>&#123;&#125;可以省略</code>，但建议保留</li><li>当if-else结构是“多选一”时，最后的<code>else是可选的</code>，根据需要可以省略</li></ul><h4 id="2-1-5-练习"><a href="#2-1-5-练习" class="headerlink" title="2.1.5 练习"></a>2.1.5 练习</h4><p><strong>练习1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1)对下列代码，若有输出，指出输出结果。</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">2</span>) &#123;<br>       <span class="hljs-keyword">if</span> (y &gt; <span class="hljs-number">2</span>) <br>            System.out.println(x + y);<br>       System.out.println(<span class="hljs-string">&quot;atguigu&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span><br>       System.out.println(<span class="hljs-string">&quot;x is &quot;</span> + x);<br><br><br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//如果写成if(b=false)能编译通过吗？如果能，结果是？</span><br><span class="hljs-keyword">if</span>(b == <span class="hljs-literal">false</span>)  <span class="hljs-comment">//建议：if(!b)</span><br>System.out.println(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b)<br>System.out.println(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!b)<br>System.out.println(<span class="hljs-string">&quot;c&quot;</span>);<br><span class="hljs-keyword">else</span><br>System.out.println(<span class="hljs-string">&quot;d&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>练习3：</strong></p><p>定义两个整数，分别为small 和 big，如果第一个整数small大于第二个整数big，就交换。输出显示small和big变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">small</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">big</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br><br>        <span class="hljs-keyword">if</span> (small &gt; big) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> small;<br>            small = big;<br>            big = temp;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;small=&quot;</span> + small + <span class="hljs-string">&quot;,big=&quot;</span> + big);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习4：</strong>小明参加期末Java考试，通过考试成绩，判断其Java等级，成绩范围[0,100]</p><ul><li>90-100      优秀</li><li>80-89        好</li><li>70-79        良</li><li>60-69        及格</li><li>60以下    不及格</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-comment">//写法一：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;小明的期末Java成绩是：[0,100]&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br><br>        <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">0</span> || score &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩是错误的&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">90</span> &amp;&amp; score &lt;= <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于优秀&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">80</span> &amp;&amp; score &lt; <span class="hljs-number">90</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于好&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">70</span> &amp;&amp; score &lt; <span class="hljs-number">80</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于良&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span> &amp;&amp; score &lt; <span class="hljs-number">70</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于及格&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于不及格&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-comment">//写法二：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;小明的期末Java成绩是：[0,100]&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br><br>        <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">0</span> || score &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩是错误的&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">90</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于优秀&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">80</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于好&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">70</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于良&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于及格&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于不及格&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习5：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">编写程序，声明<span class="hljs-number">2</span>个<span class="hljs-built_in">int</span>型变量并赋值。判断两数之和，如果大于等于<span class="hljs-number">50</span>，打印“hello world!”<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer5</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>, num2 = <span class="hljs-number">32</span>;<br>        <br>        <span class="hljs-keyword">if</span> (num1 + num2 &gt;= <span class="hljs-number">50</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习6：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">编写程序，声明<span class="hljs-number">2</span>个<span class="hljs-built_in">double</span>型变量并赋值。判断第一个数大于<span class="hljs-number">10.0</span>，且第<span class="hljs-number">2</span>个数小于<span class="hljs-number">20.0</span>，打印两数之和。否则，打印两数的乘积。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer6</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">21.2</span>,d2 = <span class="hljs-number">12.3</span>;<br>        <br>        <span class="hljs-keyword">if</span>(d1 &gt; <span class="hljs-number">10.0</span> &amp;&amp; d2 &lt; <span class="hljs-number">20.0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;两数之和为：&quot;</span> + (d1 + d2));<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;两数乘积为：&quot;</span> + (d1 * d2));<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习7：判断水的温度</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">如果大于95℃，则打印“开水”；<br><br>如果大于70℃且小于等于95℃，则打印“热水”；<br><br>如果大于40℃且小于等于70℃，则打印“温水”；<br><br>如果小于等于40℃，则打印“凉水”。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer7</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">waterTemperature</span> <span class="hljs-operator">=</span> <span class="hljs-number">85</span>;<br>        <br>        <span class="hljs-keyword">if</span>(waterTemperature &gt; <span class="hljs-number">95</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;开水&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(waterTemperature &gt; <span class="hljs-number">70</span> &amp;&amp; waterTemperature &lt;= <span class="hljs-number">95</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;热水&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(waterTemperature &gt; <span class="hljs-number">40</span> &amp;&amp; waterTemperature &lt;= <span class="hljs-number">70</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;温水&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;凉水&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-switch-case选择结构"><a href="#2-2-switch-case选择结构" class="headerlink" title="2.2 switch-case选择结构"></a>2.2 switch-case选择结构</h3><h4 id="2-2-1-基本语法"><a href="#2-2-1-基本语法" class="headerlink" title="2.2.1 基本语法"></a>2.2.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>    <span class="hljs-keyword">case</span> 常量值<span class="hljs-number">1</span>:<br>        语句块<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//break;</span><br>    <span class="hljs-keyword">case</span> 常量值<span class="hljs-number">2</span>:<br>        语句块<span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//break; </span><br>    <span class="hljs-comment">// ...</span><br>   [<span class="hljs-keyword">default</span>:<br>        语句块n+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行流程图：</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221905701_watermark.png" alt="image-20240222190313948"></p><p><strong>执行过程：</strong></p><p>第1步：根据switch中表达式的值，依次匹配各个case。如果表达式的值等于某个case中的常量值，则执行对应case中的执行语句。</p><p>第2步：执行完此case的执行语句以后，<br>​              情况1：如果遇到break,则执行break并跳出当前的switch-case结构<br>​        情况2：如果没有遇到break，则会继续执行当前case之后的其它case中的执行语句。—&gt;case穿透<br>​         …<br>​        直到遇到break关键字或执行完所有的case及default的执行语句，跳出当前的switch-case结构</p><p><strong>使用注意点：</strong></p><ul><li><p>switch(表达式)中表达式的值必须是下述几种类型之一：byte，short，char，int，枚举 (jdk 5.0)，String (jdk 7.0)；</p></li><li><p>case子句中的值必须是常量，不能是变量名或不确定的表达式值或范围；</p></li><li><p>同一个switch语句，所有case子句中的常量值互不相同；</p></li><li><p>break语句用来在执行完一个case分支后使程序跳出switch语句块；</p><p>如果没有break，程序会顺序执行到switch结尾；</p></li><li><p>default子句是可选的。同时，位置也是灵活的。当没有匹配的case时，执行default语句。</p></li></ul><h4 id="2-2-2-应用举例"><a href="#2-2-2-应用举例" class="headerlink" title="2.2.2 应用举例"></a>2.2.2 应用举例</h4><p><strong>案例1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">switch</span>(num)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>System.out.println(<span class="hljs-string">&quot;zero&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>System.out.println(<span class="hljs-string">&quot;one&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>System.out.println(<span class="hljs-string">&quot;two&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>System.out.println(<span class="hljs-string">&quot;three&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;other&quot;</span>);<br><span class="hljs-comment">//break;</span><br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">season</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;summer&quot;</span>;<br>        <span class="hljs-keyword">switch</span> (season) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;spring&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;春暖花开&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;summer&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;夏日炎炎&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;autumn&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;秋高气爽&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;winter&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;冬雪皑皑&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;季节输入有误&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>错误举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">switch</span>(key)&#123;<br><span class="hljs-keyword">case</span> key &gt; <span class="hljs-number">0</span> :<br>        System.out.println(<span class="hljs-string">&quot;正数&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> key &lt; <span class="hljs-number">0</span>:<br>        System.out.println(<span class="hljs-string">&quot;负数&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;零&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>使用switch-case实现：对学生成绩大于60分的，输出“合格”。低于60分的，输出“不合格”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">67</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">写法1：极不推荐</span><br><span class="hljs-comment">switch(score)&#123;</span><br><span class="hljs-comment">case 0:</span><br><span class="hljs-comment">System.out.println(&quot;不及格&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 1:</span><br><span class="hljs-comment">System.out.println(&quot;不及格&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">//...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">case 60:</span><br><span class="hljs-comment">System.out.println(&quot;及格&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">//...略...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//写法2：</span><br><span class="hljs-keyword">switch</span>(score / <span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;输入的成绩有误&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">//写法3：</span><br><span class="hljs-keyword">switch</span>(score / <span class="hljs-number">60</span>)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;输入的成绩有误&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-3-利用case的穿透性"><a href="#2-2-3-利用case的穿透性" class="headerlink" title="2.2.3 利用case的穿透性"></a>2.2.3 利用case的穿透性</h4><p>在switch语句中，如果case的后面不写break，将出现穿透现象，也就是一旦匹配成功，不会在判断下一个case的值，直接向后运行，直到遇到break或者整个switch语句结束，执行终止。</p><p><strong>案例4：</strong>编写程序：从键盘上输入2023年的“month”和“day”，要求通过程序输出输入的日期为2023年的第几天。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>System.out.println(<span class="hljs-string">&quot;请输入2023年的month:&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>System.out.println(<span class="hljs-string">&quot;请输入2023年的day:&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br><span class="hljs-comment">//这里就不针对month和day进行合法性的判断了，以后可以使用正则表达式进行校验。</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">sumDays</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录总天数</span><br><br><span class="hljs-comment">//写法1 ：不推荐（存在冗余的数据）</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">switch(month)&#123;</span><br><span class="hljs-comment">case 1:</span><br><span class="hljs-comment">sumDays = day;</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 2:</span><br><span class="hljs-comment">sumDays = 31 + day;</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 3:</span><br><span class="hljs-comment">sumDays = 31 + 28 + day;</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">//....</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">case 12:</span><br><span class="hljs-comment">//sumDays = 31 + 28 + ... + 30 + day;</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//写法2：推荐</span><br><span class="hljs-keyword">switch</span>(month)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表11月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表10月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表9月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表8月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表7月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表6月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表5月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表4月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表3月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>sumDays += <span class="hljs-number">28</span>;<span class="hljs-comment">//这个28是代表2月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表1月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>sumDays += day;<span class="hljs-comment">//这个day是代表当月的第几天</span><br>&#125;<br><br>System.out.println(month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日是2023年的第&quot;</span> + sumDays + <span class="hljs-string">&quot;天&quot;</span>);<br>        <span class="hljs-comment">//关闭资源</span><br>scan.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>拓展：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">从键盘分别输入年、月、日，判断这一天是当年的第几天<br> <br>注：判断一年是否是闰年的标准：<br>   <span class="hljs-number">1</span>）可以被<span class="hljs-number">4</span>整除，但不可被<span class="hljs-number">100</span>整除<br>  或<br>   <span class="hljs-number">2</span>）可以被<span class="hljs-number">400</span>整除<br>   <br>例如：<span class="hljs-number">1900，2200</span>等能被<span class="hljs-number">4</span>整除，但同时能被<span class="hljs-number">100</span>整除，但不能被<span class="hljs-number">400</span>整除，不是闰年<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest04</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入year:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入month:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入day:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-comment">//判断这一天是当年的第几天==&gt;从1月1日开始，累加到xx月xx日这一天</span><br>        <span class="hljs-comment">//(1)[1,month-1]个月满月天数</span><br>        <span class="hljs-comment">//(2)单独考虑2月份是否是29天（依据是看year是否是闰年）</span><br>        <span class="hljs-comment">//(3)第month个月的day天</span><br><br>        <span class="hljs-comment">//声明一个变量days，用来存储总天数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sumDays</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//累加[1,month-1]个月满月天数</span><br>        <span class="hljs-keyword">switch</span> (month) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                <span class="hljs-comment">//累加的1-11月</span><br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表11月份的满月天数</span><br>                <span class="hljs-comment">//这里没有break，继续往下走</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                <span class="hljs-comment">//累加的1-10月</span><br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表10月的满月天数</span><br>                <span class="hljs-comment">//这里没有break，继续往下走</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//9月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//8月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//7月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//6月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//5月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//4月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//3月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                sumDays += <span class="hljs-number">28</span>;<span class="hljs-comment">//2月</span><br>                <span class="hljs-comment">//在这里考虑是否可能是29天</span><br>                <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;<br>                    sumDays++;<span class="hljs-comment">//多加1天</span><br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//1月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                sumDays += day;<span class="hljs-comment">//第month月的day天</span><br>        &#125;<br><br>        <span class="hljs-comment">//输出结果</span><br>        System.out.println(year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日是这一年的第&quot;</span> + sumDays + <span class="hljs-string">&quot;天&quot;</span>);<br><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例5：</strong>根据指定的月份输出对应季节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 需求：指定一个月份，输出该月份对应的季节。一年有四季:</span><br><span class="hljs-comment"> * 3,4,5春季</span><br><span class="hljs-comment"> * 6,7,8夏季</span><br><span class="hljs-comment"> * 9,10,11秋季</span><br><span class="hljs-comment"> * 12,1,2冬季</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入月份：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> input.nextInt();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">switch(month) &#123;</span><br><span class="hljs-comment">            case 1:</span><br><span class="hljs-comment">                System.out.println(&quot;冬季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 2:</span><br><span class="hljs-comment">                System.out.println(&quot;冬季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 3:</span><br><span class="hljs-comment">                System.out.println(&quot;春季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 4:</span><br><span class="hljs-comment">                System.out.println(&quot;春季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 5:</span><br><span class="hljs-comment">                System.out.println(&quot;春季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 6:</span><br><span class="hljs-comment">                System.out.println(&quot;夏季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 7:</span><br><span class="hljs-comment">                System.out.println(&quot;夏季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 8:</span><br><span class="hljs-comment">                System.out.println(&quot;夏季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 9:</span><br><span class="hljs-comment">                System.out.println(&quot;秋季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 10:</span><br><span class="hljs-comment">                System.out.println(&quot;秋季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 11:</span><br><span class="hljs-comment">                System.out.println(&quot;秋季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 12:</span><br><span class="hljs-comment">                System.out.println(&quot;冬季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            default:</span><br><span class="hljs-comment">                System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br>        <span class="hljs-comment">// 改进版</span><br>        <span class="hljs-keyword">switch</span>(month) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                System.out.println(<span class="hljs-string">&quot;冬季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(<span class="hljs-string">&quot;春季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                System.out.println(<span class="hljs-string">&quot;夏季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                System.out.println(<span class="hljs-string">&quot;秋季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;你输入的月份有误&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        input.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>常见错误实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(month)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>|<span class="hljs-number">4</span>|<span class="hljs-number">5</span>:<span class="hljs-comment">//3|4|5 用了位运算符，11 | 100 | 101结果是 111是7</span><br>        System.out.println(<span class="hljs-string">&quot;春季&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>|<span class="hljs-number">7</span>|<span class="hljs-number">8</span>:<span class="hljs-comment">//6|7|8用了位运算符，110 | 111 | 1000结果是1111是15</span><br>        System.out.println(<span class="hljs-string">&quot;夏季&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>|<span class="hljs-number">10</span>|<span class="hljs-number">11</span>:<span class="hljs-comment">//9|10|11用了位运算符，1001 | 1010 | 1011结果是1011是11</span><br>        System.out.println(<span class="hljs-string">&quot;秋季&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>|<span class="hljs-number">1</span>|<span class="hljs-number">2</span>:<span class="hljs-comment">//12|1|2 用了位运算符，1100 | 1 | 10 结果是1111，是15</span><br>        System.out.println(<span class="hljs-string">&quot;冬季&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;输入有误&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用if-else实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((month == <span class="hljs-number">1</span>) || (month == <span class="hljs-number">2</span>) || (month == <span class="hljs-number">12</span>)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;冬季&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((month == <span class="hljs-number">3</span>) || (month == <span class="hljs-number">4</span>) || (month == <span class="hljs-number">5</span>)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;春季&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((month == <span class="hljs-number">6</span>) || (month == <span class="hljs-number">7</span>) || (month == <span class="hljs-number">8</span>)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;夏季&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((month == <span class="hljs-number">9</span>) || (month == <span class="hljs-number">10</span>) || (month == <span class="hljs-number">11</span>)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;秋季&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;你输入的月份有误&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-4-if-else语句与switch-case语句比较"><a href="#2-2-4-if-else语句与switch-case语句比较" class="headerlink" title="2.2.4 if-else语句与switch-case语句比较"></a>2.2.4 if-else语句与switch-case语句比较</h4><ul><li><p>结论：凡是使用switch-case的结构都可以转换为if-else结构。反之，不成立。</p></li><li><p>开发经验：如果既可以使用switch-case，又可以使用if-else，建议使用switch-case。因为效率稍高。</p></li><li><p>细节对比：</p><ul><li>if-else语句优势<ul><li>if语句的条件是一个布尔类型值，if条件表达式为true则进入分支，可以用于范围的判断，也可以用于等值的判断，<code>使用范围更广</code>。</li><li>switch语句的条件是一个常量值（byte,short,int,char,枚举,String），只能判断某个变量或表达式的结果是否等于某个常量值，<code>使用场景较狭窄</code>。</li></ul></li><li>switch语句优势<ul><li>当条件是判断某个变量或表达式是否等于某个固定的常量值时，使用if和switch都可以，习惯上使用switch更多。因为<code>效率稍高</code>。当条件是区间范围的判断时，只能使用if语句。</li><li>使用switch可以利用<code>穿透性</code>，同时执行多个分支，而if…else没有穿透性。</li></ul></li></ul></li><li><p><strong>案例：只能使用 if-else</strong></p><p>从键盘输入一个整数，判断是正数、负数、还是零。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfOrSwitchDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.print(<span class="hljs-string">&quot;请输入整数：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> input.nextInt();<br><br>        <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(num + <span class="hljs-string">&quot;是正整数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(num + <span class="hljs-string">&quot;是负整数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(num + <span class="hljs-string">&quot;是零&quot;</span>);<br>        &#125;<br><br>        input.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-5-练习"><a href="#2-2-5-练习" class="headerlink" title="2.2.5 练习"></a>2.2.5 练习</h4><p><strong>练习1：</strong>从键盘输入星期的整数值，输出星期的英文单词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义指定的星期</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入星期值：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">weekday</span> <span class="hljs-operator">=</span> input.nextInt();<br><br>        <span class="hljs-comment">//switch语句实现选择</span><br>        <span class="hljs-keyword">switch</span>(weekday) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(<span class="hljs-string">&quot;Monday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(<span class="hljs-string">&quot;Tuesday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(<span class="hljs-string">&quot;Wednesday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                System.out.println(<span class="hljs-string">&quot;Thursday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(<span class="hljs-string">&quot;Friday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                System.out.println(<span class="hljs-string">&quot;Saturday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                System.out.println(<span class="hljs-string">&quot;Sunday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;你输入的星期值有误！&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        input.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">使用 <span class="hljs-keyword">switch</span> 把小写类型的 <span class="hljs-type">char</span>型转为大写。只转换 a, b, c, d, e. 其它的输出 “other”。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">char</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c&#x27;</span>;<br>        <span class="hljs-keyword">switch</span> (word) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;D&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;E&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span> :<br>                System.out.println(<span class="hljs-string">&quot;other&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习3：</strong></p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gml">编写程序：从键盘上读入一个学生成绩，存放在变量<span class="hljs-variable language_">score</span>中，根据<span class="hljs-variable language_">score</span>的值输出其对应的成绩等级：<br><br><span class="hljs-variable language_">score</span>&gt;=<span class="hljs-number">90</span>           等级:  A<br><span class="hljs-number">70</span>&lt;=<span class="hljs-variable language_">score</span>&lt;<span class="hljs-number">90</span>        等级:  B    <br><span class="hljs-number">60</span>&lt;=<span class="hljs-variable language_">score</span>&lt;<span class="hljs-number">70</span>        等级:  C<br><span class="hljs-variable language_">score</span>&lt;<span class="hljs-number">60</span>            等级:  D<br><br>方式一：使用<span class="hljs-keyword">if</span>-<span class="hljs-keyword">else</span><br>方式二：使用<span class="hljs-keyword">switch</span>-<span class="hljs-keyword">case</span>:  <span class="hljs-variable language_">score</span> / <span class="hljs-number">10</span>:   <span class="hljs-number">0</span> - <span class="hljs-number">10</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入学生成绩：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>        <span class="hljs-type">char</span> grade;<span class="hljs-comment">//记录学生等级</span><br>        <span class="hljs-comment">//方式1：</span><br><span class="hljs-comment">//        if(score &gt;= 90)&#123;</span><br><span class="hljs-comment">//            grade = &#x27;A&#x27;;</span><br><span class="hljs-comment">//        &#125;else if(score &gt;= 70 &amp;&amp; score &lt; 90)&#123;</span><br><span class="hljs-comment">//            grade = &#x27;B&#x27;;</span><br><span class="hljs-comment">//        &#125;else if(score &gt;= 60 &amp;&amp; score &lt; 70)&#123;</span><br><span class="hljs-comment">//            grade = &#x27;C&#x27;;</span><br><span class="hljs-comment">//        &#125;else&#123;</span><br><span class="hljs-comment">//            grade = &#x27;D&#x27;;</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//方式2：</span><br>        <span class="hljs-keyword">switch</span>(score / <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                grade = <span class="hljs-string">&#x27;A&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                grade = <span class="hljs-string">&#x27;B&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                grade = <span class="hljs-string">&#x27;C&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span> :<br>                grade = <span class="hljs-string">&#x27;D&#x27;</span>;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;学生成绩为&quot;</span> + score + <span class="hljs-string">&quot;,对应的等级为&quot;</span> + grade);<br><br>        scan.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习4：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">编写一个程序，为一个给定的年份找出其对应的中国生肖。中国的生肖基于12年一个周期，每年用一个动物代表：rat、ox、tiger、rabbit、dragon、snake、horse、sheep、monkey、rooster、dog、pig。<br><br>提示：2022年：虎  <span class="hljs-number"> 2022 </span>%<span class="hljs-number"> 12 </span>==<span class="hljs-number"> 6 </span><br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904482_watermark.png" alt="image-20220314005350344"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 18:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//从键盘输入一个年份</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入年份：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> input.nextInt();<br>        input.close();<br><br>        <span class="hljs-comment">//判断</span><br>        <span class="hljs-keyword">switch</span>(year % <span class="hljs-number">12</span>)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是猴年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是鸡年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是狗年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是猪年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是鼠年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是牛年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是虎年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是兔年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是龙年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是蛇年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是马年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是羊年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;输入错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习5：押宝游戏</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">随机产生<span class="hljs-number">3</span>个<span class="hljs-number">1</span><span class="hljs-number">-6</span>的整数，如果三个数相等，那么称为“豹子”，如果三个数之和大于<span class="hljs-number">9</span>，称为“大”，如果三个数之和小于等于<span class="hljs-number">9</span>，称为“小”，用户从键盘输入押的是“豹子”、“大”、“小”，并判断是否猜对了<br><br>提示：随机数  Math.<span class="hljs-built_in">random</span>()产生 [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)范围内的小数<br>     如何获取[<span class="hljs-keyword">a</span>,b]范围内的随机整数呢？(int)(Math.<span class="hljs-built_in">random</span>() * (b - <span class="hljs-keyword">a</span> + <span class="hljs-number">1</span>)) + <span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904463_watermark.png" alt="1659112038716"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1、随机产生3个1-6的整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">6</span> + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">6</span> + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">6</span> + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//2、押宝</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请押宝（豹子、大、小）：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ya</span> <span class="hljs-operator">=</span> input.next();<br>        input.close();<br><br>        <span class="hljs-comment">//3、判断结果</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//switch支持String类型</span><br>        <span class="hljs-keyword">switch</span> (ya)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;豹子&quot;</span>: result = a == b &amp;&amp; b == c; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;大&quot;</span>: result = a + b + c &gt; <span class="hljs-number">9</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;小&quot;</span>: result = a + b + c &lt;= <span class="hljs-number">9</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:System.out.println(<span class="hljs-string">&quot;输入有误！&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;a,b,c分别是：&quot;</span> + a +<span class="hljs-string">&quot;,&quot;</span> + b +<span class="hljs-string">&quot;,&quot;</span> + c );<br>        System.out.println(result ? <span class="hljs-string">&quot;猜中了&quot;</span> : <span class="hljs-string">&quot;猜错了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习6：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">使用<span class="hljs-keyword">switch</span>语句改写下列<span class="hljs-keyword">if</span>语句：<br><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-keyword">if</span>(a==<span class="hljs-number">1</span>)<br>x+=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a==<span class="hljs-number">2</span>)<br>x+=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a==<span class="hljs-number">3</span>)<br>x+=<span class="hljs-number">16</span>;<br><span class="hljs-keyword">else</span><br>x+=<span class="hljs-number">34</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">switch</span>(a)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        x += <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        x += <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        x += <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span> :<br>        x += <span class="hljs-number">34</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-循环语句"><a href="#3-循环语句" class="headerlink" title="3. 循环语句"></a>3. 循环语句</h2><ul><li><p>理解：循环语句具有在<code>某些条件</code>满足的情况下，<code>反复执行</code>特定代码的功能。</p></li><li><p>循环结构分类：</p><ul><li>for 循环</li><li>while 循环</li><li>do-while 循环</li></ul></li><li><p>循环结构<code>四要素</code>：</p><ul><li>初始化部分</li><li>循环条件部分</li><li>循环体部分</li><li>迭代部分</li></ul></li></ul><h3 id="3-1-for循环"><a href="#3-1-for循环" class="headerlink" title="3.1  for循环"></a>3.1  for循环</h3><h4 id="3-1-1-基本语法"><a href="#3-1-1-基本语法" class="headerlink" title="3.1.1 基本语法"></a>3.1.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (①初始化部分; ②循环条件部分; ④迭代部分)｛<br>         ③循环体部分;<br>｝<br></code></pre></td></tr></table></figure><p><strong>执行过程：</strong>①-②-③-④-②-③-④-②-③-④-…..-②</p><p><strong>图示：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904532_watermark.png" alt="image-20220315013023236" style="zoom:80%;" /><p><strong>说明：</strong></p><ul><li>for(;;)中的两个；不能多也不能少</li><li>①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔</li><li>②循环条件部分为boolean类型表达式，当值为false时，退出循环</li><li>④可以有多个变量更新，用逗号分隔</li></ul><h4 id="3-1-2-应用举例"><a href="#3-1-2-应用举例" class="headerlink" title="3.1.2 应用举例"></a>3.1.2 应用举例</h4><p><strong>案例1：使用for循环重复执行某些语句</strong></p><p>题目：输出5行HelloWorld</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//需求1：控制台输出5行Hello World!</span><br><span class="hljs-comment">//写法1：</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><br><span class="hljs-comment">//写法2：</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br>System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：格式的多样性</strong></p><p>题目：写出输出的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(System.out.print(<span class="hljs-string">&quot;a&quot;</span>);num &lt; <span class="hljs-number">3</span>;System.out.print(<span class="hljs-string">&quot;c&quot;</span>),num++)&#123;<br>            System.out.print(<span class="hljs-string">&quot;b&quot;</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：累加的思想</strong></p><p>题目：遍历1-100以内的偶数，并获取偶数的个数，获取所有的偶数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录偶数的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录偶数的和</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">100</span>;i++)&#123;<br><br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>                count++;<br>                sum += i;<br>            &#125;<br><br>            <span class="hljs-comment">//System.out.println(&quot;偶数的个数为：&quot; + count);</span><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;偶数的个数为：&quot;</span> + count);<br>        System.out.println(<span class="hljs-string">&quot;偶数的总和为：&quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例4：结合分支结构使用</strong></p><p>题目：输出所有的水仙花数，所谓水仙花数是指一个3位数，其各个位上数字立方和等于其本身。例如： <code>153 = 1*1*1 + 3*3*3 + 5*5*5</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//定义统计变量，初始化值是0</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//获取三位数，用for循环实现</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; x &lt; <span class="hljs-number">1000</span>; x++) &#123;<br><span class="hljs-comment">//获取三位数的个位，十位，百位</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> x % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> x / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> x / <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">//判断这个三位数是否是水仙花数，如果是，统计变量++</span><br><span class="hljs-keyword">if</span>((ge*ge*ge+shi*shi*shi+bai*bai*bai) == x) &#123;<br>                System.out.println(<span class="hljs-string">&quot;水仙花数：&quot;</span> + x);<br>count++;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//输出统计结果就可以了</span><br>System.out.println(<span class="hljs-string">&quot;水仙花数共有&quot;</span>+count+<span class="hljs-string">&quot;个&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拓展：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">打印出四位数字中“个位+百位”等于“十位+千位”并且个位数为偶数，千位数为奇数的数字，并打印符合条件的数字的个数。<br></code></pre></td></tr></table></figure><p><strong>案例5：结合break的使用</strong></p><p>说明：输入两个正整数m和n，求其最大公约数和最小公倍数。</p><p>比如：12和20的最大公约数是4，最小公倍数是60。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 17:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//需求1：最大公约数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>, n = <span class="hljs-number">20</span>;<br>        <span class="hljs-comment">//取出两个数中的较小值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> (m &lt; n) ? m : n;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> min; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<span class="hljs-comment">//for(int i = 1;i &lt;= min;i++)&#123;</span><br><br>            <span class="hljs-keyword">if</span> (m % i == <span class="hljs-number">0</span> &amp;&amp; n % i == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;最大公约数是：&quot;</span> + i); <span class="hljs-comment">//公约数</span><br><br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出当前循环结构</span><br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-comment">//需求2：最小公倍数</span><br>        <span class="hljs-comment">//取出两个数中的较大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> (m &gt; n) ? m : n;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> max; i &lt;= m * n; i++) &#123;<br><br>            <span class="hljs-keyword">if</span> (i % m == <span class="hljs-number">0</span> &amp;&amp; i % n == <span class="hljs-number">0</span>) &#123;<br><br>                System.out.println(<span class="hljs-string">&quot;最小公倍数是：&quot;</span> + i);<span class="hljs-comment">//公倍数</span><br><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：</p><p>1、我们可以在循环中使用break。一旦执行break，就跳出当前循环结构。</p><p>2、小结：如何结束一个循环结构？</p><p>​      结束情况1：循环结构中的循环条件部分返回false</p><p>​      结束情况2：循环结构中执行了break。</p><p>3、如果一个循环结构不能结束，那就是一个死循环！我们开发中要避免出现死循环。</p></blockquote><h4 id="3-1-3-练习"><a href="#3-1-3-练习" class="headerlink" title="3.1.3 练习"></a>3.1.3 练习</h4><p><strong>练习1：</strong>打印1~100之间所有奇数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForExer1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录奇数的和</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)&#123;<br>                sum += i;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;奇数总和为：&quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2：</strong>打印1~100之间所有是7的倍数的整数的个数及总和（体会设置计数器的思想）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForExer2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录总和</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录个数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>)&#123;<br>                sum += i;<br>                count++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;1~100之间所有是7的倍数的整数的和为：&quot;</span> + sum);<br>        System.out.println(<span class="hljs-string">&quot;1~100之间所有是7的倍数的整数的个数为：&quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习3：</strong></p><p>编写程序从1循环到150，并在每行打印一个值，另外在每个3的倍数行上打印出“foo”,在每个5的倍数行上打印“biz”,在每个7的倍数行上打印输出“baz”。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904553_watermark.png" alt="image-20220315013722962" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForExer3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">150</span>; i++) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.print(<span class="hljs-string">&quot;foo\t&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.print(<span class="hljs-string">&quot;biz\t&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.print(<span class="hljs-string">&quot;baz\t&quot;</span>);<br>            &#125;<br><br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-while循环"><a href="#3-2-while循环" class="headerlink" title="3.2 while循环"></a>3.2 while循环</h3><h4 id="3-2-1-基本语法"><a href="#3-2-1-基本语法" class="headerlink" title="3.2.1 基本语法"></a>3.2.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">①初始化部分<br><span class="hljs-keyword">while</span>(②循环条件部分)｛<br>    ③循环体部分;<br>    ④迭代部分;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行过程：</strong>①-②-③-④-②-③-④-②-③-④-…-②</p><p><strong>图示：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904532_watermark.png" alt="image-20220315013023236" style="zoom:80%;" /><p><strong>说明：</strong></p><ul><li>while(循环条件)中循环条件必须是boolean类型。</li><li>注意不要忘记声明④迭代部分。否则，循环将不能结束，变成死循环。</li><li>for循环和while循环可以相互转换。二者没有性能上的差别。实际开发中，根据具体结构的情况，选择哪个格式更合适、美观。</li><li>for循环与while循环的区别：初始化条件部分的作用域不同。</li></ul><h4 id="3-2-2-应用举例"><a href="#3-2-2-应用举例" class="headerlink" title="3.2.2 应用举例"></a>3.2.2 应用举例</h4><p><strong>案例1：</strong>输出5行HelloWorld!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WhileTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">5</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>i++;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WhileTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录1-100所有的偶数的和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录1-100之间偶数的个数</span><br><br><span class="hljs-keyword">while</span>(num &lt;= <span class="hljs-number">100</span>)&#123;<br><br><span class="hljs-keyword">if</span>(num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>System.out.println(num);<br>sum += num;<br>count++;<br>&#125;<br><br><span class="hljs-comment">//迭代条件</span><br>num++;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;偶数的总和为：&quot;</span> + sum);<br>System.out.println(<span class="hljs-string">&quot;偶数的个数为：&quot;</span> + count);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>猜数字游戏</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">随机生成一个<span class="hljs-number">100</span>以内的数，猜这个随机数是多少？<br><br>从键盘输入数，如果大了，提示大了；如果小了，提示小了；如果对了，就不再猜了，并统计一共猜了多少次。<br><br>提示：生成一个<span class="hljs-selector-attr">[a,b]</span> 范围的随机数的方式：(int)(Math<span class="hljs-selector-class">.random</span>() * (<span class="hljs-selector-tag">b</span> - <span class="hljs-selector-tag">a</span> + <span class="hljs-number">1</span>) + <span class="hljs-selector-tag">a</span>)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 16:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GuessNumber</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//获取一个随机数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//记录猜的次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//实例化Scanner</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入一个整数(1-100):&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">guess</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>        <span class="hljs-keyword">while</span> (guess != random) &#123;<br><br>            <span class="hljs-keyword">if</span> (guess &gt; random) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜大了&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (guess &lt; random) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜小了&quot;</span>);<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;请输入一个整数(1-100):&quot;</span>);<br>            guess = scan.nextInt();<br><span class="hljs-comment">//累加猜的次数</span><br>            count++;<br><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;猜中了！&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;一共猜了&quot;</span> + count + <span class="hljs-string">&quot;次&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例4：折纸珠穆朗玛峰</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">世界最高山峰是珠穆朗玛峰，它的高度是8848.86米，假如我有一张足够大的纸，它的厚度是0.1毫米。<br>请问，我折叠多少次，可以折成珠穆朗玛峰的高度?<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 19:08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZFTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义一个计数器，初始值为0</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//定义珠穆朗玛峰的高度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">zf</span> <span class="hljs-operator">=</span> <span class="hljs-number">8848860</span>;<span class="hljs-comment">//单位：毫米</span><br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">paper</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<span class="hljs-comment">//单位：毫米</span><br><br>        <span class="hljs-keyword">while</span>(paper &lt; zf)&#123;<br>            <span class="hljs-comment">//在循环中执行累加，对应折叠了多少次</span><br>            count++;<br>            paper *= <span class="hljs-number">2</span>;<span class="hljs-comment">//循环的执行过程中每次纸张折叠，纸张的厚度要加倍</span><br>        &#125;<br><br>        <span class="hljs-comment">//打印计数器的值</span><br>        System.out.println(<span class="hljs-string">&quot;需要折叠：&quot;</span> + count + <span class="hljs-string">&quot;次&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;折纸的高度为&quot;</span> + paper/<span class="hljs-number">1000</span> + <span class="hljs-string">&quot;米，超过了珠峰的高度&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-3-练习"><a href="#3-2-3-练习" class="headerlink" title="3.2.3 练习"></a>3.2.3 练习</h4><p><strong>练习：</strong>从键盘输入整数，输入0结束，统计输入的正数、负数的个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test05While</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">positive</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//记录正数的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">negative</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//记录负数的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//初始化为特殊值，使得第一次循环条件成立</span><br>        <span class="hljs-keyword">while</span>(num != <span class="hljs-number">0</span>)&#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入整数（0表示结束）：&quot;</span>);<br>            num = input.nextInt();<br><br>            <span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br>                positive++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">0</span>)&#123;<br>                negative++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;正数个数：&quot;</span> + positive);<br>        System.out.println(<span class="hljs-string">&quot;负数个数：&quot;</span> + negative);<br><br>        input.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-do-while循环"><a href="#3-3-do-while循环" class="headerlink" title="3.3 do-while循环"></a>3.3 do-while循环</h3><h4 id="3-3-1-基本语法"><a href="#3-3-1-基本语法" class="headerlink" title="3.3.1 基本语法"></a>3.3.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">①初始化部分;<br><span class="hljs-keyword">do</span>&#123;<br>③循环体部分<br>④迭代部分<br>&#125;<span class="hljs-keyword">while</span>(②循环条件部分); <br></code></pre></td></tr></table></figure><p><strong>执行过程：</strong>①-③-④-②-③-④-②-③-④-…-②</p><p><strong>图示：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221916418_watermark.png" alt="image-20220512165558698" style="zoom:80%;" /><p><strong>说明：</strong></p><ul><li>结尾while(循环条件)中循环条件必须是boolean类型</li><li>do{}while();最后有一个分号</li><li>do-while结构的循环体语句是至少会执行一次，这个和for和while是不一样的</li><li>循环的三个结构for、while、do-while三者是可以相互转换的。</li></ul><h4 id="3-3-2-应用举例"><a href="#3-3-2-应用举例" class="headerlink" title="3.3.2 应用举例"></a>3.3.2 应用举例</h4><p><strong>案例1：</strong>遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhileTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</span><br><span class="hljs-comment">//初始化部分</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录1-100所有的偶数的和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录1-100之间偶数的个数</span><br><br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-comment">//循环体部分</span><br><span class="hljs-keyword">if</span>(num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>System.out.println(num);<br>sum += num;<br>count++;<br>&#125;<br><br>num++;<span class="hljs-comment">//迭代部分</span><br><br><br>&#125;<span class="hljs-keyword">while</span>(num &lt;= <span class="hljs-number">100</span>); <span class="hljs-comment">//循环条件部分</span><br><br><br>System.out.println(<span class="hljs-string">&quot;偶数的总和为：&quot;</span> + sum);<br>System.out.println(<span class="hljs-string">&quot;偶数的个数为：&quot;</span> + count);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>体会do-while至少会执行一次循环体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhileTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//while循环:</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">while</span>(num1 &gt; <span class="hljs-number">10</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;hello:while&quot;</span>);<br>num1--;<br>&#125;<br><br><span class="hljs-comment">//do-while循环:</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">do</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello:do-while&quot;</span>);<br>num2--;<br>&#125;<span class="hljs-keyword">while</span>(num2 &gt; <span class="hljs-number">10</span>);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：ATM取款</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">声明变量balance并初始化为<span class="hljs-number">0</span>，用以表示银行账户的余额，下面通过ATM机程序实现存款，取款等功能。<br><br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>ATM<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br>   <span class="hljs-number">1</span>、存款<br>   <span class="hljs-number">2</span>、取款<br>   <span class="hljs-number">3</span>、显示余额<br>   <span class="hljs-number">4</span>、退出<br>请选择(<span class="hljs-number">1</span>-<span class="hljs-number">4</span>)：<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 19:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ATM</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//初始化条件</span><br><span class="hljs-type">double</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<span class="hljs-comment">//表示银行账户的余额</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//用于控制循环的结束</span><br><br><span class="hljs-keyword">do</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;=========ATM========&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\t1、存款&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\t2、取款&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\t3、显示余额&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\t4、退出&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;请选择(1-4)：&quot;</span>);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">selection</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br><span class="hljs-keyword">switch</span>(selection)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>System.out.print(<span class="hljs-string">&quot;要存款的额度为：&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">addMoney</span> <span class="hljs-operator">=</span> scan.nextDouble();<br><span class="hljs-keyword">if</span>(addMoney &gt; <span class="hljs-number">0</span>)&#123;<br>balance += addMoney;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>System.out.print(<span class="hljs-string">&quot;要取款的额度为：&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">minusMoney</span> <span class="hljs-operator">=</span> scan.nextDouble();<br><span class="hljs-keyword">if</span>(minusMoney &gt; <span class="hljs-number">0</span> &amp;&amp; balance &gt;= minusMoney)&#123;<br>balance -= minusMoney;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;您输入的数据非法或余额不足&quot;</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>System.out.println(<span class="hljs-string">&quot;当前的余额为：&quot;</span> + balance);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>System.out.println(<span class="hljs-string">&quot;欢迎下次进入此系统。^_^&quot;</span>);<br>isFlag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;请重新选择！&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<span class="hljs-keyword">while</span>(isFlag);<br><br><span class="hljs-comment">//资源关闭</span><br>scan.close();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-3-练习"><a href="#3-3-3-练习" class="headerlink" title="3.3.3 练习"></a>3.3.3 练习</h4><p><strong>练习1：</strong>随机生成一个100以内的数，猜这个随机数是多少？</p><p>从键盘输入数，如果大了提示，大了；如果小了，提示小了；如果对了，就不再猜了，并统计一共猜了多少次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhileExer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//随机生成一个100以内的整数</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Math.random() ==&gt; [0,1)的小数</span><br><span class="hljs-comment">Math.random()* 100 ==&gt; [0,100)的小数</span><br><span class="hljs-comment">(int)(Math.random()* 100) ==&gt; [0,100)的整数</span><br><span class="hljs-comment">*/</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()* <span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//System.out.println(num);</span><br><br>        <span class="hljs-comment">//声明一个变量，用来存储猜的次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> guess;<span class="hljs-comment">//提升作用域</span><br>        <span class="hljs-keyword">do</span>&#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入100以内的整数：&quot;</span>);<br>            guess = input.nextInt();<br><br>            <span class="hljs-comment">//输入一次，就表示猜了一次</span><br>            count++;<br><br>            <span class="hljs-keyword">if</span>(guess &gt; num)&#123;<br>                System.out.println(<span class="hljs-string">&quot;大了&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(guess &lt; num)&#123;<br>                System.out.println(<span class="hljs-string">&quot;小了&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">while</span>(num != guess);<br><br>        System.out.println(<span class="hljs-string">&quot;一共猜了：&quot;</span> + count+<span class="hljs-string">&quot;次&quot;</span>);<br><br>        input.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-对比三种循环结构"><a href="#3-4-对比三种循环结构" class="headerlink" title="3.4 对比三种循环结构"></a>3.4 对比三种循环结构</h3><ul><li><strong>三种循环结构都具有四个要素：</strong><ul><li>循环变量的初始化条件</li><li>循环条件</li><li>循环体语句块</li><li>循环变量的修改的迭代表达式</li></ul></li></ul><ul><li><strong>从循环次数角度分析</strong><ul><li>do-while循环至少执行一次循环体语句。</li><li>for和while循环先判断循环条件语句是否成立，然后决定是否执行循环体。</li></ul></li><li><strong>如何选择</strong><ul><li>遍历有明显的循环次数（范围）的需求，选择for循环</li><li>遍历没有明显的循环次数（范围）的需求，选择while循环</li><li>如果循环体语句块至少执行一次，可以考虑使用do-while循环</li><li>本质上：三种循环之间完全可以互相转换，都能实现循环的功能</li></ul></li></ul><h3 id="3-5-“无限”循环"><a href="#3-5-“无限”循环" class="headerlink" title="3.5 “无限”循环"></a>3.5 “无限”循环</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221917760_watermark.jpg" alt="类似：死循环"></p><h4 id="3-5-1-基本语法"><a href="#3-5-1-基本语法" class="headerlink" title="3.5.1 基本语法"></a>3.5.1 基本语法</h4><p><strong>语法格式：</strong></p><ul><li>最简单”无限”循环格式：<code>while(true)</code> , <code>for(;;)</code></li></ul><p><strong>适用场景：</strong></p><ul><li>开发中，有时并不确定需要循环多少次，需要根据循环体内部某些条件，来控制循环的结束（使用break）。</li><li>如果此循环结构不能终止，则构成了死循环！开发中要避免出现死循环。</li></ul><h4 id="3-5-2-应用举例"><a href="#3-5-2-应用举例" class="headerlink" title="3.5.2 应用举例"></a>3.5.2 应用举例</h4><p><strong>案例1：</strong>实现爱你到永远…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndlessFor1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;)&#123;<br>            System.out.println(<span class="hljs-string">&quot;我爱你！&quot;</span>);<br>        &#125;<br><span class="hljs-comment">//        System.out.println(&quot;end&quot;);//永远无法到达的语句，编译报错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndlessFor2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (; <span class="hljs-literal">true</span>;)&#123; <span class="hljs-comment">//条件永远成立，死循环</span><br>            System.out.println(<span class="hljs-string">&quot;我爱你！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndlessFor3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">10</span>; )&#123; <span class="hljs-comment">//循环变量没有修改，条件永远成立，死循环</span><br>            System.out.println(<span class="hljs-string">&quot;我爱你！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>思考：如下代码执行效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndlessFor4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">10</span>; )&#123; <span class="hljs-comment">//一次都不执行</span><br>            System.out.println(<span class="hljs-string">&quot;我爱你！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PositiveNegative</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <br><span class="hljs-type">int</span> <span class="hljs-variable">positiveNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//统计正数的个数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">negativeNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//统计负数的个数</span><br><span class="hljs-keyword">for</span>(;;)&#123;  <span class="hljs-comment">//while(true)&#123;</span><br>System.out.println(<span class="hljs-string">&quot;请输入一个整数：(输入为0时结束程序)&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br> positiveNumber++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">0</span>)&#123;<br> negativeNumber++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;程序结束&quot;</span>);<br><span class="hljs-keyword">break</span>; <br>            &#125;<br>         &#125;<br> System.out.println(<span class="hljs-string">&quot;正数的个数为：&quot;</span>+ positiveNumber);<br> System.out.println(<span class="hljs-string">&quot;负数的个数为：&quot;</span>+ negativeNumber);  <br>        <br>         scanner.close();<br>&#125; <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-6-嵌套循环（或多重循环）"><a href="#3-6-嵌套循环（或多重循环）" class="headerlink" title="3.6 嵌套循环（或多重循环）"></a>3.6 嵌套循环（或多重循环）</h3><h4 id="3-6-1-使用说明"><a href="#3-6-1-使用说明" class="headerlink" title="3.6.1 使用说明"></a>3.6.1 使用说明</h4><ul><li><strong>所谓嵌套循环</strong>，是指一个循环结构A的循环体是另一个循环结构B。比如，for循环里面还有一个for循环，就是嵌套循环。其中，for ,while ,do-while均可以作为外层循环或内层循环。<ul><li>外层循环：循环结构A</li><li>内层循环：循环结构B</li></ul></li><li>实质上，<code>嵌套循环就是把内层循环当成外层循环的循环体</code>。只有当内层循环的循环条件为false时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的外层循环。</li><li>设外层循环次数为<code>m</code>次，内层为<code>n</code>次，则内层循环体实际上需要执行<code>m*n</code>次。</li><li><strong>技巧：</strong>从二维图形的角度看，外层循环控制<code>行数</code>，内层循环控制<code>列数</code>。</li><li><strong>开发经验：</strong>实际开发中，我们最多见到的嵌套循环是两层。一般不会出现超过三层的嵌套循环。如果将要出现，一定要停下来重新梳理业务逻辑，重新思考算法的实现，控制在三层以内。否则，可读性会很差。</li></ul><p>例如：两个for嵌套循环格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化语句①; 循环条件语句②; 迭代语句⑦) &#123;<br>    <span class="hljs-keyword">for</span>(初始化语句③; 循环条件语句④; 迭代语句⑥) &#123;<br>      循环体语句⑤;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//执行过程：① - ② - ③ - ④ - ⑤ - ⑥ - ④ - ⑤ - ⑥ - ... - ④ - ⑦ - ② - ③ - ④ - ⑤ - ⑥ - ④..</span><br></code></pre></td></tr></table></figure><p><strong>执行特点：</strong>外层循环执行一次，内层循环执行一轮。</p><h4 id="3-6-2-应用举例"><a href="#3-6-2-应用举例" class="headerlink" title="3.6.2 应用举例"></a>3.6.2 应用举例</h4><p><strong>案例1：</strong>打印5行6个*</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">******</span><br><span class="hljs-comment">******</span><br><span class="hljs-comment">******</span><br><span class="hljs-comment">******</span><br><span class="hljs-comment">******</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= <span class="hljs-number">5</span>;j++)&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">6</span>;i++)&#123;<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>&#125;<br><br>System.out.println();<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>打印5行直角三角形</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">*</span><br><span class="hljs-comment">**</span><br><span class="hljs-comment">***</span><br><span class="hljs-comment">****</span><br><span class="hljs-comment">*****</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>打印5行倒直角三角形</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">*****</span><br><span class="hljs-comment">****</span><br><span class="hljs-comment">***</span><br><span class="hljs-comment">**</span><br><span class="hljs-comment">*</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= <span class="hljs-number">6</span> - i;j++)&#123;<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br><br>&#125;<br>System.out.println();<br><br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例4：打印”菱形”形状的图案</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">        * </span><br><span class="hljs-comment">      * * * </span><br><span class="hljs-comment">    * * * * * </span><br><span class="hljs-comment">  * * * * * * * </span><br><span class="hljs-comment">* * * * * * * * * </span><br><span class="hljs-comment">  * * * * * * * </span><br><span class="hljs-comment">    * * * * * </span><br><span class="hljs-comment">      * * * </span><br><span class="hljs-comment">        * </span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest4</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        上半部分im(表示-的个数)    n(表示*的个数)关系式：2*i + m = 10 --&gt; m = 10 - 2*i</span><br><span class="hljs-comment">    --------*   1   8   1n = 2 * i - 1</span><br><span class="hljs-comment">    ------* * *   2   6   3</span><br><span class="hljs-comment">    ----* * * * *   3   4   5</span><br><span class="hljs-comment">    --* * * * * * *   4   2       7</span><br><span class="hljs-comment">    * * * * * * * * *  5   0   9</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        下半部分         i      m                n              关系式： m = 2 * i</span><br><span class="hljs-comment">    --* * * * * * *    1       2                7                     n = 9 - 2 * i</span><br><span class="hljs-comment">    ----* * * * *      2       4                5</span><br><span class="hljs-comment">    ------* * *        3       6                3</span><br><span class="hljs-comment">    --------*          4       8                1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            */</span><br>        <span class="hljs-comment">//上半部分</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">//-</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">10</span> - <span class="hljs-number">2</span> * i; j++) &#123;<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//*</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>; k++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;* &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        <span class="hljs-comment">//下半部分</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-comment">//-</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span> * i; j++) &#123;<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//*</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">9</span> - <span class="hljs-number">2</span> * i; k++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;* &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例5：九九乘法表</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221917166_watermark.png" alt="image-20221113193013204"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                System.out.print(i + <span class="hljs-string">&quot;*&quot;</span> + j + <span class="hljs-string">&quot;=&quot;</span> + (i * j) + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-6-3-练习"><a href="#3-6-3-练习" class="headerlink" title="3.6.3 练习"></a>3.6.3 练习</h4><p><strong>练习1：</strong>将一天中的时间打印到控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;hour &lt; <span class="hljs-number">24</span> ;hour++ ) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; min &lt; <span class="hljs-number">60</span> ; min++) &#123;<br>System.out.println(hour + <span class="hljs-string">&quot;时&quot;</span> + min +<span class="hljs-string">&quot;分&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-关键字break和continue的使用"><a href="#4-关键字break和continue的使用" class="headerlink" title="4. 关键字break和continue的使用"></a>4. 关键字break和continue的使用</h2><h3 id="4-1-break和continue的说明"><a href="#4-1-break和continue的说明" class="headerlink" title="4.1 break和continue的说明"></a>4.1 break和continue的说明</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">适用范围在循环结构中使用的作用相同点<br><br><span class="hljs-keyword">break</span><span class="hljs-keyword">switch</span>-<span class="hljs-keyword">case</span><br>循环结构一旦执行，就结束(或跳出)当前循环结构    此关键字的后面，不能声明语句<br><br><span class="hljs-keyword">continue</span>循环结构一旦执行，就结束(或跳出)当次循环结构    此关键字的后面，不能声明语句<br></code></pre></td></tr></table></figure><p>此外，很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它，但使程序容易出错。Java中的break和continue是不同于goto的。</p><h3 id="4-2-应用举例"><a href="#4-2-应用举例" class="headerlink" title="4.2 应用举例"></a>4.2 应用举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakContinueTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br><br><span class="hljs-keyword">if</span>(i % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//break;//123</span><br><span class="hljs-keyword">continue</span>;<span class="hljs-comment">//123567910</span><br><span class="hljs-comment">//如下的语句不可能被执行，编译不通过</span><br><span class="hljs-comment">//System.out.println(&quot;今晚迪丽热巴要约我吃饭&quot;);</span><br>&#125;<br><br>System.out.print(i);<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;####&quot;</span>);<br><br><span class="hljs-comment">//嵌套循环中的使用</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">4</span>;i++)&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= <span class="hljs-number">10</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(j % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//break; //结束的是包裹break关键字的最近的一层循环！</span><br><span class="hljs-keyword">continue</span>;<span class="hljs-comment">//结束的是包裹break关键字的最近的一层循环的当次！</span><br>&#125;<br>System.out.print(j);<br>&#125;<br>System.out.println();<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-带标签的使用"><a href="#4-3-带标签的使用" class="headerlink" title="4.3 带标签的使用"></a>4.3 带标签的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">break</span>语句用于终止某个语句块的执行<br>&#123;    …… <br><span class="hljs-keyword">break</span>;<br> ……<br>&#125;<br><br><span class="hljs-keyword">break</span>语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块 <br>label1: &#123;   ……        <br>label2:     &#123;   ……<br>label3: &#123;   ……<br>           <span class="hljs-keyword">break</span> label2;<br>           ……<br> &#125;<br>     &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><ul><li><p>continue语句出现在多层嵌套的循环语句体中时，也可以通过标签指明要跳过的是哪一层循环。</p></li><li><p>标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面。</p></li><li><p>举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakContinueTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>l:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">4</span>;i++)&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= <span class="hljs-number">10</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(j % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//break l;</span><br><span class="hljs-keyword">continue</span> l;<br>&#125;<br>System.out.print(j);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-经典案例"><a href="#4-4-经典案例" class="headerlink" title="4.4 经典案例"></a>4.4 经典案例</h3><p><strong>题目：找出100以内所有的素数（质数）？100000以内的呢？</strong></p><p>目的：不同的代码的实现方式，可以效率差别很大。</p><p>分析：素数（质数）：只能被1和它本身整除的自然数。  —&gt; 从2开始，到这个数-1为止，此范围内没有这个数的约数。则此数是一个质数。<br>比如：2、3、5、7、11、13、17、19、23、…</p><p><strong>实现方式1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumberTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br><span class="hljs-comment">//boolean isFlag = true; //用于标识i是否被除尽过</span><br><br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">//记录当前时间距离1970-1-1 00:00:00的毫秒数</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录质数的个数</span><br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100000</span>;i++)&#123;  <span class="hljs-comment">//i</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//用于标识i是否被除尽过</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;j &lt;= i - <span class="hljs-number">1</span>;j++)&#123;<br><br><span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//表明i有约数</span><br>isFlag = <span class="hljs-literal">false</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//判断i是否是质数</span><br><span class="hljs-keyword">if</span>(isFlag)&#123; <span class="hljs-comment">//如果isFlag变量没有给修改过值，就意味着i没有被j除尽过。则i是一个质数</span><br><span class="hljs-comment">//System.out.println(i);</span><br>count++;<br>&#125;<br><br><span class="hljs-comment">//重置isFlag</span><br><span class="hljs-comment">//isFlag = true;</span><br><br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;质数的个数为：&quot;</span> + count);<br>System.out.println(<span class="hljs-string">&quot;执行此程序花费的毫秒数为：&quot;</span> + (end - start)); <span class="hljs-comment">//16628</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现方式2：</strong>针对实现方式1进行优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumberTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">//记录当前时间距离1970-1-1 00:00:00的毫秒数</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录质数的个数</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100000</span>;i++)&#123;  <span class="hljs-comment">//i</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//用于标识i是否被除尽过</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;j &lt;= Math.sqrt(i);j++)&#123; <span class="hljs-comment">//优化2：将循环条件中的i改为Math.sqrt(i)</span><br><br><span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//表明i有约数</span><br>isFlag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//优化1：主要针对非质数起作用</span><br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//判断i是否是质数</span><br><span class="hljs-keyword">if</span>(isFlag)&#123; <span class="hljs-comment">//如果isFlag变量没有给修改过值，就意味着i没有被j除尽过。则i是一个质数</span><br><span class="hljs-comment">//System.out.println(i);</span><br>count++;<br>&#125;<br><br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;质数的个数为：&quot;</span> + count);<br>System.out.println(<span class="hljs-string">&quot;执行此程序花费的毫秒数为：&quot;</span> + (end - start));<span class="hljs-comment">//1062</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现方式3（选做）：</strong>使用continue + 标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumberTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">//记录当前时间距离1970-1-1 00:00:00的毫秒数</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录质数的个数</span><br><br>label:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100000</span>;i++)&#123;  <span class="hljs-comment">//i</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;j &lt;= Math.sqrt(i);j++)&#123; <span class="hljs-comment">//优化2：将循环条件中的i改为Math.sqrt(i)</span><br><br><span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//表明i有约数</span><br><span class="hljs-keyword">continue</span> label;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//一旦程序能执行到此位置，说明i就是一个质数</span><br>System.out.println(i);<br>count++;<br>&#125;<br><br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;质数的个数为：&quot;</span> + count);<br>System.out.println(<span class="hljs-string">&quot;执行此程序花费的毫秒数为：&quot;</span> + (end - start));<span class="hljs-comment">//1062</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-练习"><a href="#4-5-练习" class="headerlink" title="4.5 练习"></a>4.5 练习</h3><p><strong>练习1：</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">生成 <span class="hljs-number">1</span><span class="hljs-number">-100</span> 之间的随机数，直到生成了 <span class="hljs-number">97</span> 这个数，看看一共用了几次？<br><br>提示：使用 (<span class="hljs-built_in">int</span>)(Math.<span class="hljs-built_in">random</span>() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberGuessTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录循环的次数（或生成随机数进行比较的次数）</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>            count++;<br>            <span class="hljs-keyword">if</span>(random == <span class="hljs-number">97</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;直到生成随机数97，一共比较了&quot;</span> + count + <span class="hljs-string">&quot;次&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-Scanner：键盘输入功能的实现"><a href="#5-Scanner：键盘输入功能的实现" class="headerlink" title="5. Scanner：键盘输入功能的实现"></a>5. Scanner：键盘输入功能的实现</h2><ul><li><p>如何从键盘获取不同类型（基本数据类型、String类型）的变量：使用Scanner类。</p></li><li><p>键盘输入代码的四个步骤：</p><ol><li>导包：<code>import java.util.Scanner;</code></li><li>创建Scanner类型的对象：<code>Scanner scan = new Scanner(System.in);</code></li><li>调用Scanner类的相关方法（<code>next() / nextXxx()</code>），来获取指定类型的变量</li><li>释放资源：<code>scan.close();</code></li></ol></li><li><p>注意：需要根据相应的方法，来输入指定类型的值。如果输入的数据类型与要求的类型不匹配时，会报异常 导致程序终止。</p></li></ul><h3 id="5-1-各种类型的数据输入"><a href="#5-1-各种类型的数据输入" class="headerlink" title="5.1 各种类型的数据输入"></a>5.1 各种类型的数据输入</h3><p><strong>案例：</strong>小明注册某交友网站，要求录入个人相关信息。如下：</p><p>请输入你的网名、你的年龄、你的体重、你是否单身、你的性别等情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//① 导包</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerTest1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//② 创建Scanner的对象</span><br>        <span class="hljs-comment">//Scanner是一个引用数据类型，它的全名称是java.util.Scanner</span><br>        <span class="hljs-comment">//scanner就是一个引用数据类型的变量了，赋给它的值是一个对象（对象的概念我们后面学习，暂时先这么叫）</span><br>        <span class="hljs-comment">//new Scanner(System.in)是一个new表达式，该表达式的结果是一个对象</span><br>        <span class="hljs-comment">//引用数据类型  变量 = 对象;</span><br>        <span class="hljs-comment">//这个等式的意思可以理解为用一个引用数据类型的变量代表一个对象，所以这个变量的名称又称为对象名</span><br>        <span class="hljs-comment">//我们也把scanner变量叫做scanner对象</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//System.in默认代表键盘输入</span><br>        <br>        <span class="hljs-comment">//③根据提示，调用Scanner的方法，获取不同类型的变量</span><br>        System.out.println(<span class="hljs-string">&quot;欢迎光临你好我好交友网站！&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;请输入你的网名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入你的年龄：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入你的体重：&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> scanner.nextDouble();<br><br>        System.out.print(<span class="hljs-string">&quot;你是否单身（true/false)：&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSingle</span> <span class="hljs-operator">=</span> scanner.nextBoolean();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入你的性别：&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> scanner.next().charAt(<span class="hljs-number">0</span>);<span class="hljs-comment">//先按照字符串接收，然后再取字符串的第一个字符（下标为0）</span><br><br>        System.out.println(<span class="hljs-string">&quot;你的基本情况如下：&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;网名：&quot;</span> + name + <span class="hljs-string">&quot;\n年龄：&quot;</span> + age + <span class="hljs-string">&quot;\n体重：&quot;</span> + weight + <br>                           <span class="hljs-string">&quot;\n单身：&quot;</span> + isSingle + <span class="hljs-string">&quot;\n性别：&quot;</span> + gender);<br>        <br>        <span class="hljs-comment">//④ 关闭资源</span><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-练习"><a href="#5-2-练习" class="headerlink" title="5.2 练习"></a>5.2 练习</h3><p><strong>练习1：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">大家都知道，男大当婚，女大当嫁。那么女方家长要嫁女儿，当然要提出一定的条件：高：<span class="hljs-number">180</span>cm以上；富：财富<span class="hljs-number">1</span>千万以上；帅：是。<br><br>如果这三个条件同时满足，则：“我一定要嫁给他!!!”<br>如果三个条件有为真的情况，则：“嫁吧，比上不足，比下有余。”<br>如果三个条件都不满足，则：“不嫁！”<br><br>提示：<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“身高: (cm));<br>scanner.nextInt();<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“财富: (千万));<br>scanner.nextDouble();<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“帅否: (<span class="hljs-keyword">true</span>/<span class="hljs-keyword">false</span>));   <br>scanner.nextBoolean();  <br><br><br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“帅否: (是/否));<br>scanner.next();   &quot;是&quot;.equals(str)  <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerExer1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>System.out.println(<span class="hljs-string">&quot;请输入你的身高：(cm)&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>System.out.println(<span class="hljs-string">&quot;请输入你的财富：(以千万为单位)&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">wealth</span> <span class="hljs-operator">=</span> scan.nextDouble();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">方式1：关于是否帅问题，我们使用boolean类型接收</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">System.out.println(&quot;帅否？(true/false)&quot;);</span><br><span class="hljs-comment">boolean isHandsome = scan.nextBoolean();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//判断</span><br><span class="hljs-comment">if(height &gt;= 180 &amp;&amp; wealth &gt;= 1.0 &amp;&amp; isHandsome)&#123; //不建议isHandsome == true</span><br><span class="hljs-comment">System.out.println(&quot;我一定要嫁给他!!!&quot;);</span><br><span class="hljs-comment">&#125;else if(height &gt;= 180 || wealth &gt;= 1.0 || isHandsome)&#123;</span><br><span class="hljs-comment">System.out.println(&quot;嫁吧，比上不足，比下有余。&quot;);</span><br><span class="hljs-comment">&#125;else&#123;</span><br><span class="hljs-comment">System.out.println(&quot;不嫁&quot;);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//方式2：关于是否帅问题，我们使用String类型接收</span><br>System.out.println(<span class="hljs-string">&quot;帅否？(是/否)&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">isHandsome</span> <span class="hljs-operator">=</span> scan.next();<br><br><span class="hljs-comment">//判断</span><br><span class="hljs-keyword">if</span>(height &gt;= <span class="hljs-number">180</span> &amp;&amp; wealth &gt;= <span class="hljs-number">1.0</span> &amp;&amp; isHandsome == <span class="hljs-string">&quot;是&quot;</span>)&#123;  <span class="hljs-comment">//知识点：判断两个字符串是否相等，使用String的equals()</span><br>System.out.println(<span class="hljs-string">&quot;我一定要嫁给他!!!&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(height &gt;= <span class="hljs-number">180</span> || wealth &gt;= <span class="hljs-number">1.0</span> || isHandsome == <span class="hljs-string">&quot;是&quot;</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;嫁吧，比上不足，比下有余。&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;不嫁&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//关闭资源</span><br>scan.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">我家的狗5岁了，5岁的狗相当于人类多大呢？其实，狗的前两年每一年相当于人类的10.5岁，之后每增加一年就增加四岁。那么5岁的狗相当于人类多少年龄呢？应该是：10.5 + 10.5 +<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 4 </span>= 33岁。<br><br>编写一个程序，获取用户输入的狗的年龄，通过程序显示其相当于人类的年龄。如果用户输入负数，请显示一个提示信息。<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerExer2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>System.out.println(<span class="hljs-string">&quot;请输入狗狗的年龄：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">dogAge</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br><span class="hljs-comment">//通过分支语句，判断狗狗相当于人的年龄</span><br><span class="hljs-keyword">if</span>(dogAge &lt; <span class="hljs-number">0</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;你输入的狗狗的年龄不合法&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dogAge &lt;= <span class="hljs-number">2</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;相当于人的年龄：&quot;</span> + (dogAge * <span class="hljs-number">10.5</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;相当于人的年龄：&quot;</span> + (<span class="hljs-number">2</span> * <span class="hljs-number">10.5</span> + (dogAge - <span class="hljs-number">2</span>) * <span class="hljs-number">4</span>));<br>&#125;<br><br><span class="hljs-comment">//关闭资源</span><br>scan.close();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-如何获取一个随机数"><a href="#6-如何获取一个随机数" class="headerlink" title="6. 如何获取一个随机数"></a>6. 如何获取一个随机数</h2><p>如何产生一个指定范围的随机整数？</p><p>1、Math类的random()的调用，会返回一个[0,1)范围的一个double型值</p><p>2、Math.random() * 100  —&gt;  [0,100)<br>      (int)(Math.random() * 100)—&gt; [0,99]<br>      (int)(Math.random() * 100) + 5  —-&gt; [5,104]</p><p>3、如何获取<code>[a,b]</code>范围内的随机整数呢？<code>(int)(Math.random() * (b - a + 1)) + a</code></p><p>4、举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MathRandomTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Math.random();<br>System.out.println(value);<br><br><span class="hljs-comment">//[1,6]</span><br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>; <span class="hljs-comment">//</span><br>System.out.println(number);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变量与运算符</title>
    <link href="/2024/02/21/2.%20%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2024/02/21/2.%20%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-关键字（keyword）"><a href="#1-关键字（keyword）" class="headerlink" title="1. 关键字（keyword）"></a>1. 关键字（keyword）</h2><ul><li>定义：<strong>被Java语言赋予了特殊含义，用做专门用途的字符串（或单词）</strong><ul><li>HelloWorld案例中，出现的关键字有 <code>class</code>、<code>public </code>  、 <code>static</code> 、  <code>void</code>  等，这些单词已经被Java定义好了。</li></ul></li><li>特点：全部关键字都是<code>小写字母</code>。</li><li>关键字比较多，不需要死记硬背，学到哪里记到哪里即可。</li><li>官方地址： <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730615_watermark.png" alt="image-20220310234414849"></p><blockquote><p> 说明：</p><ol><li>关键字一共<code>50个</code>，其中<code>const</code>和<code>goto</code>是<code>保留字</code>(reserved word)。</li><li><code>true</code>，<code>false</code>，<code>null</code>不在其中，它们看起来像关键字，其实是字面量，表示特殊的布尔值和空值。</li></ol></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730637_watermark.png" alt="image-20220310234557454" style="zoom: 67%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730666_watermark.png" alt="image-20220801143635356" style="zoom:66%;" /><h2 id="2-标识符-identifier"><a href="#2-标识符-identifier" class="headerlink" title="2. 标识符( identifier)"></a>2. 标识符( identifier)</h2><p>Java中变量、方法、类等要素命名时使用的字符序列，称为标识符。</p><p>技巧：凡是自己可以起名字的地方都叫标识符。</p><p><strong>标识符的命名规则</strong>（必须遵守的<code>硬性规定</code>）：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">由<span class="hljs-number">26</span>个英文字母大小写，<span class="hljs-number">0</span>-<span class="hljs-number">9</span> ，_或 $ 组成  </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">数字不可以开头。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">不可以使用关键字和保留字，但能包含关键字和保留字。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Java</span>中严格区分大小写，长度无限制。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">标识符不能包含空格。</span><br></code></pre></td></tr></table></figure><blockquote><p>练习：miles、Test、a++、 –a、4#R、$4、 #44、apps、class、public、int、x、y、radius</p></blockquote><p><strong>标识符的命名规范</strong>（建议遵守的<code>软性要求</code>，否则工作时容易被鄙视）:</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">包名：多单词组成时所有字母都小写：xxxyyyzzz。</span><br>  例如：java.lang、com.atguigu.bean<br>  <br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">类名、接口名：多单词组成时，所有单词的首字母大写：<span class="hljs-title class_">XxxYyyZzz</span></span><br>  例如：HelloWorld，String，System等<br>  <br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</span><br>  例如：age,name,bookName,main,binarySearch,getName<br>  <br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">常量名：所有字母都大写。多单词时每个单词用下划线连接：<span class="hljs-variable constant_">XXX_YYY_ZZZ</span></span><br>  例如：MAX_VALUE,PI,DEFAULT_CAPACITY<br></code></pre></td></tr></table></figure><p>注意：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</p><blockquote><p>更多细节详见《代码整洁之道_关于标识符.txt》《阿里巴巴Java开发手册-1.7.1-黄山版》</p></blockquote><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><h3 id="3-1-为什么需要变量"><a href="#3-1-为什么需要变量" class="headerlink" title="3.1 为什么需要变量"></a>3.1 为什么需要变量</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730698_watermark.png" alt="image-20220513235020527"></p><p>一花一世界，如果把一个程序看做一个世界或一个社会的话，那么变量就是程序世界的花花草草、万事万物。即，<strong>变量是程序中不可或缺的组成单位，最基本的存储单元</strong>。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730719_watermark.png" alt="image-20220513235828042"></p><h3 id="3-2-初识变量"><a href="#3-2-初识变量" class="headerlink" title="3.2 初识变量"></a>3.2 初识变量</h3><ul><li><p>变量的概念：</p><ul><li><p>内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化</p></li><li><p>变量的构成包含三个要素：<code>数据类型</code>、<code>变量名</code>、<code>存储的值</code></p></li><li><p>Java中变量声明的格式：<code>数据类型 变量名 = 变量值</code></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730756_watermark.png" alt="image-20220311000744867" style="zoom:67%;" /></li></ul></li><li><p>变量的作用：用于在内存中保存数据。</p></li><li><p>使用变量注意：</p><ul><li>Java中每个变量必须先声明，后使用。</li><li>使用变量名来访问这块区域的数据。</li><li>变量的作用域：其定义所在的一对{ }内。</li><li>变量只有在其<code>作用域</code>内才有效。出了作用域，变量不可以再被调用。</li><li>同一个作用域内，不能定义重名的变量。</li></ul></li></ul><h3 id="3-3-Java中变量的数据类型"><a href="#3-3-Java中变量的数据类型" class="headerlink" title="3.3 Java中变量的数据类型"></a>3.3 Java中变量的数据类型</h3><p>Java中变量的数据类型分为两大类：</p><ul><li><p><strong>基本数据类型</strong>：包括 <code>整数类型</code>、<code>浮点数类型</code>、<code>字符类型</code>、<code>布尔类型</code>。 </p></li><li><p><strong>引用数据类型</strong>：包括<code>数组</code>、 <code>类</code>、<code>接口</code>、<code>枚举</code>、<code>注解</code>、<code>记录</code>。 </p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730431_watermark.png" alt="Java的数据类型"></p></li></ul><h3 id="3-4-变量的使用"><a href="#3-4-变量的使用" class="headerlink" title="3.4 变量的使用"></a>3.4 变量的使用</h3><h4 id="3-4-1-步骤1：变量的声明"><a href="#3-4-1-步骤1：变量的声明" class="headerlink" title="3.4.1 步骤1：变量的声明"></a>3.4.1 步骤1：变量的声明</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">格式：数据类型  变量名<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//例如：</span><br><span class="hljs-comment">//存储一个整数类型的年龄</span><br><span class="hljs-type">int</span> age; <br><br><span class="hljs-comment">//存储一个小数类型的体重</span><br><span class="hljs-type">double</span> weight;<br><br><span class="hljs-comment">//存储一个单字符类型的性别 </span><br><span class="hljs-type">char</span> gender;<br><br><span class="hljs-comment">//存储一个布尔类型的婚姻状态</span><br><span class="hljs-type">boolean</span> marry;<br><br><span class="hljs-comment">//存储一个字符串类型的姓名</span><br>String name;<br><br><span class="hljs-comment">//声明多个同类型的变量</span><br><span class="hljs-type">int</span> a,b,c; <span class="hljs-comment">//表示a,b,c三个变量都是int类型。</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：变量的数据类型可以是基本数据类型，也可以是引用数据类型。</p></blockquote><h4 id="3-4-2-步骤2：变量的赋值"><a href="#3-4-2-步骤2：变量的赋值" class="headerlink" title="3.4.2 步骤2：变量的赋值"></a>3.4.2 步骤2：变量的赋值</h4><p>给变量赋值，就是把“值”存到该变量代表的内存空间中。同时，给变量赋的值类型必须与变量声明的类型一致或兼容。</p><p><strong>变量赋值的语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">变量名 = 值;<br></code></pre></td></tr></table></figure><p>举例1：可以使用合适类型的<code>常量值</code>给已经声明的变量赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">age = <span class="hljs-number">18</span>;<br>weight = <span class="hljs-number">109</span>;<br>gender = <span class="hljs-string">&#x27;女&#x27;</span>;<br></code></pre></td></tr></table></figure><p>举例2：可以使用其他<code>变量</code>或者<code>表达式</code>给变量赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> m;<br>        <br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * x + y;<br></code></pre></td></tr></table></figure><p>3：变量可以反复赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//先声明，后初始化</span><br><span class="hljs-type">char</span> gender;<br>gender = <span class="hljs-string">&#x27;女&#x27;</span>;<br><br><span class="hljs-comment">//给变量重新赋值，修改gender变量的值</span><br>gender = <span class="hljs-string">&#x27;男&#x27;</span>;<br>System.out.println(<span class="hljs-string">&quot;gender = &quot;</span> + gender);<span class="hljs-comment">//gender = 男</span><br></code></pre></td></tr></table></figure><p>举例4：也可以将变量的声明和赋值一并执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">isBeauty</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;迪丽热巴&quot;</span>;<br></code></pre></td></tr></table></figure><p>内存结构如图：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730922_watermark.png" alt="image-20220514152216148" style="zoom: 80%;" /><h2 id="4-基本数据类型介绍"><a href="#4-基本数据类型介绍" class="headerlink" title="4. 基本数据类型介绍"></a>4. 基本数据类型介绍</h2><h3 id="4-1-整数类型：byte、short、int、long"><a href="#4-1-整数类型：byte、short、int、long" class="headerlink" title="4.1 整数类型：byte、short、int、long"></a>4.1 整数类型：byte、short、int、long</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730306_watermark.png" alt="image-20220520111756274" style="zoom: 50%;" /><ul><li>Java各整数类型有固定的表数范围和字段长度，不受具体操作系统的影响，以保证Java程序的可移植性。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730366_watermark.png" alt="image-20220311001553945" style="zoom:80%;" /><ul><li><p>定义long类型的变量，赋值时需要以”<code>l</code>“或”<code>L</code>“作为后缀。</p></li><li><p>Java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long。</p></li><li><p>Java的整型<code>常量默认为 int 型</code>。</p></li></ul><h4 id="4-1-1-补充：计算机存储单位"><a href="#4-1-1-补充：计算机存储单位" class="headerlink" title="4.1.1 补充：计算机存储单位"></a>4.1.1 补充：计算机存储单位</h4><ul><li><p><strong>字节（Byte）：</strong>是计算机用于<code>计量存储容量</code>的<code>基本</code>单位，一个字节等于8 bit。</p></li><li><p><strong>位（bit）：</strong>是数据存储的<code>最小</code>单位。二进制数系统中，每个0或1就是一个位，叫做bit（比特），其中8 bit 就称为一个字节(Byte)。</p></li><li><p><strong>转换关系：</strong></p><ul><li>8 bit &#x3D; 1 Byte</li><li>1024 Byte &#x3D; 1 KB</li><li>1024 KB &#x3D; 1 MB</li><li>1024 MB &#x3D; 1 GB</li><li>1024 GB &#x3D; 1 TB</li></ul></li></ul><h3 id="4-2-浮点类型：float、double"><a href="#4-2-浮点类型：float、double" class="headerlink" title="4.2 浮点类型：float、double"></a>4.2 浮点类型：float、double</h3><ul><li>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730872_watermark.png" alt="image-20220311001749699" style="zoom:80%;" /><ul><li>浮点型常量有两种表示形式：<ul><li>十进制数形式。如：5.12       512.0f        .512   (必须有小数点）</li><li>科学计数法形式。如：5.12e2      512E2     100E-2</li></ul></li><li>float：<code>单精度</code>，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。    </li><li>double：<code>双精度</code>，精度是float的两倍。通常采用此类型。</li><li>定义float类型的变量，赋值时需要以”<code>f</code>“或”<code>F</code>“作为后缀。</li><li>Java 的浮点型<code>常量默认为double型</code>。</li></ul><h4 id="4-2-1-关于浮点型精度的说明"><a href="#4-2-1-关于浮点型精度的说明" class="headerlink" title="4.2.1 关于浮点型精度的说明"></a>4.2.1 关于浮点型精度的说明</h4><ul><li><p>并不是所有的小数都能可以精确的用二进制浮点数表示。二进制浮点数不能精确的表示0.1、0.01、0.001这样10的负次幂。</p></li><li><p>浮点类型float、double的数据不适合在<code>不容许舍入误差</code>的金融计算领域。如果需要<code>精确</code>数字计算或保留指定位数的精度，需要使用<code>BigDecimal类</code>。</p></li><li><p>测试用例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试1：（解释见章末企业真题：为什么0.1 + 0.2不等于0.3）</span><br>System.out.println(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>);<span class="hljs-comment">//0.30000000000000004</span><br><br><span class="hljs-comment">//测试2：</span><br><span class="hljs-type">float</span> <span class="hljs-variable">ff1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123123123f</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">ff2</span> <span class="hljs-operator">=</span> ff1 + <span class="hljs-number">1</span>;<br>System.out.println(ff1);<br>System.out.println(ff2);<br>System.out.println(ff1 == ff2);<br><br></code></pre></td></tr></table></figure><h4 id="4-2-2-应用举例"><a href="#4-2-2-应用举例" class="headerlink" title="4.2.2 应用举例"></a>4.2.2 应用举例</h4><p>案例1：定义圆周率并赋值为3.14，现有3个圆的半径分别为1.2、2.5、6，求它们的面积。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:36</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span>; <span class="hljs-comment">//圆周率</span><br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">radius1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">radius2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.5</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">radius3</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;第1个圆的面积：&quot;</span> + PI * radius1 * radius1);<br>        System.out.println(<span class="hljs-string">&quot;第2个圆的面积：&quot;</span> + PI * radius2 * radius2);<br>        System.out.println(<span class="hljs-string">&quot;第3个圆的面积：&quot;</span> + PI * radius3 * radius3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例2：小明要到美国旅游，可是那里的温度是以华氏度为单位记录的。<br>它需要一个程序将华氏温度（80度）转换为摄氏度，并以华氏度和摄氏度为单位分别显示该温度。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">℃ <span class="hljs-operator">=</span> (℉ - <span class="hljs-number">32</span>) / <span class="hljs-number">1.8</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:51</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">hua</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">she</span> <span class="hljs-operator">=</span> (hua-<span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span>;<br>        System.out.println(<span class="hljs-string">&quot;华氏度&quot;</span> + hua+<span class="hljs-string">&quot;℉转为摄氏度是&quot;</span> +she+<span class="hljs-string">&quot;℃&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-字符类型：char"><a href="#4-3-字符类型：char" class="headerlink" title="4.3 字符类型：char"></a>4.3 字符类型：char</h3><ul><li><p>char 型数据用来表示通常意义上“<code>字符</code>”（占2字节）</p></li><li><p>Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</p></li><li><p>字符型变量的三种表现形式：</p><ul><li><p><strong>形式1：</strong>使用单引号(‘ ‘)括起来的<code>单个字符</code>。</p><p>例如：char c1 &#x3D; ‘a’;   char c2 &#x3D; ‘中’; char c3 &#x3D;  ‘9’;</p></li><li><p><strong>形式2：</strong>直接使用 <code>Unicode值</code>来表示字符型常量：‘<code>\uXXXX</code>’。其中，XXXX代表一个十六进制整数。</p><p>例如：\u0023 表示 ‘#’。</p></li><li><p><strong>形式3：</strong>Java中还允许使用<code>转义字符‘\’</code>来将其后的字符转变为特殊字符型常量。</p><p>例如：char c3 &#x3D; ‘\n’;  &#x2F;&#x2F; ‘\n’表示换行符</p></li></ul><table><thead><tr><th align="center">转义字符</th><th align="center">说明</th><th align="center">Unicode表示方式</th></tr></thead><tbody><tr><td align="center"><code>\n</code></td><td align="center">换行符</td><td align="center">\u000a</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表符</td><td align="center">\u0009</td></tr><tr><td align="center"><code>\&quot;</code></td><td align="center">双引号</td><td align="center">\u0022</td></tr><tr><td align="center"><code>\&#39;</code></td><td align="center">单引号</td><td align="center">\u0027</td></tr><tr><td align="center"><code>\\</code></td><td align="center">反斜线</td><td align="center">\u005c</td></tr><tr><td align="center"><code>\b</code></td><td align="center">退格符</td><td align="center">\u0008</td></tr><tr><td align="center"><code>\r</code></td><td align="center">回车符</td><td align="center">\u000d</td></tr></tbody></table></li><li><p>char类型是可以进行运算的。因为它都对应有Unicode码，可以看做是一个数值。</p></li></ul><h3 id="4-4-布尔类型：boolean"><a href="#4-4-布尔类型：boolean" class="headerlink" title="4.4 布尔类型：boolean"></a>4.4 布尔类型：boolean</h3><ul><li><p>boolean 类型用来判断逻辑条件，一般用于流程控制语句中：</p><ul><li>if条件控制语句；                  </li><li>while循环控制语句；     </li><li>for循环控制语句；</li><li>do-while循环控制语句；</li></ul></li><li><p><strong>boolean类型数据只有两个值：true、false，无其它。</strong></p><ul><li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li><li>拓展：Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。——《java虚拟机规范 8版》</li></ul></li><li><p>举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">if</span>(isFlag)&#123;<br>    <span class="hljs-comment">//true分支</span><br>&#125;<span class="hljs-keyword">else</span>&#123;  <br>    <span class="hljs-comment">//false分支</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>经验之谈：</p><p>Less is More！建议不要这样写：if ( isFlag &#x3D; &#x3D; true )，只有新手才如此。关键也很容易写错成if(isFlag &#x3D; true)，这样就变成赋值isFlag为true而不是判断！<code>老鸟的写法</code>是if (isFlag)或者if ( !isFlag)。</p></blockquote><h2 id="5-基本数据类型变量间运算规则"><a href="#5-基本数据类型变量间运算规则" class="headerlink" title="5. 基本数据类型变量间运算规则"></a>5. 基本数据类型变量间运算规则</h2><p>在Java程序中，不同的基本数据类型（只有7种，不包含boolean类型）变量的值经常需要进行相互转换。</p><p>转换的方式有两种：<code>自动类型提升</code>和<code>强制类型转换</code>。</p><h3 id="5-1-自动类型提升"><a href="#5-1-自动类型提升" class="headerlink" title="5.1 自动类型提升"></a>5.1 自动类型提升</h3><p><strong>规则：将取值范围小（或容量小）的类型自动提升为取值范围大（或容量大）的类型 。</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730112_watermark.png" alt="image-20220523162200891" style="zoom:67%;" /><p>基本数据类型的转换规则如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731141_watermark.png" alt="image-20220311002543688"></p><p>（1）当把存储范围小的值（常量值、变量的值、表达式计算的结果值）赋值给了存储范围大的变量时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<span class="hljs-comment">//char自动升级为int，其实就是把字符的编码值赋值给i变量了</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//int自动升级为double</span><br><span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234567</span>; <span class="hljs-comment">//右边的整数常量值如果在int范围呢，编译和运行都可以通过，这里涉及到数据类型转换</span><br><br><span class="hljs-comment">//byte bigB = 130;//错误，右边的整数常量值超过byte范围</span><br><span class="hljs-type">long</span> <span class="hljs-variable">bigNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">12345678912L</span>;<span class="hljs-comment">//右边的整数常量值如果超过int范围，必须加L，显式表示long类型。否则编译不通过</span><br></code></pre></td></tr></table></figure><p>（2）当存储范围小的数据类型与存储范围大的数据类型变量一起混合运算时，会按照其中最大的类型运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>;<br><br><span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> i + b + d;<span class="hljs-comment">//混合运算，升级为double</span><br></code></pre></td></tr></table></figure><p>（3）当byte,short,char数据类型的变量进行算术运算时，按照int类型处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> b1 + b2;<span class="hljs-comment">//编译报错，b1 + b2自动升级为int</span><br><br><span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> c1 + c2;<span class="hljs-comment">//至少需要使用int类型来接收</span><br>System.out.println(c1 + c2);<span class="hljs-comment">//113 </span><br></code></pre></td></tr></table></figure><p><strong>练习：</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">设 x 为<span class="hljs-keyword">float</span>型变量，y为<span class="hljs-keyword">double</span>型变量，a为<span class="hljs-keyword">int</span>型变量，b为<span class="hljs-keyword">long</span>型变量，c为<span class="hljs-keyword">char</span>型变量，则表达式<br>x + y * a <span class="hljs-regexp">/ x + b /</span> y + c的值类型为：<br><br>A. <span class="hljs-keyword">int</span>   B. <span class="hljs-keyword">long</span>  C. <span class="hljs-keyword">double</span>  D. <span class="hljs-keyword">char</span><br></code></pre></td></tr></table></figure><h3 id="5-2-强制类型转换"><a href="#5-2-强制类型转换" class="headerlink" title="5.2 强制类型转换"></a>5.2 强制类型转换</h3><p>将<code>3.14</code> 赋值到<code>int</code> 类型变量会发生什么？产生编译失败，肯定无法赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span>; <span class="hljs-comment">// 编译报错</span><br></code></pre></td></tr></table></figure><p>想要赋值成功，只有通过<code>强制类型转换</code>，将<code>double</code> 类型强制转换成<code>int</code> 类型才能赋值。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731346_watermark.png" alt="image-20220523162407722" style="zoom:67%;" /><p><strong>规则：将取值范围大（或容量大）的类型强制转换成取值范围小（或容量小）的类型。</strong></p><blockquote><p>自动类型提升是Java自动执行的，而强制类型转换是自动类型提升的逆运算，需要我们自己手动执行。</p></blockquote><p><strong>转换格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型<span class="hljs-number">1</span> 变量名 = (数据类型<span class="hljs-number">1</span>)被强转数据值;  <span class="hljs-comment">//()中的数据类型必须&lt;=变量值的数据类型</span><br></code></pre></td></tr></table></figure><p>（1）当把存储范围大的值（常量值、变量的值、表达式计算的结果值）强制转换为存储范围小的变量时，可能会<code>损失精度</code>或<code>溢出</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">3.14</span>;<span class="hljs-comment">//损失精度</span><br><br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)d;<span class="hljs-comment">//损失精度</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i;<span class="hljs-comment">//溢出</span><br></code></pre></td></tr></table></figure><p>（2）当某个值想要提升数据类型时，也可以使用强制类型转换。这种情况的强制类型转换是<code>没有风险</code>的，通常省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">bigger</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)(i/j);<br></code></pre></td></tr></table></figure><p>（3）声明long类型变量时，可以出现省略后缀的情况。float则不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123L</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<span class="hljs-comment">//如何理解呢？ 此时可以看做是int类型的123自动类型提升为long类型</span><br><br><span class="hljs-comment">//long l3 = 123123123123; //报错，因为123123123123超出了int的范围。</span><br><span class="hljs-type">long</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-number">123123123123L</span>;<br><br><br><span class="hljs-comment">//float f1 = 12.3; //报错，因为12.3看做是double，不能自动转换为float类型</span><br><span class="hljs-type">float</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3F</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)<span class="hljs-number">12.3</span>;<br></code></pre></td></tr></table></figure><p><strong>练习：判断是否能通过编译</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>）<span class="hljs-type">short</span>  <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>   s = s-<span class="hljs-number">2</span>;                     <span class="hljs-comment">//判断：no</span><br><span class="hljs-number">2</span>） <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    b = b + <span class="hljs-number">4</span>;                  <span class="hljs-comment">//判断：no</span><br>    b = (<span class="hljs-type">byte</span>)(b+<span class="hljs-number">4</span>);            <span class="hljs-comment">//判断：yes</span><br><span class="hljs-number">3</span>）<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ‘a’;<br>   <span class="hljs-type">int</span>  <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>   <span class="hljs-type">float</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">.314F</span>;<br>   <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> c+i+d;       <span class="hljs-comment">//判断：yes</span><br><span class="hljs-number">4</span>） <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-type">short</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> s + b;            <span class="hljs-comment">//判断：no</span><br><br></code></pre></td></tr></table></figure><p><strong>问答：为什么标识符的声明规则里要求不能数字开头？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果允许数字开头，则如下的声明编译就可以通过：</span><br><span class="hljs-type">int</span> <span class="hljs-number">123L</span> = <span class="hljs-number">12</span>;<br><span class="hljs-comment">//进而，如下的声明中l的值到底是123？还是变量123L对应的取值12呢？ 出现歧义了。</span><br><span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">123L</span>;<br></code></pre></td></tr></table></figure><h3 id="5-3-基本数据类型与String的运算"><a href="#5-3-基本数据类型与String的运算" class="headerlink" title="5.3 基本数据类型与String的运算"></a>5.3 基本数据类型与String的运算</h3><h4 id="5-3-1-字符串类型：String"><a href="#5-3-1-字符串类型：String" class="headerlink" title="5.3.1 字符串类型：String"></a>5.3.1 字符串类型：String</h4><ul><li>String不是基本数据类型，属于引用数据类型</li><li>使用一对<code>&quot;&quot;</code>来表示一个字符串，内部可以包含0个、1个或多个字符。</li><li>声明方式与基本数据类型类似。例如：String str &#x3D; “尚硅谷”;</li></ul><h4 id="5-3-2-运算规则"><a href="#5-3-2-运算规则" class="headerlink" title="5.3.2 运算规则"></a>5.3.2 运算规则</h4><p>1、任意八种基本数据类型的数据与String类型只能进行连接“+”运算，且结果一定也是String类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;&quot;</span> + <span class="hljs-number">1</span> + <span class="hljs-number">2</span>);<span class="hljs-comment">//12</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> s1 + num + b1;<br>System.out.println(s2);<span class="hljs-comment">//abc10true</span><br><br><span class="hljs-comment">//String s3 = num + b1 + s1;//编译不通过，因为int类型不能与boolean运算</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> num + (b1 + s1);<span class="hljs-comment">//编译通过</span><br></code></pre></td></tr></table></figure><p>2、String类型不能通过强制类型()转换，转为其他的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)str;<span class="hljs-comment">//错误的</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(str);<span class="hljs-comment">//正确的，后面才能讲到，借助包装类的方法才能转</span><br></code></pre></td></tr></table></figure><h4 id="5-3-3-案例与练习"><a href="#5-3-3-案例与练习" class="headerlink" title="5.3.3 案例与练习"></a>5.3.3 案例与练习</h4><p><strong>案例：公安局身份登记</strong></p><p>要求填写自己的姓名、年龄、性别、体重、婚姻状况（已婚用true表示，单身用false表示）、联系方式等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Info</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;康师傅&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">37</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> <span class="hljs-number">145.6</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isMarried</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phoneNumber</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;13112341234&quot;</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;年龄：&quot;</span> + age);<br>        System.out.println(<span class="hljs-string">&quot;性别：&quot;</span> + gender);<br>        System.out.println(<span class="hljs-string">&quot;体重：&quot;</span> + weight);<br>        System.out.println(<span class="hljs-string">&quot;婚否：&quot;</span> + isMarried);<br>        System.out.println(<span class="hljs-string">&quot;电话：&quot;</span> + phoneNumber);<br><span class="hljs-comment">//或者</span><br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name + <span class="hljs-string">&quot;,age = &quot;</span> + age + <span class="hljs-string">&quot;，gender = &quot;</span> + <br>                           gender + <span class="hljs-string">&quot;,weight = &quot;</span> + weight + <span class="hljs-string">&quot;,isMarried = &quot;</span> + isMarried +<br>                           <span class="hljs-string">&quot;,phoneNumber = &quot;</span> + phoneNumber);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习：</strong></p><p>练习1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;                       <span class="hljs-comment">//判断对错：</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.5f</span> + <span class="hljs-string">&quot;&quot;</span>;               <span class="hljs-comment">//判断str2对错：</span><br>System.out.println(str2);              <span class="hljs-comment">//输出：</span><br>System.out .println(<span class="hljs-number">3</span>+<span class="hljs-number">4</span>+<span class="hljs-string">&quot;Hello!&quot;</span>);     <span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;Hello!&quot;</span>+<span class="hljs-number">3</span>+<span class="hljs-number">4</span>);      <span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>+<span class="hljs-string">&quot;Hello!&quot;</span>);    <span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>+<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>);     <span class="hljs-comment">//输出：</span><br></code></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;*    *&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;*\t*&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span> + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//输出：</span><br></code></pre></td></tr></table></figure><h2 id="6-计算机底层如何存储数据"><a href="#6-计算机底层如何存储数据" class="headerlink" title="6. 计算机底层如何存储数据"></a>6. 计算机底层如何存储数据</h2><p>计算机世界中只有二进制，所以计算机中存储和运算的<code>所有数据</code>都要转为<code>二进制</code>。包括数字、字符、图片、声音、视频等。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731332_watermark.jpg" alt="010101" style="zoom: 33%;" /><p><strong>世界上有10种人 ，认识和不认识二进制的。</strong></p><h3 id="6-1-进制的分类"><a href="#6-1-进制的分类" class="headerlink" title="6.1 进制的分类"></a>6.1 进制的分类</h3><ul><li><p><strong>十进制（decimal）</strong></p><ul><li>数字组成：0-9</li><li>进位规则：满十进一</li></ul></li><li><p><strong>二进制（binary）</strong></p><ul><li>数字组成：0-1</li><li>进位规则：满二进一，以<code>0b</code>或<code>0B</code>开头</li></ul></li><li><p><strong>八进制（octal）：很少使用</strong></p><ul><li>数字组成：0-7</li><li>进位规则：满八进一，以数字<code>0</code>开头表示</li></ul></li><li><p><strong>十六进制</strong></p><ul><li>数字组成：0-9，a-f</li><li>进位规则：满十六进一，以<code>0x</code>或<code>0X</code>开头表示。此处的 a-f 不区分大小写</li></ul></li></ul><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<span class="hljs-comment">//十进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0b101</span>;<span class="hljs-comment">//二进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0127</span>;<span class="hljs-comment">//八进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num4</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x12aF</span>;<span class="hljs-comment">//十六进制</span><br><br>System.out.println(num1);<br>System.out.println(num2);<br>System.out.println(num3);<br>System.out.println(num4);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-进制的换算举例"><a href="#6-2-进制的换算举例" class="headerlink" title="6.2 进制的换算举例"></a>6.2 进制的换算举例</h3><table><thead><tr><th>十进制</th><th>二进制</th><th>八进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td><td>2</td><td>2</td></tr><tr><td>3</td><td>11</td><td>3</td><td>3</td></tr><tr><td>4</td><td>100</td><td>4</td><td>4</td></tr><tr><td>5</td><td>101</td><td>5</td><td>5</td></tr><tr><td>6</td><td>110</td><td>6</td><td>6</td></tr><tr><td>7</td><td>111</td><td>7</td><td>7</td></tr><tr><td>8</td><td>1000</td><td>10</td><td>8</td></tr><tr><td>9</td><td>1001</td><td>11</td><td>9</td></tr><tr><td>10</td><td>1010</td><td>12</td><td>a或A</td></tr><tr><td>11</td><td>1011</td><td>13</td><td>b或B</td></tr><tr><td>12</td><td>1100</td><td>14</td><td>c或C</td></tr><tr><td>13</td><td>1101</td><td>15</td><td>d或D</td></tr><tr><td>14</td><td>1110</td><td>16</td><td>e或E</td></tr><tr><td>15</td><td>1111</td><td>17</td><td>f或F</td></tr><tr><td>16</td><td>10000</td><td>20</td><td>10</td></tr></tbody></table><h3 id="6-3-二进制的由来"><a href="#6-3-二进制的由来" class="headerlink" title="6.3 二进制的由来"></a>6.3 二进制的由来</h3><p>二进制，是计算技术中广泛采用的一种数制，由德国数理哲学大师<code>莱布尼茨</code>于1679年发明。</p><p>二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“<code>逢二进一</code>”。</p><p>二进制广泛应用于我们生活的方方面面。比如，广泛使用的摩尔斯电码（Morse Code），它由两种基本信号组成：短促的点信号“<code>·</code>”，读“<code>滴</code>”；保持一定时间的长信号“<code>—</code>”，读“<code>嗒</code>”。然后，组成了26个字母，从而拼写出相应的单词。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731940_watermark.png" alt="image-20220520105721126" style="zoom:67%;" /><p>记忆技巧：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731734_watermark.jpg" alt="morsecode" style="zoom:50%;" /><p>我们偶尔会看到的：SOS，即为：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731140_watermark.png" alt="image-20220520110206899"></p><h3 id="6-4-二进制转十进制"><a href="#6-4-二进制转十进制" class="headerlink" title="6.4 二进制转十进制"></a>6.4 二进制转十进制</h3><p><strong>二进制如何表示整数？</strong></p><ul><li><p>计算机数据的存储使用二进制<code>补码</code>形式存储，并且<code>最高位是符号位</code>。</p><ul><li>正数：<code>最高位是0</code></li><li>负数：<code>最高位是1</code></li></ul></li><li><p>规 定</p><ul><li>正数的补码与反码、原码一样，称为<code>三码合一</code></li><li>负数的补码与反码、原码不一样：<ul><li>负数的<code>原码</code>：把十进制转为二进制，然后最高位设置为1</li><li>负数的<code>反码</code>：在原码的基础上，最高位不变，其余位取反（0变1,1变0）</li><li>负数的<code>补码</code>：反码+1</li></ul></li></ul></li></ul><p><strong>二进制转十进制：权相加法</strong></p><p>针对于byte数据举例来说：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731663_watermark.png" alt="image-20220523114701881"></p><ul><li><p>例如：byte类型（1个字节，8位）</p><p>25 &#x3D;&#x3D;&gt; 原码  0001 1001 &#x3D;&#x3D;&gt; 反码  0001 1001 –&gt;补码  0001 1001</p><p>-25 &#x3D;&#x3D;&gt;原码  1001 1001 &#x3D;&#x3D;&gt; 反码1110 0110 &#x3D;&#x3D;&gt;补码 1110 0111</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">整数：<br>正数：<span class="hljs-number">25</span>   <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000000</span> <span class="hljs-number">00011001</span>（原码）<br>正数：<span class="hljs-number">25</span>   <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000000</span> <span class="hljs-number">00011001</span>（反码）<br>正数：<span class="hljs-number">25</span>   <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000000</span> <span class="hljs-number">00011001</span>（补码）<br><br>负数：-<span class="hljs-number">25</span>  <span class="hljs-number">10000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000000</span> <span class="hljs-number">00011001</span>（原码）<br>负数：-<span class="hljs-number">25</span>  <span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">111111111</span> <span class="hljs-number">11100110</span>（反码）<br>负数：-<span class="hljs-number">25</span>  <span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">111111111</span> <span class="hljs-number">11100111</span>（补码）<br></code></pre></td></tr></table></figure><p><strong>一个字节可以存储的整数范围是多少？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1个字节：8位</span><br><br><span class="hljs-number">0000</span> <span class="hljs-number">0001</span>  ~  <span class="hljs-number">0111</span> <span class="hljs-number">111</span> ==&gt; <span class="hljs-number">1</span>~<span class="hljs-number">127</span><br><br><span class="hljs-number">1000</span> <span class="hljs-number">0001</span> ~ <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> ==&gt; -<span class="hljs-number">127</span> ~ -<span class="hljs-number">1</span><br><br><span class="hljs-number">0000</span> <span class="hljs-number">0000</span> ==&gt;<span class="hljs-number">0</span><br><br><span class="hljs-number">1000</span> <span class="hljs-number">0000</span> ==&gt; -<span class="hljs-number">128</span>（特殊规定）=-<span class="hljs-number">127</span>-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="6-5-十进制转二进制"><a href="#6-5-十进制转二进制" class="headerlink" title="6.5 十进制转二进制"></a>6.5 十进制转二进制</h3><p>十进制转二进制：<code>除2取余的逆</code></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731997_watermark.png" alt="image-20220312000042595" style="zoom:67%;" /><h3 id="6-6-二进制与八进制、十六进制间的转换"><a href="#6-6-二进制与八进制、十六进制间的转换" class="headerlink" title="6.6 二进制与八进制、十六进制间的转换"></a>6.6 二进制与八进制、十六进制间的转换</h3><p><strong>二进制转八进制</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731408_watermark.png" alt="image-20220312000233863" style="zoom:80%;" /><p><strong>二进制转十六进制</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731222_watermark.png" alt="image-20220312000251113" style="zoom:80%;" /><p><strong>八进制、十六进制转二进制</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731430_watermark.png" alt="image-20220312000341297" style="zoom: 67%;" /><h3 id="6-7-各进制间的转换"><a href="#6-7-各进制间的转换" class="headerlink" title="6.7 各进制间的转换"></a>6.7 各进制间的转换</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731977_watermark.png" alt="image-20220312000143438" style="zoom:80%;" /><p><strong>练习：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>.将以下十进制数转换为十六进制和二进制<br><span class="hljs-symbol">123 </span> <span class="hljs-number">256</span>  <span class="hljs-number">87</span>  <span class="hljs-number">62</span><br><br><br><span class="hljs-number">2</span>.将以下十六进制数转换为十进制和二进制<br><span class="hljs-number">0</span>x123   <span class="hljs-number">0</span>x25F  <span class="hljs-number">0</span>x38  <span class="hljs-number">0</span>x62<br></code></pre></td></tr></table></figure><h2 id="7-运算符（Operator）"><a href="#7-运算符（Operator）" class="headerlink" title="7. 运算符（Operator）"></a>7. 运算符（Operator）</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><p>运算符的分类：</p><ul><li>按照<code>功能</code>分为：算术运算符、赋值运算符、比较(或关系)运算符、逻辑运算符、位运算符、条件运算符、Lambda运算符</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">算术运算符（7个）</td><td align="center">+、-、*、&#x2F;、%、++、–</td></tr><tr><td align="center">赋值运算符（12个）</td><td align="center">&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、&gt;&gt;&#x3D;、&lt;&lt;&#x3D;、&gt;&gt;&gt;&#x3D;、&amp;&#x3D;、|&#x3D;、^&#x3D;等</td></tr><tr><td align="center">比较(或关系)运算符（6个）</td><td align="center">&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、&#x3D;&#x3D;、!&#x3D;</td></tr><tr><td align="center">逻辑运算符（6个）</td><td align="center">&amp;、|、^、!、&amp;&amp;、||</td></tr><tr><td align="center">位运算符（7个）</td><td align="center">&amp;、|、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td></tr><tr><td align="center">条件运算符（1个）</td><td align="center">(条件表达式)?结果1:结果2</td></tr><tr><td align="center">Lambda运算符（1个）</td><td align="center">-&gt;（第18章时讲解）</td></tr></tbody></table><ul><li>按照<code>操作数个数</code>分为：一元运算符（单目运算符）、二元运算符（双目运算符）、三元运算符 （三目运算符）</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">一元运算符（单目运算符）</td><td align="center">正号（+）、负号（-）、++、–、!、~</td></tr><tr><td align="center">二元运算符（双目运算符）</td><td align="center">除了一元和三元运算符剩下的都是二元运算符</td></tr><tr><td align="center">三元运算符 （三目运算符）</td><td align="center">(条件表达式)?结果1:结果2</td></tr></tbody></table><h3 id="7-1-算术运算符"><a href="#7-1-算术运算符" class="headerlink" title="7.1 算术运算符"></a>7.1 算术运算符</h3><h4 id="7-1-1-基本语法"><a href="#7-1-1-基本语法" class="headerlink" title="7.1.1 基本语法"></a>7.1.1 基本语法</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731353_watermark.png" alt="image-20220312000848332"></p><p>举例1：加减乘除模</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><br>System.out.println(a + b);<span class="hljs-comment">// 7</span><br>System.out.println(a - b);<span class="hljs-comment">// -1</span><br>System.out.println(a * b);<span class="hljs-comment">// 12</span><br>System.out.println(a / b);<span class="hljs-comment">// 计算机结果是0，为什么不是0.75呢？</span><br>System.out.println(a % b);<span class="hljs-comment">// 3</span><br>        <br>        <span class="hljs-comment">//结果与被模数符号相同</span><br>        System.out.println(<span class="hljs-number">5</span>%<span class="hljs-number">2</span>);<span class="hljs-comment">//1</span><br>System.out.println(<span class="hljs-number">5</span>%-<span class="hljs-number">2</span>);<span class="hljs-comment">//1</span><br>System.out.println(-<span class="hljs-number">5</span>%<span class="hljs-number">2</span>);<span class="hljs-comment">//-1</span><br>System.out.println(-<span class="hljs-number">5</span>%-<span class="hljs-number">2</span>);<span class="hljs-comment">//-1</span><br><span class="hljs-comment">//商*除数 + 余数 = 被除数</span><br><span class="hljs-comment">//5%-2  ==&gt;商是-2，余数时1    (-2)*(-2)+1 = 5</span><br><span class="hljs-comment">//-5%2  ==&gt;商是-2，余数是-1   (-2)*2+(-1) = -4-1=-5</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例2：“+”号的两种用法</p><ul><li>第一种：对于<code>+</code>两边都是数值的话，<code>+</code>就是加法的意思</li><li>第二种：对于<code>+</code>两边至少有一边是字符串的话，<code>+</code>就是拼接的意思</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 字符串类型的变量基本使用</span><br><span class="hljs-comment">// 数据类型 变量名称 = 数据值;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>System.out.println(str1); <span class="hljs-comment">// Hello</span><br><br>System.out.println(<span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-string">&quot;World&quot;</span>); <span class="hljs-comment">// HelloWorld</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>;<br><span class="hljs-comment">// String + int --&gt; String</span><br>System.out.println(str2 + <span class="hljs-number">520</span>); <span class="hljs-comment">// Java520</span><br><span class="hljs-comment">// String + int + int</span><br><span class="hljs-comment">// String+ int</span><br><span class="hljs-comment">// String</span><br>System.out.println(str2 + <span class="hljs-number">5</span> + <span class="hljs-number">20</span>); <span class="hljs-comment">// Java520</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例3：自加自减运算</p><p>理解：<code>++</code>  运算，表示<code>自增1</code>。同理，<code>--</code> 运算，表示<code>自减1</code>，用法与++ 一致。</p><p>1、单独使用</p><ul><li>变量在单独运算的时候，变量<code>前++</code>和变量<code>后++</code>，是没有区别的。</li><li>变量<code>前++</code>   ：例如 <code>++a</code> 。</li><li>变量<code>后++</code>   ：例如 <code>a++</code> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticTest3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 定义一个int类型的变量a</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-comment">//++a;</span><br>a++;<br>        <span class="hljs-comment">// 无论是变量前++还是变量后++，结果都是4</span><br>System.out.println(a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、复合使用</p><ul><li>和<code>其他变量放在一起使用</code>或者和<code>输出语句放在一起使用</code>，<code>前++</code>和<code>后++</code>就产生了不同。</li></ul><ul><li>变量<code>前++</code> ：变量先自增1，然后再运算。</li><li>变量<code>后++</code> ：变量先运算，然后再自增1。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 其他变量放在一起使用</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-comment">//int y = ++x; // y的值是4，x的值是4，</span><br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> x++; <span class="hljs-comment">// y的值是3，x的值是4</span><br><br>System.out.println(x);<br>System.out.println(y);<br>System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);<br>        <br><span class="hljs-comment">// 和输出语句一起</span><br><span class="hljs-type">int</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-comment">//System.out.println(++z);// 输出结果是6，z的值也是6</span><br>System.out.println(z++);<span class="hljs-comment">// 输出结果是5，z的值是6</span><br>System.out.println(z);<br>        <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-1-2-案例与练习"><a href="#7-1-2-案例与练习" class="headerlink" title="7.1.2 案例与练习"></a>7.1.2 案例与练习</h4><p><strong>案例1：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs">随意给出一个整数，打印显示它的个位数，十位数，百位数的值。<br>格式如下：<br>数字xxx的情况如下：<br>个位数：<br>十位数：<br>百位数：<br><br>例如：<br>数字153的情况如下：<br>个位数：3<br>十位数：5<br>百位数：1<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">187</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> num / <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>;<span class="hljs-comment">//int shi = num / 10 % 10;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">10</span>;<br><br>System.out.println(<span class="hljs-string">&quot;百位为：&quot;</span> + bai);<br>System.out.println(<span class="hljs-string">&quot;十位为：&quot;</span> + shi);<br>System.out.println(<span class="hljs-string">&quot;个位为：&quot;</span> + ge);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拓展：获取一个四位数的个位，十位，百位，千位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String [] args)</span> &#123;<br>        <span class="hljs-comment">//1.定义一个变量，赋值为一个四位数整数，例如1234</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234</span>;<br><br>        <span class="hljs-comment">//2.通过运算操作求出个位，十位，百位，千位</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> num /<span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> num /<span class="hljs-number">100</span> % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">qian</span> <span class="hljs-operator">=</span> num / <span class="hljs-number">1000</span> % <span class="hljs-number">10</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;个位上的数字是：&quot;</span> + ge);<br>        System.out.println(<span class="hljs-string">&quot;十位上的数字是：&quot;</span> + shi);<br>        System.out.println(<span class="hljs-string">&quot;百位上的数字是：&quot;</span> + bai);<br>        System.out.println(<span class="hljs-string">&quot;千位上的数字是：&quot;</span> + qian);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>为抵抗洪水，战士连续作战89小时，编程计算共多少天零多少小时？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 17:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hours</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> hours / <span class="hljs-number">24</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> hours % <span class="hljs-number">24</span>;<br>        System.out.println(<span class="hljs-string">&quot;为抵抗洪水，战士连续作战89小时：&quot;</span>);<br>        System.out.println(hours + <span class="hljs-string">&quot;是&quot;</span> + day + <span class="hljs-string">&quot;天&quot;</span> + hour +<span class="hljs-string">&quot;小时&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习1：算术运算符：自加、自减</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer3</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> i1++;<br>        System.out.print(<span class="hljs-string">&quot;i=&quot;</span>+i); <span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;i1=&quot;</span>+i1);<span class="hljs-comment">//</span><br>        i = ++i1;<br>        System.out.print(<span class="hljs-string">&quot;i=&quot;</span>+i);<span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;i1=&quot;</span>+i1);<span class="hljs-comment">//</span><br>        i = i2--;<br>        System.out.print(<span class="hljs-string">&quot;i=&quot;</span>+i);<span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;i2=&quot;</span>+i2);<span class="hljs-comment">//</span><br>        i = --i2;<br>        System.out.print(<span class="hljs-string">&quot;i=&quot;</span>+i);<span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;i2=&quot;</span>+i2);<span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;5+5=&quot;</span> + <span class="hljs-number">5</span> + <span class="hljs-number">5</span>); <span class="hljs-comment">//打印结果是？ 5+5=55 ?</span><br></code></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">bb1</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>bb1++;<br>System.out.println(<span class="hljs-string">&quot;bb1 = &quot;</span> + bb1);<span class="hljs-comment">//-128</span><br></code></pre></td></tr></table></figure><p>练习4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i++ + ++i * i++;<br>System.out.println(<span class="hljs-string">&quot;j = &quot;</span> + j);<br></code></pre></td></tr></table></figure><p>练习5：（企业真题）写出下列程序的输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i++;<br>System.out.println(j);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>m = m++; <span class="hljs-comment">//(1)先取b的值“2”放操作数栈 (2)m再自增,m=3 (3)再把操作数栈中的&quot;2&quot;赋值给m,m=2</span><br>System.out.println(m);<br></code></pre></td></tr></table></figure><h3 id="7-2-赋值运算符"><a href="#7-2-赋值运算符" class="headerlink" title="7.2 赋值运算符"></a>7.2 赋值运算符</h3><h4 id="7-2-1-基本语法"><a href="#7-2-1-基本语法" class="headerlink" title="7.2.1 基本语法"></a>7.2.1 基本语法</h4><ul><li><p>符号：&#x3D; </p><ul><li>当“&#x3D;”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li><li>支持<code>连续赋值</code>。</li></ul></li><li><p>扩展赋值运算符： +&#x3D;、 -&#x3D;、*&#x3D;、 &#x2F;&#x3D;、%&#x3D;</p><table><thead><tr><th align="center">赋值运算符</th><th align="center">符号解释</th></tr></thead><tbody><tr><td align="center"><code>+=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相加</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>-=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相减</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>*=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相乘</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>/=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相除</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>%=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>取余</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr></tbody></table></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetValueTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> i1; <span class="hljs-comment">//自动类型转换</span><br><br><span class="hljs-type">byte</span> <span class="hljs-variable">bb1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i1; <span class="hljs-comment">//强制类型转换</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> i1;<br><br><span class="hljs-comment">//连续赋值的测试</span><br><span class="hljs-comment">//以前的写法</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//连续赋值的写法</span><br><span class="hljs-type">int</span> a2,b2;<br>a2 = b2 = <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>,b3 = <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">//举例说明+=  -=  *=  /=   %=  </span><br><span class="hljs-type">int</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>m1 += <span class="hljs-number">5</span>; <span class="hljs-comment">//类似于 m1 = m1 + 5的操作，但不等同于。</span><br>System.out.println(m1);<span class="hljs-comment">//15</span><br><br><span class="hljs-comment">//练习1：开发中，如何实现一个变量+2的操作呢？</span><br><span class="hljs-comment">// += 的操作不会改变变量本身的数据类型。其他拓展的运算符也如此。</span><br><span class="hljs-comment">//写法1：推荐</span><br><span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>s1 += <span class="hljs-number">2</span>; <span class="hljs-comment">//编译通过，因为在得到int类型的结果后，JVM自动完成一步强制类型转换，将int类型强转成short</span><br>System.out.println(s1);<span class="hljs-comment">//12</span><br><span class="hljs-comment">//写法2：</span><br><span class="hljs-type">short</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">//s2 = s2 + 2;//编译报错，因为将int类型的结果赋值给short类型的变量s时，可能损失精度</span><br>s2 = (<span class="hljs-type">short</span>)(s2 + <span class="hljs-number">2</span>);<br>System.out.println(s2);<br><br><br><span class="hljs-comment">//练习2：开发中，如何实现一个变量+1的操作呢？</span><br><span class="hljs-comment">//写法1：推荐</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num1++;<br>System.out.println(num1);<br><br><span class="hljs-comment">//写法2：</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num2 += <span class="hljs-number">1</span>;<br>System.out.println(num2);<br><br><span class="hljs-comment">//写法3：</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num3 = num3 + <span class="hljs-number">1</span>;<br>System.out.println(num3);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-2-练习"><a href="#7-2-2-练习" class="headerlink" title="7.2.2 练习"></a>7.2.2 练习</h4><p>练习1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; <br>s = s+<span class="hljs-number">2</span>;  <span class="hljs-comment">//① 编译报错</span><br>s += <span class="hljs-number">2</span>;   <span class="hljs-comment">//② 正常执行</span><br><br><span class="hljs-comment">//①和②有什么区别？ </span><br><br></code></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>i *= <span class="hljs-number">0.1</span>;<br>System.out.println(i);<span class="hljs-comment">//0</span><br>i++;<br>System.out.println(i);<span class="hljs-comment">//1</span><br><br></code></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>n *= m++; <span class="hljs-comment">//n = n * m++;</span><br>System.out.println(<span class="hljs-string">&quot;m=&quot;</span> + m);<span class="hljs-comment">//3</span><br>System.out.println(<span class="hljs-string">&quot;n=&quot;</span> + n);<span class="hljs-comment">//6</span><br><br></code></pre></td></tr></table></figure><p>练习4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>n += (n++) + (++n);  <span class="hljs-comment">//n = n + (n++) + (++n)</span><br>System.out.println(n);<span class="hljs-comment">//32</span><br><br></code></pre></td></tr></table></figure><p>练习5：你有几种办法实现变量值减1？变量值减2呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 16:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinusTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//练习①：变量值减1</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//方式1：</span><br>        <span class="hljs-comment">//s = (short)(s - 1);</span><br>        <span class="hljs-comment">//方式2：推荐</span><br>        s--; <span class="hljs-comment">//或者 --s</span><br>        <span class="hljs-comment">//方式3：</span><br>        s -= <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//练习②：变量值减2</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//方式1：</span><br>        <span class="hljs-comment">//s1 = (short)(s1 - 2);</span><br>        <span class="hljs-comment">//方式2：推荐</span><br>        s1 -= <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-比较-关系-运算符"><a href="#7-3-比较-关系-运算符" class="headerlink" title="7.3 比较(关系)运算符"></a>7.3 比较(关系)运算符</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731870_watermark.png" alt="image-20220312001742263"></p><ul><li><p>比较运算符的结果都是boolean型，也就是要么是true，要么是false。</p></li><li><p>&gt;   &lt;   &gt;&#x3D;  &lt;&#x3D; ：只适用于基本数据类型（除boolean类型之外）</p><p>&#x3D;&#x3D;   !&#x3D; ：适用于基本数据类型和引用数据类型</p></li><li><p>比较运算符“<code>==</code>”不能误写成“<code>=</code>”</p></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>System.out.println(i1 == i2);<span class="hljs-comment">//false</span><br>System.out.println(i1 != i2);<span class="hljs-comment">//true</span><br>System.out.println(i1 &gt;= i2);<span class="hljs-comment">//false</span><br><br><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>System.out.println(m == n);<span class="hljs-comment">//false</span><br>System.out.println(m = n);<span class="hljs-comment">//20</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>System.out.println(b1 == b2);<span class="hljs-comment">//false</span><br>System.out.println(b1 = b2);<span class="hljs-comment">//true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>思考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//区分好==和=的区别。</span><br><span class="hljs-keyword">if</span>(b1 == <span class="hljs-literal">true</span>)  <span class="hljs-comment">//if(b1 = true)</span><br>System.out.println(<span class="hljs-string">&quot;结果为真&quot;</span>);<br><span class="hljs-keyword">else</span><br>System.out.println(<span class="hljs-string">&quot;结果为假&quot;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="7-4-逻辑运算符"><a href="#7-4-逻辑运算符" class="headerlink" title="7.4 逻辑运算符"></a>7.4 逻辑运算符</h3><h4 id="7-4-1-基本语法"><a href="#7-4-1-基本语法" class="headerlink" title="7.4.1 基本语法"></a>7.4.1 基本语法</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731548_watermark.png" alt="image-20220312001943403" style="zoom: 67%;" /><ul><li><p>逻辑运算符，操作的都是boolean类型的变量或常量，而且运算得结果也是boolean类型的值。</p></li><li><p>运算符说明：</p><ul><li>&amp; 和 &amp;&amp;：表示”且”关系，当符号左右两边布尔值都是true时，结果才能为true。否则，为false。</li><li>| 和 || ：表示”或”关系，当符号两边布尔值有一边为true时，结果为true。当两边都为false时，结果为false</li><li>! ：表示”非”关系，当变量布尔值为true时，结果为false。当变量布尔值为false时，结果为true。</li><li>^ ：当符号左右两边布尔值不同时，结果为true。当两边布尔值相同时，结果为false。<ul><li>理解：<code>异或，追求的是“异”！</code></li></ul></li></ul></li><li><p>逻辑运算符用于连接布尔型表达式，在Java中不可以写成 3 &lt; x &lt; 6，应该写成x &gt; 3 &amp; x &lt; 6 。</p></li><li><p><strong>区分“&amp;”和“&amp;&amp;”：</strong></p><ul><li><p>相同点：如果符号左边是true，则二者都执行符号右边的操作</p></li><li><p>不同点：&amp; ： 如果符号左边是false,则继续执行符号右边的操作</p></li></ul><p>​                     &amp;&amp; ：如果符号左边是false,则不再继续执行符号右边的操作</p><ul><li>建议：开发中，推荐使用 &amp;&amp;</li></ul></li><li><p><strong>区分“|”和“||”：</strong></p><ul><li><p>相同点：如果符号左边是false，则二者都执行符号右边的操作</p></li><li><p>不同点：| ： 如果符号左边是true，则继续执行符号右边的操作</p><p>​               || ：如果符号左边是true，则不再继续执行符号右边的操作</p></li><li><p>建议：开发中，推荐使用 ||</p></li></ul></li></ul><p> 代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br><span class="hljs-comment">// &amp; 与，且；有false则false</span><br>System.out.println((a &gt; b) &amp; (a &gt; c)); <br>System.out.println((a &gt; b) &amp; (a &lt; c)); <br>System.out.println((a &lt; b) &amp; (a &gt; c)); <br>System.out.println((a &lt; b) &amp; (a &lt; c)); <br>System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);<br><span class="hljs-comment">// | 或；有true则true</span><br>System.out.println((a &gt; b) | (a &gt; c)); <br>System.out.println((a &gt; b) | (a &lt; c)); <br>System.out.println((a &lt; b) | (a &gt; c));<br>System.out.println((a &lt; b) | (a &lt; c));<br>System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);<br><span class="hljs-comment">// ^ 异或；相同为false，不同为true</span><br>System.out.println((a &gt; b) ^ (a &gt; c));<br>System.out.println((a &gt; b) ^ (a &lt; c)); <br>System.out.println((a &lt; b) ^ (a &gt; c)); <br>System.out.println((a &lt; b) ^ (a &lt; c)); <br>System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);<br><span class="hljs-comment">// ! 非；非false则true，非true则false</span><br>System.out.println(!<span class="hljs-literal">false</span>);<br>System.out.println(!<span class="hljs-literal">true</span>);<br>        <br>        <span class="hljs-comment">//&amp;和&amp;&amp;的区别</span><br>        System.out.println((a &gt; b) &amp; (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println((a &gt; b) &amp;&amp; (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println((a == b) &amp;&amp; (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        <br>        <span class="hljs-comment">//|和||的区别</span><br>        System.out.println((a &gt; b) | (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println((a &gt; b) || (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println((a == b) || (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-4-2-案例与练习"><a href="#7-4-2-案例与练习" class="headerlink" title="7.4.2 案例与练习"></a>7.4.2 案例与练习</h4><p><strong>案例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>. 定义类 CompareLogicExer<br><span class="hljs-number">2</span>. 定义 <span class="hljs-selector-tag">main</span>方法<br><span class="hljs-number">3</span>. 定义一个int类型变量<span class="hljs-selector-tag">a</span>,变量<span class="hljs-selector-tag">b</span>,都赋值为<span class="hljs-number">20</span><br><span class="hljs-number">4</span>. 定义boolean类型变量bo1 , 判断++<span class="hljs-selector-tag">a</span> 是否被<span class="hljs-number">3</span>整除,并且<span class="hljs-selector-tag">a</span>++ 是否被<span class="hljs-number">7</span>整除,将结果赋值给bo1<br><span class="hljs-number">5</span>. 输出<span class="hljs-selector-tag">a</span>的值,bo1的值<br><span class="hljs-number">6</span>. 定义boolean类型变量bo2 , 判断<span class="hljs-selector-tag">b</span>++ 是否被<span class="hljs-number">3</span>整除,并且++<span class="hljs-selector-tag">b</span> 是否被<span class="hljs-number">7</span>整除,将结果赋值给bo2<br><span class="hljs-number">7</span>. 输出<span class="hljs-selector-tag">b</span>的值,bo2的值<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareLogicExer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bo1</span> <span class="hljs-operator">=</span> ((++a % <span class="hljs-number">3</span>) == <span class="hljs-number">0</span>) &amp;&amp; ((a++ % <span class="hljs-number">7</span>) == <span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;bo1的值：&quot;</span> + bo1);<br>        System.out.println(<span class="hljs-string">&quot;a的值：&quot;</span> + a);<br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bo2</span> <span class="hljs-operator">=</span> ((b++ % <span class="hljs-number">3</span>) == <span class="hljs-number">0</span>) &amp;&amp; ((++b % <span class="hljs-number">7</span>) == <span class="hljs-number">0</span>); <br>        System.out.println(<span class="hljs-string">&quot;bo2的值：&quot;</span> + bo2);<br>        System.out.println(<span class="hljs-string">&quot;b的值：&quot;</span> + b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习1：</strong>区分 &amp; 和 &amp;&amp; </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(x++ == <span class="hljs-number">2</span> &amp; ++y == <span class="hljs-number">2</span>)&#123;<br>x = <span class="hljs-number">7</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x=&quot;</span> + x + <span class="hljs-string">&quot;,y=&quot;</span> + y);<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>,y = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(x++ == <span class="hljs-number">2</span> &amp;&amp; ++y == <span class="hljs-number">2</span>)&#123;<br>x =<span class="hljs-number">7</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x=&quot;</span>+x+<span class="hljs-string">&quot;,y=&quot;</span>+y);<br><br></code></pre></td></tr></table></figure><p><strong>练习2：</strong>区分 | 和 ||</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>,y = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(x++==<span class="hljs-number">1</span> | ++y==<span class="hljs-number">1</span>)&#123;<br>x =<span class="hljs-number">7</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x=&quot;</span>+x+<span class="hljs-string">&quot;,y=&quot;</span>+y);<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>,y = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(x++==<span class="hljs-number">1</span> || ++y==<span class="hljs-number">1</span>)&#123;<br>x =<span class="hljs-number">7</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x=&quot;</span>+x+<span class="hljs-string">&quot;,y=&quot;</span>+y);<br><br></code></pre></td></tr></table></figure><p><strong>练习3：</strong>程序输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Test</span>  &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String []  args)</span>  &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">42</span>;<br>        <br>        <span class="hljs-keyword">if</span> ((z++ == <span class="hljs-number">42</span>) &amp;&amp; (y = <span class="hljs-literal">true</span>)) &#123;<br>            z++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((x = <span class="hljs-literal">false</span>) || (++z == <span class="hljs-number">45</span>)) &#123;<br>            z++;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;z=&quot;</span> + z);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//结果为：</span><br><span class="hljs-comment">//z= 46</span><br></code></pre></td></tr></table></figure><h3 id="7-5-位运算符"><a href="#7-5-位运算符" class="headerlink" title="7.5 位运算符"></a>7.5 位运算符</h3><h4 id="7-5-1-基本语法"><a href="#7-5-1-基本语法" class="headerlink" title="7.5.1 基本语法"></a>7.5.1 基本语法</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731874_watermark.png" alt="image-20220313174721111" style="zoom:75%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731301_watermark.png" alt="image-20220312002506339" style="zoom:67%;" /><ul><li>位运算符的运算过程都是基于二进制的补码运算</li></ul><p><strong>（1）左移：&lt;&lt;</strong></p><p>运算规则：在一定范围内，数据每向左移动一位，相当于原数据*2。（正数、负数都适用）</p><p>【注意】当左移的位数n超过该数据类型的总位数时，相当于左移（n-总位数）位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">3</span>&lt;&lt;<span class="hljs-number">4</span>  类似于  <span class="hljs-number">3</span>*<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次幂 =&gt; <span class="hljs-number">3</span>*<span class="hljs-number">16</span> =&gt; <span class="hljs-number">48</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731941_watermark.png" alt="image-20200225113651675"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">3</span>&lt;&lt;<span class="hljs-number">4</span>  类似于  -<span class="hljs-number">3</span>*<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次幂 =&gt; -<span class="hljs-number">3</span>*<span class="hljs-number">16</span> =&gt; -<span class="hljs-number">48</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731211_watermark.png" alt="image-20200225114707524"></p><p><strong>（2）右移：&gt;&gt;</strong></p><p>运算规则：在一定范围内，数据每向右移动一位，相当于原数据&#x2F;2。（正数、负数都适用）</p><p>【注意】如果不能整除，<code>向下取整</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">69</span>&gt;&gt;<span class="hljs-number">4</span>  类似于  <span class="hljs-number">69</span>/<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次 = <span class="hljs-number">69</span>/<span class="hljs-number">16</span> =<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731662_watermark.png" alt="image-20200225115636844"></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">-69</span>&gt;&gt;4  类似于  <span class="hljs-string">-69</span>/2的4次 = <span class="hljs-string">-69</span>/16 = <span class="hljs-string">-5</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731142_watermark.png" alt="image-20200225120112188"></p><p><strong>（3）无符号右移：&gt;&gt;&gt;</strong></p><p>运算规则：往右移动后，左边空出来的位直接补0。（正数、负数都适用）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">69</span>&gt;&gt;&gt;<span class="hljs-number">4</span>  类似于  <span class="hljs-number">69</span>/<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次 = <span class="hljs-number">69</span>/<span class="hljs-number">16</span> =<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731824_watermark.png" alt="image-20200225121104734"></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-69&gt;&gt;&gt;4   结果：268435451</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731209_watermark.png" alt="image-20200225121244290"></p><p><strong>（4）按位与：&amp;</strong></p><p>运算规则：对应位都是1才为1，否则为0。</p><ul><li><p>1 &amp; 1 结果为1</p></li><li><p>1 &amp; 0 结果为0</p></li><li><p>0 &amp; 1 结果为0</p></li><li><p>0 &amp; 0 结果为0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">9</span> &amp; <span class="hljs-number">7</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731837_watermark.png" alt="image-20200225122440953"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">9</span> &amp; <span class="hljs-number">7</span> = <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731199_watermark.png" alt="image-20200225122221616"></p><p><strong>（5）按位或：|</strong></p><p>运算规则：对应位只要有1即为1，否则为0。</p><ul><li><p>1 | 1 结果为1</p></li><li><p>1 | 0 结果为1</p></li><li><p>0 | 1 结果为1</p></li><li><p>0 &amp; 0 结果为0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">9</span> | <span class="hljs-number">7</span>  <span class="hljs-comment">//结果： 15</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731532_watermark.png" alt="image-20200225122758851"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">9</span> | <span class="hljs-number">7</span> <span class="hljs-comment">//结果： -9</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731855_watermark.png" alt="image-20200225123409130"></p><p><strong>（6）按位异或：^</strong></p><p>运算规则：对应位一个为1一个为0，才为1，否则为0。</p><ul><li><p>1 ^ 1 结果为0</p></li><li><p>1 ^ 0 结果为1</p></li><li><p>0 ^ 1 结果为1</p></li><li><p>0 ^ 0 结果为0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">9</span> ^ <span class="hljs-number">7</span>  <span class="hljs-comment">//结果为14</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731050_watermark.png" alt="image-20200225123445305"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">9</span> ^ <span class="hljs-number">7</span> <span class="hljs-comment">//结果为-16</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731378_watermark.png" alt="image-20200225133145727"></p><p><strong>（7）按位取反：~</strong></p><p>运算规则：对应位为1，则结果为0；对应位为0，则结果为1。</p><ul><li><p>~0就是1  </p></li><li><p>~1就是0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">~<span class="hljs-number">9</span>  <span class="hljs-comment">//结果：-10</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731749_watermark.png" alt="image-20200225124112662"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">~-<span class="hljs-number">9</span>  <span class="hljs-comment">//结果：8</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731945_watermark.png" alt="image-20200225124156862"></p><h4 id="7-5-2-举例"><a href="#7-5-2-举例" class="headerlink" title="7.5.2 举例"></a>7.5.2 举例</h4><p><strong>举例1：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731320_watermark.jpg" alt="snipaste_20220312_002549" style="zoom: 67%;" /><p><strong>举例2：体会 m &#x3D; k ^ n &#x3D; (m ^ n) ^ n</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731177_watermark.png" alt="image-20220312002736157" style="zoom:67%;" /><h4 id="7-5-3-案例"><a href="#7-5-3-案例" class="headerlink" title="7.5.3 案例"></a>7.5.3 案例</h4><p><strong>案例1：</strong>高效的方式计算2 * 8的值（经典面试题）</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">答案：2 &lt;&lt;<span class="hljs-number"> 3 </span>、 <span class="hljs-number"> 8 </span> &lt;&lt; 1<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>如何交换两个int型变量的值？String呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 16:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BitExer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br><br><span class="hljs-comment">//（推荐）实现方式1：优点：容易理解，适用于不同数据类型    缺点：需要额外定义变量</span><br><span class="hljs-comment">//int temp = m;</span><br><span class="hljs-comment">//m = n;</span><br><span class="hljs-comment">//n = temp;</span><br><br><span class="hljs-comment">//实现方式2：优点：没有额外定义变量    缺点：可能超出int的范围；只能适用于数值类型</span><br><span class="hljs-comment">//m = m + n; //15 = 10 + 5</span><br><span class="hljs-comment">//n = m - n;//10 = 15 - 5</span><br><span class="hljs-comment">//m = m - n;//5 = 15 - 10</span><br><br><span class="hljs-comment">//实现方式3：优点：没有额外定义变量    缺点：不易理解；只能适用于数值类型</span><br>m = m ^ n; <br>n = m ^ n; <span class="hljs-comment">//(m ^ n) ^ n</span><br>m = m ^ n;<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-6-条件运算符"><a href="#7-6-条件运算符" class="headerlink" title="7.6 条件运算符"></a>7.6 条件运算符</h3><h4 id="7-6-1-基本语法"><a href="#7-6-1-基本语法" class="headerlink" title="7.6.1 基本语法"></a>7.6.1 基本语法</h4><ul><li>条件运算符格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(条件表达式)? 表达式<span class="hljs-number">1</span>:表达式<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li><p>说明：条件表达式是boolean类型的结果，根据boolean的值选择表达式1或表达式2</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731633_watermark.png" alt="image-20220312002841945" style="zoom:67%;" /></li><li><p>如果运算后的结果赋给新的变量，要求表达式1和表达式2为同种或兼容的类型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (<span class="hljs-number">1</span>==<span class="hljs-number">2</span> ? <span class="hljs-number">100</span> : <span class="hljs-number">200</span>);<br>    System.out.println(i);<span class="hljs-comment">//200</span><br>    <br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">marry</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>System.out.println(marry ? <span class="hljs-string">&quot;已婚&quot;</span> : <span class="hljs-string">&quot;未婚&quot;</span>  );<br>    <br>    <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> (m1 &gt; m2)? <span class="hljs-number">1</span> : <span class="hljs-number">2.0</span>;<br>System.out.println(d1);<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>    System.out.println(num &gt; <span class="hljs-number">0</span>? <span class="hljs-literal">true</span> : <span class="hljs-string">&quot;num非正数&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-6-2-案例"><a href="#7-6-2-案例" class="headerlink" title="7.6.2 案例"></a>7.6.2 案例</h4><p><strong>案例1：</strong>获取两个数中的较大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionExer1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//获取两个数的较大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max1</span> <span class="hljs-operator">=</span> (m1 &gt; m2)? m1 : m2;<br>        System.out.println(<span class="hljs-string">&quot;m1和m2中的较大值为&quot;</span> + max1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>获取三个数中的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionExer2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">33</span>;<br>        <span class="hljs-comment">//写法1：</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempMax</span> <span class="hljs-operator">=</span> (n1 &gt; n2)? n1:n2;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalMax</span> <span class="hljs-operator">=</span> (tempMax &gt; n3)? tempMax : n3;<br>        System.out.println(<span class="hljs-string">&quot;三个数中最大值为：&quot;</span> + finalMax);<br><br>        <span class="hljs-comment">//写法2：不推荐，可读性差</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalMax1</span> <span class="hljs-operator">=</span> (((n1 &gt; n2)? n1:n2) &gt; n3)? ((n1 &gt; n2)? n1:n2) : n3;<br>        System.out.println(<span class="hljs-string">&quot;三个数中最大值为：&quot;</span> + finalMax1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>今天是周2，10天以后是周几？</p><p>要求：控制台输出”今天是周2，10天以后是周x”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionExer3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        week += <span class="hljs-number">10</span>;<br>        week %= <span class="hljs-number">7</span>;<br>        System.out.println(<span class="hljs-string">&quot;今天是周2,10天以后是周&quot;</span> + (week == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;日&quot;</span> : week));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-6-3-与if-else的转换关系"><a href="#7-6-3-与if-else的转换关系" class="headerlink" title="7.6.3 与if-else的转换关系"></a>7.6.3 与if-else的转换关系</h4><ul><li><p>凡是可以使用条件运算符的地方，都可以改写为if-else结构。反之，不成立。</p></li><li><p>开发中，如果既可以使用条件运算符，又可以使用if-else，推荐使用条件运算符。因为执行效率稍高。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//if-else实现获取两个数的较大值</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br><span class="hljs-type">int</span> max;<span class="hljs-comment">//声明变量max，用于记录i1和i2的较大值</span><br><br><span class="hljs-keyword">if</span>(i1 &gt; i2)&#123;<br>    max = i1;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    max = i2;<br>&#125;<br><br>System.out.println(max);<br></code></pre></td></tr></table></figure><h3 id="7-7-运算符优先级"><a href="#7-7-运算符优先级" class="headerlink" title="7.7 运算符优先级"></a>7.7 运算符优先级</h3><p>运算符有不同的优先级，所谓优先级就是在表达式运算中的运算符顺序。</p><p>上一行中的运算符总是优先于下一行的。</p><table><thead><tr><th>优先级</th><th align="center">运算符说明</th><th align="center">Java运算符</th></tr></thead><tbody><tr><td>1</td><td align="center">括号</td><td align="center"><code>()</code>、<code>[]</code>、<code>&#123;&#125;</code></td></tr><tr><td>2</td><td align="center">正负号</td><td align="center"><code>+</code>、<code>-</code></td></tr><tr><td>3</td><td align="center">单元运算符</td><td align="center"><code>++</code>、<code>--</code>、<code>~</code>、<code>！</code></td></tr><tr><td>4</td><td align="center">乘法、除法、求余</td><td align="center"><code>*</code>、<code>/</code>、<code>%</code></td></tr><tr><td>5</td><td align="center">加法、减法</td><td align="center"><code>+</code>、<code>-</code></td></tr><tr><td>6</td><td align="center">移位运算符</td><td align="center"><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td></tr><tr><td>7</td><td align="center">关系运算符</td><td align="center"><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>&gt;</code>、<code>instanceof</code></td></tr><tr><td>8</td><td align="center">等价运算符</td><td align="center"><code>==</code>、<code>!=</code></td></tr><tr><td>9</td><td align="center">按位与</td><td align="center"><code>&amp;</code></td></tr><tr><td>10</td><td align="center">按位异或</td><td align="center"><code>^</code></td></tr><tr><td>11</td><td align="center">按位或</td><td align="center">&#96;</td></tr><tr><td>12</td><td align="center">条件与</td><td align="center"><code>&amp;&amp;</code></td></tr><tr><td>13</td><td align="center">条件或</td><td align="center">&#96;</td></tr><tr><td>14</td><td align="center">三元运算符</td><td align="center"><code>? :</code></td></tr><tr><td>15</td><td align="center">赋值运算符</td><td align="center"><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></td></tr><tr><td>16</td><td align="center">位赋值运算符</td><td align="center"><code>&amp;=</code>、&#96;</td></tr></tbody></table><blockquote><p>开发建议：</p><ol><li>不要过多的依赖运算的优先级来控制表达式的执行顺序，这样可读性太差，尽量<code>使用()来控制</code>表达式的执行顺序。</li><li>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，则把它<code>分成几步</code>来完成。例如：<br>​ (num1 + num2) * 2 &gt; num3 &amp;&amp; num2 &gt; num3 ? num3 : num1 + num2;</li></ol></blockquote><h2 id="8-【拓展】关于字符集"><a href="#8-【拓展】关于字符集" class="headerlink" title="8. 【拓展】关于字符集"></a>8. 【拓展】关于字符集</h2><h3 id="8-1-字符集"><a href="#8-1-字符集" class="headerlink" title="8.1 字符集"></a>8.1 字符集</h3><ul><li><strong>编码与解码</strong></li></ul><p>计算机中储存的信息都是用<code>二进制数</code>表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<code>编码</code> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<code>解码</code> 。</p><ul><li><p><strong>字符编码（Character Encoding）</strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p></li><li><p><strong>字符集</strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p></li></ul><h3 id="8-2-ASCII码"><a href="#8-2-ASCII码" class="headerlink" title="8.2 ASCII码"></a>8.2 ASCII码</h3><ul><li>ASCII码（American Standard Code for Information Interchange，美国信息交换标准代码）：上个世纪60年代，美国制定了一套字符编码，对<code>英语字符</code>与二进制位之间的关系，做了统一规定。这被称为ASCII码。</li><li>ASCII码用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符（最前面的1位统一规定为0），共<code>128个</code>字符。比如：空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。</li><li>缺点：不能表示所有字符。</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731034_watermark.png" alt="image-20220513095907601"></p><h3 id="8-3-ISO-8859-1字符集"><a href="#8-3-ISO-8859-1字符集" class="headerlink" title="8.3 ISO-8859-1字符集"></a>8.3 ISO-8859-1字符集</h3><ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰语、德语、意大利语、葡萄牙语等</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul><h3 id="8-4-GBxxx字符集"><a href="#8-4-GBxxx字符集" class="headerlink" title="8.4 GBxxx字符集"></a>8.4 GBxxx字符集</h3><ul><li>GB就是国标的意思，是为了<code>显示中文</code>而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同，即向下兼容ASCII码。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含<code>7000多个简体汉字</code>，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，这就是常说的”全角”字符，而原来在127号以下的那些符号就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了<code>双字节</code>编码方案，共收录了<code>21003个</code>汉字，完全兼容GB2312标准，同时支持<code>繁体汉字</code>以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字<code>70244个</code>，采用<code>多字节</code>编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul><h3 id="8-5-Unicode码"><a href="#8-5-Unicode码" class="headerlink" title="8.5 Unicode码"></a>8.5 Unicode码</h3><ul><li><p>Unicode编码为表达<code>任意语言的任意字符</code>而设计，也称为统一码、标准万国码。Unicode 将世界上所有的文字用<code>2个字节</code>统一进行编码，为每个字符设定唯一的二进制编码，以满足跨语言、跨平台进行文本处理的要求。</p></li><li><p>Unicode 的缺点：这里有三个问题：</p><ul><li>第一，英文字母只用一个字节表示就够了，如果用更多的字节存储是<code>极大的浪费</code>。</li><li>第二，如何才能<code>区别Unicode和ASCII</code>？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？</li><li>第三，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，<code>不够表示所有字符</code>。</li></ul></li><li><p>Unicode在很长一段时间内无法推广，直到互联网的出现，为解决Unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现。具体来说，有三种编码方案，UTF-8、UTF-16和UTF-32。</p></li></ul><h3 id="8-6-UTF-8"><a href="#8-6-UTF-8" class="headerlink" title="8.6 UTF-8"></a>8.6 UTF-8</h3><ul><li>Unicode是字符集，UTF-8、UTF-16、UTF-32是三种<code>将数字转换到程序数据</code>的编码方案。顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。其中，UTF-8 是在互联网上<code>使用最广</code>的一种 Unicode 的实现方式。</li><li>互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。UTF-8 是一种<code>变长的编码方式</code>。它可以使用 1-4 个字节表示一个符号它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul><ul><li>举例</li></ul><p>Unicode符号范围  | UTF-8编码方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">(十六进制)</span>           <span class="hljs-string">|</span> <span class="hljs-string">（二进制）</span><br><br><span class="hljs-string">————————————————————|—–—–—–—–—–—–—–—–—–—–—–—–—–—–</span><br><br><span class="hljs-number">0000 </span><span class="hljs-number">0000</span><span class="hljs-number">-0000</span> <span class="hljs-string">007F</span> <span class="hljs-string">|</span> <span class="hljs-string">0xxxxxxx（兼容原来的ASCII）</span><br><br><span class="hljs-number">0000 </span><span class="hljs-number">0080</span><span class="hljs-number">-0000</span> <span class="hljs-string">07FF</span> <span class="hljs-string">|</span> <span class="hljs-string">110xxxxx</span> <span class="hljs-string">10xxxxxx</span><br><br><span class="hljs-number">0000 </span><span class="hljs-number">0800</span><span class="hljs-number">-0000</span> <span class="hljs-string">FFFF</span> <span class="hljs-string">|</span> <span class="hljs-string">1110xxxx</span> <span class="hljs-string">10xxxxxx</span> <span class="hljs-string">10xxxxxx</span><br><br><span class="hljs-number">0001 </span><span class="hljs-number">0000</span><span class="hljs-number">-0010</span> <span class="hljs-string">FFFF</span> <span class="hljs-string">|</span> <span class="hljs-string">11110xxx</span> <span class="hljs-string">10xxxxxx</span> <span class="hljs-string">10xxxxxx</span> <span class="hljs-string">10xxxxxx</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731771_watermark.png" alt="image-20220525164636164"></p><h3 id="8-7-小结"><a href="#8-7-小结" class="headerlink" title="8.7 小结"></a>8.7 小结</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731059_watermark.jpg" alt="字符集"></p><blockquote><p>注意：在中文操作系统上，ANSI（美国国家标准学会、AMERICAN NATIONAL STANDARDS INSTITUTE: ANSI）编码即为GBK；在英文操作系统上，ANSI编码即为ISO-8859-1。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java语言概述</title>
    <link href="/2024/02/21/1.%20Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
    <url>/2024/02/21/1.%20Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Java语言概述"><a href="#1-Java语言概述" class="headerlink" title="1. Java语言概述"></a>1. Java语言概述</h2><h3 id="1-1-Java概述"><a href="#1-1-Java概述" class="headerlink" title="1.1 Java概述"></a>1.1 Java概述</h3><ul><li><p>是<code>SUN</code>(Stanford University Network，斯坦福大学网络公司 ) <code>1995年</code>推出的一门高级编程语言。</p></li><li><p>是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以在<code>Web浏览器</code>中运行。这些Java程序被称为<code>Java小程序</code>（applet），内嵌在HTML代码中。</p></li><li><p>伴随着互联网的迅猛发展，以及Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言。</p></li></ul><h3 id="1-2-Java语言简史"><a href="#1-2-Java语言简史" class="headerlink" title="1.2 Java语言简史"></a>1.2 Java语言简史</h3><p><strong>起步阶段：</strong></p><p>1991年，Sun公司的工程师小组想要设计一种语言，应用在<code>电视机</code>、<code>电话</code>、<code>闹钟</code>、<code>烤面包机</code>等家用电器的控制和通信。由于这些设备的<code>处理能力</code>和<code>内存</code>都很有限，并且不同的厂商会选择不同的中央处理器(CPU)，因此这种语言的关键是<code>代码短小</code>、<code>紧凑</code>且<code>与平台无关</code>（即不能与任何特定的体系结构捆绑在一起）。</p><p>Gosling团队率先创造了这个语言，并命名为“<code>Oak</code>“（起名的原因是因为他非常喜欢自己办公室外的橡树)。后因智能化家电的市场需求没有预期的高，Sun公司放弃了该项计划。</p><p>随着20世纪90年代互联网的发展，Sun公司发现该语言在互联网上应用的前景，于是改造了Oak，于1995年5月以Java的名称正式发布。（Java是印度尼西亚<code>爪哇岛</code>的英文名称，因盛产咖啡而闻名。）</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/Java%E5%9B%BE%E6%A0%87_watermark.png" alt="Java图标"></p><p><strong>发展阶段：</strong></p><table><thead><tr><th align="center">发行版本</th><th align="center">发行时间</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">Java 1.0</td><td align="center">1996.01.23</td><td align="center">Sun公司发布了Java的第一个开发工具包</td></tr><tr><td align="center">Java 1.1</td><td align="center">1997.02.19</td><td align="center">JavaOne会议召开，创当时全球同类会议规模之最。</td></tr><tr><td align="center">Java 1.2</td><td align="center">1998.12.08</td><td align="center">Java拆分成：J2SE（标准版）、J2EE（企业版）、J2ME（小型版）</td></tr><tr><td align="center">Java 1.3</td><td align="center">2000.05.08</td><td align="center"></td></tr><tr><td align="center">Java1.4</td><td align="center">2004.02.06</td><td align="center"></td></tr><tr><td align="center"><strong>Java 5.0</strong></td><td align="center"><strong>2004.09.30</strong></td><td align="center"><strong>①版本号从1.4直接更新至5.0；②平台更名为JavaSE、JavaEE、JavaME</strong></td></tr><tr><td align="center">Java 6.0</td><td align="center">2006.12.11</td><td align="center">2009.04.20 Oracle宣布收购SUN公司</td></tr><tr><td align="center"></td><td align="center">2009.04.20</td><td align="center">Oracle公司收购SUN，交易价格<code>74亿</code>美元。</td></tr><tr><td align="center">Java 7.0</td><td align="center">2011.07.02</td><td align="center"></td></tr><tr><td align="center"><strong>Java 8.0</strong></td><td align="center"><strong>2014.03.18</strong></td><td align="center"><strong>此版本是继Java 5.0以来变化最大的版本。是长期支持版本（LTS）</strong></td></tr><tr><td align="center">Java 9.0</td><td align="center">2017.09.22</td><td align="center">①此版本开始，<strong>每半年更新一次</strong>；②Java 9.0开始不再支持windows 32位系统</td></tr><tr><td align="center">Java 10.0</td><td align="center">2018.03.21</td><td align="center"></td></tr><tr><td align="center"><strong>Java 11.0</strong></td><td align="center"><strong>2018.09.25</strong></td><td align="center"><strong>JDK安装包取消独立JRE安装包，是长期支持版本（LTS）</strong></td></tr><tr><td align="center">Java 12.0</td><td align="center">2019.03.19</td><td align="center"></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center"></td></tr><tr><td align="center"><strong>Java17.0</strong></td><td align="center"><strong>2021.09</strong></td><td align="center"><strong>发布Java 17.0，版本号也称为21.9，是长期支持版本。</strong></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center"></td></tr><tr><td align="center">Java19.0</td><td align="center">2022.09</td><td align="center">发布Java19.0，版本号也称为22.9。</td></tr></tbody></table><h3 id="1-3-Java之父"><a href="#1-3-Java之父" class="headerlink" title="1.3 Java之父"></a>1.3 Java之父</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/Java%E4%B9%8B%E7%88%B6_watermark.png" alt="image-20220310152923961" style="zoom:67%;" /><ul><li><code>詹姆斯·高斯林(James Gosling)</code>先生以“Java 技术之父”而闻名于世。他是Java 技术的创始人，他亲手设计了Java语言，并开发了Java编译器和Java虚拟机，使Java成为了世界上最流行的开发语言。</li><li>James Gosling于1984 年加入Sun公司，并一直服务于Sun公司，直至2010年前后，Sun被Oracle并购而加入Oracle，担任客户端软件集团的首席技术官; 2010年4月从Oracle离职。</li></ul><h3 id="1-4-公司八卦"><a href="#1-4-公司八卦" class="headerlink" title="1.4 公司八卦"></a>1.4 公司八卦</h3><ul><li><strong>SUN 与 Oracle</strong></li></ul><blockquote><p>SUN是一家<code>极具创新能力</code>的公司，2001年 “9.11”以前，SUN公司市值<code>超过1000亿</code>美元。 但是没能利用Java构建一个强有力、可变现的生态系统，没打好Java这张牌。此后，互联网泡沫破裂，硬件需求大幅减少，它的市值在一个月之内跌幅超过90%。<strong>SUN公司的成长用了20年，而衰落只用了1年！</strong></p></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/sun%E4%B8%8E%E7%94%B2%E9%AA%A8%E6%96%87_watermark.png" alt="image-20220309230923533" style="zoom: 67%;" /><ul><li><strong>Oracle 与 Google</strong></li></ul><blockquote><p>Google和Oracle的侵权事件：</p><p>2010 年 8 月，Oracle 起诉 Google 的 Android 系统侵权，要求赔偿 26 亿美元。</p><ul><li>Oracle认为Google的代码中使用了Java的<code>37个API</code>，并且认为Google是故意为之，因为这样做的好处是可以让更多的Java程序员更容易接受Android的代码。</li><li>Oracle认为Android 中有<code>9行代码</code>直接抄袭了Java的实现。这9行牛气哄哄的代码都出自一人之手，他就是Java 大牛——<code>Joshua Bloch</code>。</li></ul><p>2018 年 3 月，美国联邦巡回上诉法院裁决，谷歌侵犯了甲骨文的版权，支付高达<code>88亿美元</code>的赔偿金。</p><p>2021 年 4 月，美国最高法院给出了最终裁决：谷歌胜诉，其代码属于“合理使用”的范畴。为期十多年的软件行业“第一版权案”落幕。</p></blockquote><blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Code In OpenJDK / Android ：</span><br><span class="hljs-number">1.</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rangeCheck</span><span class="hljs-params">(<span class="hljs-type">int</span> arrayLen, <span class="hljs-type">int</span> fromIndex, <span class="hljs-type">int</span> toIndex)</span> &#123;<br><span class="hljs-number">2.</span>    <span class="hljs-keyword">if</span> (fromIndex &gt; toIndex)<br><span class="hljs-number">3.</span>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;fromIndex(&quot;</span> + fromIndex +<br><span class="hljs-number">4.</span>                   <span class="hljs-string">&quot;) &gt; toIndex(&quot;</span> + toIndex+<span class="hljs-string">&quot;)&quot;</span>);<br><span class="hljs-number">5.</span>    <span class="hljs-keyword">if</span> (fromIndex &lt; <span class="hljs-number">0</span>)<br><span class="hljs-number">6.</span>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(fromIndex);<br><span class="hljs-number">7.</span>    <span class="hljs-keyword">if</span> (toIndex &gt; arrayLen)<br><span class="hljs-number">8.</span>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(toIndex);<br><span class="hljs-number">9.</span> &#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/Google%E4%B8%8EOracle_watermark.png" alt="image-20221027145908490"></p><h3 id="1-5-Java技术体系平台"><a href="#1-5-Java技术体系平台" class="headerlink" title="1.5 Java技术体系平台"></a>1.5 Java技术体系平台</h3><ul><li><strong>Java SE(Java Standard Edition)标准版</strong><ul><li>支持面向<code>桌面级应用</code>（如Windows下的应用程序）的Java平台，即定位个人计算机的应用开发。</li><li>包括用户界面接口AWT及Swing，网络功能与国际化、图像处理能力以及输入输出支持等。</li><li>此版本以前称为J2SE</li></ul></li><li><strong>Java EE(Java Enterprise Edition)企业版</strong><ul><li>为开发企业环境下的应用程序提供的一套解决方案，即定位<code>在服务器端的Web应用开发</code>。</li><li>JavaEE是JavaSE的扩展，增加了用于服务器开发的类库。如：Servlet能够延伸服务器的功能，通过请求-响应的模式来处理客户端的请求；JSP是一种可以将Java程序代码内嵌在网页内的技术。</li><li>版本以前称为J2EE</li></ul></li><li><strong>Java ME(Java Micro Edition)小型版</strong><ul><li>支持Java程序运行在<code>移动终端（手机、机顶盒）上的平台</code>，即定位在消费性电子产品的应用开发</li><li>JavaME是JavaSE的内伸，精简了JavaSE 的核心类库，同时也提供自己的扩展类。增加了适合微小装置的类库：javax.microedition.io.*等。</li><li>此版本以前称为J2ME</li></ul></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/EE%E3%80%81SE%E3%80%81ME%E5%85%B3%E8%81%94_watermark.png" alt="image-20211218093009884"></p><blockquote><p>注意：</p><p>Android开发不等同于Java ME的开发</p></blockquote><h2 id="2-Java开发环境搭建"><a href="#2-Java开发环境搭建" class="headerlink" title="2. Java开发环境搭建"></a>2. Java开发环境搭建</h2><h3 id="2-1-什么是JDK、JRE"><a href="#2-1-什么是JDK、JRE" class="headerlink" title="2.1 什么是JDK、JRE"></a>2.1 什么是JDK、JRE</h3><ul><li><strong>JDK</strong>  (Java Development Kit)：是Java程序开发工具包，包含<code>JRE</code> 和开发人员使用的工具。</li><li>**JRE ** (Java Runtime Environment) ：是Java程序的运行时环境，包含<code>JVM</code> 和运行时所需要的<code>核心类库</code>。</li></ul><p>如下是Java 8.0 Platform：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211115901_watermark.jpg"></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211115871_watermark.png" alt="image-20220310200731185" style="zoom:67%;" /><blockquote><p>小结：</p><p>JDK &#x3D; JRE + 开发工具集（例如Javac编译工具等）</p><p>JRE &#x3D; JVM + Java SE标准类库</p></blockquote><h3 id="2-2-JDK版本选择"><a href="#2-2-JDK版本选择" class="headerlink" title="2.2 JDK版本选择"></a>2.2 JDK版本选择</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211041655_watermark.png" alt="image-20221108221057540" style="zoom:80%;" /><hr><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211041706_watermark.png" alt="image-20220310201541841"></p><ul><li>自Java 8版本发布以来，其后的每次更新，都会有小伙伴高呼：<strong>Java8 YYDS！</strong></li><li>论坛的声音：“<code>你发任你发，我用Java 8！</code>”</li></ul><p><strong>数据说话1：</strong></p><p>JRebel 于2022年4月前后发布了《2022 年Java生态系统状况报告》，报告中提到使用Java11 的占比最多，Java 8 紧随其后，如下图。而此前2020年的报告显示，Java8占比达到了<code>84.48%</code>。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211041728_watermark.jpeg" alt="d315"></p><blockquote><p>我的分析：</p><p>G1是最受欢迎的GC算法。Java 11及更高版本的G1收集器是默认的GC，而Java 8中并不是。出于对G1的喜爱，很多开发者才会选择抛弃Java 8。</p></blockquote><p><strong>数据说话2：</strong></p><p>此外，某美国软件开发商在对近千名专业的Java开发者调研后，发布的《2022年Java开发者生产力报告》称：八年前发布的Java 8依然是Java中应用最广泛的版本，占比 <code>37%</code>，其次是 Java 11，占比<code>29%</code> 。</p><p><strong>高斯林说话：</strong></p><hr><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211041742_watermark.png" alt="image-20220428151952049" style="zoom: 67%;" /><p><strong>Spring框架说话：</strong></p><p>在Java 17正式发布之前，Java开发框架Spring率先在官博宣布，Spring Framework 6和Spring Boot 3计划在2022年第四季度实现总体可用性的高端基线：</p><ul><li><p>Java 17+(来自 Spring Framework 5.3.x 线中的 Java 8-17)</p></li><li><p>Jakarta EE 9+（来自Spring框架5.3.x 线中的 Java EE 7-8）</p></li></ul><p>Spring 官方说明：<code>https://spring.io/blog/2022/01/20/spring-boot-3-0-0-m1-is-now-available</code></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211041767_watermark.png" alt="image-20220527155439683"></p><blockquote><p>意味着：springboot3.0 是需要用java17和spring6.0为基础建设。如果从企业选型最新springboot3.0作为架构来说，它搭配jdk17肯定是标配了。</p></blockquote><h3 id="2-3-JDK的下载"><a href="#2-3-JDK的下载" class="headerlink" title="2.3 JDK的下载"></a>2.3 JDK的下载</h3><ul><li>下载网址（Oracle公司官网）：<a href="http://www.oracle.com/">www.oracle.com</a></li><li>下载步骤：如图所示，在官网底部选择Developers开发者</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043477_watermark.png" alt="1572254490435"></p><p>（1）在Developers页面中间的技术分类部分，选择<code>Java</code>，单击进入，如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043496_watermark.png" alt="image-20211019110551338" style="zoom: 50%;" /><p>（2）这里展示的是最新Java版本，例如Java17。单击<code>Download Java</code>，然后选择具体的版本下载。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043562_watermark.png" alt="image-20211019110843394" style="zoom:80%;" /><p>（3）选择Download Java按钮后</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043532_watermark.png" alt="image-20211019111110242"></p><p>（4）如果想安装Java8 可以选择如下位置：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043547_watermark.png" alt="image-20211019111150970" style="zoom:80%;" /><p>（5）选择Accept License Agreement，</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043583_watermark.png" alt="image-20211019111252989" style="zoom:80%;" /><p>（6）注册或登录后下载：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043653_watermark.png" alt="image-20211019111922387" style="zoom:50%;" /><p>（7）如果需要安装其它版本，可以选择Java archive：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043410_watermark.png" alt="image-20220801004606762" style="zoom: 67%;" /><p>接着进行选择下载即可：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043664_watermark.png" alt="image-20220801004648997" style="zoom:67%;" /><h3 id="2-4-JDK的安装"><a href="#2-4-JDK的安装" class="headerlink" title="2.4 JDK的安装"></a>2.4 JDK的安装</h3><ul><li>安装说明<ul><li>傻瓜式安装，下一步即可。</li><li><strong>建议：安装路径不要有中文或者空格等特殊符号。</strong></li><li><strong>本套课程会同时安装JDK8 和 JDK17，并以JDK17为默认版本进行讲解。</strong></li></ul></li></ul><ul><li>安装步骤：</li></ul><p>（1）双击<code>jdk-17_windows-x64_bin.exe</code>文件，并单击下一步，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043959_watermark.png" alt="image-20220303083718546"></p><p>（2）修改安装路径，单击更改，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043099_watermark.png" alt="image-20220303083759546"></p><p>（3）将安装路径修改为<code>D:\develop_tools\jdk\jdk-17.0.2\</code>，并单击下一步，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043059_watermark.png" alt="image-20220303083845794"></p><p>（4）稍后几秒，安装完成，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043752_watermark.png" alt="image-20220303083905277"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043507_watermark.png" alt="image-20220303083931309"></p><h3 id="2-5-配置path环境变量"><a href="#2-5-配置path环境变量" class="headerlink" title="2.5 配置path环境变量"></a>2.5 配置path环境变量</h3><h4 id="7-5-1-理解path环境变量"><a href="#7-5-1-理解path环境变量" class="headerlink" title="7.5.1 理解path环境变量"></a>7.5.1 理解path环境变量</h4><p><strong>什么是path环境变量？</strong></p><p>答：window操作系统执行命令时，所要搜寻的路径。</p><p><strong>为什么配置path？</strong></p><p>答：希望在命令行使用javac.exe等工具时，任意目录下都可以找到这个工具所在的目录。</p><p><strong>以JDK为例演示</strong></p><p>我们在<code>C:\Users\songhk</code>目录下使用javac命令，结果如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043254_watermark.png" alt="image-20220310223852720"></p><p>我们在JDK的安装目录的bin目录下使用javac命令，结果如下：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043093_watermark.png" alt="image-20220607113708022" style="zoom:75%;" /><p>我们不可能每次使用java.exe，javac.exe等工具的时候都进入到JDK的安装目录下，太麻烦了。这时就需要配置path环境变量。</p><h4 id="2-5-2-JDK8配置方案1：只配置path"><a href="#2-5-2-JDK8配置方案1：只配置path" class="headerlink" title="2.5.2 JDK8配置方案1：只配置path"></a>2.5.2 JDK8配置方案1：只配置path</h4><ul><li>步骤：</li></ul><p>（1）打开桌面上的计算机，进入后在左侧找到<code>此电脑</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043295_watermark.png" alt="image-20220310224844837"></p><p>（2）选择<code>高级系统设置</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043918_watermark.png" alt="image-20220310224912273"></p><p>（3）在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043018_watermark.png" alt="image-20220310224952745"></p><p>（4）在<code>系统变量</code>中，选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ,如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043974_watermark.png" alt="image-20220310225023208"></p><p>（5）点击<code>新建</code>，填入<code>D:\develop_tools\jdk\jdk1.8.0_271\bin</code>  ，并将此值<code>上移</code>到变量列表的首位。如图所示：</p><ul><li>编辑模式1：</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043297_watermark.png" alt="image-20220607114102135" style="zoom:80%;" /><ul><li>编辑模式2：（注意，结尾需要有英文模式下的;）</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043775_watermark.png" alt="image-20220929104547925"></p><p>（6）环境变量配置完成，<strong>重新开启</strong>DOS命令行，在任意目录下输入<code>javac</code> 或<code>java</code>命令或<code>java -version</code>，运行成功。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043034_watermark.png" alt="image-20220607114432286" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043332_watermark.png" alt="image-20220607114517652" style="zoom:90%;" /><h4 id="2-5-3-JDK8配置方案2：配置JAVA-HOME-path（推荐）"><a href="#2-5-3-JDK8配置方案2：配置JAVA-HOME-path（推荐）" class="headerlink" title="2.5.3 JDK8配置方案2：配置JAVA_HOME+path（推荐）"></a>2.5.3 JDK8配置方案2：配置JAVA_HOME+path（推荐）</h4><ul><li>步骤：</li></ul><p>（1）打开桌面上的计算机，进入后在左侧找到<code>计算机</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043295_watermark.png" alt="image-20220310224844837"></p><p>（2）选择<code>高级系统设置</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043918_watermark.png" alt="image-20220310224912273"></p><p>（3）在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043018_watermark.png" alt="image-20220310224952745"></p><p>（4）在<code>系统变量</code>中，单击<code>新建</code> ，创建新的环境变量，如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043318_watermark.png" alt="image-20220310225245208" style="zoom:90%;" /><p>（5）变量名输入<code>JAVA_HOME</code>，变量值输入 <code>D:\develop_tools\jdk\jdk1.8.0_271</code> ，单击<code>确定</code>，如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043901_watermark.png" alt="image-20220607114800372" style="zoom:80%;" /><p>（6）选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043974_watermark.png" alt="image-20220310225023208"></p><p>（7）在变量值的最前面，键入<code>%JAVA_HOME%\bin</code>。如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043283_watermark.png" alt="image-20220607114953758" style="zoom:80%;" /><blockquote><p>注意：强烈建议将%JAVA_HOME%\bin声明在path环境变量中所有变量的最前面！</p></blockquote><p>（8）环境变量配置完成，<strong>重启</strong>DOS命令行，在任意目录下输入<code>javac</code> 或<code>java</code>命令或<code>java -version</code>，运行成功。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043034_watermark.png" alt="image-20220607114432286" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043332_watermark.png" alt="image-20220607114517652" style="zoom:90%;" /><blockquote><p>我想说：</p><p>有的书籍、论坛、视频上还提到配置classpath，用于指名class文件识别的路径。其实是没必要的，反而建议大家如果配置了classpath环境变量，要删除。对于初学者，反而不友好。</p></blockquote><p><strong>小结如下：</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043619_watermark.png" alt="image-20220607115255562"></p><h4 id="2-5-4-JDK17配置方案：自动配置"><a href="#2-5-4-JDK17配置方案：自动配置" class="headerlink" title="2.5.4 JDK17配置方案：自动配置"></a>2.5.4 JDK17配置方案：自动配置</h4><p>不管大家有没有提前安装JDK8或其它版本JDK，在我们安装完JDK17之后，理应按JDK8的方式配置path环境变量。但是，我们发现在安装完JDK17以后，配置环境变量之前，执行CMD指令：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043768_watermark.png" alt="image-20220607115700870" style="zoom:80%;" /><p>竟然成功了！而且是17.0.2版本。因为JDK17在安装之后，自动进行了环境变量的配置。如下：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043747_watermark.png" alt="image-20220607115840388" style="zoom:80%;" /><p>这里建议，将JDK17安装的路径，设置为JAVA_HOME，并将<code>%JAVA_HOME%\bin</code>上移到首位。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043937_watermark.png" alt="image-20221110142710972" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043712_watermark.png" alt="image-20221110142734279" style="zoom:80%;" /><blockquote><p>思考：如果你仍然希望在JDK8下开发Java程序？如何做呢？</p></blockquote><h2 id="3-开发体验：HelloWorld（掌握）"><a href="#3-开发体验：HelloWorld（掌握）" class="headerlink" title="3. 开发体验：HelloWorld（掌握）"></a>3. 开发体验：HelloWorld（掌握）</h2><p>JDK安装完毕，我们就可以开发第一个Java程序了，习惯性的称为：HelloWorld。</p><h3 id="3-1-开发步骤"><a href="#3-1-开发步骤" class="headerlink" title="3.1 开发步骤"></a>3.1 开发步骤</h3><p>Java程序开发三步骤：<strong>编写</strong>、<strong>编译</strong>、<strong>运行</strong>。</p><ul><li>将 Java 代码<strong>编写</strong>到扩展名为 .java 的源文件中</li><li>通过 javac.exe 命令对该 java 文件进行<strong>编译</strong>，生成一个或多个字节码文件</li><li>通过 java.exe 命令对生成的 class 文件进行<strong>运行</strong></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043432_watermark.png" alt="image-20220310230210728"></p><h3 id="3-2-编写"><a href="#3-2-编写" class="headerlink" title="3.2 编写"></a>3.2 编写</h3><p>（1）在<code>D:\JavaSE\chapter01</code> 目录下新建文本文件，完整的文件名修改为<code>HelloWorld.java</code>，其中文件名为<code>HelloWorld</code>，后缀名必须为<code>.java</code>。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043146_watermark.png" alt="image-20220801010222222" style="zoom:90%;" /><p>（2）用记事本或editplus等文本编辑器打开（虽然记事本也可以，但是没有关键字颜色标识，不利于初学者学习）</p><p>（3）在文件中输入如下代码，并且保存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloChina</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;HelloWorld!!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>友情提示1：每个字母和符号必须与示例代码一模一样，包括大小写在内。</strong></p></li><li><p>友情提示2：</p></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043876_watermark.png" alt="image-20220310230618659" style="zoom:67%;" /><p>或</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043442_watermark.png" alt="image-20220521173215013" style="zoom:90%;" /><p>第一个<code>HelloWord</code> 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的<code>Java源文件</code> 编译成JVM可以看懂的<code>字节码文件</code> ，也就是<code>.class</code>文件。</p><h3 id="3-3-编译"><a href="#3-3-编译" class="headerlink" title="3.3 编译"></a>3.3 编译</h3><p>在DOS命令行中，进入<code>D:\JavaSE\chapter01</code>目录，使用<code>javac</code> 命令进行编译。</p><p>使用文件资源管理器打开<code>D:\JavaSE\chapter01</code>目录，然后在地址栏输入cmd。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043806_watermark.png" alt="image-20220801010435144" style="zoom:80%;" /><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javac Java源文件名.后缀名java<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">javac </span>HelloWorld.<span class="hljs-keyword">java</span><br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043528_watermark.png" alt="image-20220801010840640" style="zoom:80%;" /><p>编译成功后，命令行没有任何提示。打开<code>D:\JavaSE\chapter01</code>目录，发现产生了一个新的文件 <code>HelloChina.class</code>，该文件就是编译后的文件，是Java的可运行文件，称为<strong>字节码文件</strong>，有了字节码文件，就可以运行程序了。 </p><h3 id="3-4-运行"><a href="#3-4-运行" class="headerlink" title="3.4 运行"></a>3.4 运行</h3><p>在DOS命令行中，在字节码文件目录下，使用<code>java</code> 命令进行运行。</p><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java 主类名字<br></code></pre></td></tr></table></figure><p>主类是指包含main方法的类，main方法是Java程序的入口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">java HelloChina</span><br></code></pre></td></tr></table></figure><blockquote><p>错误演示：</p><p>java HelloChina.class</p></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043382_watermark.png" alt="image-20220801011104381" style="zoom:80%;" /><h2 id="4-Java开发工具"><a href="#4-Java开发工具" class="headerlink" title="4. Java开发工具"></a>4. Java开发工具</h2><h3 id="4-1-都有哪些开发Java的工具"><a href="#4-1-都有哪些开发Java的工具" class="headerlink" title="4.1 都有哪些开发Java的工具"></a>4.1 都有哪些开发Java的工具</h3><ul><li>级别一：文本开发工具</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043732_watermark.png" alt="image-20220513185907022" style="zoom:50%;" /><ul><li>级别二：集成开发环境（Integrated Development Environment，IDE）</li></ul><blockquote><p>把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。</p></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044877_watermark.png" alt="image-20220513190655773" style="zoom:50%;" /><h3 id="4-2-如何选择"><a href="#4-2-如何选择" class="headerlink" title="4.2 如何选择"></a>4.2 如何选择</h3><p>前期我们先使用文本开发工具，培养<code>代码感</code>，利于公司笔、面试。</p><p>后期我们使用IDE，提供<code>更强大的功能支持</code>。</p><h2 id="5-HelloWorld案例常见错误"><a href="#5-HelloWorld案例常见错误" class="headerlink" title="5. HelloWorld案例常见错误"></a>5. HelloWorld案例常见错误</h2><h3 id="5-1-拼写问题"><a href="#5-1-拼写问题" class="headerlink" title="5.1 拼写问题"></a>5.1 拼写问题</h3><ul><li><pre><code class="hljs">单词拼写问题</code></pre><ul><li>正确：class         错误：Class</li><li>正确：String                    错误：string</li><li>正确：System                  错误：system</li><li>正确：main         错误：mian</li></ul></li><li><pre><code class="hljs">Java语言是一门严格区分大小写的语言</code></pre></li><li><pre><code class="hljs">标点符号使用问题</code></pre><ul><li>不能用中文符号，英文半角的标点符号（正确）</li><li>括号问题，成对出现</li></ul></li></ul><h3 id="5-2-编译、运行路径问题"><a href="#5-2-编译、运行路径问题" class="headerlink" title="5.2 编译、运行路径问题"></a>5.2 编译、运行路径问题</h3><p>举例1：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044877_watermark.png" alt="image-20220310231657692" style="zoom:80%;" /><ul><li>源文件名不存在或者写错</li><li>当前路径错误</li><li>后缀名隐藏问题</li></ul><p>举例2：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044153_watermark.png" alt="image-20220310231717893" style="zoom:80%;" /><ul><li>类文件名写错，尤其文件名与类名不一致时，要小心</li><li>类文件不在当前路径下，或者不在classpath指定路径下</li></ul><h3 id="5-3-语法问题"><a href="#5-3-语法问题" class="headerlink" title="5.3 语法问题"></a>5.3 语法问题</h3><p>举例1：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044244_watermark.png" alt="image-20220310231746581" style="zoom:90%;" /><p>声明为public的类应与文件名一致，否知编译失败。</p><p>举例2：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044048_watermark.png" alt="image-20220310231815405" style="zoom:80%;" /><p>编译失败，注意错误出现的行数，再到源代码中指定位置改错</p><h3 id="5-4-字符编码问题"><a href="#5-4-字符编码问题" class="headerlink" title="5.4 字符编码问题"></a>5.4 字符编码问题</h3><p>当cmd命令行窗口的字符编码与.java源文件的字符编码不一致，如何解决？</p><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044745_watermark.png" alt="1557881223916"></p><p>解决方案一：</p><ul><li>在Notepad++等编辑器中，修改源文件的字符编码：</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044898_watermark.png" alt="1557881271819" style="zoom:80%;" /><ul><li>在EditPlus中可以将Java源文件另存为ANSI编码方式（中文操作系统下即为GBK字符集）</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044327_watermark.png" alt="1658810752424" style="zoom:80%;" /><p>解决方案二：</p><pre><code class="hljs">在使用javac命令式，可以指定源文件的字符编码</code></pre><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">javac -encoding utf-<span class="hljs-number">8</span> Review01.java<br></code></pre></td></tr></table></figure><h3 id="5-5-建议"><a href="#5-5-建议" class="headerlink" title="5.5 建议"></a>5.5 建议</h3><ul><li><p>注意缩进!</p><ul><li><p>一定要有缩进。缩进就像人得体的衣着一样！</p></li><li><p>只要遇到{}就缩进，缩进的快捷键tab键。</p></li></ul></li><li><p>必要的空格</p><ul><li>变量类型、变量、赋值符号、变量值之间填充相应空格，更美观。比如： int num &#x3D; 10;</li></ul></li></ul><h2 id="6-HelloWorld小结"><a href="#6-HelloWorld小结" class="headerlink" title="6. HelloWorld小结"></a>6. HelloWorld小结</h2><h3 id="6-1-Java程序的结构与格式"><a href="#6-1-Java程序的结构与格式" class="headerlink" title="6.1 Java程序的结构与格式"></a>6.1 Java程序的结构与格式</h3><p>结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">类&#123;<br>    方法&#123;<br>        语句;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>格式：</p><p>（1）每一级缩进一个Tab键</p><p>（2）{}的左半部分在行尾，右半部分单独一行，与和它成对的”{“的行首对齐</p><h3 id="6-2-Java程序的入口"><a href="#6-2-Java程序的入口" class="headerlink" title="6.2 Java程序的入口"></a>6.2 Java程序的入口</h3><p>Java程序的入口是main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-两种常见的输出语句"><a href="#6-3-两种常见的输出语句" class="headerlink" title="6.3 两种常见的输出语句"></a>6.3 两种常见的输出语句</h3><ul><li><p><strong>换行输出语句</strong>：输出内容，完毕后进行换行，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(输出内容);<br></code></pre></td></tr></table></figure></li><li><p><strong>直接输出语句</strong>：输出内容，完毕后不做任何处理，格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.print(输出内容);<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>注意事项：</p><p>​换行输出语句，括号内可以什么都不写，只做换行处理</p><p>​直接输出语句，括号内什么都不写的话，编译报错</p></blockquote><h3 id="6-4-源文件名与类名"><a href="#6-4-源文件名与类名" class="headerlink" title="6.4 源文件名与类名"></a>6.4 源文件名与类名</h3><p>（1）源文件名是否必须与类名一致？public呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">如果这个类不是<span class="hljs-keyword">public</span>，那么源文件名可以和类名不一致。但是不便于代码维护。<br><br>如果这个类是<span class="hljs-keyword">public</span>，那么要求源文件名必须与类名一致。否则编译报错。<br><br>我们建议大家，不管是否是<span class="hljs-keyword">public</span>，都与源文件名保持一致，而且一个源文件尽量只写一个类，目的是为了好维护。<br></code></pre></td></tr></table></figure><p>（2）一个源文件中是否可以有多个类？public呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">一个源文件中可以有多个类，编译后会生成多个.class字节码文件。<br><br>但是一个源文件只能有一个<span class="hljs-keyword">public</span>的类。<br></code></pre></td></tr></table></figure><h2 id="7-注释-comment"><a href="#7-注释-comment" class="headerlink" title="7. 注释(comment)"></a>7. 注释(comment)</h2><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044387_watermark.png" alt="image-20220610113151774" style="zoom: 67%;" /><ul><li><p>什么是注释？</p><ul><li>源文件中用于解释、说明程序的文字就是注释。</li></ul></li><li><p>注释是一个程序员必须要具有的良好编程习惯。实际开发中，程序员可以先将自己的<code>思想</code>通过注释整理出来，再用<code>代码</code>去体现。</p><blockquote><p>程序员最讨厌两件事：</p><p>一件是自己写代码被要求加注释</p><p>另一件是接手别人代码，发现没有注释</p></blockquote></li><li><p>不加注释的危害</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044750_watermark.gif"></p></li><li><p>Java中的注释类型：</p><ul><li><p>单行注释</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//注释文字</span><br></code></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">注释文字1 </span><br><span class="hljs-comment">注释文字2</span><br><span class="hljs-comment">注释文字3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p>文档注释 (Java特有)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  <span class="hljs-doctag">@author</span>  指定java程序的作者</span><br><span class="hljs-comment">  <span class="hljs-doctag">@version</span>  指定源文件的版本</span><br><span class="hljs-comment">*/</span> <br></code></pre></td></tr></table></figure></li></ul></li><li><p>注释的作用</p><ul><li>它提升了程序的可阅读性。（不加注释的危害性，见图。）</li><li>调试程序的重要方法。</li></ul></li><li><p><strong>具体使用1：单行注释、多行注释</strong></p><ul><li><p>对于单行和多行注释，被注释的文字，不会不会出现在字节码文件中，进而不会被JVM（java虚拟机）解释执行。</p></li><li><p>多行注释里面不允许有多行注释嵌套。</p></li><li><p>一个段子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">A：嘿 <span class="hljs-comment">//是什么意思啊？</span><br>B：嘿.<br>A：呃 我问你<span class="hljs-comment">//是什么意思？</span><br>B：问吧.<br>A：我刚才不是问了么？<br>B：啊？<br>A：你再看看记录...<br>B：看完了.<br>A：......所以<span class="hljs-comment">//是啥？</span><br>B：所以什么？<br>A：你存心耍我呢吧？<br>B：没有啊 你想问什么？<br>……<br>不断循环之后，A一气之下和B绝交，自己苦学程序。<br>N年之后，A终于修成正果，回想起B，又把聊天记录翻出来看，这时，他突然发现B没有耍他……<br>而他自己也不知道当年他问B的究竟是什么问题……<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>具体使用2：文档注释（Java特有）</strong></p><ul><li><p>文档注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。</p></li><li><p>操作方式。比如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">javadoc -d mydoc -author -<span class="hljs-built_in">version</span> HelloWorld.java<br></code></pre></td></tr></table></figure></li></ul></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044205_watermark.png" alt="image-20220310232527578" style="zoom:67%;" /><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//单行注释</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">文档注释演示。这是我的第一个Java程序！^_^</span><br><span class="hljs-comment"><span class="hljs-doctag">@author</span> songhk</span><br><span class="hljs-comment"><span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">Java程序的入口</span><br><span class="hljs-comment"><span class="hljs-doctag">@param</span> args main方法的命令参数</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-Java-API文档"><a href="#8-Java-API文档" class="headerlink" title="8. Java API文档"></a>8. Java API文档</h2><ul><li>API （Application Programming Interface，应用程序编程接口）是 Java 提供的基本编程接口。</li><li>Java语言提供了大量的基础类，因此 Oracle 也为这些基础类提供了相应的说明文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法。大多数Java书籍中的类的介绍都要参照它来完成，它是编程者经常查阅的资料。</li><li>Java API文档，即为JDK使用说明书、帮助文档。类似于：</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211111371_watermark.jpg" alt="新华字典" style="zoom:28%;" /><ul><li><p>下载API文档：</p><ul><li><p>在线看：<a href="https://docs.oracle.com/en/java/javase/17/docs/api/index.html">https://docs.oracle.com/en/java/javase/17/docs/api/index.html</a></p></li><li><p>离线下载：<a href="https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html">https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html</a></p></li></ul></li></ul><h2 id="9-Java核心机制：JVM"><a href="#9-Java核心机制：JVM" class="headerlink" title="9. Java核心机制：JVM"></a>9. Java核心机制：JVM</h2><h3 id="9-1-Java语言的优缺点"><a href="#9-1-Java语言的优缺点" class="headerlink" title="9.1 Java语言的优缺点"></a>9.1 Java语言的优缺点</h3><p>Java确实是从C语言和C++语言继承了许多成份，甚至可以将Java看成是类C语言发展和衍生的产物。“青出于蓝，而胜于蓝”。</p><h4 id="9-1-1-优点"><a href="#9-1-1-优点" class="headerlink" title="9.1.1 优点"></a>9.1.1 优点</h4><ul><li><strong>跨平台性：</strong>这是Java的核心优势。Java在最初设计时就很注重移植和跨平台性。比如：Java的int永远都是32位。不像C++可能是16，32，可能是根据编译器厂商规定的变化。</li><li>通过Java语言编写的应用程序在不同的系统平台上都可以运行。“<code>Write once , Run Anywhere</code>”。</li><li>原理：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (<code>J</code>VM ，Java <code>V</code>irtual <code>M</code>achine) 即可。由JVM来负责Java程序在该系统中的运行。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/JVM%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%80%A7-1666858570703_watermark.jpg" alt="JVM的跨平台性" style="zoom:70%;" /><ul><li><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044493_watermark.png" alt="image-20211217111217831"></p></li><li><p><strong>面向对象性：</strong></p><p>面向对象是一种程序设计技术，非常<code>适合大型软件的设计和开发</code>。面向对象编程支持封装、继承、多态等特性，让程序更好达到<code>高内聚</code>，<code>低耦合</code>的标准。</p></li><li><p><strong>健壮性：</strong>吸收了C&#x2F;C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制。</p></li><li><p><strong>安全性高：</strong></p><p>Java适合于网络&#x2F;分布式环境，需要提供一个安全机制以防恶意代码的攻击。如：<code>安全防范机制</code>（ClassLoader类加载器），可以分配不同的命名空间以防替代本地的同名类、字节代码检查。</p></li><li><p><strong>简单性：</strong></p><p>Java就是C++语法的<code>简化版</code>，我们也可以将Java称之为“<code>C++--</code>”。比如：头文件，指针运算，结构，联合，操作符重载，虚基类等。</p></li><li><p><strong>高性能：</strong></p><ul><li><p>Java最初发展阶段，总是被人诟病“<code>性能低</code>”；客观上，高级语言运行效率总是低于低级语言的，这个无法避免。Java语言本身发展中通过虚拟机的优化提升了<code>几十倍运行效率</code>。比如，通过JIT(JUST IN TIME)即时编译技术提高运行效率。</p></li><li><p><code>Java低性能的短腿，已经被完全解决了</code>。业界发展上，我们也看到很多C++应用转到Java开发，很多C++程序员转型为Java程序员。</p></li></ul></li></ul><h4 id="9-1-2-缺点"><a href="#9-1-2-缺点" class="headerlink" title="9.1.2 缺点"></a>9.1.2 缺点</h4><ul><li><code>语法过于复杂、严谨</code>，对程序员的约束比较多，与python、php等相比入门较难。但是一旦学会了，就业岗位需求量大，而且<code>薪资待遇节节攀升</code>。</li><li>一般适用于大型网站开发，<code>整个架构会比较重</code>，对于初创公司开发和维护人员的成本比较高（即薪资高），选择用Java语言开发网站或应用系统的需要一定的经济实力。</li><li><code>并非适用于所有领域</code>。比如，Objective C、Swift在iOS设备上就有着无可取代的地位。浏览器中的处理几乎完全由JavaScript掌控。Windows程序通常都用C++或C#编写。Java在服务器端编程和跨平台客户端应用领域则很有优势。</li></ul><h3 id="9-2-JVM功能说明"><a href="#9-2-JVM功能说明" class="headerlink" title="9.2 JVM功能说明"></a>9.2 JVM功能说明</h3><p><strong>JVM</strong>（<code>J</code>ava <code>V</code>irtual <code>M</code>achine ，Java虚拟机）：是一个虚拟的计算机，是Java程序的运行环境。JVM具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044323_watermark.png" alt="image-20220310165805739" style="zoom:67%;" /><h4 id="9-2-1-功能1：实现Java程序的跨平台性"><a href="#9-2-1-功能1：实现Java程序的跨平台性" class="headerlink" title="9.2.1 功能1：实现Java程序的跨平台性"></a>9.2.1 功能1：实现Java程序的跨平台性</h4><p>我们编写的Java代码，都运行在<strong>JVM</strong> 之上。正是因为有了JVM，才使得Java程序具备了跨平台性。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044107_watermark.png" alt="image-20220513191856727" style="zoom:50%;" /><p>使用JVM前后对比：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044094_watermark.png" alt="image-20220514151716805"></p><h4 id="9-2-2-功能2：自动内存管理-内存分配、内存回收"><a href="#9-2-2-功能2：自动内存管理-内存分配、内存回收" class="headerlink" title="9.2.2 功能2：自动内存管理(内存分配、内存回收)"></a>9.2.2 功能2：自动内存管理(内存分配、内存回收)</h4><ul><li>Java程序在运行过程中，涉及到运算的<code>数据的分配</code>、<code>存储</code>等都由JVM来完成</li><li>Java消除了程序员回收无用内存空间的职责。提供了一种系统级线程跟踪存储空间的分配情况，在内存空间达到相应阈值时，检查并释放可被释放的存储器空间。</li><li>GC的自动回收，提高了内存空间的利用效率，也提高了编程人员的效率，很大程度上<code>减少了</code>因为没有释放空间而导致的<code>内存泄漏</code>。</li></ul><blockquote><p>面试题：</p><p>Java程序还会出现内存溢出和内存泄漏问题吗？  Yes!</p></blockquote><h2 id="10-章节案例"><a href="#10-章节案例" class="headerlink" title="10. 章节案例"></a>10. 章节案例</h2><p><strong>案例1：个人信息输出</strong></p><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044000_watermark.png" alt="image-20220315221336038"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;姓名：康师傅&quot;</span>);<br>System.out.println();<span class="hljs-comment">//换行操作</span><br>System.out.println(<span class="hljs-string">&quot;性别：男&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;家庭住址：北京程序员聚集地：回龙观&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：输出：心形</strong> </p><p>结合\n(换行)，\t(制表符)，空格等在控制台打印出如下图所示的效果。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044165_watermark.png" alt="image-20220309004152219"> </p><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式一：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><span class="hljs-comment">//System.out.print(&quot;\t&quot;);</span><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;I love java&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;    &quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise3</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;I love Java&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java语言概述</title>
    <link href="/2024/02/02/7.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/"/>
    <url>/2024/02/02/7.%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-关键字：this"><a href="#1-关键字：this" class="headerlink" title="1. 关键字：this"></a>1. 关键字：this</h2><h3 id="1-1-this是什么？"><a href="#1-1-this是什么？" class="headerlink" title="1.1 this是什么？"></a>1.1 this是什么？</h3><ul><li><p>在Java中，this关键字不算难理解，它的作用和其词义很接近。</p><ul><li>它在方法（准确的说是实例方法或非static的方法）内部使用，表示调用该方法的对象</li><li>它在构造器内部使用，表示该构造器正在初始化的对象。</li></ul></li><li><p>this可以调用的结构：成员变量、方法和构造器</p></li></ul><h3 id="1-2-什么时候使用this"><a href="#1-2-什么时候使用this" class="headerlink" title="1.2 什么时候使用this"></a>1.2 什么时候使用this</h3><h4 id="1-2-1-实例方法或构造器中使用当前对象的成员"><a href="#1-2-1-实例方法或构造器中使用当前对象的成员" class="headerlink" title="1.2.1 实例方法或构造器中使用当前对象的成员"></a>1.2.1 实例方法或构造器中使用当前对象的成员</h4><p>在实例方法或构造器中，如果使用当前类的成员变量或成员方法可以在其前面添加this，增强程序的可读性。不过，通常我们都习惯省略this。</p><p>但是，当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来表明该变量是类的成员变量。即：我们可以用this来区分<code>成员变量</code>和<code>局部变量</code>。比如：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613557_watermark.png" alt="image-20220503102947013" style="zoom:67%;" /><p>另外，使用this访问属性和方法时，如果在本类中未找到，会从父类中查找。这个在继承中会讲到。</p><p>举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<span class="hljs-comment">// 定义Person类</span><br><span class="hljs-keyword">private</span> String name ;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age ;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name ;   <br><span class="hljs-built_in">this</span>.age = age ;  <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + name) ;<br><span class="hljs-built_in">this</span>.speak();<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span>&#123;<br>System.out.println(“年龄：” + <span class="hljs-built_in">this</span>.age);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Rectangle</span> &#123;<br>    <span class="hljs-type">int</span> length;<br>    <span class="hljs-type">int</span> width;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">area</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.length * <span class="hljs-built_in">this</span>.width;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">perimeter</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">2</span> * (<span class="hljs-built_in">this</span>.length + <span class="hljs-built_in">this</span>.width);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">char</span> sign)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-built_in">this</span>.width; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-built_in">this</span>.length; j++) &#123;<br>                System.out.print(sign);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;长：&quot;</span> + <span class="hljs-built_in">this</span>.length + <span class="hljs-string">&quot;，宽：&quot;</span> + <span class="hljs-built_in">this</span>.width +<span class="hljs-string">&quot;，面积：&quot;</span> + <span class="hljs-built_in">this</span>.area() +<span class="hljs-string">&quot;，周长：&quot;</span> + <span class="hljs-built_in">this</span>.perimeter();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestRectangle</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Rectangle</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>();<br>        <span class="hljs-type">Rectangle</span> <span class="hljs-variable">r2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rectangle</span>();<br><br>        System.out.println(<span class="hljs-string">&quot;r1对象：&quot;</span> + r1.getInfo());<br>        System.out.println(<span class="hljs-string">&quot;r2对象：&quot;</span> + r2.getInfo());<br><br>        r1.length = <span class="hljs-number">10</span>;<br>        r1.width = <span class="hljs-number">2</span>;<br>        System.out.println(<span class="hljs-string">&quot;r1对象：&quot;</span> + r1.getInfo());<br>        System.out.println(<span class="hljs-string">&quot;r2对象：&quot;</span> + r2.getInfo());<br><br>        r1.print(<span class="hljs-string">&#x27;#&#x27;</span>);<br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>        r1.print(<span class="hljs-string">&#x27;&amp;&#x27;</span>);<br><br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>        r2.print(<span class="hljs-string">&#x27;#&#x27;</span>);<br>        System.out.println(<span class="hljs-string">&quot;---------------------&quot;</span>);<br>        r2.print(<span class="hljs-string">&#x27;%&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-2-2-同一个类中构造器互相调用"><a href="#1-2-2-同一个类中构造器互相调用" class="headerlink" title="1.2.2 同一个类中构造器互相调用"></a>1.2.2 同一个类中构造器互相调用</h4><p>this可以作为一个类中构造器相互调用的特殊格式。</p><ul><li>this()：调用本类的无参构造器</li><li>this(实参列表)：调用本类的有参构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">// 无参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//        this(&quot;&quot;,18);//调用本类有参构造器</span><br>    &#125;<br><br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>();<span class="hljs-comment">//调用本类无参构造器</span><br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-comment">// 有参构造</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>(name);<span class="hljs-comment">//调用本类中有一个String参数的构造器</span><br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;姓名：&quot;</span> + name +<span class="hljs-string">&quot;，年龄：&quot;</span> + age;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>不能出现递归调用。比如，调用自身构造器。<ul><li>推论：如果一个类中声明了n个构造器，则最多有 n - 1个构造器中使用了”this(形参列表)”</li></ul></li><li>this()和this(实参列表)只能声明在构造器首行。<ul><li>推论：在类的一个构造器中，最多只能声明一个”this(参数列表)”</li></ul></li></ul><h3 id="1-3-练习"><a href="#1-3-练习" class="headerlink" title="1.3 练习"></a>1.3 练习</h3><p><strong>练习1：</strong>添加必要的构造器，综合应用构造器的重载，this关键字。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613536_watermark.png" alt="image-20220808191154534"></p><p><strong>练习2：</strong></p><p>（1）按照如下的UML类图，创建相应的类，提供必要的结构：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613847_watermark.png" alt="image-20220323211412409" style="zoom:50%;" /><p>在提款方法withdraw()中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示。deposit()方法表示存款。</p><p>（2）按照如下的UML类图，创建相应的类，提供必要的结构</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613178_watermark.png" alt="image-20220323211454372" style="zoom:50%;" /><p>（3）按照如下的UML类图，创建相应的类，提供必要的结构</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613620_watermark.png" alt="image-20220323211521808" style="zoom:50%;" /><ul><li><p>addCustomer 方法必须依照参数（姓，名）构造一个新的 Customer对象，然后把它放到 customer 数组中。还必须把 numberOfCustomer 属性的值加 1。</p></li><li><p>getNumOfCustomers 方法返回 numberofCustomers 属性值。</p></li><li><p>getCustomer方法返回与给出的index参数相关的客户。</p></li></ul><p>（4）创建BankTest类，进行测试。</p><p>内存解析图：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613967_watermark.png" alt="image-20220323211653907" style="zoom:80%;" /><h2 id="2-面向对象特征二：继承-Inheritance"><a href="#2-面向对象特征二：继承-Inheritance" class="headerlink" title="2. 面向对象特征二：继承(Inheritance)"></a>2. 面向对象特征二：继承(Inheritance)</h2><h3 id="2-1-继承的概述"><a href="#2-1-继承的概述" class="headerlink" title="2.1 继承的概述"></a>2.1 继承的概述</h3><h4 id="2-1-1-生活中的继承"><a href="#2-1-1-生活中的继承" class="headerlink" title="2.1.1 生活中的继承"></a>2.1.1 生活中的继承</h4><ul><li>财产继承：</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613826_watermark.png" alt="image-20220323215921441" style="zoom: 50%;" /><ul><li>绿化：前人栽树，后人乘凉</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613250_watermark.png" alt="image-20220520171727778" style="zoom: 50%;" /><p>“绿水青山，就是金山银山”</p><ul><li><p>样貌：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613862_watermark.png" alt="image-20220323220246746" style="zoom: 50%;" /></li><li><p>继承之外，是不是还可以”<code>进化</code>“：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613945_watermark.png" alt="image-20220323220537644" style="zoom: 50%;" /></li></ul><blockquote><p>继承有延续（下一代延续上一代的基因、财富）、扩展（下一代和上一代又有所不同）的意思。</p></blockquote><h4 id="2-1-2-Java中的继承"><a href="#2-1-2-Java中的继承" class="headerlink" title="2.1.2 Java中的继承"></a>2.1.2 Java中的继承</h4><p><strong>角度一：从上而下</strong></p><p>为描述和处理<strong>个人</strong>信息，定义类Person：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613656_watermark.png" alt="image-20220323220923386" style="zoom:67%;" /><p>为描述和处理<strong>学生</strong>信息，定义类Student：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613746_watermark.png" alt="image-20220323221001495" style="zoom:67%;" /><p>通过继承，简化Student类的定义：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613243_watermark.png" alt="image-20220323221050791" style="zoom:67%;" /><blockquote><p>说明：Student类继承了父类Person的所有属性和方法，并增加了一个属性school。Person中的属性和方法，Student都可以使用。</p></blockquote><p><strong>角度二：从下而上</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613710_watermark.jpeg"></p><p>多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类中无需再定义这些属性和行为，只需要和抽取出来的类构成<code>继承关系</code>。如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613089_watermark.jpeg" style="zoom: 67%;" /><p>再举例：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613378_watermark.png" alt="image-20220323221436571" style="zoom:67%;" /><h4 id="2-1-3-继承的好处"><a href="#2-1-3-继承的好处" class="headerlink" title="2.1.3 继承的好处"></a>2.1.3 继承的好处</h4><ul><li><p>继承的出现减少了代码冗余，提高了代码的复用性。</p></li><li><p>继承的出现，更有利于功能的扩展。</p></li><li><p>继承的出现让类与类之间产生了<code>is-a</code>的关系，为多态的使用提供了前提。</p><ul><li>继承描述事物之间的所属关系，这种关系是：<code>is-a</code> 的关系。可见，父类更通用、更一般，子类更具体。</li></ul></li></ul><blockquote><p>注意：不要仅为了获取其他类中某个功能而去继承！</p></blockquote><h3 id="2-2-继承的语法"><a href="#2-2-继承的语法" class="headerlink" title="2.2 继承的语法"></a>2.2 继承的语法</h3><h4 id="2-2-1-继承中的语法格式"><a href="#2-2-1-继承中的语法格式" class="headerlink" title="2.2.1 继承中的语法格式"></a>2.2.1 继承中的语法格式</h4><p>通过 <code>extends</code> 关键字，可以声明一个类B继承另外一个类A，定义格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">[修饰符] class 类A &#123;<br>...<br>&#125;<br><br>[修饰符] class 类B extends 类A &#123;<br>...<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-2-2-继承中的基本概念"><a href="#2-2-2-继承中的基本概念" class="headerlink" title="2.2.2 继承中的基本概念"></a>2.2.2 继承中的基本概念</h4><p>类B，称为子类、派生类(derived class)、SubClass</p><p>类A，称为父类、超类、基类(base class)、SuperClass</p><h3 id="2-3-代码举例"><a href="#2-3-代码举例" class="headerlink" title="2.3 代码举例"></a>2.3 代码举例</h3><p><strong>1、父类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.grammar;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 定义动物类Animal，做为父类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-comment">// 定义name属性</span><br>    String name;<br>    <span class="hljs-comment">// 定义age属性</span><br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-comment">// 定义动物的吃东西方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(age + <span class="hljs-string">&quot;岁的&quot;</span><br>                + name + <span class="hljs-string">&quot;在吃东西&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>2、子类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.grammar;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 定义猫类Cat 继承 动物类Animal</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-type">int</span> count;<span class="hljs-comment">//记录每只猫抓的老鼠数量</span><br><br>    <span class="hljs-comment">// 定义一个猫抓老鼠的方法catchMouse</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">catchMouse</span><span class="hljs-params">()</span> &#123;<br>        count++;<br>        System.out.println(<span class="hljs-string">&quot;抓老鼠，已经抓了&quot;</span><br>                + count + <span class="hljs-string">&quot;只老鼠&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestCat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建一个猫类对象</span><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        <span class="hljs-comment">// 为该猫类对象的name属性进行赋值</span><br>        cat.name = <span class="hljs-string">&quot;Tom&quot;</span>;<br>        <span class="hljs-comment">// 为该猫类对象的age属性进行赋值</span><br>        cat.age = <span class="hljs-number">2</span>;<br>        <span class="hljs-comment">// 调用该猫继承来的eat()方法</span><br>        cat.eat();<br>        <span class="hljs-comment">// 调用该猫的catchMouse()方法</span><br>        cat.catchMouse();<br>        cat.catchMouse();<br>        cat.catchMouse();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-继承性的细节说明"><a href="#2-4-继承性的细节说明" class="headerlink" title="2.4 继承性的细节说明"></a>2.4 继承性的细节说明</h3><p><strong>1、子类会继承父类所有的实例变量和实例方法</strong></p><p>从类的定义来看，类是一类具有相同特性的事物的抽象描述。父类是所有子类共同特征的抽象描述。而实例变量和实例方法就是事物的特征，那么父类中声明的实例变量和实例方法代表子类事物也有这个特征。</p><ul><li>当子类对象被创建时，在堆中给对象申请内存时，就要看子类和父类都声明了什么实例变量，这些实例变量都要分配内存。</li><li>当子类对象调用方法时，编译器会先在子类模板中看该类是否有这个方法，如果没找到，会看它的父类甚至父类的父类是否声明了这个方法，遵循<code>从下往上</code>找的顺序，找到了就停止，一直到根父类都没有找到，就会报编译错误。</li></ul><p>所以继承意味着子类的对象除了看子类的类模板还要看父类的类模板。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613859_watermark.png" alt="image-20211230090255997"></p><p><strong>2、子类不能直接访问父类中私有的(private)的成员变量和方法</strong></p><p>子类虽会继承父类私有(private)的成员变量，但子类不能对继承的私有成员变量直接进行访问，可通过继承的get&#x2F;set方法进行访问。如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613275_watermark.png" alt="image-20220323224757212"></p><p><strong>3、在Java 中，继承的关键字用的是“extends”，即子类不是父类的子集，而是对父类的“扩展”</strong></p><p>子类在继承父类以后，还可以定义自己特有的方法，这就可以看做是对父类功能上的扩展。</p><p><strong>4、Java支持多层继承(继承体系)</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613670_watermark.png" alt="image-20220323225441417" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;&#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：</p><ul><li><p>子类和父类是一种相对的概念</p></li><li><p>顶层父类是Object类。所有的类默认继承Object，作为父类。</p></li></ul></blockquote><p><strong>5、一个父类可以同时拥有多个子类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">D</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">E</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>6、Java只支持单继承，不支持多重继承</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231613854_watermark.png" alt="image-20220514162507692" style="zoom:67%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614650_watermark.png" alt="image-20220523201405061" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;&#125;<br><br><span class="hljs-comment">//一个类只能有一个父类，不可以有多个直接父类。</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">B</span>&#123;&#125; <span class="hljs-comment">//ok</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">C</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>,B...<span class="hljs-comment">//error</span><br></code></pre></td></tr></table></figure><h3 id="2-5-练习"><a href="#2-5-练习" class="headerlink" title="2.5 练习"></a>2.5 练习</h3><p><strong>练习1：</strong>定义一个学生类Student，它继承自Person类</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614591_watermark.png" alt="image-20220323231804928" style="zoom:67%;" /><p><strong>练习2：</strong></p><p>(1)定义一个ManKind类，包括</p><ul><li><p>成员变量int sex和int salary；</p></li><li><p>方法void manOrWoman()：根据sex的值显示“man”(sex&#x3D;&#x3D;1)或者“woman”(sex&#x3D;&#x3D;0)；</p></li><li><p>方法void employeed()：根据salary的值显示“no job”(salary&#x3D;&#x3D;0)或者“ job”(salary!&#x3D;0)。</p></li></ul><p>(2)定义类Kids继承ManKind，并包括</p><ul><li>成员变量int yearsOld；</li><li>方法printAge()打印yearsOld的值。</li></ul><p>(3)定义类KidsTest，在类的main方法中实例化Kids的对象someKid，用该对象访问其父类的成员变量及方法。</p><p><strong>练习3：</strong>根据下图实现类。在CylinderTest类中创建Cylinder类的对象，设置圆柱的底面半径和高，并输出圆柱的体积。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614154_watermark.png" alt="image-20220323231942361" style="zoom:67%;" /><h2 id="3-方法的重写（override-overwrite）"><a href="#3-方法的重写（override-overwrite）" class="headerlink" title="3. 方法的重写（override&#x2F;overwrite）"></a>3. 方法的重写（override&#x2F;overwrite）</h2><p>父类的所有方法子类都会继承，但是当某个方法被继承到子类之后，子类觉得父类原来的实现不适合于自己当前的类，该怎么办呢？子类可以对从父类中继承来的方法进行改造，我们称为方法的<code>重写 (override、overwrite)</code>。也称为方法的<code>重置</code>、<code>覆盖</code>。</p><p>在程序执行时，子类的方法将覆盖父类的方法。</p><h3 id="3-1-方法重写举例"><a href="#3-1-方法重写举例" class="headerlink" title="3.1 方法重写举例"></a>3.1 方法重写举例</h3><p>比如新的手机增加来电显示头像的功能，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;发短信&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打电话&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showNum</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;来电显示号码&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.method;<br><br><span class="hljs-comment">//SmartPhone：智能手机</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-comment">//重写父类的来电显示功能的方法</span><br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showNum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//来电显示姓名和图片功能</span><br>        System.out.println(<span class="hljs-string">&quot;显示来电姓名&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;显示头像&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//重写父类的通话功能的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;语音通话 或 视频通话&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestOverride</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">// 创建子类对象</span><br>        <span class="hljs-type">SmartPhone</span> <span class="hljs-variable">sp</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SmartPhone</span>();<br><br>        <span class="hljs-comment">// 调用父类继承而来的方法</span><br>        sp.call();<br><br>        <span class="hljs-comment">// 调用子类重写的方法</span><br>        sp.showNum();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>@Override使用说明：</p><p>写在方法上面，用来检测是不是满足重写方法的要求。这个注解就算不写，只要满足要求，也是正确的方法覆盖重写。建议保留，这样编译器可以帮助我们检查格式，另外也可以让阅读源代码的程序员清晰的知道这是一个重写的方法。</p></blockquote><h3 id="3-2-方法重写的要求"><a href="#3-2-方法重写的要求" class="headerlink" title="3.2 方法重写的要求"></a>3.2 方法重写的要求</h3><ol><li><p>子类重写的方法<code>必须</code>和父类被重写的方法具有相同的<code>方法名称</code>、<code>参数列表</code>。</p></li><li><p>子类重写的方法的返回值类型<code>不能大于</code>父类被重写的方法的返回值类型。（例如：Student &lt; Person）。</p></li></ol><blockquote><p>注意：如果返回值类型是基本数据类型和void，那么必须是相同</p></blockquote><ol start="3"><li>子类重写的方法使用的访问权限<code>不能小于</code>父类被重写的方法的访问权限。（public &gt; protected &gt; 缺省 &gt; private）</li></ol><blockquote><p>注意：① 父类私有方法不能重写   ② 跨包的父类缺省的方法也不能重写</p></blockquote><ol start="4"><li>子类方法抛出的异常不能大于父类被重写方法的异常</li></ol><p>此外，子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)，或者同时声明为static的（不是重写）。因为static方法是属于类的，子类无法覆盖父类的方法。</p><h3 id="3-3-小结：方法的重载与重写"><a href="#3-3-小结：方法的重载与重写" class="headerlink" title="3.3 小结：方法的重载与重写"></a>3.3 小结：方法的重载与重写</h3><p>方法的重载：方法名相同，形参列表不同。不看返回值类型。</p><p>方法的重写：见上面。</p><p>（1）同一个类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestOverload</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">double</span> a, <span class="hljs-type">double</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b,<span class="hljs-type">int</span> c)</span>&#123;<br>        <span class="hljs-keyword">return</span> max(max(a,b),c);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>（2）父子类中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestOverloadOverride</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        s.method(<span class="hljs-number">1</span>);<span class="hljs-comment">//只有一个形式的method方法</span><br><br>        <span class="hljs-type">Daughter</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Daughter</span>();<br>        d.method(<span class="hljs-number">1</span>);<br>        d.method(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<span class="hljs-comment">//有两个形式的method方法</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Father.method&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span>&#123;<span class="hljs-comment">//重写</span><br>        System.out.println(<span class="hljs-string">&quot;Son.method&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Daughter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">int</span> j)</span>&#123;<span class="hljs-comment">//重载</span><br>        System.out.println(<span class="hljs-string">&quot;Daughter.method&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-练习"><a href="#3-4-练习" class="headerlink" title="3.4 练习"></a>3.4 练习</h3><p><strong>练习1：</strong>如果现在父类的一个方法定义成private访问权限，在子类中将此方法声明为default访问权限，那么这样还叫重写吗？ (NO)</p><p><strong>练习2：</strong>修改继承内容的练习2中定义的类Kids，在Kids中重新定义employeed()方法，覆盖父类ManKind中定义的employeed()方法，输出“Kids should study and no job.”</p><h2 id="4-再谈封装性中的4种权限修饰"><a href="#4-再谈封装性中的4种权限修饰" class="headerlink" title="4. 再谈封装性中的4种权限修饰"></a>4. 再谈封装性中的4种权限修饰</h2><p>权限修饰符：public,protected,缺省,private</p><table><thead><tr><th>修饰符</th><th>本类</th><th>本包</th><th>其他包子类</th><th>其他包非子类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr><tr><td>缺省</td><td>√</td><td>√（本包子类非子类都可见）</td><td>×</td><td>×</td></tr><tr><td>protected</td><td>√</td><td>√（本包子类非子类都可见）</td><td>√（其他包仅限于子类中可见）</td><td>×</td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><p>外部类：public和缺省</p><p>成员变量、成员方法等：public,protected,缺省,private</p><p><strong>1、外部类要跨包使用必须是public，否则仅限于本包使用</strong></p><p>（1）外部类的权限修饰符如果缺省，本包使用没问题</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614841_watermark.png" alt="image-20211230093627763"></p><p>（2）外部类的权限修饰符如果缺省，跨包使用有问题</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614420_watermark.png" alt="image-20211230094236974"></p><p><strong>2、成员的权限修饰符问题</strong></p><p>（1）本包下使用：成员的权限修饰符可以是public、protected、缺省</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614141_watermark.png" alt="image-20211230095320646"></p><p>（2）跨包下使用：要求严格</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614581_watermark.png" alt="image-20211230095817784"></p><p>（3）跨包使用时，如果类的权限修饰符缺省，成员权限修饰符&gt;类的权限修饰符也没有意义</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614297_watermark.png" alt="image-20211230100219840"></p><h2 id="5-关键字：super"><a href="#5-关键字：super" class="headerlink" title="5. 关键字：super"></a>5. 关键字：super</h2><h3 id="5-1-super的理解"><a href="#5-1-super的理解" class="headerlink" title="5.1 super的理解"></a>5.1 super的理解</h3><p>在Java类中使用super来调用父类中的指定操作：</p><ul><li>super可用于访问父类中定义的属性</li><li>super可用于调用父类中定义的成员方法</li><li>super可用于在子类构造器中调用父类的构造器</li></ul><p>注意：</p><ul><li>尤其当子父类出现同名成员时，可以用super表明调用的是父类中的成员</li><li>super的追溯不仅限于直接父类</li><li>super和this的用法相像，this代表本类对象的引用，super代表父类的内存空间的标识</li></ul><h3 id="5-2-super的使用场景"><a href="#5-2-super的使用场景" class="headerlink" title="5.2 super的使用场景"></a>5.2 super的使用场景</h3><h4 id="5-2-1-子类中调用父类被重写的方法"><a href="#5-2-1-子类中调用父类被重写的方法" class="headerlink" title="5.2.1 子类中调用父类被重写的方法"></a>5.2.1 子类中调用父类被重写的方法</h4><ul><li>如果子类没有重写父类的方法，只要权限修饰符允许，在子类中完全可以直接调用父类的方法；</li><li>如果子类重写了父类的方法，在子类中需要通过<code>super.</code>才能调用父类被重写的方法，否则默认调用的子类重写的方法</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.inherited.method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;发短信&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;打电话&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showNum</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;来电显示号码&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//smartphone：智能手机</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartPhone</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-comment">//重写父类的来电显示功能的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showNum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//来电显示姓名和图片功能</span><br>        System.out.println(<span class="hljs-string">&quot;显示来电姓名&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;显示头像&quot;</span>);<br><br>        <span class="hljs-comment">//保留父类来电显示号码的功能</span><br>        <span class="hljs-built_in">super</span>.showNum();<span class="hljs-comment">//此处必须加super.，否则就是无限递归，那么就会栈内存溢出</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li><p><strong>方法前面没有super.和this.</strong></p><ul><li>先从子类找匹配方法，如果没有，再从直接父类找，再没有，继续往上追溯</li></ul></li><li><p><strong>方法前面有this.</strong></p><ul><li>先从子类找匹配方法，如果没有，再从直接父类找，再没有，继续往上追溯</li></ul></li><li><p><strong>方法前面有super.</strong></p><ul><li>从当前子类的直接父类找，如果没有，继续往上追溯</li></ul></li></ul><h4 id="5-2-2-子类中调用父类中同名的成员变量"><a href="#5-2-2-子类中调用父类中同名的成员变量" class="headerlink" title="5.2.2 子类中调用父类中同名的成员变量"></a>5.2.2 子类中调用父类中同名的成员变量</h4><ul><li>如果实例变量与局部变量重名，可以在实例变量前面加this.进行区别</li><li>如果子类实例变量和父类实例变量重名，并且父类的该实例变量在子类仍然可见，在子类中要访问父类声明的实例变量需要在父类实例变量前加super.，否则默认访问的是子类自己声明的实例变量</li><li>如果父子类实例变量没有重名，只要权限修饰符允许，在子类中完全可以直接访问父类中声明的实例变量，也可以用this.实例访问，也可以用super.实例变量访问</li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">11</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//子类与父类的属性同名，子类对象中就有两个a</span><br>System.out.println(<span class="hljs-string">&quot;子类的a：&quot;</span> + a);<span class="hljs-comment">//20  先找局部变量找，没有再从本类成员变量找</span><br>        System.out.println(<span class="hljs-string">&quot;子类的a：&quot;</span> + <span class="hljs-built_in">this</span>.a);<span class="hljs-comment">//20   先从本类成员变量找</span><br>        System.out.println(<span class="hljs-string">&quot;父类的a：&quot;</span> + <span class="hljs-built_in">super</span>.a);<span class="hljs-comment">//10    直接从父类成员变量找</span><br><br><span class="hljs-comment">//子类与父类的属性不同名，是同一个b</span><br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<span class="hljs-comment">//11  先找局部变量找，没有再从本类成员变量找，没有再从父类找</span><br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">this</span>.b);<span class="hljs-comment">//11   先从本类成员变量找，没有再从父类找</span><br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">super</span>.b);<span class="hljs-comment">//11  直接从父类局部变量找</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>&#123;<br><span class="hljs-comment">//子类与父类的属性同名，子类对象中就有两个成员变量a，此时方法中还有一个局部变量a</span><br>System.out.println(<span class="hljs-string">&quot;局部变量的a：&quot;</span> + a);<span class="hljs-comment">//30  先找局部变量</span><br>        System.out.println(<span class="hljs-string">&quot;子类的a：&quot;</span> + <span class="hljs-built_in">this</span>.a);<span class="hljs-comment">//20  先从本类成员变量找</span><br>        System.out.println(<span class="hljs-string">&quot;父类的a：&quot;</span> + <span class="hljs-built_in">super</span>.a);<span class="hljs-comment">//10  直接从父类成员变量找</span><br><br>        System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + b);<span class="hljs-comment">//13  先找局部变量</span><br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">this</span>.b);<span class="hljs-comment">//11  先从本类成员变量找</span><br>System.out.println(<span class="hljs-string">&quot;b = &quot;</span> + <span class="hljs-built_in">super</span>.b);<span class="hljs-comment">//11  直接从父类局部变量找</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Son</span> <span class="hljs-variable">son</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>son.test();<br>son.method(<span class="hljs-number">30</span>,<span class="hljs-number">13</span>);  <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>总结：起点不同（就近原则）</p><ul><li><p><strong>变量前面没有super.和this.</strong></p><ul><li>在构造器、代码块、方法中如果出现使用某个变量，先查看是否是当前块声明的<code>局部变量</code>，</li><li>如果不是局部变量，先从当前执行代码的<code>本类去找成员变量</code></li><li>如果从当前执行代码的本类中没有找到，会往上找<code>父类声明的成员变量</code>（权限修饰符允许在子类中访问的）</li></ul></li><li><p><strong>变量前面有this.</strong> </p><ul><li>通过this找成员变量时，先从当前执行代码的&#x3D;&#x3D;本类去找成员变量&#x3D;&#x3D;</li><li>如果从当前执行代码的本类中没有找到，会往上找&#x3D;&#x3D;父类声明的成员变量（&#x3D;&#x3D;权限修饰符允许在子类中访问的）</li></ul></li><li><p><strong>变量前面super.</strong> </p><ul><li>通过super找成员变量，直接从当前执行代码的直接父类去找成员变量（权限修饰符允许在子类中访问的）</li><li>如果直接父类没有，就去父类的父类中找（权限修饰符允许在子类中访问的）</li></ul></li></ul><p><strong><font color='red'>特别说明：应该避免子类声明和父类重名的成员变量</font></strong></p><p>在阿里的开发规范等文档中都做出明确说明：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614918_watermark.png" alt="image-20211230110411580"></p><h4 id="5-2-3-子类构造器中调用父类构造器"><a href="#5-2-3-子类构造器中调用父类构造器" class="headerlink" title="5.2.3 子类构造器中调用父类构造器"></a>5.2.3 子类构造器中调用父类构造器</h4><p>① 子类继承父类时，不会继承父类的构造器。只能通过“super(形参列表)”的方式调用父类指定的构造器。</p><p>② 规定：“super(形参列表)”，必须声明在构造器的首行。</p><p>③ 我们前面讲过，在构造器的首行可以使用”this(形参列表)”，调用本类中重载的构造器，<br>     结合②，结论：在构造器的首行，”this(形参列表)” 和 “super(形参列表)”只能二选一。</p><p>④ 如果在子类构造器的首行既没有显示调用”this(形参列表)”，也没有显式调用”super(形参列表)”，<br>​     则子类此构造器默认调用”super()”，即调用父类中空参的构造器。</p><p>⑤ 由③和④得到结论：子类的任何一个构造器中，要么会调用本类中重载的构造器，要么会调用父类的构造器。<br>     只能是这两种情况之一。</p><p>⑥ 由⑤得到：一个类中声明有n个构造器，最多有n-1个构造器中使用了”this(形参列表)”，则剩下的那个一定使用”super(形参列表)”。</p><blockquote><p>开发中常见错误：</p><p>如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有空参的构造器，则<code>编译出错</code>。</p></blockquote><p>情景举例1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//A类和B类都是默认有一个无参构造，B类的默认无参构造中还会默认调用A类的默认无参构造</span><br>        <span class="hljs-comment">//但是因为都是默认的，没有打印语句，看不出来</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>情景举例2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>A()&#123;<br>System.out.println(<span class="hljs-string">&quot;A类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//A类显示声明一个无参构造，</span><br><span class="hljs-comment">//B类默认有一个无参构造，</span><br><span class="hljs-comment">//B类的默认无参构造中会默认调用A类的无参构造</span><br>        <span class="hljs-comment">//可以看到会输出“A类无参构造器&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>情景举例3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>A()&#123;<br>System.out.println(<span class="hljs-string">&quot;A类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>B()&#123;<br>System.out.println(<span class="hljs-string">&quot;B类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//A类显示声明一个无参构造，</span><br><span class="hljs-comment">//B类显示声明一个无参构造，        </span><br><span class="hljs-comment">//B类的无参构造中虽然没有写super()，但是仍然会默认调用A类的无参构造</span><br>        <span class="hljs-comment">//可以看到会输出“A类无参构造器&quot;和&quot;B类无参构造器&quot;)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>情景举例4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>A()&#123;<br>System.out.println(<span class="hljs-string">&quot;A类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>B()&#123;<br>        <span class="hljs-built_in">super</span>();<br>System.out.println(<span class="hljs-string">&quot;B类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//A类显示声明一个无参构造，</span><br><span class="hljs-comment">//B类显示声明一个无参构造，        </span><br><span class="hljs-comment">//B类的无参构造中明确写了super()，表示调用A类的无参构造</span><br>        <span class="hljs-comment">//可以看到会输出“A类无参构造器&quot;和&quot;B类无参构造器&quot;)</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>情景举例5：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>A(<span class="hljs-type">int</span> a)&#123;<br>System.out.println(<span class="hljs-string">&quot;A类有参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>B()&#123;<br>System.out.println(<span class="hljs-string">&quot;B类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test05</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//A类显示声明一个有参构造，没有写无参构造，那么A类就没有无参构造了</span><br><span class="hljs-comment">//B类显示声明一个无参构造，        </span><br><span class="hljs-comment">//B类的无参构造没有写super(...)，表示默认调用A类的无参构造</span><br>        <span class="hljs-comment">//编译报错，因为A类没有无参构造</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614852_watermark.png" alt="image-20200227141228450"></p><p>情景举例6：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>A(<span class="hljs-type">int</span> a)&#123;<br>System.out.println(<span class="hljs-string">&quot;A类有参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>B()&#123;<br><span class="hljs-built_in">super</span>();<br>System.out.println(<span class="hljs-string">&quot;B类无参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test06</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-comment">//A类显示声明一个有参构造，没有写无参构造，那么A类就没有无参构造了</span><br><span class="hljs-comment">//B类显示声明一个无参构造，        </span><br><span class="hljs-comment">//B类的无参构造明确写super()，表示调用A类的无参构造</span><br>        <span class="hljs-comment">//编译报错，因为A类没有无参构造</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614612_watermark.png" alt="image-20200303183542807"></p><p>情景举例7：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>A(<span class="hljs-type">int</span> a)&#123;<br>System.out.println(<span class="hljs-string">&quot;A类有参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>B(<span class="hljs-type">int</span> a)&#123;<br><span class="hljs-built_in">super</span>(a);<br>System.out.println(<span class="hljs-string">&quot;B类有参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test07</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//A类显示声明一个有参构造，没有写无参构造，那么A类就没有无参构造了</span><br><span class="hljs-comment">//B类显示声明一个有参构造，        </span><br><span class="hljs-comment">//B类的有参构造明确写super(a)，表示调用A类的有参构造</span><br>        <span class="hljs-comment">//会打印“A类有参构造器&quot;和&quot;B类有参构造器&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>情景举例8：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    A()&#123;<br>        System.out.println(<span class="hljs-string">&quot;A类无参构造器&quot;</span>);<br>    &#125;<br>A(<span class="hljs-type">int</span> a)&#123;<br>System.out.println(<span class="hljs-string">&quot;A类有参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    B()&#123;<br>        <span class="hljs-built_in">super</span>();<span class="hljs-comment">//可以省略，调用父类的无参构造</span><br>        System.out.println(<span class="hljs-string">&quot;B类无参构造器&quot;</span>);<br>    &#125;<br>B(<span class="hljs-type">int</span> a)&#123;<br><span class="hljs-built_in">super</span>(a);<span class="hljs-comment">//调用父类有参构造</span><br>System.out.println(<span class="hljs-string">&quot;B类有参构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Test8</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>        <span class="hljs-type">B</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>(<span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-3-小结：this与super"><a href="#5-3-小结：this与super" class="headerlink" title="5.3 小结：this与super"></a>5.3 小结：this与super</h3><p><strong>1、this和super的意义</strong></p><p>this：当前对象</p><ul><li>在构造器和非静态代码块中，表示正在new的对象</li><li>在实例方法中，表示调用当前方法的对象</li></ul><p>super：引用父类声明的成员</p><p><strong>2、this和super的使用格式</strong></p><ul><li>this<ul><li>this.成员变量：表示当前对象的某个成员变量，而不是局部变量</li><li>this.成员方法：表示当前对象的某个成员方法，完全可以省略this.</li><li>this()或this(实参列表)：调用另一个构造器协助当前对象的实例化，只能在构造器首行，只会找本类的构造器，找不到就报错</li></ul></li><li>super<ul><li>super.成员变量：表示当前对象的某个成员变量，该成员变量在父类中声明的</li><li>super.成员方法：表示当前对象的某个成员方法，该成员方法在父类中声明的</li><li>super()或super(实参列表)：调用父类的构造器协助当前对象的实例化，只能在构造器首行，只会找直接父类的对应构造器，找不到就报错</li></ul></li></ul><h3 id="5-4-练习"><a href="#5-4-练习" class="headerlink" title="5.4 练习"></a>5.4 练习</h3><p><strong>练习1：</strong>修改方法重写的练习2中定义的类Kids中employeed()方法，在该方法中调用父类ManKind的employeed()方法，然后再输出“but Kids should study and no job.”</p><p><strong>练习2：</strong>修改继承中的练习3中定义的Cylinder类，在Cylinder类中覆盖findArea()方法，计算圆柱的表面积。考虑：findVolume方法怎样做相应的修改？</p><p>在CylinderTest类中创建Cylinder类的对象，设置圆柱的底面半径和高，并输出圆柱的表面积和体积。</p><p>附加题：在CylinderTest类中创建一个Circle类的对象，设置圆的半径，计算输出圆的面积。体会父类和子类成员的分别调用。</p><p><strong>练习3：</strong></p><p>1、写一个名为Account的类模拟账户。该类的属性和方法如下图所示。该类包括的属性：账号id，余额balance，年利率annualInterestRate；包含的方法：访问器方法（getter和setter方法），返回月利率的方法getMonthlyInterest()，取款方法withdraw()，存款方法deposit()。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614713_watermark.png" alt="image-20220324003430464"></p><p>写一个用户程序测试Account类。在用户程序中，创建一个账号为1122、余额为20000、年利率4.5%的Account对象。使用withdraw方法提款30000元，并打印余额。<br>再使用withdraw方法提款2500元，使用deposit方法存款3000元，然后打印余额和月利率。</p><p>提示：在提款方法withdraw中，需要判断用户余额是否能够满足提款数额的要求，如果不能，应给出提示。<br>运行结果如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614481_watermark.png" alt="image-20220324003447242"></p><p>2、创建Account类的一个子类CheckAccount代表可透支的账户，该账户中定义一个属性overdraft代表可透支限额。在CheckAccount类中重写withdraw方法，其算法如下：</p><figure class="highlight bnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bnf">如果（取款金额<span class="hljs-attribute">&lt;账户余额），</span><br><span class="hljs-attribute">可直接取款</span><br><span class="hljs-attribute">如果（取款金额&gt;</span>账户余额），<br>计算需要透支的额度<br>判断可透支额overdraft是否足够支付本次透支需要，如果可以<br>将账户余额修改为0，冲减可透支金额<br>如果不可以<br>提示用户超过可透支额的限额<br></code></pre></td></tr></table></figure><p>要求：写一个用户程序测试CheckAccount类。在用户程序中，创建一个账号为1122、余额为20000、年利率4.5%，可透支限额为5000元的CheckAccount对象。</p><p>使用withdraw方法提款5000元，并打印账户余额和可透支额。</p><p>再使用withdraw方法提款18000元，并打印账户余额和可透支额。</p><p>再使用withdraw方法提款3000元，并打印账户余额和可透支额。</p><p>提示：</p><p>（1）子类CheckAccount的构造方法需要将从父类继承的3个属性和子类自己的属性全部初始化。</p><p>（2）父类Account的属性balance被设置为private，但在子类CheckAccount的withdraw方法中需要修改它的值，因此应修改父类的balance属性，定义其为protected。</p><p>运行结果如下图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614860_watermark.png" alt="image-20220324003616767"></p><h2 id="6-子类对象实例化全过程"><a href="#6-子类对象实例化全过程" class="headerlink" title="6. 子类对象实例化全过程"></a>6. 子类对象实例化全过程</h2><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614755_watermark.png" alt="image-20220324003713230"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;小花&quot;</span>,<span class="hljs-string">&quot;小红&quot;</span>);<br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231614281_watermark.png" alt="image-20220324003735416" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615015_watermark.png" alt="image-20220324003813163" style="zoom:67%;" /><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Creature</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Creature</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Creature无参数的构造器&quot;</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Creature</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String name)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Animal带一个参数的构造器，该动物的name为&quot;</span> + name);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>(name);<br>        System.out.println(<span class="hljs-string">&quot;Animal带两个参数的构造器，其age为&quot;</span> + age);<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;汪汪队阿奇&quot;</span>, <span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">&quot;Dog无参数的构造器&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="7-面向对象特征三：多态性"><a href="#7-面向对象特征三：多态性" class="headerlink" title="7. 面向对象特征三：多态性"></a>7. 面向对象特征三：多态性</h2><blockquote><p>一千个读者眼中有一千个哈姆雷特。</p></blockquote><h3 id="7-1-多态的形式和体现"><a href="#7-1-多态的形式和体现" class="headerlink" title="7.1 多态的形式和体现"></a>7.1 多态的形式和体现</h3><h4 id="7-1-1-对象的多态性"><a href="#7-1-1-对象的多态性" class="headerlink" title="7.1.1 对象的多态性"></a>7.1.1 对象的多态性</h4><p>多态性，是面向对象中最重要的概念，在Java中的体现：<strong>对象的多态性：父类的引用指向子类的对象</strong></p><p>格式：（父类类型：指子类继承的父类类型，或者实现的接口类型）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">父类类型 变量名 = 子类对象；<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<span class="hljs-comment">//Object类型的变量o，指向Person类型的对象</span><br><br>o = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(); <span class="hljs-comment">//Object类型的变量o，指向Student类型的对象</span><br></code></pre></td></tr></table></figure><p>对象的多态：在Java中，子类的对象可以替代父类的对象使用。所以，一个引用类型变量可能指向(引用)多种不同类型的对象</p><h4 id="7-1-2-多态的理解"><a href="#7-1-2-多态的理解" class="headerlink" title="7.1.2 多态的理解"></a>7.1.2 多态的理解</h4><p>Java引用变量有两个类型：<code>编译时类型</code>和<code>运行时类型</code>。编译时类型由<code>声明</code>该变量时使用的类型决定，运行时类型由<code>实际赋给该变量的对象</code>决定。简称：<strong>编译时，看左边；运行时，看右边。</strong></p><ul><li>若编译时类型和运行时类型不一致，就出现了对象的多态性(Polymorphism)</li><li>多态情况下，“看左边”：看的是父类的引用（父类中不具备子类特有的方法）<br>“看右边”：看的是子类的对象（实际运行的是子类重写父类的方法）</li></ul><p>多态的使用前提：① 类的继承关系  ② 方法的重写</p><h4 id="7-1-3-举例"><a href="#7-1-3-举例" class="headerlink" title="7.1.3 举例"></a>7.1.3 举例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123;<br>    <span class="hljs-keyword">private</span> String nickname; <span class="hljs-comment">//昵称</span><br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getNickname</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> nickname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNickname</span><span class="hljs-params">(String nickname)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nickname = nickname;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(nickname + <span class="hljs-string">&quot;吃东西&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Pet</span> &#123;<br>    <span class="hljs-comment">//子类重写父类的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;猫咪&quot;</span> + getNickname() + <span class="hljs-string">&quot;吃鱼仔&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//子类扩展的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">catchMouse</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;抓老鼠&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Pet</span> &#123;<br>    <span class="hljs-comment">//子类重写父类的方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗子&quot;</span> + getNickname() + <span class="hljs-string">&quot;啃骨头&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//子类扩展的方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">watchHouse</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;看家&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>1、方法内局部变量的赋值体现多态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPet</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//多态引用</span><br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">pet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        pet.setNickname(<span class="hljs-string">&quot;小白&quot;</span>);<br><br>        <span class="hljs-comment">//多态的表现形式</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        编译时看父类：只能调用父类声明的方法，不能调用子类扩展的方法；</span><br><span class="hljs-comment">        运行时，看“子类”，如果子类重写了方法，一定是执行子类重写的方法体；</span><br><span class="hljs-comment">         */</span><br>        pet.eat();<span class="hljs-comment">//运行时执行子类Dog重写的方法</span><br><span class="hljs-comment">//      pet.watchHouse();//不能调用Dog子类扩展的方法</span><br><br>        pet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        pet.setNickname(<span class="hljs-string">&quot;雪球&quot;</span>);<br>        pet.eat();<span class="hljs-comment">//运行时执行子类Cat重写的方法</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>2、方法的形参声明体现多态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> Pet pet;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adopt</span><span class="hljs-params">(Pet pet)</span> &#123;<span class="hljs-comment">//形参是父类类型，实参是子类对象</span><br>        <span class="hljs-built_in">this</span>.pet = pet;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">()</span>&#123;<br>        pet.eat();<span class="hljs-comment">//pet实际引用的对象类型不同，执行的eat方法也不同</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPerson</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>        dog.setNickname(<span class="hljs-string">&quot;小白&quot;</span>);<br>        person.adopt(dog);<span class="hljs-comment">//实参是dog子类对象，形参是父类Pet类型</span><br>        person.feed();<br><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        cat.setNickname(<span class="hljs-string">&quot;雪球&quot;</span>);<br>        person.adopt(cat);<span class="hljs-comment">//实参是cat子类对象，形参是父类Pet类型</span><br>        person.feed();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>3、方法返回值类型体现多态</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PetShop</span> &#123;<br>    <span class="hljs-comment">//返回值类型是父类类型，实际返回的是子类对象</span><br>    <span class="hljs-keyword">public</span> Pet <span class="hljs-title function_">sale</span><span class="hljs-params">(String type)</span>&#123;<br>        <span class="hljs-keyword">switch</span> (type)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Dog&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Cat&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestPetShop</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">PetShop</span> <span class="hljs-variable">shop</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PetShop</span>();<br><br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> shop.sale(<span class="hljs-string">&quot;Dog&quot;</span>);<br>        dog.setNickname(<span class="hljs-string">&quot;小白&quot;</span>);<br>        dog.eat();<br><br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> shop.sale(<span class="hljs-string">&quot;Cat&quot;</span>);<br>        cat.setNickname(<span class="hljs-string">&quot;雪球&quot;</span>);<br>        cat.eat();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-2-为什么需要多态性-polymorphism-？"><a href="#7-2-为什么需要多态性-polymorphism-？" class="headerlink" title="7.2 为什么需要多态性(polymorphism)？"></a>7.2 为什么需要多态性(polymorphism)？</h3><p>开发中，有时我们在设计一个数组、或一个成员变量、或一个方法的形参、返回值类型时，无法确定它具体的类型，只能确定它是某个系列的类型。</p><p>案例：</p><p>（1）声明一个Dog类，包含public void eat()方法，输出“狗啃骨头”</p><p>（2）声明一个Cat类，包含public void eat()方法，输出“猫吃鱼仔”</p><p>（3）声明一个Person类，功能如下：</p><ul><li>包含宠物属性</li><li>包含领养宠物方法 public void adopt(宠物类型Pet)</li><li>包含喂宠物吃东西的方法 public void feed()，实现为调用宠物对象.eat()方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;狗啃骨头&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫吃鱼仔&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-keyword">private</span> Dog dog;<br><br>    <span class="hljs-comment">//adopt：领养</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">adopt</span><span class="hljs-params">(Dog dog)</span>&#123;<br>        <span class="hljs-built_in">this</span>.dog = dog;<br>    &#125;<br><br>    <span class="hljs-comment">//feed：喂食</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">feed</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(dog != <span class="hljs-literal">null</span>)&#123;<br>            dog.eat();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    问题：</span><br><span class="hljs-comment">    1、从养狗切换到养猫怎么办？   </span><br><span class="hljs-comment">    修改代码把Dog修改为养猫？</span><br><span class="hljs-comment">    2、或者有的人养狗，有的人养猫怎么办？  </span><br><span class="hljs-comment">    3、要是还有更多其他宠物类型怎么办？</span><br><span class="hljs-comment">    如果Java不支持多态，那么上面的问题将会非常麻烦，代码维护起来很难，扩展性很差。</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-多态的好处和弊端"><a href="#7-3-多态的好处和弊端" class="headerlink" title="7.3 多态的好处和弊端"></a>7.3 多态的好处和弊端</h3><p><strong>好处</strong>：变量引用的子类对象不同，执行的方法就不同，实现动态绑定。代码编写更灵活、功能更强大，可维护性和扩展性更好了。</p><p><strong>弊端</strong>：一个引用类型变量如果声明为父类的类型，但实际引用的是子类对象，那么该变量就不能再访问子类中添加的属性和方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Student</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>m.school = <span class="hljs-string">&quot;pku&quot;</span>; <span class="hljs-comment">//合法,Student类有school成员变量</span><br><span class="hljs-type">Person</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(); <br>e.school = <span class="hljs-string">&quot;pku&quot;</span>;<span class="hljs-comment">//非法,Person类没有school成员变量</span><br><br><span class="hljs-comment">// 属性是在编译时确定的，编译时e为Person类型，没有school成员变量，因而编译错误。</span><br></code></pre></td></tr></table></figure><blockquote><p>开发中：</p><p>使用父类做方法的形参，是多态使用最多的场合。即使增加了新的子类，方法也无需改变，提高了扩展性，符合开闭原则。</p><p>【开闭原则OCP】</p><ul><li>对扩展开放，对修改关闭</li><li>通俗解释：软件系统中的各种组件，如模块（Modules）、类（Classes）以及功能（Functions）等，应该在不修改现有代码的基础上，引入新功能</li></ul></blockquote><h3 id="7-4-虚方法调用-Virtual-Method-Invocation"><a href="#7-4-虚方法调用-Virtual-Method-Invocation" class="headerlink" title="7.4 虚方法调用(Virtual Method Invocation)"></a>7.4 虚方法调用(Virtual Method Invocation)</h3><p>在Java中虚方法是指在编译阶段不能确定方法的调用入口地址，在运行阶段才能确定的方法，即可能被重写的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Person</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>();<br>e.getInfo();<span class="hljs-comment">//调用Student类的getInfo()方法</span><br></code></pre></td></tr></table></figure><p>子类中定义了与父类同名同参数的方法，在多态情况下，将此时父类的方法称为虚方法，父类根据赋给它的不同子类对象，动态调用属于子类的该方法。这样的方法调用在编译期是无法确定的。</p><p>举例：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615130_watermark.png" alt="image-20220324234208997"></p><p>前提：Person类中定义了welcome()方法，各个子类重写了welcome()。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615959_watermark.png" alt="image-20220324234214932"></p><p>执行：多态的情况下，调用对象的welcome()方法，实际执行的是子类重写的方法。</p><blockquote><p>拓展：</p><p><code>静态链接（或早起绑定）</code>：当一个字节码文件被装载进JVM内部时，如果被调用的目标方法在编译期可知，且运行期保持不变时。这种情况下将调用方法的符号引用转换为直接引用的过程称之为静态链接。那么调用这样的方法，就称为非虚方法调用。比如调用静态方法、私有方法、final方法、父类构造器、本类重载构造器等。</p><p><code>动态链接（或晚期绑定）</code>：如果被调用的方法在编译期无法被确定下来，也就是说，只能够在程序运行期将调用方法的符号引用转换为直接引用，由于这种引用转换过程具备动态性，因此也就被称之为动态链接。调用这样的方法，就称为虚方法调用。比如调用重写的方法（针对父类）、实现的方法（针对接口）。</p></blockquote><h3 id="7-5-成员变量没有多态性"><a href="#7-5-成员变量没有多态性" class="headerlink" title="7.5 成员变量没有多态性"></a>7.5 成员变量没有多态性</h3><ul><li><p>若子类重写了父类方法，就意味着子类里定义的方法彻底覆盖了父类里的同名方法，系统将不可能把父类里的方法转移到子类中。</p></li><li><p>对于实例变量则不存在这样的现象，即使子类里定义了与父类完全相同的实例变量，这个实例变量依然不可能覆盖父类中定义的实例变量</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestVariable</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Base</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        System.out.println(b.a);<br>        System.out.println(((Sub)b).a);<br><br>        <span class="hljs-type">Sub</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        System.out.println(s.a);<br>        System.out.println(((Base)s).a);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-6-向上转型与向下转型"><a href="#7-6-向上转型与向下转型" class="headerlink" title="7.6 向上转型与向下转型"></a>7.6 向上转型与向下转型</h3><p>首先，一个对象在new的时候创建是哪个类型的对象，它从头至尾都不会变。即这个对象的运行时类型，本质的类型用于不会变。但是，把这个对象赋值给不同类型的变量时，这些变量的编译时类型却不同。</p><h4 id="7-6-1-为什么要类型转换"><a href="#7-6-1-为什么要类型转换" class="headerlink" title="7.6.1 为什么要类型转换"></a>7.6.1 为什么要类型转换</h4><p>因为多态，就一定会有把子类对象赋值给父类变量的时候，这个时候，在<code>编译期间</code>，就会出现类型转换的现象。</p><p>但是，使用父类变量接收了子类对象之后，我们就<code>不能调用</code>子类拥有，而父类没有的方法了。这也是多态给我们带来的一点”小麻烦”。所以，想要调用子类特有的方法，必须做类型转换，使得<code>编译通过</code>。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615831_watermark.png" alt="image-20220324235337563" style="zoom:80%;" /><ul><li><p><strong>向上转型</strong>：当左边的变量的类型（父类） &gt; 右边对象&#x2F;变量的类型（子类），我们就称为向上转型</p><ul><li>此时，编译时按照左边变量的类型处理，就只能调用父类中有的变量和方法，不能调用子类特有的变量和方法了</li><li>但是，<strong>运行时，仍然是对象本身的类型</strong>，所以执行的方法是子类重写的方法体。</li><li>此时，一定是安全的，而且也是自动完成的</li></ul></li><li><p><strong>向下转型</strong>：当左边的变量的类型（子类）&lt;右边对象&#x2F;变量的编译时类型（父类），我们就称为向下转型</p><ul><li>此时，编译时按照左边变量的类型处理，就可以调用子类特有的变量和方法了</li><li>但是，<strong>运行时，仍然是对象本身的类型</strong></li><li>不是所有通过编译的向下转型都是正确的，可能会发生ClassCastException，为了安全，可以通过isInstanceof关键字进行判断</li></ul></li></ul><h4 id="7-6-2-如何向上或向下转型"><a href="#7-6-2-如何向上或向下转型" class="headerlink" title="7.6.2 如何向上或向下转型"></a>7.6.2 如何向上或向下转型</h4><p>向上转型：自动完成</p><p>向下转型：（子类类型）父类变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassCastTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//没有类型转换</span><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<span class="hljs-comment">//dog的编译时类型和运行时类型都是Dog</span><br><br>        <span class="hljs-comment">//向上转型</span><br>        <span class="hljs-type">Pet</span> <span class="hljs-variable">pet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<span class="hljs-comment">//pet的编译时类型是Pet，运行时类型是Dog</span><br>        pet.setNickname(<span class="hljs-string">&quot;小白&quot;</span>);<br>        pet.eat();<span class="hljs-comment">//可以调用父类Pet有声明的方法eat，但执行的是子类重写的eat方法体</span><br><span class="hljs-comment">//        pet.watchHouse();//不能调用父类没有的方法watchHouse</span><br><br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> (Dog) pet;<br>        System.out.println(<span class="hljs-string">&quot;d.nickname = &quot;</span> + d.getNickname());<br>        d.eat();<span class="hljs-comment">//可以调用eat方法</span><br>        d.watchHouse();<span class="hljs-comment">//可以调用子类扩展的方法watchHouse</span><br><br>        <span class="hljs-type">Cat</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (Cat) pet;<span class="hljs-comment">//编译通过，因为从语法检查来说，pet的编译时类型是Pet，Cat是Pet的子类，所以向下转型语法正确</span><br>        <span class="hljs-comment">//这句代码运行报错ClassCastException，因为pet变量的运行时类型是Dog，Dog和Cat之间是没有继承关系的</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-6-3-instanceof关键字"><a href="#7-6-3-instanceof关键字" class="headerlink" title="7.6.3 instanceof关键字"></a>7.6.3 instanceof关键字</h4><p>为了避免ClassCastException的发生，Java提供了 <code>instanceof</code> 关键字，给引用变量做类型的校验。如下代码格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//检验对象a是否是数据类型A的对象，返回值为boolean型</span><br>对象a <span class="hljs-keyword">instanceof</span> 数据类型A <br></code></pre></td></tr></table></figure><ul><li>说明：<ul><li>只要用instanceof判断返回true的，那么强转为该类型就一定是安全的，不会报ClassCastException异常。</li><li>如果对象a属于类A的子类B，a instanceof A值也为true。</li><li>要求对象a所属的类与类A必须是子类和父类的关系，否则编译错误。</li></ul></li></ul><p>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.polymorphism.grammar;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestInstanceof</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Pet[] pets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pet</span>[<span class="hljs-number">2</span>];<br>        pets[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<span class="hljs-comment">//多态引用</span><br>        pets[<span class="hljs-number">0</span>].setNickname(<span class="hljs-string">&quot;小白&quot;</span>);<br>        pets[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span>();<span class="hljs-comment">//多态引用</span><br>        pets[<span class="hljs-number">1</span>].setNickname(<span class="hljs-string">&quot;雪球&quot;</span>);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pets.length; i++) &#123;<br>            pets[i].eat();<br><br>            <span class="hljs-keyword">if</span>(pets[i] <span class="hljs-keyword">instanceof</span> Dog)&#123;<br>                <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) pets[i];<br>                dog.watchHouse();<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pets[i] <span class="hljs-keyword">instanceof</span> Cat)&#123;<br>                <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) pets[i];<br>                cat.catchMouse();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-7-练习"><a href="#7-7-练习" class="headerlink" title="7.7 练习"></a>7.7 练习</h3><p><strong>练习1：笔试&amp;面试</strong></p><p>题目1：继承成员变量和继承方法的区别</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FieldMethodTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Sub</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>        System.out.println(s.count);<br>        s.display();<br>        <span class="hljs-type">Base</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> s;<br>        System.out.println(b == s);<br>        System.out.println(b.count);<br>        b.display();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>题目2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//考查多态的笔试题目：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterviewTest1</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Base</span> <span class="hljs-variable">base</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<br>base.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><br><span class="hljs-comment">//Sub s = (Sub)base;</span><br><span class="hljs-comment">//s.add(1,2,3);</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span>... arr)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;base&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span>[] arr)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;sub_1&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//public void add(int a, int b, int c) &#123;</span><br><span class="hljs-comment">//System.out.println(&quot;sub_2&quot;);</span><br><span class="hljs-comment">//&#125;</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>题目3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//getXxx()和setXxx()声明在哪个类中，内部操作的属性就是哪个类里的。</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterviewTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Father</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>();<br><span class="hljs-type">Son</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>System.out.println(f.getInfo());<span class="hljs-comment">//atguigu</span><br>System.out.println(s.getInfo());<span class="hljs-comment">//尚硅谷</span><br>s.test();<span class="hljs-comment">//尚硅谷  atguigu</span><br>System.out.println(<span class="hljs-string">&quot;-----------------&quot;</span>);<br>s.setInfo(<span class="hljs-string">&quot;大硅谷&quot;</span>);<br>System.out.println(f.getInfo());<span class="hljs-comment">//atguigu</span><br>System.out.println(s.getInfo());<span class="hljs-comment">//大硅谷</span><br>s.test();<span class="hljs-comment">//大硅谷  atguigu</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;atguigu&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInfo</span><span class="hljs-params">(String info)</span> &#123;<br><span class="hljs-built_in">this</span>.info = info;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> info;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">info</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;尚硅谷&quot;</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setInfo</span><span class="hljs-params">(String info)</span> &#123;<br><span class="hljs-built_in">this</span>.info = info;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> info;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-built_in">this</span>.getInfo());<br>System.out.println(<span class="hljs-built_in">super</span>.getInfo());<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>题目4：多态是编译时行为还是运行时行为？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//证明如下：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>  &#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;animal eat food&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cat</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>  &#123;<br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;cat eat fish&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>  &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Dog eat bone&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sheep</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>  &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Sheep eat grass&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterviewTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Animal  <span class="hljs-title function_">getInstance</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br><span class="hljs-keyword">switch</span> (key) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cat</span> ();<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span> ();<br><span class="hljs-keyword">default</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sheep</span> ();<br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(<span class="hljs-number">3</span>);<br>System.out.println(key);<br><br><span class="hljs-type">Animal</span>  <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> getInstance(key);<br>animal.eat(); <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">protected</span> String name=<span class="hljs-string">&quot;person&quot;</span>;<br><span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> age=<span class="hljs-number">50</span>;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Name: &quot;</span>+ name + <span class="hljs-string">&quot;\n&quot;</span> +<span class="hljs-string">&quot;age: &quot;</span>+ age;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">protected</span> String school=<span class="hljs-string">&quot;pku&quot;</span>;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;Name: &quot;</span>+ name + <span class="hljs-string">&quot;\nage: &quot;</span>+ age <br>          + <span class="hljs-string">&quot;\nschool: &quot;</span>+ school;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Graduate</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Student</span>&#123;<br><span class="hljs-keyword">public</span> String major=<span class="hljs-string">&quot;IT&quot;</span>;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getInfo</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">return</span>  <span class="hljs-string">&quot;Name: &quot;</span>+ name + <span class="hljs-string">&quot;\nage: &quot;</span>+ age <br>          + <span class="hljs-string">&quot;\nschool: &quot;</span>+ school+<span class="hljs-string">&quot;\nmajor:&quot;</span>+major;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>建立InstanceTest 类，在类中定义方法method(Person e);<br>在method中:<br>(1)根据e的类型调用相应类的getInfo()方法。<br>(2)根据e的类型执行：<br>如果e为Person类的对象，输出：<br>“a person”;<br>如果e为Student类的对象，输出：<br>“a student”<br>“a person ”<br>如果e为Graduate类的对象，输出：<br>“a graduated student”<br>“a student”<br>“a person”</p><p><strong>练习3</strong>：定义三个类，父类GeometricObject代表几何形状，子类Circle代表圆形，MyRectangle代表矩形。定义一个测试类GeometricTest，编写equalsArea方法测试两个对象的面积是否相等（注意方法的参数类型，利用动态绑定技术），编写displayGeometricObject方法显示对象的面积（注意方法的参数类型，利用动态绑定技术）。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615150_watermark.png" alt="image-20220325000034619" style="zoom:67%;" /><h2 id="8-Object-类的使用"><a href="#8-Object-类的使用" class="headerlink" title="8. Object 类的使用"></a>8. Object 类的使用</h2><h3 id="8-1-如何理解根父类"><a href="#8-1-如何理解根父类" class="headerlink" title="8.1 如何理解根父类"></a>8.1 如何理解根父类</h3><p>类 <code>java.lang.Object</code>是类层次结构的根类，即所有其它类的父类。每个类都使用 <code>Object</code> 作为超类。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615885_watermark.png" alt="image-20220503104750655" style="zoom:67%;" /><ul><li><p>Object类型的变量与除Object以外的任意引用数据类型的对象都存在多态引用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">method(Object obj)&#123;…&#125; <span class="hljs-comment">//可以接收任何类作为其参数</span><br><br><span class="hljs-type">Person</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();  <br>method(o);<br><br></code></pre></td></tr></table></figure></li><li><p>所有对象（包括数组）都实现这个类的方法。</p></li><li><p>如果一个类没有特别指定父类，那么默认则继承自Object类。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>...<br>&#125;<br><span class="hljs-comment">//等价于：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Object</span> &#123;<br>...<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="8-2-Object类的方法"><a href="#8-2-Object类的方法" class="headerlink" title="8.2 Object类的方法"></a>8.2 Object类的方法</h3><p>根据JDK源代码及Object类的API文档，Object类当中包含的方法有11个。这里我们主要关注其中的6个：</p><h4 id="1、-重点-equals"><a href="#1、-重点-equals" class="headerlink" title="1、(重点)equals()"></a>1、(重点)equals()</h4><p><strong>&#x3D; &#x3D;：</strong> </p><ul><li><p>基本类型比较值:只要两个变量的值相等，即为true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> a=<span class="hljs-number">5</span>; <br><span class="hljs-keyword">if</span>(a==<span class="hljs-number">6</span>)&#123;…&#125;<br></code></pre></td></tr></table></figure></li><li><p>引用类型比较引用(是否指向同一个对象)：只有指向同一个对象时，&#x3D;&#x3D;才返回true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Person p1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();      <br>Person p2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br><span class="hljs-keyword">if</span> (p1==p2)&#123;…&#125;<br></code></pre></td></tr></table></figure><ul><li>用“&#x3D;&#x3D;”进行比较时，符号两边的<code>数据类型必须兼容</code>(可自动转换的基本数据类型除外)，否则编译出错</li></ul></li></ul><p><strong>equals()：</strong>所有类都继承了Object，也就获得了equals()方法。还可以重写。</p><ul><li><p>只能比较引用类型，Object类源码中equals()的作用与“&#x3D;&#x3D;”相同：比较是否指向同一个对象。 </p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615593_watermark.png" alt="image-20220503104750655" style="zoom:67%;" /></li><li><p>格式:obj1.equals(obj2)</p></li><li><p>特例：当用equals()方法进行比较时，对类File、String、Date及包装类（Wrapper Class）来说，是比较类型及内容而不考虑引用的是否是同一个对象；</p><ul><li>原因：在这些类中重写了Object类的equals()方法。</li></ul></li><li><p>当自定义使用equals()时，可以重写。用于比较两个对象的“内容”是否都相等</p></li><li><p>重写equals()方法的原则</p><ul><li><p><code>对称性</code>：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。</p></li><li><p><code>自反性</code>：x.equals(x)必须返回是“true”。</p></li><li><p><code>传递性</code>：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</p></li><li><p><code>一致性</code>：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。</p></li><li><p>任何情况下，x.equals(null)，永远返回是“false”；</p><p>​    x.equals(和x不同类型的对象)永远返回是“false”。</p></li></ul></li><li><p>重写举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br><span class="hljs-keyword">private</span> String host;<br><span class="hljs-keyword">private</span> String username;<br><span class="hljs-keyword">private</span> String password;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(String host, String username, String password)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.host = host;<br><span class="hljs-built_in">this</span>.username = username;<br><span class="hljs-built_in">this</span>.password = password;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">super</span>();<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHost</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> host;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHost</span><span class="hljs-params">(String host)</span> &#123;<br><span class="hljs-built_in">this</span>.host = host;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> username;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUsername</span><span class="hljs-params">(String username)</span> &#123;<br><span class="hljs-built_in">this</span>.username = username;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> password;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br><span class="hljs-built_in">this</span>.password = password;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User [host=&quot;</span> + host + <span class="hljs-string">&quot;, username=&quot;</span> + username + <span class="hljs-string">&quot;, password=&quot;</span> + password + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object obj)</span> &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == obj)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (getClass() != obj.getClass())<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">User</span> <span class="hljs-variable">other</span> <span class="hljs-operator">=</span> (User) obj;<br><span class="hljs-keyword">if</span> (host == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (other.host != <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!host.equals(other.host))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (password == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (other.password != <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!password.equals(other.password))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (username == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">if</span> (other.username != <span class="hljs-literal">null</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!username.equals(other.username))<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>面试题：</strong>&#x3D;&#x3D;和equals的区别</p><blockquote><p>从我面试的反馈，85%的求职者“理直气壮”的回答错误…</p></blockquote><ul><li><p>&#x3D;&#x3D; 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型就是比较内存地址</p></li><li><p>equals的话，它是属于java.lang.Object类里面的方法，如果该方法没有被重写过默认也是&#x3D;&#x3D;;我们可以看到String等类的equals方法是被重写过的，而且String类在日常开发中用的比较多，久而久之，形成了equals是比较值的错误观点。</p></li><li><p>具体要看自定义类里有没有重写Object的equals方法来判断。</p></li><li><p>通常情况下，重写equals方法，会比较类中的相应属性是否都相等。</p></li></ul><p><strong>练习1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">it</span> <span class="hljs-operator">=</span> <span class="hljs-number">65</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">fl</span> <span class="hljs-operator">=</span> <span class="hljs-number">65.0f</span>;<br>System.out.println(“<span class="hljs-number">65</span>和<span class="hljs-number">65.0f</span>是否相等？” + (it == fl)); <span class="hljs-comment">//</span><br><br><span class="hljs-type">char</span> <span class="hljs-variable">ch1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>; <span class="hljs-type">char</span> <span class="hljs-variable">ch2</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>System.out.println(<span class="hljs-string">&quot;65和&#x27;A&#x27;是否相等？&quot;</span> + (it == ch1));<span class="hljs-comment">//</span><br>System.out.println(<span class="hljs-string">&quot;12和ch2是否相等？&quot;</span> + (<span class="hljs-number">12</span> == ch2));<span class="hljs-comment">//</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;str1和str2是否相等？&quot;</span>+ (str1 == str2));<span class="hljs-comment">//</span><br><br>System.out.println(<span class="hljs-string">&quot;str1是否equals str2？&quot;</span>+(str1.equals(str2)));<span class="hljs-comment">//</span><br><br>System.out.println(“hello” == <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.util.Date()); <span class="hljs-comment">//</span><br><br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><p>编写Order类，有int型的orderId，String型的orderName，相应的getter()和setter()方法，两个参数的构造器，重写父类的equals()方法：public boolean equals(Object obj)，并判断测试类中创建的两个对象是否相等。</p><p><strong>练习3：</strong></p><p>请根据以下代码自行定义能满足需要的MyDate类,在MyDate类中覆盖equals方法，使其判断当两个MyDate类型对象的年月日都相同时，结果为true，否则为false。  public boolean equals(Object o)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EqualsTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">MyDate</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1976</span>);<br>        <span class="hljs-type">MyDate</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">14</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1976</span>);<br>        <span class="hljs-keyword">if</span> (m1 == m2) &#123;<br>            System.out.println(<span class="hljs-string">&quot;m1==m2&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;m1!=m2&quot;</span>); <span class="hljs-comment">// m1 != m2</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (m1.equals(m2)) &#123;<br>            System.out.println(<span class="hljs-string">&quot;m1 is equal to m2&quot;</span>);<span class="hljs-comment">// m1 is equal to m2</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;m1 is not equal to m2&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2、-重点-toString"><a href="#2、-重点-toString" class="headerlink" title="2、(重点)toString()"></a>2、(重点)toString()</h4><p>方法签名：public String toString()</p><p>① 默认情况下，toString()返回的是“对象的运行时类型 @ 对象的hashCode值的十六进制形式”</p><p>② 在进行String与其它类型数据的连接操作时，自动调用toString()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Date now=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>System.out.println(“now=”+now);  <span class="hljs-comment">//相当于</span><br>System.out.println(“now=”+now.toString()); <br></code></pre></td></tr></table></figure><p>③ 如果我们直接System.out.println(对象)，默认会自动调用这个对象的toString()</p><blockquote><p>因为Java的引用数据类型的变量中存储的实际上时对象的内存地址，但是Java对程序员隐藏内存地址信息，所以不能直接将内存地址显示出来，所以当你打印对象时，JVM帮你调用了对象的toString()。</p></blockquote><p>④ 可以根据需要在用户自定义类型中重写toString()方法<br>    如String 类重写了toString()方法，返回字符串的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">s1=<span class="hljs-string">&quot;hello&quot;</span>;<br>System.out.println(s1);<span class="hljs-comment">//相当于System.out.println(s1.toString());</span><br></code></pre></td></tr></table></figure><p>例如自定义的Person类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;  <br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> + <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习</strong>：定义两个类，父类GeometricObject代表几何形状，子类Circle代表圆形。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615277_watermark.png" alt="image-20220325002959156" style="zoom:67%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B%EF%BC%88%E8%BF%9B%E9%98%B6%EF%BC%89/202402231615139_watermark.png" alt="image-20220325002932102" style="zoom:67%;" /><h4 id="3、clone"><a href="#3、clone" class="headerlink" title="3、clone()"></a>3、clone()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Object类的clone()的使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CloneTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Animal</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Animal</span>(<span class="hljs-string">&quot;花花&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">Animal</span> <span class="hljs-variable">a2</span> <span class="hljs-operator">=</span> (Animal) a1.clone();<br>System.out.println(<span class="hljs-string">&quot;原始对象：&quot;</span> + a1);<br>a2.setName(<span class="hljs-string">&quot;毛毛&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;clone之后的对象：&quot;</span> + a2);<br>&#125; <span class="hljs-keyword">catch</span> (CloneNotSupportedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-built_in">super</span>();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Animal</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Animal [name=&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br><span class="hljs-comment">// TODO Auto-generated method stub</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.clone();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4、finalize"><a href="#4、finalize" class="headerlink" title="4、finalize()"></a>4、finalize()</h4><ul><li>当对象被回收时，系统自动调用该对象的 finalize() 方法。（不是垃圾回收器调用的，是本类对象调用的）<ul><li>永远不要主动调用某个对象的finalize方法，应该交给垃圾回收机制调用。</li></ul></li><li>什么时候被回收：当某个对象没有任何引用时，JVM就认为这个对象是垃圾对象，就会在之后不确定的时间使用垃圾回收机制来销毁该对象，在销毁该对象前，会先调用 finalize()方法。 </li><li>子类可以重写该方法，目的是在对象被清理之前执行必要的清理操作。比如，在方法内断开相关连接资源。<ul><li>如果重写该方法，让一个新的引用变量重新引用该对象，则会重新激活对象。</li></ul></li><li>在JDK 9中此方法已经被<code>标记为过时</code>的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FinalizeTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;Peter&quot;</span>, <span class="hljs-number">12</span>);<br>System.out.println(p);<br>p = <span class="hljs-literal">null</span>;<span class="hljs-comment">//此时对象实体就是垃圾对象，等待被回收。但时间不确定。</span><br>System.gc();<span class="hljs-comment">//强制性释放空间</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">super</span>();<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-comment">//子类重写此方法，可在释放对象前进行某些操作</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finalize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Throwable &#123;<br>System.out.println(<span class="hljs-string">&quot;对象被释放---&gt;&quot;</span> + <span class="hljs-built_in">this</span>);<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5、getClass"><a href="#5、getClass" class="headerlink" title="5、getClass()"></a>5、getClass()</h4><p>public final Class&lt;?&gt; getClass()：获取对象的运行时类型</p><blockquote><p>因为Java有多态现象，所以一个引用数据类型的变量的编译时类型与运行时类型可能不一致，因此如果需要查看这个变量实际指向的对象的类型，需要用getClass()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>System.out.println(obj.getClass());<span class="hljs-comment">//运行时类型</span><br>&#125;<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.atguigu.java.Person<br></code></pre></td></tr></table></figure><h4 id="6、hashCode"><a href="#6、hashCode" class="headerlink" title="6、hashCode()"></a>6、hashCode()</h4><p>public int hashCode()：返回每个对象的hash值。(后续在集合框架章节重点讲解)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;AA&quot;</span>.hashCode());<span class="hljs-comment">//2080</span><br>    System.out.println(<span class="hljs-string">&quot;BB&quot;</span>.hashCode());<span class="hljs-comment">//2112</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="8-3-native关键字的理解"><a href="#8-3-native关键字的理解" class="headerlink" title="8.3 native关键字的理解"></a>8.3 native关键字的理解</h3><p>使用native关键字说明这个方法是原生函数，也就是这个方法是用<code>C/C++</code>等非Java语言实现的，并且<code>被编译成了DLL</code>，由Java去调用。</p><ul><li><p>本地方法是有方法体的，用c语言编写。由于本地方法的方法体源码没有对我们开源，所以我们看不到方法体</p></li><li><p>在Java中定义一个native方法时，并不提供实现体。</p></li></ul><p><strong>1. 为什么要用native方法</strong></p><p>Java使用起来非常方便，然而有些层次的任务用java实现起来不容易，或者我们对程序的效率很在意时，例如：Java需要与一些底层操作系统或某些硬件交换信息时的情况。native方法正是这样一种交流机制：它为我们提供了一个非常简洁的接口，而且我们无需去了解Java应用之外的繁琐的细节。</p><p><strong>2. native声明的方法，对于调用者，可以当做和其他Java方法一样使用</strong></p><p>native method的存在并不会对其他类调用这些本地方法产生任何影响，实际上调用这些方法的其他类甚至不知道它所调用的是一个本地方法。JVM将控制调用本地方法的所有细节。</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring cloud alibaba</title>
    <link href="/2024/02/02/spring%20cloud/"/>
    <url>/2024/02/02/spring%20cloud/</url>
    
    <content type="html"><![CDATA[<h2 id="1、什么是微服务"><a href="#1、什么是微服务" class="headerlink" title="1、什么是微服务"></a>1、什么是微服务</h2><p>​微服务架构是一种架构模式，它提倡将单一应用程序划分成一组小的服务，服务之间互相协调、互相配合，为用户提供最终价值。每个<br>服务运行在其独立的进程中，服务与服务间采用轻量级的通信机制互相协作(通常是基于HTTP协议的RESTful API)。每个服务都围绕着具<br>本业务进行构建，并且能够被独立的部署到生产环境、类生产环境等。另外，应当尽量避免统一的、集中式的服务管理机制，对具体的<br>一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建</p>]]></content>
    
    
    <categories>
      
      <category>spring cloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring cloud</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
