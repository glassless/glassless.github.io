<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>IntelliJ IDEA 常用快捷键一览表</title>
    <link href="/2024/02/22/4.%20IntelliJ%20IDEA%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%80%E8%A7%88%E8%A1%A8/"/>
    <url>/2024/02/22/4.%20IntelliJ%20IDEA%20%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE%E4%B8%80%E8%A7%88%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="1-IDEA的日常快捷键"><a href="#1-IDEA的日常快捷键" class="headerlink" title="1-IDEA的日常快捷键"></a>1-IDEA的日常快捷键</h2><h3 id="第1组：通用型"><a href="#第1组：通用型" class="headerlink" title="第1组：通用型"></a>第1组：通用型</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>复制代码-copy</td><td>ctrl + c</td></tr><tr><td>粘贴-paste</td><td>ctrl + v</td></tr><tr><td>剪切-cut</td><td>ctrl + x</td></tr><tr><td>撤销-undo</td><td>ctrl + z</td></tr><tr><td>反撤销-redo</td><td>ctrl + shift + z</td></tr><tr><td>保存-save all</td><td>ctrl + s</td></tr><tr><td>全选-select all</td><td>ctrl + a</td></tr></tbody></table><h3 id="第2组：提高编写速度（上）"><a href="#第2组：提高编写速度（上）" class="headerlink" title="第2组：提高编写速度（上）"></a>第2组：提高编写速度（上）</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>智能提示-edit</td><td>alt + enter</td></tr><tr><td>提示代码模板-insert live template</td><td>ctrl+j</td></tr><tr><td>使用xx块环绕-surround with …</td><td>ctrl+alt+t</td></tr><tr><td>调出生成getter&#x2F;setter&#x2F;构造器等结构-generate …</td><td>alt+insert</td></tr><tr><td>自动生成返回值变量-introduce variable …</td><td>ctrl+alt+v</td></tr><tr><td>复制指定行的代码-duplicate line or selection</td><td>ctrl+d</td></tr><tr><td>删除指定行的代码-delete line</td><td>ctrl+y</td></tr><tr><td>切换到下一行代码空位-start new line</td><td>shift + enter</td></tr><tr><td>切换到上一行代码空位-start new line before current</td><td>ctrl +alt+ enter</td></tr><tr><td>向上移动代码-move statement up</td><td>ctrl+shift+↑</td></tr><tr><td>向下移动代码-move statement down</td><td>ctrl+shift+↓</td></tr><tr><td>向上移动一行-move line up</td><td>alt+shift+↑</td></tr><tr><td>向下移动一行-move line down</td><td>alt+shift+↓</td></tr><tr><td>方法的形参列表提醒-parameter info</td><td>ctrl+p</td></tr></tbody></table><h3 id="第3组：提高编写速度（下）"><a href="#第3组：提高编写速度（下）" class="headerlink" title="第3组：提高编写速度（下）"></a>第3组：提高编写速度（下）</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>批量修改指定的变量名、方法名、类名等-rename</td><td>shift+f6</td></tr><tr><td>抽取代码重构方法-extract method …</td><td>ctrl+alt+m</td></tr><tr><td>重写父类的方法-override methods …</td><td>ctrl+o</td></tr><tr><td>实现接口的方法-implements methods …</td><td>ctrl+i</td></tr><tr><td>选中的结构的大小写的切换-toggle case</td><td>ctrl+shift+u</td></tr><tr><td>批量导包-optimize imports</td><td>ctrl+alt+o</td></tr></tbody></table><h3 id="第4组：类结构、查找和查看源码"><a href="#第4组：类结构、查找和查看源码" class="headerlink" title="第4组：类结构、查找和查看源码"></a>第4组：类结构、查找和查看源码</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>如何查看源码-go to class…</td><td>ctrl + 选中指定的结构 或 ctrl+n</td></tr><tr><td>显示当前类结构，支持搜索指定的方法、属性等-file structure</td><td>ctrl+f12</td></tr><tr><td>退回到前一个编辑的页面-back</td><td>ctrl+alt+←</td></tr><tr><td>进入到下一个编辑的页面-forward</td><td>ctrl+alt+→</td></tr><tr><td>打开的类文件之间切换-select previous&#x2F;next tab</td><td>alt+←&#x2F;→</td></tr><tr><td>光标选中指定的类，查看继承树结构-Type Hierarchy</td><td>ctrl+h</td></tr><tr><td>查看方法文档-quick documentation</td><td>ctrl+q</td></tr><tr><td>类的UML关系图-show uml popup</td><td>ctrl+alt+u</td></tr><tr><td>定位某行-go to line&#x2F;column</td><td>ctrl+g</td></tr><tr><td>回溯变量或方法的来源-go to implementation(s)</td><td>ctrl+alt+b</td></tr><tr><td>折叠方法实现-collapse all</td><td>ctrl+shift+ -</td></tr><tr><td>展开方法实现-expand all</td><td>ctrl+shift+ +</td></tr></tbody></table><h3 id="第5组：查找、替换与关闭"><a href="#第5组：查找、替换与关闭" class="headerlink" title="第5组：查找、替换与关闭"></a>第5组：查找、替换与关闭</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>查找指定的结构</td><td>ctlr+f</td></tr><tr><td>快速查找：选中的Word快速定位到下一个-find next</td><td>ctrl+l</td></tr><tr><td>查找与替换-replace</td><td>ctrl+r</td></tr><tr><td>直接定位到当前行的首位-move caret to line start</td><td>home</td></tr><tr><td>直接定位到当前行的末位 -move caret to line end</td><td>end</td></tr><tr><td>查询当前元素在当前文件中的引用，然后按 F3 可以选择</td><td>ctrl+f7</td></tr><tr><td>全项目搜索文本-find in path …</td><td>ctrl+shift+f</td></tr><tr><td>关闭当前窗口-close</td><td>ctrl+f4</td></tr></tbody></table><h3 id="第6组：调整格式"><a href="#第6组：调整格式" class="headerlink" title="第6组：调整格式"></a>第6组：调整格式</h3><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>格式化代码-reformat code</td><td>ctrl+alt+l</td></tr><tr><td>使用单行注释-comment with line comment</td><td>ctrl + &#x2F;</td></tr><tr><td>使用&#x2F;取消多行注释-comment with block comment</td><td>ctrl + shift + &#x2F;</td></tr><tr><td>选中数行，整体往后移动-tab</td><td>tab</td></tr><tr><td>选中数行，整体往前移动-prev tab</td><td>shift + tab</td></tr></tbody></table><h2 id="2-Debug快捷键"><a href="#2-Debug快捷键" class="headerlink" title="2-Debug快捷键"></a>2-Debug快捷键</h2><table><thead><tr><th>说明</th><th>快捷键</th></tr></thead><tbody><tr><td>单步调试（不进入函数内部）- step over</td><td>F8</td></tr><tr><td>单步调试（进入函数内部）- step into</td><td>F7</td></tr><tr><td>强制单步调试（进入函数内部） - force step into</td><td>alt+shift+f7</td></tr><tr><td>选择要进入的函数 - smart step into</td><td>shift + F7</td></tr><tr><td>跳出函数 - step out</td><td>shift + F8</td></tr><tr><td>运行到断点 - run to cursor</td><td>alt + F9</td></tr><tr><td>继续执行，进入下一个断点或执行完程序 - resume program</td><td>F9</td></tr><tr><td>停止 - stop</td><td>Ctrl+F2</td></tr><tr><td>查看断点 - view breakpoints</td><td>Ctrl+Shift+F8</td></tr><tr><td>关闭 - close</td><td>Ctrl+F4</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA的安装与使用（下）</title>
    <link href="/2024/02/22/4.%20IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/2024/02/22/4.%20IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="8-快捷键的使用"><a href="#8-快捷键的使用" class="headerlink" title="8. 快捷键的使用"></a>8. 快捷键的使用</h2><h3 id="8-1-查看快捷键"><a href="#8-1-查看快捷键" class="headerlink" title="8.1 查看快捷键"></a>8.1 查看快捷键</h3><h4 id="1、已知快捷键操作名，未知快捷键"><a href="#1、已知快捷键操作名，未知快捷键" class="headerlink" title="1、已知快捷键操作名，未知快捷键"></a>1、已知快捷键操作名，未知快捷键</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956581_watermark.png"></p><h4 id="2、已知快捷键，不知道对应的操作名"><a href="#2、已知快捷键，不知道对应的操作名" class="headerlink" title="2、已知快捷键，不知道对应的操作名"></a>2、已知快捷键，不知道对应的操作名</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956652_watermark.png"></p><h3 id="8-2-自定义快捷键"><a href="#8-2-自定义快捷键" class="headerlink" title="8.2 自定义快捷键"></a>8.2 自定义快捷键</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956820_watermark.png"></p><h3 id="8-3-使用其它平台快捷键"><a href="#8-3-使用其它平台快捷键" class="headerlink" title="8.3 使用其它平台快捷键"></a>8.3 使用其它平台快捷键</h3><p>苹果电脑或者是用惯Eclipse快捷的，可以选择其他快捷键插件。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956949_watermark.png"></p><h2 id="9-IDEA断点调试-Debug"><a href="#9-IDEA断点调试-Debug" class="headerlink" title="9. IDEA断点调试(Debug)"></a>9. IDEA断点调试(Debug)</h2><h3 id="9-1-为什么需要Debug"><a href="#9-1-为什么需要Debug" class="headerlink" title="9.1 为什么需要Debug"></a>9.1 为什么需要Debug</h3><p>编好的程序在执行过程中如果出现错误，该如何查找或定位错误呢？简单的代码直接就可以看出来，但如果代码比较复杂，就需要借助程序调试工具（Debug）来查找错误了。</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs node-repl">运行编写好的程序时，可能出现的几种情况：<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">情况<span class="hljs-number">1</span>：没有任何bug,程序执行正确！</span><br><br>====================如果出现如下的三种情况，都又必要使用debug=============================<br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">情况<span class="hljs-number">2</span>：运行以后，出现了错误或异常信息。但是通过日志文件或控制台，显示了异常信息的位置。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">情况<span class="hljs-number">3</span>：运行以后，得到了结果，但是结果不是我们想要的。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">情况<span class="hljs-number">4</span>：运行以后，得到了结果，结果大概率是我们想要的。但是多次运行的话，可能会出现不是我们想要的情况。</span><br>        比如：多线程情况下，处理线程安全问题。<br>        <br></code></pre></td></tr></table></figure><h3 id="9-2-Debug的步骤"><a href="#9-2-Debug的步骤" class="headerlink" title="9.2 Debug的步骤"></a>9.2 Debug的步骤</h3><p>Debug(调试)程序步骤如下：</p><p>1、添加断点</p><p>2、启动调试</p><p>3、单步执行</p><p>4、观察变量和执行流程，找到并解决问题</p><h4 id="1、添加断点"><a href="#1、添加断点" class="headerlink" title="1、添加断点"></a>1、添加断点</h4><p>在源代码文件中，在想要设置断点的代码行的前面的标记行处，单击鼠标左键就可以设置断点，在相同位置再次单击即可取消断点。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956740_watermark.png"></p><h4 id="2、启动调试"><a href="#2、启动调试" class="headerlink" title="2、启动调试"></a>2、启动调试</h4><p>IDEA提供多种方式来启动程序(Launch)的调试，分别是通过菜单(Run –&gt; Debug)、图标(“绿色臭虫”<img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956503_watermark.png">等等</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956367_watermark.png"></p><h4 id="3、单步调试工具介绍"><a href="#3、单步调试工具介绍" class="headerlink" title="3、单步调试工具介绍"></a>3、单步调试工具介绍</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956590_watermark.png"></p><p>或</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956328_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956801_watermark.png">：Step Over（F8)：进入下一步，如果当前行断点是调用一个方法，则不进入当前方法体内</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956135_watermark.png">：Step Into（F7)：进入下一步，如果当前行断点是调用一个自定义方法，则进入该方法体内</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956168_watermark.png">：Force Step Into（Alt +Shift  + F7)：进入下一步，如果当前行断点是调用一个核心类库方法，则进入该方法体内</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956581_watermark.png">：Step Out（Shift  + F8)：跳出当前方法体</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956830_watermark.png">：Run to Cursor（Alt + F9)：直接跳到光标处继续调试</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956480_watermark.png">：Resume Program（F9)：恢复程序运行，但如果该断点下面代码还有断点则停在下一个断点上</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956876_watermark.png">：Stop（Ctrl + F2）：结束调试</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956177_watermark.png">：View Breakpoints（Ctrl + Shift  + F8)：查看所有断点</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956496_watermark.png">：Mute Breakpoints：使得当前代码后面所有的断点失效， 一下执行到底 </p><blockquote><p>说明：在Debug过程中，可以动态的下断点。</p></blockquote><h3 id="9-3-多种Debug情况介绍"><a href="#9-3-多种Debug情况介绍" class="headerlink" title="9.3 多种Debug情况介绍"></a>9.3 多种Debug情况介绍</h3><h4 id="9-3-1-行断点"><a href="#9-3-1-行断点" class="headerlink" title="9.3.1 行断点"></a>9.3.1 行断点</h4><ul><li>断点打在代码所在的行上。执行到此行时，会停下来。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug01</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示1：行断点  &amp;  测试debug各个常见操作按钮</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 18:44</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;,n = &quot;</span> + n);<br>        swap(m, n);<br>        System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;,n = &quot;</span> + n);<br><br>        <span class="hljs-comment">//2.</span><br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[] &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>        System.out.println(arr);<span class="hljs-comment">//地址值</span><br><br>        <span class="hljs-type">char</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[] &#123;<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>&#125;;<br>        System.out.println(arr1);<span class="hljs-comment">//abc</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> n)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> m;<br>        m = n;<br>        n = temp;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="9-3-2-方法断点"><a href="#9-3-2-方法断点" class="headerlink" title="9.3.2 方法断点"></a>9.3.2 方法断点</h4><ul><li>断点设置在方法的签名上，默认当进入时，断点可以被唤醒。</li><li>也可以设置在方法退出时，断点也被唤醒</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956836_watermark.png"></p><ul><li>在多态的场景下，在父类或接口的方法上打断点，会自动调入到子类或实现类的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug02</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示2： 方法断点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 21:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug02</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-comment">//1.</span><br>        <span class="hljs-type">Son</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        instance.test();<br>        <span class="hljs-comment">//2.</span><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">instance1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>();<br>        instance1.test();<br><br>        <span class="hljs-comment">//3.</span><br>        <span class="hljs-type">Consumer</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConsumerImpl</span>();<br>        con.accept(<span class="hljs-string">&quot;atguigu&quot;</span>);<br><br>        <span class="hljs-comment">//4.</span><br>        <span class="hljs-type">HashMap</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>        map.put(<span class="hljs-string">&quot;Tom&quot;</span>,<span class="hljs-number">12</span>);<br>        map.put(<span class="hljs-string">&quot;Jerry&quot;</span>,<span class="hljs-number">11</span>);<br>        map.put(<span class="hljs-string">&quot;Tony&quot;</span>,<span class="hljs-number">20</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Father : test&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;Son : test&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Consumer</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String str)</span>;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ConsumerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Consumer</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(String str)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ConsumerImple:&quot;</span> + str);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h4 id="9-3-3-字段断点"><a href="#9-3-3-字段断点" class="headerlink" title="9.3.3 字段断点"></a>9.3.3 字段断点</h4><ul><li>在类的属性声明上打断点，默认对属性的修改操作进行监控</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956288_watermark.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug03</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示3：字段断点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 21:34</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug03</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-number">3</span>);<br><br>        System.out.println(p1);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    &#123;<br>        id = <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String name, <span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Person&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="9-3-4-条件断点"><a href="#9-3-4-条件断点" class="headerlink" title="9.3.4 条件断点"></a>9.3.4 条件断点</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug04</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示4：条件断点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 21:49</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug04</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>,<span class="hljs-number">11</span>,<span class="hljs-number">12</span>&#125;;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">target</span> <span class="hljs-operator">=</span> arr[i];<br>            System.out.println(target);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>针对上述代码，在满足arr[i] % 3 &#x3D;&#x3D; 0的条件下，执行断点。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956854_watermark.png"></p><h4 id="9-3-5-异常断点（暂略）"><a href="#9-3-5-异常断点（暂略）" class="headerlink" title="9.3.5 异常断点（暂略）"></a>9.3.5 异常断点（暂略）</h4><ul><li>对异常进行跟踪。如果程序出现指定异常，程序就会执行断点，自动停住。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug05</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示5：异常断点</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 22:01</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug05</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> m / n;<br>        System.out.println(result);<br><br><br><span class="hljs-comment">//        Person p1 = new Person(1001);</span><br><span class="hljs-comment">//        System.out.println(p1.getName().toUpperCase());</span><br><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>通过下图的方式，对指定的异常进行监控：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956337_watermark.png"></p><h4 id="9-3-6-线程调试（暂略）"><a href="#9-3-6-线程调试（暂略）" class="headerlink" title="9.3.6 线程调试（暂略）"></a>9.3.6 线程调试（暂略）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug06</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示6：线程调试</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 22:46</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug06</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        test(<span class="hljs-string">&quot;Thread1&quot;</span>);<br>        test(<span class="hljs-string">&quot;Thread2&quot;</span>);<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String threadName)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<br>                () -&gt; System.out.println(Thread.currentThread().getName()),<br>                threadName<br>        ).start();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956697_watermark.png"></p><h4 id="9-3-7-强制结束"><a href="#9-3-7-强制结束" class="headerlink" title="9.3.7 强制结束"></a>9.3.7 强制结束</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug07</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示7：强制结束</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 23:15</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug07</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;获取请求的数据&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;调用写入数据库的方法&quot;</span>);<br>        insert();<br>        System.out.println(<span class="hljs-string">&quot;程序结束&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;进入insert()方法&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;获取数据库连接&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;将数据写入数据表中&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;写出操作完成&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;断开连接&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956944_watermark.png"></p><h3 id="9-4-自定义调试数据视图（暂略）"><a href="#9-4-自定义调试数据视图（暂略）" class="headerlink" title="9.4 自定义调试数据视图（暂略）"></a>9.4 自定义调试数据视图（暂略）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.debug;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * ClassName: Debug08</span><br><span class="hljs-comment"> * Package: com.atguigu.debug</span><br><span class="hljs-comment"> * Description: 演示8：用户自定义数据视图</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>: 尚硅谷-宋红康</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Create</span>: 2022/10/20 23:21</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Version</span> 1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Debug08</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        HashMap&lt;Integer,String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;高铁&quot;</span>);<br>        map.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;网购&quot;</span>);<br>        map.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;支付宝&quot;</span>);<br>        map.put(<span class="hljs-number">4</span>,<span class="hljs-string">&quot;共享单车&quot;</span>);<br><br>        System.out.println(map);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>设置如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956442_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956864_watermark.png"></p><h3 id="9-5-常见问题"><a href="#9-5-常见问题" class="headerlink" title="9.5 常见问题"></a>9.5 常见问题</h3><p>问题：使用Step Into时，会出现无法进入源码的情况。如何解决？</p><p>方案1：使用 force step into 即可</p><p>方案2：点击Setting -&gt; Build,Execution,Deployment -&gt; Debugger -&gt; Stepping</p><p>把Do not step into the classess中的<code>java.*</code>、<code>javax.*</code> 取消勾选即可。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956608_watermark.png" alt="image-20220516200427750" style="zoom:75%;" /><p>小结：</p><blockquote><p>经验：初学者对于在哪里加断点，缺乏经验，这也是调试程序最麻烦的地方，需要一定的经验。</p><p>简单来说，在可能发生错误的代码的前面加断点。如果不会判断，就在程序执行的起点处加断点。</p></blockquote><h2 id="10-IDEA常用插件"><a href="#10-IDEA常用插件" class="headerlink" title="10. IDEA常用插件"></a>10. IDEA常用插件</h2><h3 id="推荐1：Alibaba-Java-Coding-Guidelines"><a href="#推荐1：Alibaba-Java-Coding-Guidelines" class="headerlink" title="推荐1：Alibaba Java Coding Guidelines"></a>推荐1：Alibaba Java Coding Guidelines</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956031_watermark.png"></p><p>阿里巴巴Java编码规范检查插件，检测代码是否存在问题，以及是否符合规范。</p><p>使用：在类中，右键，选择编码规约扫描，在下方显示扫描规约和提示。根据提示规范代码，提高代码质量。</p><h3 id="推荐2：jclasslib-bytecode-viewer"><a href="#推荐2：jclasslib-bytecode-viewer" class="headerlink" title="推荐2：jclasslib bytecode viewer"></a>推荐2：jclasslib bytecode viewer</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221956697_watermark.png"></p><p>可视化的字节码查看器。</p><p>使用：</p><ol><li>在 IDEA 打开想研究的类。</li><li>编译该类或者直接编译整个项目（ 如果想研究的类在 jar 包中，此步可略过）。</li><li>打开“view” 菜单，选择“Show Bytecode With jclasslib” 选项。</li><li>选择上述菜单项后 IDEA 中会弹出 jclasslib 工具窗口。</li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957202_watermark.png" alt="image-20221023225239838"></p><p>英文设置：</p><p>在 Help -&gt; Edit Custom VM Options …，加上</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">-Duser.language</span>=en<br></code></pre></td></tr></table></figure><h3 id="推荐3：Translation"><a href="#推荐3：Translation" class="headerlink" title="推荐3：Translation"></a>推荐3：Translation</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957646_watermark.png"></p><p>注册翻译服务（有道智云、百度翻译开放平台、阿里云机器翻译）帐号，开通翻译服务并获取其应用ID和密钥<br>绑定应用ID和密钥：偏好设置（设置） &gt; 工具 &gt; 翻译 &gt; 常规 &gt; 翻译引擎 &gt; 配置…</p><p>使用：鼠标选中文本，点击右键即可自动翻译成多国语言。</p><p>注：请注意保管好你的应用密钥，防止其泄露。</p><h3 id="推荐4：GenerateAllSetter"><a href="#推荐4：GenerateAllSetter" class="headerlink" title="推荐4：GenerateAllSetter"></a>推荐4：GenerateAllSetter</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957057_watermark.png"></p><p>实际开发中还有一个非常常见的场景： 我们创建一个对象后，想依次调用 Setter 函数对属性赋值，如果属性较多很容易遗漏或者重复。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957557_watermark.png" alt="image-20221023230812560" style="zoom:80%;" /><p>可以使用这 GenerateAllSetter 提供的功能，快速生成对象的所有 Setter 函数（可填充默认值），然后自己再跟进实际需求设置属性值。</p><h3 id="插件5：Rainbow-Brackets"><a href="#插件5：Rainbow-Brackets" class="headerlink" title="插件5：Rainbow Brackets"></a>插件5：Rainbow Brackets</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957331_watermark.png"></p><p>给括号添加彩虹色，使开发者通过颜色区分括号嵌套层级，便于阅读</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957812_watermark.png"></p><h3 id="推荐6：CodeGlance-Pro"><a href="#推荐6：CodeGlance-Pro" class="headerlink" title="推荐6：CodeGlance Pro"></a>推荐6：CodeGlance Pro</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957419_watermark.png"></p><p>在编辑器右侧生成代码小地图，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957993_watermark.png" alt="image-20221023231842846" style="zoom:80%;" /><h3 id="推荐7：Statistic"><a href="#推荐7：Statistic" class="headerlink" title="推荐7：Statistic"></a>推荐7：Statistic</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957425_watermark.png"></p><p>代码统计工具。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957003_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957497_watermark.png"></p><h3 id="推荐8：Presentation-Assistant"><a href="#推荐8：Presentation-Assistant" class="headerlink" title="推荐8：Presentation Assistant"></a>推荐8：Presentation Assistant</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957067_watermark.png"></p><p>显示快捷键操作的按键</p><h3 id="推荐9：Key-Promoter-X"><a href="#推荐9：Key-Promoter-X" class="headerlink" title="推荐9：Key Promoter X"></a>推荐9：Key Promoter X</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957499_watermark.png"></p><p>快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。</p><h3 id="推荐10：JavaDoc"><a href="#推荐10：JavaDoc" class="headerlink" title="推荐10：JavaDoc"></a>推荐10：JavaDoc</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957953_watermark.png"></p><p>按<code>alt+insert</code>，执行操作：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957359_watermark.png"></p><h3 id="推荐11：-LeetCode-Editor"><a href="#推荐11：-LeetCode-Editor" class="headerlink" title="推荐11： LeetCode Editor"></a>推荐11： LeetCode Editor</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957831_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957509_watermark.png"></p><p>在 IDEA 里刷力扣算法题</p><h3 id="推荐12：GsonFormatPlus"><a href="#推荐12：GsonFormatPlus" class="headerlink" title="推荐12：GsonFormatPlus"></a>推荐12：GsonFormatPlus</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957056_watermark.png"></p><p>根据 json 生成对象。</p><p>使用：使用alt + s 或 alt + insert调取。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957580_watermark.png"></p><p>举例：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;tom&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;18&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;gender&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;man&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;hometown&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;province&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;河北省&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;石家庄市&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;county&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;正定县&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="插件13：Material-Theme-UI"><a href="#插件13：Material-Theme-UI" class="headerlink" title="插件13：Material Theme UI"></a>插件13：Material Theme UI</h3><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957975_watermark.png"></p><p>对于很多人而言，写代码时略显枯燥的，如果能够安装自己喜欢的主题将为开发工作带来些许乐趣。</p><p>IDEA 支持各种主题插件，其中最出名的当属 Material Theme UI。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8B%EF%BC%89/202402221957907_watermark.png"></p><p>安装后，可以从该插件内置的各种风格个选择自己最喜欢的一种。</p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDEA的安装与使用（上）</title>
    <link href="/2024/02/22/4.%20IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/2024/02/22/4.%20IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="1-认识IntelliJ-IDEA"><a href="#1-认识IntelliJ-IDEA" class="headerlink" title="1. 认识IntelliJ IDEA"></a>1. 认识IntelliJ IDEA</h2><h3 id="1-1-JetBrains-公司介绍"><a href="#1-1-JetBrains-公司介绍" class="headerlink" title="1.1 JetBrains  公司介绍"></a>1.1 JetBrains  公司介绍</h3><p>IDEA，是 JetBrains (<a href="https://www.jetbrains.com/)%E5%85%AC%E5%8F%B8%E7%9A%84%E4%BA%A7%E5%93%81%EF%BC%8C%E8%AF%A5%E5%85%AC%E5%8F%B8%E6%88%90%E7%AB%8B%E4%BA%8E2000%E5%B9%B4%EF%BC%8C%E6%80%BB%E9%83%A8%E4%BD%8D%E4%BA%8E%E6%8D%B7%E5%85%8B%E7%9A%84%E5%B8%83%E6%8B%89%E6%A0%BC%EF%BC%8C%E8%87%B4%E5%8A%9B%E4%BA%8E%E4%B8%BA%E5%BC%80%E5%8F%91%E8%80%85%E6%89%93%E9%80%A0%E6%9C%80%E9%AB%98%E6%95%88%E6%99%BA%E8%83%BD%E7%9A%84%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E3%80%82">https://www.jetbrains.com/)公司的产品，该公司成立于2000年，总部位于捷克的布拉格，致力于为开发者打造最高效智能的开发工具。</a></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943460_watermark.png" alt="1576217376761" style="zoom:80%;" /><p>公司旗下还有其它产品，比如：</p><ul><li>WebStorm：用于开发 JavaScript、HTML5、CSS3 等前端技术</li><li>PyCharm：用于开发 python</li><li>PhpStorm：用于开发 PHP</li><li>RubyMine：用于开发 Ruby&#x2F;Rails</li><li>AppCode：用于开发 Objective - C&#x2F;Swift</li><li>CLion：用于开发 C&#x2F;C++</li><li>DataGrip：用于开发数据库和 SQL</li><li>Rider：用于开发.NET</li><li>GoLand：用于开发 Go</li></ul><p>用于开发 Android的Android Studio，也是Google 基于 IDEA 社区版进行迭代的。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943680_watermark.png"></p><h3 id="1-2-IntelliJ-IDEA-介绍"><a href="#1-2-IntelliJ-IDEA-介绍" class="headerlink" title="1.2 IntelliJ IDEA  介绍"></a>1.2 IntelliJ IDEA  介绍</h3><p>IDEA，全称 <code>IntelliJ IDEA</code>，是 Java 语言的集成开发环境，目前已经（基本）<code>代替</code>了Eclipse的使用。IDEA 在业界被公认为是最好的 Java 开发工具（之一），因其<code>功能强悍</code>、<code>设置人性化</code>，而深受Java、大数据、移动端程序员的喜爱。</p><p>IntelliJ IDEA 在 2015 年的官网上这样介绍自己：</p><blockquote><p>Excel at enterprise, mobile and web development with Java, Scala and Groovy,with all the latest modern technologies and frameworks available out of thebox.</p></blockquote><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943600_watermark.png"></p><h3 id="1-3-IDEA的主要优势：-vs-Eclipse"><a href="#1-3-IDEA的主要优势：-vs-Eclipse" class="headerlink" title="1.3 IDEA的主要优势：(vs Eclipse)"></a>1.3 IDEA的主要优势：(vs Eclipse)</h3><p><strong>功能强大：</strong></p><p>① 强大的整合能力。比如：Git、Maven、Spring等</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943546_watermark.png" alt="1576218068631" style="zoom: 67%;" /><p>② 开箱即用的体验（集成版本控制系统、多语言支持的框架随时可用，无需额外安装插件）</p><p><strong>符合人体工程学：</strong></p><p>① 高度智能（快速的智能代码补全、实时代码分析、可靠的重构工具）</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943891_watermark.png"></p><p>② 提示功能的快速、便捷、范围广</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943400_watermark.jpeg"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943956_watermark.png"></p><p>③ 好用的快捷键和代码模板</p><p>④ 精准搜索</p><h3 id="1-4-IDEA-的下载"><a href="#1-4-IDEA-的下载" class="headerlink" title="1.4 IDEA  的下载"></a>1.4 IDEA  的下载</h3><ul><li><p>下载网址： <a href="https://www.jetbrains.com/idea/download/#section=windows">https://www.jetbrains.com/idea/download/#section=windows</a></p></li><li><p>IDEA 分为两个版本： <code>旗舰版(Ultimate)</code>和 <code>社区版(Community)</code>。</p></li><li><p>IDEA的大版本每年迭代一次，大版本下的小版本（如：2022.x）迭代时间不固定，一般每年3个小版本。</p></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943549_watermark.png" alt="image-20220606191620253"></p><p>两个不同版本的详细对比，可以参照官网：<br><a href="https://www.jetbrains.com/idea/features/editions_comparison_matrix.html">https://www.jetbrains.com/idea/features/editions_comparison_matrix.html</a></p><p>官网提供的详细使用文档：<br><a href="https://www.jetbrains.com/help/idea/meet-intellij-idea.html">https://www.jetbrains.com/help/idea/meet-intellij-idea.html</a></p><h2 id="2-卸载与安装"><a href="#2-卸载与安装" class="headerlink" title="2. 卸载与安装"></a>2. 卸载与安装</h2><h3 id="2-1-卸载过程"><a href="#2-1-卸载过程" class="headerlink" title="2.1 卸载过程"></a>2.1 卸载过程</h3><p>这里以卸载2022.1.2版本为例说明。在【控制面板】找到【卸载程序】</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943386_watermark.png" alt="image-20221019120032582" style="zoom: 80%;" /><p>右键点击或左键双击IntelliJ IDEA 2022.1.2进行卸载：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943944_watermark.png" alt="image-20221019121258294" style="zoom:80%;" /><p>如果需要保留下述数据，就不要打√。如果想彻底删除IDEA所有数据，那就打上√。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221943598_watermark.png" alt="image-20221019122135368" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944198_watermark.png" alt="image-20221019122323575" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944700_watermark.png" alt="image-20221019122349195" style="zoom:80%;" /><p>软件卸载完以后，还需要删除其它几个位置的残留：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944085_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944867_watermark.png"></p><h3 id="2-2-安装前的准备"><a href="#2-2-安装前的准备" class="headerlink" title="2.2 安装前的准备"></a>2.2 安装前的准备</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944544_watermark.png"></p><ul><li>64 位 Microsoft Windows 11、10、8</li><li>最低 2 GB 可用 RAM，推荐 8 GB 系统总 RAM</li><li>2.5 GB 硬盘空间，推荐 SSD</li><li>最低屏幕分辨率 1024x768</li></ul><p>从安装上来看，IntelliJ IDEA 对硬件的要求<code>似乎不是很高</code>。可是在实际开发中并不是这样的，因为 IntelliJ IDEA 执行时会有大量的缓存、索引文件，所以如果你正在使用 Eclipse &#x2F; MyEclipse，想通过 IntelliJ IDEA 来解决计算机的卡、慢等问题，这基本上是不可能的，本质上你应该对自己的硬件设备进行升级。</p><h3 id="2-3-安装过程"><a href="#2-3-安装过程" class="headerlink" title="2.3 安装过程"></a>2.3 安装过程</h3><p>1、下载完安装包，双击直接安装<img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944078_watermark.png"></p><p>2、欢迎安装</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944982_watermark.png"></p><p>3、是否删除电脑上低版本的IDEA（如果有，可以选择忽略）</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944842_watermark.png"></p><ul><li><p>如果电脑上有低版本的IDEA，可以选择删除或保留。</p></li><li><p>这里没有卸载旧版本，如果需要卸载，记得勾选下面的保留旧的设置和配置。</p></li></ul><p>4、选择安装目录</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944476_watermark.png"></p><p>选择安装目录，目录中要避免中文和空格。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944212_watermark.png"></p><p>5、创建桌面快捷图标等</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944247_watermark.png"></p><p>确认是否与.java、.groovy、.kt 格式文件进行关联。这里建议不关联。</p><p>6、在【开始】菜单新建一个文件夹（这里需要确认文件夹的名称），来管理IDEA的相关内容。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944825_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944500_watermark.png"></p><p>7、完成安装</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944168_watermark.png"></p><p>重启以后，单击登录：<img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944886_watermark.png"></p><h3 id="2-4-注册"><a href="#2-4-注册" class="headerlink" title="2.4 注册"></a>2.4 注册</h3><p>首先，需要通过用户协议：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944759_watermark.png" alt="image-20221019170223226" style="zoom:80%;" /><p>是否同意发送用户数据（特性、使用的插件、硬件与软件配置等），建议选择：不发送。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944620_watermark.png" alt="image-20221019170301256" style="zoom:80%;" /><p>接着，会提示我们进行注册。</p><ul><li><p>选择1：试用30天。在IDEA2022.1.2版本中，需要先登录，才能开启试用。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944660_watermark.png" alt="image-20221019170638164" style="zoom:80%;" /></li><li><p>选择2：付费购买旗舰版</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944335_watermark.png" alt="image-20221019170740875" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944316_watermark.png" alt="image-20221019170820975" style="zoom:50%;" /></li></ul><h3 id="2-5-闪退问题"><a href="#2-5-闪退问题" class="headerlink" title="2.5 闪退问题"></a>2.5 闪退问题</h3><p>问题描述：2022.1启动不了，双击桌面图标，没有响应。</p><p>解决办法：</p><p>打开<code>C:\Users\songhk\AppData\Roaming\JetBrains\IntelliJIdea2022.1\idea64.exe.vmoptions</code> 这个文件。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944223_watermark.png"></p><p>内容如下所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944169_watermark.png"></p><p>删除红框的数据以后，再登录即可正常进入。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944911_watermark.png"></p><p>原因：之前使用过的比如2021.2.2版本，pojie了。新版IEDA太智能了，把现有的启运参数也都复制过去了。又因为最新的IDEA，不兼容pojie程序-javaagent:D:\develop_tools\IDEA\IntelliJ IDEA 2021.2.2\bin\jetbrains-agent.jar了，所以报错了，所以JVM结束了，所以没有启动画面，凉凉了。</p><h2 id="3-HelloWorld的实现"><a href="#3-HelloWorld的实现" class="headerlink" title="3. HelloWorld的实现"></a>3. HelloWorld的实现</h2><h3 id="3-1-新建Project-Class"><a href="#3-1-新建Project-Class" class="headerlink" title="3.1 新建Project - Class"></a>3.1 新建Project - Class</h3><p>选择”New Project”：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944533_watermark.png" alt="image-20221019174051967" style="zoom:80%;" /><p>指名工程名、使用的JDK版本等信息。如下所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944347_watermark.png"></p><p>接着创建Java类：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944009_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944892_watermark.png"></p><h3 id="3-2-编写代码"><a href="#3-2-编写代码" class="headerlink" title="3.2 编写代码"></a>3.2 编写代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello,World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-运行"><a href="#3-3-运行" class="headerlink" title="3.3 运行"></a>3.3 运行</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944389_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944654_watermark.png"></p><h2 id="4-JDK相关设置"><a href="#4-JDK相关设置" class="headerlink" title="4. JDK相关设置"></a>4. JDK相关设置</h2><h3 id="4-1-项目的JDK设置"><a href="#4-1-项目的JDK设置" class="headerlink" title="4.1 项目的JDK设置"></a>4.1 项目的JDK设置</h3><p><code>File--&gt;Project Structure...--&gt;Platform Settings --&gt;SDKs</code></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944177_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944932_watermark.png"></p><ul><li>注1：SDKs全称是Software Development Kit ，这里一定是选择JDK的安装根目录，不是JRE的目录。</li><li>注2：这里还可以从本地添加多个JDK。使用“+”即可实现。</li></ul><h3 id="4-2-out目录和编译版本"><a href="#4-2-out目录和编译版本" class="headerlink" title="4.2 out目录和编译版本"></a>4.2 out目录和编译版本</h3><p><code>File--&gt;Project Structure...--&gt;Project Settings --&gt;Project</code></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944449_watermark.png"></p><h2 id="5-详细设置"><a href="#5-详细设置" class="headerlink" title="5. 详细设置"></a>5. 详细设置</h2><h3 id="5-1-如何打开详细配置界面"><a href="#5-1-如何打开详细配置界面" class="headerlink" title="5.1 如何打开详细配置界面"></a>5.1 如何打开详细配置界面</h3><p>1、显示工具栏</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944125_watermark.png"></p><p>2、选择详细配置菜单或按钮</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221944877_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945421_watermark.png"></p><h3 id="5-2-系统设置"><a href="#5-2-系统设置" class="headerlink" title="5.2 系统设置"></a>5.2 系统设置</h3><h4 id="1、默认启动项目配置"><a href="#1、默认启动项目配置" class="headerlink" title="1、默认启动项目配置"></a>1、默认启动项目配置</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945220_watermark.png"></p><p>启动IDEA时，默认自动打开上次开发的项目？还是自己选择？</p><p>如果去掉Reopen projects on startup前面的对勾，每次启动IDEA就会出现如下界面：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945994_watermark.png"></p><h4 id="2、取消自动更新"><a href="#2、取消自动更新" class="headerlink" title="2、取消自动更新"></a>2、取消自动更新</h4><p>Settings–&gt;Appearance &amp; Behavior-&gt;System Settings -&gt; Updates</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945449_watermark.png"></p><p>默认都打√了，建议检查IDE更新的√去掉，检查插件更新的√选上。</p><h3 id="5-3-设置整体主题"><a href="#5-3-设置整体主题" class="headerlink" title="5.3 设置整体主题"></a>5.3 设置整体主题</h3><h4 id="1、选择主题"><a href="#1、选择主题" class="headerlink" title="1、选择主题"></a>1、选择主题</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945795_watermark.png"></p><h4 id="2、设置菜单和窗口字体和大小"><a href="#2、设置菜单和窗口字体和大小" class="headerlink" title="2、设置菜单和窗口字体和大小"></a>2、设置菜单和窗口字体和大小</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945736_watermark.png"></p><h4 id="3、设置IDEA背景图"><a href="#3、设置IDEA背景图" class="headerlink" title="3、设置IDEA背景图"></a>3、设置IDEA背景图</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945901_watermark.png"></p><p>选择一张合适的图片作为背景，即可。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945114_watermark.png"></p><h3 id="5-4-设置编辑器主题样式"><a href="#5-4-设置编辑器主题样式" class="headerlink" title="5.4 设置编辑器主题样式"></a>5.4 设置编辑器主题样式</h3><h4 id="1、编辑器主题"><a href="#1、编辑器主题" class="headerlink" title="1、编辑器主题"></a>1、编辑器主题</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945741_watermark.png"></p><h4 id="2、字体大小"><a href="#2、字体大小" class="headerlink" title="2、字体大小"></a>2、字体大小</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945710_watermark.png"></p><p>更详细的字体与颜色如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945310_watermark.png"></p><blockquote><p>温馨提示：如果选择某个font字体，中文乱码，可以在fallback font（备选字体）中选择一个支持中文的字体。</p></blockquote><h4 id="3、注释的字体颜色"><a href="#3、注释的字体颜色" class="headerlink" title="3、注释的字体颜色"></a>3、注释的字体颜色</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945619_watermark.png"></p><ul><li>Block comment：修改多行注释的字体颜色</li><li>Doc Comment –&gt; Text：修改文档注释的字体颜色</li><li>Line comment：修改单行注释的字体颜色</li></ul><h3 id="5-5-显示行号与方法分隔符"><a href="#5-5-显示行号与方法分隔符" class="headerlink" title="5.5 显示行号与方法分隔符"></a>5.5 显示行号与方法分隔符</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945956_watermark.png"></p><h3 id="5-6-代码智能提示功能"><a href="#5-6-代码智能提示功能" class="headerlink" title="5.6 代码智能提示功能"></a>5.6 代码智能提示功能</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945813_watermark.png"></p><p>IntelliJ IDEA 的代码提示和补充功能有一个特性：<code>区分大小写</code>。 如果想不区分大小写的话，就把这个对勾去掉。<code>建议去掉勾选</code>。</p><h3 id="5-7-自动导包配置"><a href="#5-7-自动导包配置" class="headerlink" title="5.7 自动导包配置"></a>5.7 自动导包配置</h3><ul><li>默认需要自己手动导包，Alt+Enter快捷键</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945731_watermark.png"></p><ul><li>自动导包设置<ul><li>动态导入明确的包：Add unambiguous imports on the fly，该设置具有全局性；</li><li>优化动态导入的包：Optimize imports on the fly，该设置只对当前项目有效；</li></ul></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945757_watermark.png"></p><h3 id="5-8-设置项目文件编码（一定要改）"><a href="#5-8-设置项目文件编码（一定要改）" class="headerlink" title="5.8 设置项目文件编码（一定要改）"></a>5.8 设置项目文件编码（一定要改）</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945515_watermark.png"></p><p>说明： Transparent native-to-ascii conversion主要用于转换ascii，显式原生内容。一般都要勾选。</p><h3 id="5-9-设置控制台的字符编码"><a href="#5-9-设置控制台的字符编码" class="headerlink" title="5.9 设置控制台的字符编码"></a>5.9 设置控制台的字符编码</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945136_watermark.png"></p><h3 id="5-10-修改类头的文档注释信息"><a href="#5-10-修改类头的文档注释信息" class="headerlink" title="5.10 修改类头的文档注释信息"></a>5.10 修改类头的文档注释信息</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945852_watermark.png"></p><p>比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* ClassName: $&#123;NAME&#125;</span><br><span class="hljs-comment">* Package: $&#123;PACKAGE_NAME&#125;</span><br><span class="hljs-comment">* Description: </span><br><span class="hljs-comment">* <span class="hljs-doctag">@Author</span> 尚硅谷-宋红康</span><br><span class="hljs-comment">* <span class="hljs-doctag">@Create</span> $&#123;DATE&#125; $&#123;TIME&#125; </span><br><span class="hljs-comment">* <span class="hljs-doctag">@Version</span> 1.0   </span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>常用的预设的变量，这里直接贴出官网给的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">$&#123;PACKAGE_NAME&#125; - the name of the target <span class="hljs-keyword">package</span> where the <span class="hljs-keyword">new</span> <span class="hljs-title class_">class</span> or <span class="hljs-keyword">interface</span> <span class="hljs-title class_">will</span> be created. <br>$&#123;PROJECT_NAME&#125; - the name of the current project. <br>$&#123;FILE_NAME&#125; - the name of the PHP file that will be created. <br>$&#123;NAME&#125; - the name of the <span class="hljs-keyword">new</span> <span class="hljs-title class_">file</span> which you specify in the New File dialog box during the file creation. <br>$&#123;USER&#125; - the login name of the current user. <br>$&#123;DATE&#125; - the current system date. <br>$&#123;TIME&#125; - the current system time. <br>$&#123;YEAR&#125; - the current year. <br>$&#123;MONTH&#125; - the current month. <br>$&#123;DAY&#125; - the current day of the month. <br>$&#123;HOUR&#125; - the current hour. <br>$&#123;MINUTE&#125; - the current minute. <br>$&#123;PRODUCT_NAME&#125; - the name of the IDE in which the file will be created. <br>$&#123;MONTH_NAME_SHORT&#125; - the first <span class="hljs-number">3</span> letters of the month name. Example: Jan, Feb, etc. <br>$&#123;MONTH_NAME_FULL&#125; - full name of a month. Example: January, February, etc.<br><br></code></pre></td></tr></table></figure><h3 id="5-11-设置自动编译"><a href="#5-11-设置自动编译" class="headerlink" title="5.11 设置自动编译"></a>5.11 设置自动编译</h3><p><code>Settings--&gt;Build,Execution,Deployment--&gt;Compiler</code></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945536_watermark.png" alt="1655109415450" style="zoom: 67%;" /><h3 id="5-12-设置为省电模式-可忽略"><a href="#5-12-设置为省电模式-可忽略" class="headerlink" title="5.12 设置为省电模式 (可忽略)"></a>5.12 设置为省电模式 (可忽略)</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945170_watermark.png"></p><p>IntelliJ IDEA 有一种叫做<code>省电模式</code>的状态，开启这种模式之后 IntelliJ IDEA 会<code>关掉代码检查</code>和<code>代码提示</code>等功能。所以一般也可认为这是一种<code>阅读模式</code>，如果你在开发过程中遇到突然代码文件不能进行检查和提示，可以来看看这里是否有开启该功能。</p><h3 id="5-13-取消双击shift搜索"><a href="#5-13-取消双击shift搜索" class="headerlink" title="5.13 取消双击shift搜索"></a>5.13 取消双击shift搜索</h3><p>因为我们按shift切换中英文输入方式，经常被按到，总是弹出搜索框，太麻烦了。可以取消它。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945771_watermark.png" alt="1659191272699" style="zoom:80%;" /><ul><li>方式1：适用于IDEA 2022.1.2版本</li></ul><p>在2022.1版本中，采用如下方式消双击shift出现搜索框：搜索double即可，勾选Disable double modifier key shortcuts，禁用这个选项。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945200_watermark.png"></p><ul><li>方式2：适用于IDEA 2022.1.2之前版本</li></ul><p>双击shift 或 ctrl + shift + a，打开如下搜索窗口：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945951_watermark.png"></p><p>选择registry…，找到”ide.suppress.double.click.handler”，把复选框打上勾就可以取消双击shift出现搜索框了。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945804_watermark.png"></p><h2 id="6-工程与模块管理"><a href="#6-工程与模块管理" class="headerlink" title="6. 工程与模块管理"></a>6. 工程与模块管理</h2><h3 id="6-1-IDEA项目结构"><a href="#6-1-IDEA项目结构" class="headerlink" title="6.1 IDEA项目结构"></a>6.1 IDEA项目结构</h3><p><strong>层级关系：</strong></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">project</span>(工程) - <span class="hljs-built_in">module</span>(模块) - <span class="hljs-built_in">package</span>(包) - <span class="hljs-built_in">class</span>(类)<br></code></pre></td></tr></table></figure><p><strong>具体的：</strong></p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">一个project中可以创建多个<span class="hljs-keyword">module</span><br><br>一个<span class="hljs-keyword">module</span>中可以创建多个<span class="hljs-keyword">package</span><br><br>一个<span class="hljs-keyword">package</span>中可以创建多个<span class="hljs-keyword">class</span><br></code></pre></td></tr></table></figure><blockquote><p>这些结构的划分，是为了方便管理功能代码。</p></blockquote><h3 id="6-2-Project和Module的概念"><a href="#6-2-Project和Module的概念" class="headerlink" title="6.2 Project和Module的概念"></a>6.2 Project和Module的概念</h3><p>在 IntelliJ IDEA 中，提出了Project和Module这两个概念。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945054_watermark.png" alt="image-20220523014358169" style="zoom:80%;" /><p>在 IntelliJ IDEA 中Project是<code>最顶级的结构单元</code>，然后就是Module。目前，主流的大型项目结构基本都是多Module的结构，这类项目一般是<code>按功能划分</code>的，比如：user-core-module、user-facade-module和user-hessian-module等等，模块之间彼此可以<code>相互依赖</code>，有着不可分割的业务关系。因此，对于一个Project来说：</p><ul><li>当为单Module项目的时候，这个单独的Module实际上就是一个Project。</li><li>当为多Module项目的时候，多个模块处于同一个Project之中，此时彼此之间具有<code>互相依赖</code>的关联关系。</li><li>当然多个模块没有建立依赖关系的话，也可以作为单独一个“小项目”运行。</li></ul><h3 id="6-3-Module和Package"><a href="#6-3-Module和Package" class="headerlink" title="6.3 Module和Package"></a>6.3 Module和Package</h3><p>在一个module下，可以声明多个包（package），一般命名规范如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>.不要有中文<br><span class="hljs-number">2</span>.不要以数字开头<br><span class="hljs-number">3</span>.给包取名时一般都是公司域名倒着写,而且都是小写<br>  比如：尚硅谷网址是www<span class="hljs-selector-class">.atguigu</span><span class="hljs-selector-class">.com</span><br>  那么我们的package包名应该写成：com<span class="hljs-selector-class">.atguigu</span>.子名字。<br></code></pre></td></tr></table></figure><h3 id="6-4-创建Module"><a href="#6-4-创建Module" class="headerlink" title="6.4 创建Module"></a>6.4 创建Module</h3><p>建议创建“Empty空工程”，然后创建多模块，每一个模块可以独立运行，相当于一个小项目。JavaSE阶段不涉及到模块之间的依赖。后期再学习模块之间的依赖。</p><p>步骤：</p><p>（1）选择创建模块</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945543_watermark.png"></p><p>（2）选择模块类型：这里选择创建Java模块，给模块命名，确定存放位置</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221945364_watermark.png"></p><p>（4）模块声明在工程下面</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946315_watermark.png"></p><h3 id="6-5-删除模块"><a href="#6-5-删除模块" class="headerlink" title="6.5 删除模块"></a>6.5 删除模块</h3><p>（1）移除模块</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946229_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946245_watermark.png"></p><p>（2）彻底删除模块</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946649_watermark.png"></p><h3 id="6-6-导入老师的模块"><a href="#6-6-导入老师的模块" class="headerlink" title="6.6 导入老师的模块"></a>6.6 导入老师的模块</h3><p>（1）将老师的模块<code>teacher_chapter04</code>整个的复制到自己IDEA项目的路径下</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946306_watermark.png"></p><p>接着打开自己IDEA的项目，会在项目目录下看到拷贝过来的module，只不过不是以模块的方式呈现。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946604_watermark.png"></p><p>（2）查看Project Structure，选择import module</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946568_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946599_watermark.png"></p><p>（3）选择要导入的module：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946293_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946054_watermark.png"></p><p>（4）接着可以一路Next下去，最后选择Overwrite</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946985_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946653_watermark.png"></p><p>最后点击OK即可了。</p><h3 id="6-7-同时打开两个IDEA项目工程"><a href="#6-7-同时打开两个IDEA项目工程" class="headerlink" title="6.7 同时打开两个IDEA项目工程"></a>6.7 同时打开两个IDEA项目工程</h3><h4 id="1、两个IDEA项目工程效果"><a href="#1、两个IDEA项目工程效果" class="headerlink" title="1、两个IDEA项目工程效果"></a>1、两个IDEA项目工程效果</h4><p>有些同学想要把上课练习代码和作业代码分开两个IDEA项目工程。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946384_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946014_watermark.png"></p><h4 id="2、新建一个IDEA项目"><a href="#2、新建一个IDEA项目" class="headerlink" title="2、新建一个IDEA项目"></a>2、新建一个IDEA项目</h4><p>注意：第一次需要新建，之后直接打开项目工程即可</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946470_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946835_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946798_watermark.png"></p><h4 id="3、打开两个IDEA项目"><a href="#3、打开两个IDEA项目" class="headerlink" title="3、打开两个IDEA项目"></a>3、打开两个IDEA项目</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946369_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946102_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946757_watermark.png"></p><h3 id="6-8-导入前几章非IDEA工程代码"><a href="#6-8-导入前几章非IDEA工程代码" class="headerlink" title="6.8 导入前几章非IDEA工程代码"></a>6.8 导入前几章非IDEA工程代码</h3><p><strong>1、创建chapter01、chapter02、chapter03等章节的module</strong></p><p>将相应章节的源文件粘贴到module的src下。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946320_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946790_watermark.png"></p><p>打开其中各个源文件，会发现有乱码。比如：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946490_watermark.png"></p><p><strong>2、设置编码</strong></p><p>当前项目是UTF-8。如果原来的.java文件都是GBK的（如果原来.java文件有的是GBK，有的是UTF-8就比较麻烦了）。</p><p>可以单独把这两个模块设置为GBK编码的。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946004_watermark.png"></p><p>改为GBK，确认即可。如图：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946364_watermark.png"></p><h2 id="7-代码模板的使用"><a href="#7-代码模板的使用" class="headerlink" title="7. 代码模板的使用"></a>7. 代码模板的使用</h2><h3 id="7-1-查看Postfix-Completion模板-后缀补全"><a href="#7-1-查看Postfix-Completion模板-后缀补全" class="headerlink" title="7.1 查看Postfix Completion模板(后缀补全)"></a>7.1 查看Postfix Completion模板(后缀补全)</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946298_watermark.png"></p><h3 id="7-2-查看Live-Templates模板-实时模板"><a href="#7-2-查看Live-Templates模板-实时模板" class="headerlink" title="7.2 查看Live Templates模板(实时模板)"></a>7.2 查看Live Templates模板(实时模板)</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946225_watermark.jpeg"></p><h3 id="7-3-常用代码模板"><a href="#7-3-常用代码模板" class="headerlink" title="7.3 常用代码模板"></a>7.3 常用代码模板</h3><h4 id="1、非空判断"><a href="#1、非空判断" class="headerlink" title="1、非空判断"></a>1、非空判断</h4><ul><li>变量.null：if(变量 &#x3D;&#x3D; null)</li><li>变量.nn：if(变量 !&#x3D; null) </li><li>变量.notnull：if(变量 !&#x3D; null) </li><li>ifn：if(xx  &#x3D;&#x3D; null)</li><li>inn：if(xx  !&#x3D; null)</li></ul><h4 id="2、遍历数组和集合"><a href="#2、遍历数组和集合" class="headerlink" title="2、遍历数组和集合"></a>2、遍历数组和集合</h4><ul><li>数组或集合变量.fori：for循环</li><li>数组或集合变量.for：增强for循环</li><li>数组或集合变量.forr：反向for循环</li><li>数组或集合变量.iter：增强for循环遍历数组或集合</li></ul><h4 id="3、输出语句"><a href="#3、输出语句" class="headerlink" title="3、输出语句"></a>3、输出语句</h4><ul><li>sout：相当于System.out.println</li><li>soutm：打印当前方法的名称</li><li>soutp：打印当前方法的形参及形参对应的实参值</li><li>soutv：打印方法中声明的最近的变量的值</li><li>变量.sout：打印当前变量值</li><li>变量.soutv：打印当前变量名及变量值</li></ul><h4 id="4、对象操作"><a href="#4、对象操作" class="headerlink" title="4、对象操作"></a>4、对象操作</h4><ul><li>创建对象<ul><li>Xxx.new  .var ：创建Xxx类的对象，并赋给相应的变量</li><li>Xxx.new  .field：会将方法内刚创建的Xxx对象抽取为一个属性</li></ul></li><li>强转<ul><li>对象.cast：将对象进行强转</li><li>对象.castvar：将对象强转后，并赋给一个变量</li></ul></li></ul><h4 id="5、静态常量声明"><a href="#5、静态常量声明" class="headerlink" title="5、静态常量声明"></a>5、静态常量声明</h4><ul><li>psf：public static final</li><li>psfi：public static final int</li><li>psfs：public static final String</li><li>prsf：private static final</li></ul><h3 id="7-4-自定义代码模板"><a href="#7-4-自定义代码模板" class="headerlink" title="7.4 自定义代码模板"></a>7.4 自定义代码模板</h3><h4 id="7-4-1-自定义后缀补全模板"><a href="#7-4-1-自定义后缀补全模板" class="headerlink" title="7.4.1 自定义后缀补全模板"></a>7.4.1 自定义后缀补全模板</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946866_watermark.png"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946462_watermark.png"></p><h4 id="7-4-2-自定义Live-Templates"><a href="#7-4-2-自定义Live-Templates" class="headerlink" title="7.4.2 自定义Live Templates"></a>7.4.2 自定义Live Templates</h4><p>例如：定义sop代表System.out.print();语句</p><p>①在Live Templates中增加模板</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946103_watermark.png"></p><p>②先定义一个模板的组，这样方便管理所有自定义的代码模板</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946859_watermark.png"></p><p>③在模板组里新建模板</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221946819_watermark.png"></p><p>④定义模板（以输出语句为例）</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947459_watermark.png"></p><ul><li>Abbreviation：模板的缩略名称</li><li>Description：模板的描述</li><li>Template text：模板的代码片段</li><li>模板应用范围。比如点击Define。选择如下：应用在java代码中。</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947412_watermark.png"></p><p><strong>其它模板1：单元测试模板：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> test$var1$()&#123;<br>    $var2$<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947280_watermark.png"></p><p><strong>其它模板2：创建多线程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        $<span class="hljs-keyword">var</span>$<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947793_watermark.png"></p><p><strong>其它模板3：冒泡排序</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">$INDEX$</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; $INDEX$ &lt; $ARRAY$.length; $INDEX$++) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">$INDEX2$</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; $INDEX2$ &lt; $ARRAY$.length-$INDEX$; $INDEX2$++) &#123;<br>        <span class="hljs-keyword">if</span>($ARRAY$[$INDEX2$] &gt; $ARRAY$[$INDEX2$+<span class="hljs-number">1</span>])&#123;<br>            <span class="hljs-type">$ELEMENT_TYPE$</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> $ARRAY$[$INDEX2$];<br>            $ARRAY$[$INDEX2$] = $ARRAY$[$INDEX2$+<span class="hljs-number">1</span>];<br>            $ARRAY$[$INDEX2$+<span class="hljs-number">1</span>] = temp;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/IDEA%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E4%B8%8A%EF%BC%89/202402221947748_watermark.png"></p>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流程控制语句</title>
    <link href="/2024/02/22/3.%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/02/22/3.%20%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="1-顺序结构"><a href="#1-顺序结构" class="headerlink" title="1. 顺序结构"></a>1. 顺序结构</h2><p>顺序结构就是程序<code>从上到下逐行</code>地执行。表达式语句都是顺序执行的。并且上一行对某个变量的修改对下一行会产生影响。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732479_watermark.png" alt="image-20211218093256771"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatementTest</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>System.out.println(<span class="hljs-string">&quot;x = &quot;</span> + x);<br>        System.out.println(<span class="hljs-string">&quot;y = &quot;</span> + y);<br>        <span class="hljs-comment">//对x、y的值进行修改</span><br>        x++;<br>        y = <span class="hljs-number">2</span> * x + y;<br>        x = x * <span class="hljs-number">10</span>;<br>        System.out.println(<span class="hljs-string">&quot;x = &quot;</span> + x);<br>        System.out.println(<span class="hljs-string">&quot;y = &quot;</span> + y);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Java中定义变量时采用合法的<code>前向引用</code>。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num1 + <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>错误形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> num1 + <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-分支语句"><a href="#2-分支语句" class="headerlink" title="2. 分支语句"></a>2. 分支语句</h2><h3 id="2-1-if-else条件判断结构"><a href="#2-1-if-else条件判断结构" class="headerlink" title="2.1 if-else条件判断结构"></a>2.1 if-else条件判断结构</h3><h4 id="2-1-1-基本语法"><a href="#2-1-1-基本语法" class="headerlink" title="2.1.1 基本语法"></a>2.1.1 基本语法</h4><p><strong>结构1：单分支条件判断：if</strong></p><p><code>格式：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(条件表达式)｛<br>  语句块;<br>｝<br></code></pre></td></tr></table></figure><p><code>说明：</code>条件表达式必须是布尔表达式（关系表达式或逻辑表达式）或 布尔变量。</p><p><code>执行流程：</code></p><ol><li>首先判断条件表达式看其结果是true还是false</li><li>如果是true就执行语句块</li><li>如果是false就不执行语句块</li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732538_watermark.png" alt="image-20220514160139926"></p><p><strong>结构2：双分支条件判断：if…else</strong></p><p><code>格式：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(条件表达式) &#123; <br>  语句块<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>  语句块<span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>执行流程：</code></p><ol><li>首先判断条件表达式看其结果是true还是false</li><li>如果是true就执行语句块1</li><li>如果是false就执行语句块2</li></ol><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732497_watermark.png" alt="image-20220514160243421"></p><p><strong>结构3：多分支条件判断：if…else if…else</strong></p><p><code>格式：</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">1</span>) &#123;<br>  语句块<span class="hljs-number">1</span>;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式<span class="hljs-number">2</span>) &#123;<br>  语句块<span class="hljs-number">2</span>;<br>&#125;<br>...<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (条件表达式n) &#123;<br> 语句块n;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  语句块n+<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>说明：</code>一旦条件表达式为true，则进入执行相应的语句块。执行完对应的语句块之后，就跳出当前结构。</p><p><code>执行流程：</code></p><ol><li>首先判断关系表达式1看其结果是true还是false</li><li>如果是true就执行语句块1，然后结束当前多分支</li><li>如果是false就继续判断关系表达式2看其结果是true还是false</li><li>如果是true就执行语句块2，然后结束当前多分支</li><li>如果是false就继续判断关系表达式…看其结果是true还是false</li></ol><p>​    …</p><p>   n.  如果没有任何关系表达式为true，就执行语句块n+1，然后结束当前多分支。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732574_watermark.png" alt="image-20220514160538651"></p><h4 id="2-1-2-应用举例"><a href="#2-1-2-应用举例" class="headerlink" title="2.1.2 应用举例"></a>2.1.2 应用举例</h4><p><strong>案例1：</strong>成年人心率的正常范围是每分钟60-100次。体检时，如果心率不在此范围内，则提示需要做进一步的检查。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">heartBeats</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br><br>        <span class="hljs-keyword">if</span>(heartBeats &lt; <span class="hljs-number">60</span> || heartBeats &gt; <span class="hljs-number">100</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;你需要做进一步的检查&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;体检结束&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>定义一个整数，判定是偶数还是奇数    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br>        <span class="hljs-keyword">if</span>(a % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            System.out.println(a + <span class="hljs-string">&quot;是偶数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span>&#123;<br>            System.out.println(a + <span class="hljs-string">&quot;是奇数&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">岳小鹏参加Java考试，他和父亲岳不群达成承诺：<br>如果：<br>成绩为<span class="hljs-number">100</span>分时，奖励一辆跑车；<br>成绩为(<span class="hljs-number">80</span>，<span class="hljs-number">99</span>]时，奖励一辆山地自行车；<br>当成绩为<span class="hljs-selector-attr">[60,80]</span>时，奖励环球影城一日游；<br>其它时，胖揍一顿。<br><br>说明：默认成绩是在<span class="hljs-selector-attr">[0,100]</span>范围内<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">67</span>;<span class="hljs-comment">//岳小鹏的期末成绩</span><br>        <span class="hljs-comment">//写法一：默认成绩范围为[0,100]</span><br>        <span class="hljs-keyword">if</span>(score == <span class="hljs-number">100</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励一辆跑车&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">80</span> &amp;&amp; score &lt;= <span class="hljs-number">99</span>)&#123;    <span class="hljs-comment">//错误的写法：&#125;else if(80 &lt; score &lt;= 99)&#123;</span><br>            System.out.println(<span class="hljs-string">&quot;奖励一辆山地自行车&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">60</span> &amp;&amp; score &lt;= <span class="hljs-number">80</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励环球影城玩一日游&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">//else&#123;</span><br>        <span class="hljs-comment">//System.out.println(&quot;胖揍一顿&quot;);</span><br>        <span class="hljs-comment">//&#125;</span><br><br><br>        <span class="hljs-comment">//写法二：</span><br>        <span class="hljs-comment">// 默认成绩范围为[0,100]</span><br>        <span class="hljs-keyword">if</span>(score == <span class="hljs-number">100</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励一辆跑车&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt; <span class="hljs-number">80</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励一辆山地自行车&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(score &gt;= <span class="hljs-number">60</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;奖励环球影城玩一日游&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;胖揍一顿&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732610_watermark.png" alt="image-20221027185234087"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221732592_watermark.png" alt="image-20221027185500389"></p><blockquote><p>当条件表达式之间是“<code>互斥</code>”关系时（即彼此没有交集），条件判断语句及执行语句间顺序无所谓。</p><p>当条件表达式之间是“<code>包含</code>”关系时，“<code>小上大下 / 子上父下</code>”，否则范围小的条件表达式将不可能被执行。</p></blockquote><h4 id="2-1-3-if…else嵌套"><a href="#2-1-3-if…else嵌套" class="headerlink" title="2.1.3 if…else嵌套"></a>2.1.3 if…else嵌套</h4><p>在 if 的语句块中，或者是在else语句块中，又包含了另外一个条件判断（可以是单分支、双分支、多分支），就构成了<code>嵌套结构</code>。</p><p><strong>执行的特点：</strong><br>（1）如果是嵌套在if语句块中的，只有当外部的if条件满足，才会去判断内部的条件<br>（2）如果是嵌套在else语句块中的，只有当外部的if条件不满足，进入else后，才会去判断内部的条件</p><p><strong>案例4：</strong>由键盘输入三个整数分别存入变量num1、num2、num3，对它们进行排序(使用 if-else if-else)，并且从小到大输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//声明num1,num2,num3三个变量并赋值</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>,num2 = <span class="hljs-number">32</span>,num3 = <span class="hljs-number">12</span>;<br><br><span class="hljs-keyword">if</span>(num1 &gt;= num2)&#123;<br><br><span class="hljs-keyword">if</span>(num3 &gt;= num1)<br>System.out.println(num2 + <span class="hljs-string">&quot;-&quot;</span> + num1 + <span class="hljs-string">&quot;-&quot;</span> + num3);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num3 &lt;= num2)<br>System.out.println(num3 + <span class="hljs-string">&quot;-&quot;</span> + num2 + <span class="hljs-string">&quot;-&quot;</span> + num1);<br><span class="hljs-keyword">else</span><br>System.out.println(num2 + <span class="hljs-string">&quot;-&quot;</span> + num3 + <span class="hljs-string">&quot;-&quot;</span> + num1);<br>&#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//num1 &lt; num2</span><br><br><span class="hljs-keyword">if</span>(num3 &gt;= num2)&#123;<br>System.out.println(num1 + <span class="hljs-string">&quot;-&quot;</span> + num2 + <span class="hljs-string">&quot;-&quot;</span> + num3);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num3 &lt;= num1)&#123;<br>System.out.println(num3 + <span class="hljs-string">&quot;-&quot;</span> + num1 + <span class="hljs-string">&quot;-&quot;</span> + num2);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(num1 + <span class="hljs-string">&quot;-&quot;</span> + num3 + <span class="hljs-string">&quot;-&quot;</span> + num2);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-1-4-其它说明"><a href="#2-1-4-其它说明" class="headerlink" title="2.1.4 其它说明"></a>2.1.4 其它说明</h4><ul><li>语句块只有一条执行语句时，一对<code>&#123;&#125;可以省略</code>，但建议保留</li><li>当if-else结构是“多选一”时，最后的<code>else是可选的</code>，根据需要可以省略</li></ul><h4 id="2-1-5-练习"><a href="#2-1-5-练习" class="headerlink" title="2.1.5 练习"></a>2.1.5 练习</h4><p><strong>练习1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1)对下列代码，若有输出，指出输出结果。</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">2</span>) &#123;<br>       <span class="hljs-keyword">if</span> (y &gt; <span class="hljs-number">2</span>) <br>            System.out.println(x + y);<br>       System.out.println(<span class="hljs-string">&quot;atguigu&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span><br>       System.out.println(<span class="hljs-string">&quot;x is &quot;</span> + x);<br><br><br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//如果写成if(b=false)能编译通过吗？如果能，结果是？</span><br><span class="hljs-keyword">if</span>(b == <span class="hljs-literal">false</span>)  <span class="hljs-comment">//建议：if(!b)</span><br>System.out.println(<span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b)<br>System.out.println(<span class="hljs-string">&quot;b&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(!b)<br>System.out.println(<span class="hljs-string">&quot;c&quot;</span>);<br><span class="hljs-keyword">else</span><br>System.out.println(<span class="hljs-string">&quot;d&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>练习3：</strong></p><p>定义两个整数，分别为small 和 big，如果第一个整数small大于第二个整数big，就交换。输出显示small和big变量的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">small</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">big</span> <span class="hljs-operator">=</span> <span class="hljs-number">9</span>;<br><br>        <span class="hljs-keyword">if</span> (small &gt; big) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> small;<br>            small = big;<br>            big = temp;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;small=&quot;</span> + small + <span class="hljs-string">&quot;,big=&quot;</span> + big);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习4：</strong>小明参加期末Java考试，通过考试成绩，判断其Java等级，成绩范围[0,100]</p><ul><li>90-100      优秀</li><li>80-89        好</li><li>70-79        良</li><li>60-69        及格</li><li>60以下    不及格</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-comment">//写法一：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;小明的期末Java成绩是：[0,100]&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br><br>        <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">0</span> || score &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩是错误的&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">90</span> &amp;&amp; score &lt;= <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于优秀&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">80</span> &amp;&amp; score &lt; <span class="hljs-number">90</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于好&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">70</span> &amp;&amp; score &lt; <span class="hljs-number">80</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于良&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span> &amp;&amp; score &lt; <span class="hljs-number">70</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于及格&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于不及格&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-comment">//写法二：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.print(<span class="hljs-string">&quot;小明的期末Java成绩是：[0,100]&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br><br>        <span class="hljs-keyword">if</span> (score &lt; <span class="hljs-number">0</span> || score &gt; <span class="hljs-number">100</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩是错误的&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">90</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于优秀&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">80</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于好&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">70</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于良&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (score &gt;= <span class="hljs-number">60</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于及格&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(<span class="hljs-string">&quot;你的成绩属于不及格&quot;</span>);<br>        &#125;<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>练习5：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">编写程序，声明<span class="hljs-number">2</span>个<span class="hljs-built_in">int</span>型变量并赋值。判断两数之和，如果大于等于<span class="hljs-number">50</span>，打印“hello world!”<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer5</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>, num2 = <span class="hljs-number">32</span>;<br>        <br>        <span class="hljs-keyword">if</span> (num1 + num2 &gt;= <span class="hljs-number">50</span>) &#123;<br>            System.out.println(<span class="hljs-string">&quot;hello world!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习6：</strong></p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">编写程序，声明<span class="hljs-number">2</span>个<span class="hljs-built_in">double</span>型变量并赋值。判断第一个数大于<span class="hljs-number">10.0</span>，且第<span class="hljs-number">2</span>个数小于<span class="hljs-number">20.0</span>，打印两数之和。否则，打印两数的乘积。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer6</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-number">21.2</span>,d2 = <span class="hljs-number">12.3</span>;<br>        <br>        <span class="hljs-keyword">if</span>(d1 &gt; <span class="hljs-number">10.0</span> &amp;&amp; d2 &lt; <span class="hljs-number">20.0</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;两数之和为：&quot;</span> + (d1 + d2));<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;两数乘积为：&quot;</span> + (d1 * d2));<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习7：判断水的温度</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs">如果大于95℃，则打印“开水”；<br><br>如果大于70℃且小于等于95℃，则打印“热水”；<br><br>如果大于40℃且小于等于70℃，则打印“温水”；<br><br>如果小于等于40℃，则打印“凉水”。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfElseExer7</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">waterTemperature</span> <span class="hljs-operator">=</span> <span class="hljs-number">85</span>;<br>        <br>        <span class="hljs-keyword">if</span>(waterTemperature &gt; <span class="hljs-number">95</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;开水&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(waterTemperature &gt; <span class="hljs-number">70</span> &amp;&amp; waterTemperature &lt;= <span class="hljs-number">95</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;热水&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(waterTemperature &gt; <span class="hljs-number">40</span> &amp;&amp; waterTemperature &lt;= <span class="hljs-number">70</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;温水&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;凉水&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-switch-case选择结构"><a href="#2-2-switch-case选择结构" class="headerlink" title="2.2 switch-case选择结构"></a>2.2 switch-case选择结构</h3><h4 id="2-2-1-基本语法"><a href="#2-2-1-基本语法" class="headerlink" title="2.2.1 基本语法"></a>2.2.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>    <span class="hljs-keyword">case</span> 常量值<span class="hljs-number">1</span>:<br>        语句块<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//break;</span><br>    <span class="hljs-keyword">case</span> 常量值<span class="hljs-number">2</span>:<br>        语句块<span class="hljs-number">2</span>;<br>        <span class="hljs-comment">//break; </span><br>    <span class="hljs-comment">// ...</span><br>   [<span class="hljs-keyword">default</span>:<br>        语句块n+<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">break</span>;<br>   ]<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行流程图：</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221905701_watermark.png" alt="image-20240222190313948"></p><p><strong>执行过程：</strong></p><p>第1步：根据switch中表达式的值，依次匹配各个case。如果表达式的值等于某个case中的常量值，则执行对应case中的执行语句。</p><p>第2步：执行完此case的执行语句以后，<br>​              情况1：如果遇到break,则执行break并跳出当前的switch-case结构<br>​        情况2：如果没有遇到break，则会继续执行当前case之后的其它case中的执行语句。—&gt;case穿透<br>​         …<br>​        直到遇到break关键字或执行完所有的case及default的执行语句，跳出当前的switch-case结构</p><p><strong>使用注意点：</strong></p><ul><li><p>switch(表达式)中表达式的值必须是下述几种类型之一：byte，short，char，int，枚举 (jdk 5.0)，String (jdk 7.0)；</p></li><li><p>case子句中的值必须是常量，不能是变量名或不确定的表达式值或范围；</p></li><li><p>同一个switch语句，所有case子句中的常量值互不相同；</p></li><li><p>break语句用来在执行完一个case分支后使程序跳出switch语句块；</p><p>如果没有break，程序会顺序执行到switch结尾；</p></li><li><p>default子句是可选的。同时，位置也是灵活的。当没有匹配的case时，执行default语句。</p></li></ul><h4 id="2-2-2-应用举例"><a href="#2-2-2-应用举例" class="headerlink" title="2.2.2 应用举例"></a>2.2.2 应用举例</h4><p><strong>案例1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">switch</span>(num)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>System.out.println(<span class="hljs-string">&quot;zero&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>System.out.println(<span class="hljs-string">&quot;one&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>System.out.println(<span class="hljs-string">&quot;two&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>System.out.println(<span class="hljs-string">&quot;three&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;other&quot;</span>);<br><span class="hljs-comment">//break;</span><br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String args[])</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">season</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;summer&quot;</span>;<br>        <span class="hljs-keyword">switch</span> (season) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;spring&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;春暖花开&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;summer&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;夏日炎炎&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;autumn&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;秋高气爽&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;winter&quot;</span>:<br>                System.out.println(<span class="hljs-string">&quot;冬雪皑皑&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;季节输入有误&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>错误举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">switch</span>(key)&#123;<br><span class="hljs-keyword">case</span> key &gt; <span class="hljs-number">0</span> :<br>        System.out.println(<span class="hljs-string">&quot;正数&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> key &lt; <span class="hljs-number">0</span>:<br>        System.out.println(<span class="hljs-string">&quot;负数&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;零&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>使用switch-case实现：对学生成绩大于60分的，输出“合格”。低于60分的，输出“不合格”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> <span class="hljs-number">67</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">写法1：极不推荐</span><br><span class="hljs-comment">switch(score)&#123;</span><br><span class="hljs-comment">case 0:</span><br><span class="hljs-comment">System.out.println(&quot;不及格&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 1:</span><br><span class="hljs-comment">System.out.println(&quot;不及格&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">//...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">case 60:</span><br><span class="hljs-comment">System.out.println(&quot;及格&quot;);</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">//...略...</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//写法2：</span><br><span class="hljs-keyword">switch</span>(score / <span class="hljs-number">10</span>)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;输入的成绩有误&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br><span class="hljs-comment">//写法3：</span><br><span class="hljs-keyword">switch</span>(score / <span class="hljs-number">60</span>)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>System.out.println(<span class="hljs-string">&quot;不及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>System.out.println(<span class="hljs-string">&quot;及格&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;输入的成绩有误&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-3-利用case的穿透性"><a href="#2-2-3-利用case的穿透性" class="headerlink" title="2.2.3 利用case的穿透性"></a>2.2.3 利用case的穿透性</h4><p>在switch语句中，如果case的后面不写break，将出现穿透现象，也就是一旦匹配成功，不会在判断下一个case的值，直接向后运行，直到遇到break或者整个switch语句结束，执行终止。</p><p><strong>案例4：</strong>编写程序：从键盘上输入2023年的“month”和“day”，要求通过程序输出输入的日期为2023年的第几天。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>System.out.println(<span class="hljs-string">&quot;请输入2023年的month:&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>System.out.println(<span class="hljs-string">&quot;请输入2023年的day:&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br><span class="hljs-comment">//这里就不针对month和day进行合法性的判断了，以后可以使用正则表达式进行校验。</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">sumDays</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录总天数</span><br><br><span class="hljs-comment">//写法1 ：不推荐（存在冗余的数据）</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">switch(month)&#123;</span><br><span class="hljs-comment">case 1:</span><br><span class="hljs-comment">sumDays = day;</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 2:</span><br><span class="hljs-comment">sumDays = 31 + day;</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">case 3:</span><br><span class="hljs-comment">sumDays = 31 + 28 + day;</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">//....</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">case 12:</span><br><span class="hljs-comment">//sumDays = 31 + 28 + ... + 30 + day;</span><br><span class="hljs-comment">break;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//写法2：推荐</span><br><span class="hljs-keyword">switch</span>(month)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表11月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表10月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表9月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表8月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表7月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表6月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表5月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表4月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表3月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>sumDays += <span class="hljs-number">28</span>;<span class="hljs-comment">//这个28是代表2月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表1月份的满月天数</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>sumDays += day;<span class="hljs-comment">//这个day是代表当月的第几天</span><br>&#125;<br><br>System.out.println(month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日是2023年的第&quot;</span> + sumDays + <span class="hljs-string">&quot;天&quot;</span>);<br>        <span class="hljs-comment">//关闭资源</span><br>scan.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>拓展：</strong></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dns">从键盘分别输入年、月、日，判断这一天是当年的第几天<br> <br>注：判断一年是否是闰年的标准：<br>   <span class="hljs-number">1</span>）可以被<span class="hljs-number">4</span>整除，但不可被<span class="hljs-number">100</span>整除<br>  或<br>   <span class="hljs-number">2</span>）可以被<span class="hljs-number">400</span>整除<br>   <br>例如：<span class="hljs-number">1900，2200</span>等能被<span class="hljs-number">4</span>整除，但同时能被<span class="hljs-number">100</span>整除，但不能被<span class="hljs-number">400</span>整除，不是闰年<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest04</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入year:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入month:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入day:&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        <span class="hljs-comment">//判断这一天是当年的第几天==&gt;从1月1日开始，累加到xx月xx日这一天</span><br>        <span class="hljs-comment">//(1)[1,month-1]个月满月天数</span><br>        <span class="hljs-comment">//(2)单独考虑2月份是否是29天（依据是看year是否是闰年）</span><br>        <span class="hljs-comment">//(3)第month个月的day天</span><br><br>        <span class="hljs-comment">//声明一个变量days，用来存储总天数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sumDays</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//累加[1,month-1]个月满月天数</span><br>        <span class="hljs-keyword">switch</span> (month) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                <span class="hljs-comment">//累加的1-11月</span><br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//这个30是代表11月份的满月天数</span><br>                <span class="hljs-comment">//这里没有break，继续往下走</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                <span class="hljs-comment">//累加的1-10月</span><br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//这个31是代表10月的满月天数</span><br>                <span class="hljs-comment">//这里没有break，继续往下走</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//9月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//8月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//7月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//6月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//5月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                sumDays += <span class="hljs-number">30</span>;<span class="hljs-comment">//4月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//3月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                sumDays += <span class="hljs-number">28</span>;<span class="hljs-comment">//2月</span><br>                <span class="hljs-comment">//在这里考虑是否可能是29天</span><br>                <span class="hljs-keyword">if</span> (year % <span class="hljs-number">4</span> == <span class="hljs-number">0</span> &amp;&amp; year % <span class="hljs-number">100</span> != <span class="hljs-number">0</span> || year % <span class="hljs-number">400</span> == <span class="hljs-number">0</span>) &#123;<br>                    sumDays++;<span class="hljs-comment">//多加1天</span><br>                &#125;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                sumDays += <span class="hljs-number">31</span>;<span class="hljs-comment">//1月</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                sumDays += day;<span class="hljs-comment">//第month月的day天</span><br>        &#125;<br><br>        <span class="hljs-comment">//输出结果</span><br>        System.out.println(year + <span class="hljs-string">&quot;年&quot;</span> + month + <span class="hljs-string">&quot;月&quot;</span> + day + <span class="hljs-string">&quot;日是这一年的第&quot;</span> + sumDays + <span class="hljs-string">&quot;天&quot;</span>);<br><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例5：</strong>根据指定的月份输出对应季节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 需求：指定一个月份，输出该月份对应的季节。一年有四季:</span><br><span class="hljs-comment"> * 3,4,5春季</span><br><span class="hljs-comment"> * 6,7,8夏季</span><br><span class="hljs-comment"> * 9,10,11秋季</span><br><span class="hljs-comment"> * 12,1,2冬季</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入月份：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> input.nextInt();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">switch(month) &#123;</span><br><span class="hljs-comment">            case 1:</span><br><span class="hljs-comment">                System.out.println(&quot;冬季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 2:</span><br><span class="hljs-comment">                System.out.println(&quot;冬季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 3:</span><br><span class="hljs-comment">                System.out.println(&quot;春季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 4:</span><br><span class="hljs-comment">                System.out.println(&quot;春季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 5:</span><br><span class="hljs-comment">                System.out.println(&quot;春季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 6:</span><br><span class="hljs-comment">                System.out.println(&quot;夏季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 7:</span><br><span class="hljs-comment">                System.out.println(&quot;夏季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 8:</span><br><span class="hljs-comment">                System.out.println(&quot;夏季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 9:</span><br><span class="hljs-comment">                System.out.println(&quot;秋季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 10:</span><br><span class="hljs-comment">                System.out.println(&quot;秋季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 11:</span><br><span class="hljs-comment">                System.out.println(&quot;秋季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            case 12:</span><br><span class="hljs-comment">                System.out.println(&quot;冬季&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">            default:</span><br><span class="hljs-comment">                System.out.println(&quot;你输入的月份有误&quot;);</span><br><span class="hljs-comment">                break;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br>        <span class="hljs-comment">// 改进版</span><br>        <span class="hljs-keyword">switch</span>(month) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br>                System.out.println(<span class="hljs-string">&quot;冬季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(<span class="hljs-string">&quot;春季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                System.out.println(<span class="hljs-string">&quot;夏季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                System.out.println(<span class="hljs-string">&quot;秋季&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;你输入的月份有误&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        input.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>常见错误实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(month)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>|<span class="hljs-number">4</span>|<span class="hljs-number">5</span>:<span class="hljs-comment">//3|4|5 用了位运算符，11 | 100 | 101结果是 111是7</span><br>        System.out.println(<span class="hljs-string">&quot;春季&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>|<span class="hljs-number">7</span>|<span class="hljs-number">8</span>:<span class="hljs-comment">//6|7|8用了位运算符，110 | 111 | 1000结果是1111是15</span><br>        System.out.println(<span class="hljs-string">&quot;夏季&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>|<span class="hljs-number">10</span>|<span class="hljs-number">11</span>:<span class="hljs-comment">//9|10|11用了位运算符，1001 | 1010 | 1011结果是1011是11</span><br>        System.out.println(<span class="hljs-string">&quot;秋季&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">12</span>|<span class="hljs-number">1</span>|<span class="hljs-number">2</span>:<span class="hljs-comment">//12|1|2 用了位运算符，1100 | 1 | 10 结果是1111，是15</span><br>        System.out.println(<span class="hljs-string">&quot;冬季&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        System.out.println(<span class="hljs-string">&quot;输入有误&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>使用if-else实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((month == <span class="hljs-number">1</span>) || (month == <span class="hljs-number">2</span>) || (month == <span class="hljs-number">12</span>)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;冬季&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((month == <span class="hljs-number">3</span>) || (month == <span class="hljs-number">4</span>) || (month == <span class="hljs-number">5</span>)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;春季&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((month == <span class="hljs-number">6</span>) || (month == <span class="hljs-number">7</span>) || (month == <span class="hljs-number">8</span>)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;夏季&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((month == <span class="hljs-number">9</span>) || (month == <span class="hljs-number">10</span>) || (month == <span class="hljs-number">11</span>)) &#123;<br>    System.out.println(<span class="hljs-string">&quot;秋季&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;你输入的月份有误&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-4-if-else语句与switch-case语句比较"><a href="#2-2-4-if-else语句与switch-case语句比较" class="headerlink" title="2.2.4 if-else语句与switch-case语句比较"></a>2.2.4 if-else语句与switch-case语句比较</h4><ul><li><p>结论：凡是使用switch-case的结构都可以转换为if-else结构。反之，不成立。</p></li><li><p>开发经验：如果既可以使用switch-case，又可以使用if-else，建议使用switch-case。因为效率稍高。</p></li><li><p>细节对比：</p><ul><li>if-else语句优势<ul><li>if语句的条件是一个布尔类型值，if条件表达式为true则进入分支，可以用于范围的判断，也可以用于等值的判断，<code>使用范围更广</code>。</li><li>switch语句的条件是一个常量值（byte,short,int,char,枚举,String），只能判断某个变量或表达式的结果是否等于某个常量值，<code>使用场景较狭窄</code>。</li></ul></li><li>switch语句优势<ul><li>当条件是判断某个变量或表达式是否等于某个固定的常量值时，使用if和switch都可以，习惯上使用switch更多。因为<code>效率稍高</code>。当条件是区间范围的判断时，只能使用if语句。</li><li>使用switch可以利用<code>穿透性</code>，同时执行多个分支，而if…else没有穿透性。</li></ul></li></ul></li><li><p><strong>案例：只能使用 if-else</strong></p><p>从键盘输入一个整数，判断是正数、负数、还是零。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IfOrSwitchDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        System.out.print(<span class="hljs-string">&quot;请输入整数：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> input.nextInt();<br><br>        <span class="hljs-keyword">if</span> (num &gt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(num + <span class="hljs-string">&quot;是正整数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (num &lt; <span class="hljs-number">0</span>) &#123;<br>            System.out.println(num + <span class="hljs-string">&quot;是负整数&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.out.println(num + <span class="hljs-string">&quot;是零&quot;</span>);<br>        &#125;<br><br>        input.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-2-5-练习"><a href="#2-2-5-练习" class="headerlink" title="2.2.5 练习"></a>2.2.5 练习</h4><p><strong>练习1：</strong>从键盘输入星期的整数值，输出星期的英文单词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义指定的星期</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入星期值：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">weekday</span> <span class="hljs-operator">=</span> input.nextInt();<br><br>        <span class="hljs-comment">//switch语句实现选择</span><br>        <span class="hljs-keyword">switch</span>(weekday) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(<span class="hljs-string">&quot;Monday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(<span class="hljs-string">&quot;Tuesday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(<span class="hljs-string">&quot;Wednesday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                System.out.println(<span class="hljs-string">&quot;Thursday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(<span class="hljs-string">&quot;Friday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                System.out.println(<span class="hljs-string">&quot;Saturday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                System.out.println(<span class="hljs-string">&quot;Sunday&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(<span class="hljs-string">&quot;你输入的星期值有误！&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br><br>        input.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">使用 <span class="hljs-keyword">switch</span> 把小写类型的 <span class="hljs-type">char</span>型转为大写。只转换 a, b, c, d, e. 其它的输出 “other”。<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">char</span> <span class="hljs-variable">word</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c&#x27;</span>;<br>        <span class="hljs-keyword">switch</span> (word) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;A&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;b&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;B&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;c&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;C&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;D&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;e&#x27;</span>:<br>                System.out.println(<span class="hljs-string">&quot;E&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span> :<br>                System.out.println(<span class="hljs-string">&quot;other&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习3：</strong></p><figure class="highlight gml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gml">编写程序：从键盘上读入一个学生成绩，存放在变量<span class="hljs-variable language_">score</span>中，根据<span class="hljs-variable language_">score</span>的值输出其对应的成绩等级：<br><br><span class="hljs-variable language_">score</span>&gt;=<span class="hljs-number">90</span>           等级:  A<br><span class="hljs-number">70</span>&lt;=<span class="hljs-variable language_">score</span>&lt;<span class="hljs-number">90</span>        等级:  B    <br><span class="hljs-number">60</span>&lt;=<span class="hljs-variable language_">score</span>&lt;<span class="hljs-number">70</span>        等级:  C<br><span class="hljs-variable language_">score</span>&lt;<span class="hljs-number">60</span>            等级:  D<br><br>方式一：使用<span class="hljs-keyword">if</span>-<span class="hljs-keyword">else</span><br>方式二：使用<span class="hljs-keyword">switch</span>-<span class="hljs-keyword">case</span>:  <span class="hljs-variable language_">score</span> / <span class="hljs-number">10</span>:   <span class="hljs-number">0</span> - <span class="hljs-number">10</span><br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入学生成绩：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">score</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>        <span class="hljs-type">char</span> grade;<span class="hljs-comment">//记录学生等级</span><br>        <span class="hljs-comment">//方式1：</span><br><span class="hljs-comment">//        if(score &gt;= 90)&#123;</span><br><span class="hljs-comment">//            grade = &#x27;A&#x27;;</span><br><span class="hljs-comment">//        &#125;else if(score &gt;= 70 &amp;&amp; score &lt; 90)&#123;</span><br><span class="hljs-comment">//            grade = &#x27;B&#x27;;</span><br><span class="hljs-comment">//        &#125;else if(score &gt;= 60 &amp;&amp; score &lt; 70)&#123;</span><br><span class="hljs-comment">//            grade = &#x27;C&#x27;;</span><br><span class="hljs-comment">//        &#125;else&#123;</span><br><span class="hljs-comment">//            grade = &#x27;D&#x27;;</span><br><span class="hljs-comment">//        &#125;</span><br><br>        <span class="hljs-comment">//方式2：</span><br>        <span class="hljs-keyword">switch</span>(score / <span class="hljs-number">10</span>)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                grade = <span class="hljs-string">&#x27;A&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                grade = <span class="hljs-string">&#x27;B&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                grade = <span class="hljs-string">&#x27;C&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span> :<br>                grade = <span class="hljs-string">&#x27;D&#x27;</span>;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;学生成绩为&quot;</span> + score + <span class="hljs-string">&quot;,对应的等级为&quot;</span> + grade);<br><br>        scan.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习4：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">编写一个程序，为一个给定的年份找出其对应的中国生肖。中国的生肖基于12年一个周期，每年用一个动物代表：rat、ox、tiger、rabbit、dragon、snake、horse、sheep、monkey、rooster、dog、pig。<br><br>提示：2022年：虎  <span class="hljs-number"> 2022 </span>%<span class="hljs-number"> 12 </span>==<span class="hljs-number"> 6 </span><br><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904482_watermark.png" alt="image-20220314005350344"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 18:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">//从键盘输入一个年份</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请输入年份：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> input.nextInt();<br>        input.close();<br><br>        <span class="hljs-comment">//判断</span><br>        <span class="hljs-keyword">switch</span>(year % <span class="hljs-number">12</span>)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是猴年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是鸡年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是狗年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是猪年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是鼠年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是牛年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是虎年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是兔年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是龙年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是蛇年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是马年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;是羊年&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                System.out.println(year + <span class="hljs-string">&quot;输入错误&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习5：押宝游戏</strong></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">随机产生<span class="hljs-number">3</span>个<span class="hljs-number">1</span><span class="hljs-number">-6</span>的整数，如果三个数相等，那么称为“豹子”，如果三个数之和大于<span class="hljs-number">9</span>，称为“大”，如果三个数之和小于等于<span class="hljs-number">9</span>，称为“小”，用户从键盘输入押的是“豹子”、“大”、“小”，并判断是否猜对了<br><br>提示：随机数  Math.<span class="hljs-built_in">random</span>()产生 [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)范围内的小数<br>     如何获取[<span class="hljs-keyword">a</span>,b]范围内的随机整数呢？(int)(Math.<span class="hljs-built_in">random</span>() * (b - <span class="hljs-keyword">a</span> + <span class="hljs-number">1</span>)) + <span class="hljs-keyword">a</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904463_watermark.png" alt="1659112038716"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SwitchCaseExer5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//1、随机产生3个1-6的整数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">6</span> + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">6</span> + <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()*<span class="hljs-number">6</span> + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-comment">//2、押宝</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.print(<span class="hljs-string">&quot;请押宝（豹子、大、小）：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ya</span> <span class="hljs-operator">=</span> input.next();<br>        input.close();<br><br>        <span class="hljs-comment">//3、判断结果</span><br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//switch支持String类型</span><br>        <span class="hljs-keyword">switch</span> (ya)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;豹子&quot;</span>: result = a == b &amp;&amp; b == c; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;大&quot;</span>: result = a + b + c &gt; <span class="hljs-number">9</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;小&quot;</span>: result = a + b + c &lt;= <span class="hljs-number">9</span>; <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:System.out.println(<span class="hljs-string">&quot;输入有误！&quot;</span>);<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;a,b,c分别是：&quot;</span> + a +<span class="hljs-string">&quot;,&quot;</span> + b +<span class="hljs-string">&quot;,&quot;</span> + c );<br>        System.out.println(result ? <span class="hljs-string">&quot;猜中了&quot;</span> : <span class="hljs-string">&quot;猜错了&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习6：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java">使用<span class="hljs-keyword">switch</span>语句改写下列<span class="hljs-keyword">if</span>语句：<br><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-keyword">if</span>(a==<span class="hljs-number">1</span>)<br>x+=<span class="hljs-number">5</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a==<span class="hljs-number">2</span>)<br>x+=<span class="hljs-number">10</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a==<span class="hljs-number">3</span>)<br>x+=<span class="hljs-number">16</span>;<br><span class="hljs-keyword">else</span><br>x+=<span class="hljs-number">34</span>;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">switch</span>(a)&#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        x += <span class="hljs-number">5</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        x += <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        x += <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span> :<br>        x += <span class="hljs-number">34</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-循环语句"><a href="#3-循环语句" class="headerlink" title="3. 循环语句"></a>3. 循环语句</h2><ul><li><p>理解：循环语句具有在<code>某些条件</code>满足的情况下，<code>反复执行</code>特定代码的功能。</p></li><li><p>循环结构分类：</p><ul><li>for 循环</li><li>while 循环</li><li>do-while 循环</li></ul></li><li><p>循环结构<code>四要素</code>：</p><ul><li>初始化部分</li><li>循环条件部分</li><li>循环体部分</li><li>迭代部分</li></ul></li></ul><h3 id="3-1-for循环"><a href="#3-1-for循环" class="headerlink" title="3.1  for循环"></a>3.1  for循环</h3><h4 id="3-1-1-基本语法"><a href="#3-1-1-基本语法" class="headerlink" title="3.1.1 基本语法"></a>3.1.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (①初始化部分; ②循环条件部分; ④迭代部分)｛<br>         ③循环体部分;<br>｝<br></code></pre></td></tr></table></figure><p><strong>执行过程：</strong>①-②-③-④-②-③-④-②-③-④-…..-②</p><p><strong>图示：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904532_watermark.png" alt="image-20220315013023236" style="zoom:80%;" /><p><strong>说明：</strong></p><ul><li>for(;;)中的两个；不能多也不能少</li><li>①初始化部分可以声明多个变量，但必须是同一个类型，用逗号分隔</li><li>②循环条件部分为boolean类型表达式，当值为false时，退出循环</li><li>④可以有多个变量更新，用逗号分隔</li></ul><h4 id="3-1-2-应用举例"><a href="#3-1-2-应用举例" class="headerlink" title="3.1.2 应用举例"></a>3.1.2 应用举例</h4><p><strong>案例1：使用for循环重复执行某些语句</strong></p><p>题目：输出5行HelloWorld</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//需求1：控制台输出5行Hello World!</span><br><span class="hljs-comment">//写法1：</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><span class="hljs-comment">//System.out.println(&quot;Hello World!&quot;);</span><br><br><span class="hljs-comment">//写法2：</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br>System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：格式的多样性</strong></p><p>题目：写出输出的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span>(System.out.print(<span class="hljs-string">&quot;a&quot;</span>);num &lt; <span class="hljs-number">3</span>;System.out.print(<span class="hljs-string">&quot;c&quot;</span>),num++)&#123;<br>            System.out.print(<span class="hljs-string">&quot;b&quot;</span>);<br><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：累加的思想</strong></p><p>题目：遍历1-100以内的偶数，并获取偶数的个数，获取所有的偶数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录偶数的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录偶数的和</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">100</span>;i++)&#123;<br><br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.println(i);<br>                count++;<br>                sum += i;<br>            &#125;<br><br>            <span class="hljs-comment">//System.out.println(&quot;偶数的个数为：&quot; + count);</span><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;偶数的个数为：&quot;</span> + count);<br>        System.out.println(<span class="hljs-string">&quot;偶数的总和为：&quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例4：结合分支结构使用</strong></p><p>题目：输出所有的水仙花数，所谓水仙花数是指一个3位数，其各个位上数字立方和等于其本身。例如： <code>153 = 1*1*1 + 3*3*3 + 5*5*5</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//定义统计变量，初始化值是0</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-comment">//获取三位数，用for循环实现</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>; x &lt; <span class="hljs-number">1000</span>; x++) &#123;<br><span class="hljs-comment">//获取三位数的个位，十位，百位</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> x % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> x / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> x / <span class="hljs-number">100</span>;<br><br><span class="hljs-comment">//判断这个三位数是否是水仙花数，如果是，统计变量++</span><br><span class="hljs-keyword">if</span>((ge*ge*ge+shi*shi*shi+bai*bai*bai) == x) &#123;<br>                System.out.println(<span class="hljs-string">&quot;水仙花数：&quot;</span> + x);<br>count++;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//输出统计结果就可以了</span><br>System.out.println(<span class="hljs-string">&quot;水仙花数共有&quot;</span>+count+<span class="hljs-string">&quot;个&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拓展：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">打印出四位数字中“个位+百位”等于“十位+千位”并且个位数为偶数，千位数为奇数的数字，并打印符合条件的数字的个数。<br></code></pre></td></tr></table></figure><p><strong>案例5：结合break的使用</strong></p><p>说明：输入两个正整数m和n，求其最大公约数和最小公倍数。</p><p>比如：12和20的最大公约数是4，最小公倍数是60。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 17:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//需求1：最大公约数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>, n = <span class="hljs-number">20</span>;<br>        <span class="hljs-comment">//取出两个数中的较小值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> (m &lt; n) ? m : n;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> min; i &gt;= <span class="hljs-number">1</span>; i--) &#123;<span class="hljs-comment">//for(int i = 1;i &lt;= min;i++)&#123;</span><br><br>            <span class="hljs-keyword">if</span> (m % i == <span class="hljs-number">0</span> &amp;&amp; n % i == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;最大公约数是：&quot;</span> + i); <span class="hljs-comment">//公约数</span><br><br>                <span class="hljs-keyword">break</span>; <span class="hljs-comment">//跳出当前循环结构</span><br>            &#125;<br>        &#125;<br><br><br>        <span class="hljs-comment">//需求2：最小公倍数</span><br>        <span class="hljs-comment">//取出两个数中的较大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> (m &gt; n) ? m : n;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> max; i &lt;= m * n; i++) &#123;<br><br>            <span class="hljs-keyword">if</span> (i % m == <span class="hljs-number">0</span> &amp;&amp; i % n == <span class="hljs-number">0</span>) &#123;<br><br>                System.out.println(<span class="hljs-string">&quot;最小公倍数是：&quot;</span> + i);<span class="hljs-comment">//公倍数</span><br><br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>说明：</p><p>1、我们可以在循环中使用break。一旦执行break，就跳出当前循环结构。</p><p>2、小结：如何结束一个循环结构？</p><p>​      结束情况1：循环结构中的循环条件部分返回false</p><p>​      结束情况2：循环结构中执行了break。</p><p>3、如果一个循环结构不能结束，那就是一个死循环！我们开发中要避免出现死循环。</p></blockquote><h4 id="3-1-3-练习"><a href="#3-1-3-练习" class="headerlink" title="3.1.3 练习"></a>3.1.3 练习</h4><p><strong>练习1：</strong>打印1~100之间所有奇数的和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForExer1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录奇数的和</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">2</span> != <span class="hljs-number">0</span>)&#123;<br>                sum += i;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;奇数总和为：&quot;</span> + sum);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2：</strong>打印1~100之间所有是7的倍数的整数的个数及总和（体会设置计数器的思想）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForExer2</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录总和</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录个数</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>)&#123;<br>                sum += i;<br>                count++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;1~100之间所有是7的倍数的整数的和为：&quot;</span> + sum);<br>        System.out.println(<span class="hljs-string">&quot;1~100之间所有是7的倍数的整数的个数为：&quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习3：</strong></p><p>编写程序从1循环到150，并在每行打印一个值，另外在每个3的倍数行上打印出“foo”,在每个5的倍数行上打印“biz”,在每个7的倍数行上打印输出“baz”。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904553_watermark.png" alt="image-20220315013722962" style="zoom:67%;" /><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForExer3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">150</span>; i++) &#123;<br>            System.out.print(i + <span class="hljs-string">&quot;\t&quot;</span>);<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.print(<span class="hljs-string">&quot;foo\t&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">5</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.print(<span class="hljs-string">&quot;biz\t&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">if</span>(i % <span class="hljs-number">7</span> == <span class="hljs-number">0</span>)&#123;<br>                System.out.print(<span class="hljs-string">&quot;baz\t&quot;</span>);<br>            &#125;<br><br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-2-while循环"><a href="#3-2-while循环" class="headerlink" title="3.2 while循环"></a>3.2 while循环</h3><h4 id="3-2-1-基本语法"><a href="#3-2-1-基本语法" class="headerlink" title="3.2.1 基本语法"></a>3.2.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">①初始化部分<br><span class="hljs-keyword">while</span>(②循环条件部分)｛<br>    ③循环体部分;<br>    ④迭代部分;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>执行过程：</strong>①-②-③-④-②-③-④-②-③-④-…-②</p><p><strong>图示：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221904532_watermark.png" alt="image-20220315013023236" style="zoom:80%;" /><p><strong>说明：</strong></p><ul><li>while(循环条件)中循环条件必须是boolean类型。</li><li>注意不要忘记声明④迭代部分。否则，循环将不能结束，变成死循环。</li><li>for循环和while循环可以相互转换。二者没有性能上的差别。实际开发中，根据具体结构的情况，选择哪个格式更合适、美观。</li><li>for循环与while循环的区别：初始化条件部分的作用域不同。</li></ul><h4 id="3-2-2-应用举例"><a href="#3-2-2-应用举例" class="headerlink" title="3.2.2 应用举例"></a>3.2.2 应用举例</h4><p><strong>案例1：</strong>输出5行HelloWorld!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WhileTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i &lt;= <span class="hljs-number">5</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>);<br>i++;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WhileTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录1-100所有的偶数的和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录1-100之间偶数的个数</span><br><br><span class="hljs-keyword">while</span>(num &lt;= <span class="hljs-number">100</span>)&#123;<br><br><span class="hljs-keyword">if</span>(num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>System.out.println(num);<br>sum += num;<br>count++;<br>&#125;<br><br><span class="hljs-comment">//迭代条件</span><br>num++;<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;偶数的总和为：&quot;</span> + sum);<br>System.out.println(<span class="hljs-string">&quot;偶数的个数为：&quot;</span> + count);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>猜数字游戏</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css">随机生成一个<span class="hljs-number">100</span>以内的数，猜这个随机数是多少？<br><br>从键盘输入数，如果大了，提示大了；如果小了，提示小了；如果对了，就不再猜了，并统计一共猜了多少次。<br><br>提示：生成一个<span class="hljs-selector-attr">[a,b]</span> 范围的随机数的方式：(int)(Math<span class="hljs-selector-class">.random</span>() * (<span class="hljs-selector-tag">b</span> - <span class="hljs-selector-tag">a</span> + <span class="hljs-number">1</span>) + <span class="hljs-selector-tag">a</span>)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 16:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GuessNumber</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//获取一个随机数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//记录猜的次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//实例化Scanner</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入一个整数(1-100):&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">guess</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>        <span class="hljs-keyword">while</span> (guess != random) &#123;<br><br>            <span class="hljs-keyword">if</span> (guess &gt; random) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜大了&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (guess &lt; random) &#123;<br>                System.out.println(<span class="hljs-string">&quot;猜小了&quot;</span>);<br>            &#125;<br><br>            System.out.println(<span class="hljs-string">&quot;请输入一个整数(1-100):&quot;</span>);<br>            guess = scan.nextInt();<br><span class="hljs-comment">//累加猜的次数</span><br>            count++;<br><br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;猜中了！&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;一共猜了&quot;</span> + count + <span class="hljs-string">&quot;次&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例4：折纸珠穆朗玛峰</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">世界最高山峰是珠穆朗玛峰，它的高度是8848.86米，假如我有一张足够大的纸，它的厚度是0.1毫米。<br>请问，我折叠多少次，可以折成珠穆朗玛峰的高度?<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 19:08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZFTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//定义一个计数器，初始值为0</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//定义珠穆朗玛峰的高度</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">zf</span> <span class="hljs-operator">=</span> <span class="hljs-number">8848860</span>;<span class="hljs-comment">//单位：毫米</span><br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">paper</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.1</span>;<span class="hljs-comment">//单位：毫米</span><br><br>        <span class="hljs-keyword">while</span>(paper &lt; zf)&#123;<br>            <span class="hljs-comment">//在循环中执行累加，对应折叠了多少次</span><br>            count++;<br>            paper *= <span class="hljs-number">2</span>;<span class="hljs-comment">//循环的执行过程中每次纸张折叠，纸张的厚度要加倍</span><br>        &#125;<br><br>        <span class="hljs-comment">//打印计数器的值</span><br>        System.out.println(<span class="hljs-string">&quot;需要折叠：&quot;</span> + count + <span class="hljs-string">&quot;次&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;折纸的高度为&quot;</span> + paper/<span class="hljs-number">1000</span> + <span class="hljs-string">&quot;米，超过了珠峰的高度&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-3-练习"><a href="#3-2-3-练习" class="headerlink" title="3.2.3 练习"></a>3.2.3 练习</h4><p><strong>练习：</strong>从键盘输入整数，输入0结束，统计输入的正数、负数的个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test05While</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">positive</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//记录正数的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">negative</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;  <span class="hljs-comment">//记录负数的个数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; <span class="hljs-comment">//初始化为特殊值，使得第一次循环条件成立</span><br>        <span class="hljs-keyword">while</span>(num != <span class="hljs-number">0</span>)&#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入整数（0表示结束）：&quot;</span>);<br>            num = input.nextInt();<br><br>            <span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br>                positive++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">0</span>)&#123;<br>                negative++;<br>            &#125;<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;正数个数：&quot;</span> + positive);<br>        System.out.println(<span class="hljs-string">&quot;负数个数：&quot;</span> + negative);<br><br>        input.close();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-3-do-while循环"><a href="#3-3-do-while循环" class="headerlink" title="3.3 do-while循环"></a>3.3 do-while循环</h3><h4 id="3-3-1-基本语法"><a href="#3-3-1-基本语法" class="headerlink" title="3.3.1 基本语法"></a>3.3.1 基本语法</h4><p><strong>语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">①初始化部分;<br><span class="hljs-keyword">do</span>&#123;<br>③循环体部分<br>④迭代部分<br>&#125;<span class="hljs-keyword">while</span>(②循环条件部分); <br></code></pre></td></tr></table></figure><p><strong>执行过程：</strong>①-③-④-②-③-④-②-③-④-…-②</p><p><strong>图示：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221916418_watermark.png" alt="image-20220512165558698" style="zoom:80%;" /><p><strong>说明：</strong></p><ul><li>结尾while(循环条件)中循环条件必须是boolean类型</li><li>do{}while();最后有一个分号</li><li>do-while结构的循环体语句是至少会执行一次，这个和for和while是不一样的</li><li>循环的三个结构for、while、do-while三者是可以相互转换的。</li></ul><h4 id="3-3-2-应用举例"><a href="#3-3-2-应用举例" class="headerlink" title="3.3.2 应用举例"></a>3.3.2 应用举例</h4><p><strong>案例1：</strong>遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhileTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//遍历1-100的偶数，并计算所有偶数的和、偶数的个数（累加的思想）</span><br><span class="hljs-comment">//初始化部分</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录1-100所有的偶数的和</span><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录1-100之间偶数的个数</span><br><br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-comment">//循环体部分</span><br><span class="hljs-keyword">if</span>(num % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;<br>System.out.println(num);<br>sum += num;<br>count++;<br>&#125;<br><br>num++;<span class="hljs-comment">//迭代部分</span><br><br><br>&#125;<span class="hljs-keyword">while</span>(num &lt;= <span class="hljs-number">100</span>); <span class="hljs-comment">//循环条件部分</span><br><br><br>System.out.println(<span class="hljs-string">&quot;偶数的总和为：&quot;</span> + sum);<br>System.out.println(<span class="hljs-string">&quot;偶数的个数为：&quot;</span> + count);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>体会do-while至少会执行一次循环体</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhileTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//while循环:</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">while</span>(num1 &gt; <span class="hljs-number">10</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;hello:while&quot;</span>);<br>num1--;<br>&#125;<br><br><span class="hljs-comment">//do-while循环:</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">do</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;hello:do-while&quot;</span>);<br>num2--;<br>&#125;<span class="hljs-keyword">while</span>(num2 &gt; <span class="hljs-number">10</span>);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：ATM取款</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">声明变量balance并初始化为<span class="hljs-number">0</span>，用以表示银行账户的余额，下面通过ATM机程序实现存款，取款等功能。<br><br><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>ATM<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><br>   <span class="hljs-number">1</span>、存款<br>   <span class="hljs-number">2</span>、取款<br>   <span class="hljs-number">3</span>、显示余额<br>   <span class="hljs-number">4</span>、退出<br>请选择(<span class="hljs-number">1</span>-<span class="hljs-number">4</span>)：<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 19:12</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ATM</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-comment">//初始化条件</span><br><span class="hljs-type">double</span> <span class="hljs-variable">balance</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.0</span>;<span class="hljs-comment">//表示银行账户的余额</span><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<span class="hljs-comment">//用于控制循环的结束</span><br><br><span class="hljs-keyword">do</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;=========ATM========&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\t1、存款&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\t2、取款&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\t3、显示余额&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;\t4、退出&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;请选择(1-4)：&quot;</span>);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">selection</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br><span class="hljs-keyword">switch</span>(selection)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>System.out.print(<span class="hljs-string">&quot;要存款的额度为：&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">addMoney</span> <span class="hljs-operator">=</span> scan.nextDouble();<br><span class="hljs-keyword">if</span>(addMoney &gt; <span class="hljs-number">0</span>)&#123;<br>balance += addMoney;<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>System.out.print(<span class="hljs-string">&quot;要取款的额度为：&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">minusMoney</span> <span class="hljs-operator">=</span> scan.nextDouble();<br><span class="hljs-keyword">if</span>(minusMoney &gt; <span class="hljs-number">0</span> &amp;&amp; balance &gt;= minusMoney)&#123;<br>balance -= minusMoney;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;您输入的数据非法或余额不足&quot;</span>);<br>&#125;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>System.out.println(<span class="hljs-string">&quot;当前的余额为：&quot;</span> + balance);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>System.out.println(<span class="hljs-string">&quot;欢迎下次进入此系统。^_^&quot;</span>);<br>isFlag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;请重新选择！&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<span class="hljs-keyword">while</span>(isFlag);<br><br><span class="hljs-comment">//资源关闭</span><br>scan.close();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-3-练习"><a href="#3-3-3-练习" class="headerlink" title="3.3.3 练习"></a>3.3.3 练习</h4><p><strong>练习1：</strong>随机生成一个100以内的数，猜这个随机数是多少？</p><p>从键盘输入数，如果大了提示，大了；如果小了，提示小了；如果对了，就不再猜了，并统计一共猜了多少次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoWhileExer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//随机生成一个100以内的整数</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Math.random() ==&gt; [0,1)的小数</span><br><span class="hljs-comment">Math.random()* 100 ==&gt; [0,100)的小数</span><br><span class="hljs-comment">(int)(Math.random()* 100) ==&gt; [0,100)的整数</span><br><span class="hljs-comment">*/</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random()* <span class="hljs-number">100</span>);<br>        <span class="hljs-comment">//System.out.println(num);</span><br><br>        <span class="hljs-comment">//声明一个变量，用来存储猜的次数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">int</span> guess;<span class="hljs-comment">//提升作用域</span><br>        <span class="hljs-keyword">do</span>&#123;<br>            System.out.print(<span class="hljs-string">&quot;请输入100以内的整数：&quot;</span>);<br>            guess = input.nextInt();<br><br>            <span class="hljs-comment">//输入一次，就表示猜了一次</span><br>            count++;<br><br>            <span class="hljs-keyword">if</span>(guess &gt; num)&#123;<br>                System.out.println(<span class="hljs-string">&quot;大了&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(guess &lt; num)&#123;<br>                System.out.println(<span class="hljs-string">&quot;小了&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">while</span>(num != guess);<br><br>        System.out.println(<span class="hljs-string">&quot;一共猜了：&quot;</span> + count+<span class="hljs-string">&quot;次&quot;</span>);<br><br>        input.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4-对比三种循环结构"><a href="#3-4-对比三种循环结构" class="headerlink" title="3.4 对比三种循环结构"></a>3.4 对比三种循环结构</h3><ul><li><strong>三种循环结构都具有四个要素：</strong><ul><li>循环变量的初始化条件</li><li>循环条件</li><li>循环体语句块</li><li>循环变量的修改的迭代表达式</li></ul></li></ul><ul><li><strong>从循环次数角度分析</strong><ul><li>do-while循环至少执行一次循环体语句。</li><li>for和while循环先判断循环条件语句是否成立，然后决定是否执行循环体。</li></ul></li><li><strong>如何选择</strong><ul><li>遍历有明显的循环次数（范围）的需求，选择for循环</li><li>遍历没有明显的循环次数（范围）的需求，选择while循环</li><li>如果循环体语句块至少执行一次，可以考虑使用do-while循环</li><li>本质上：三种循环之间完全可以互相转换，都能实现循环的功能</li></ul></li></ul><h3 id="3-5-“无限”循环"><a href="#3-5-“无限”循环" class="headerlink" title="3.5 “无限”循环"></a>3.5 “无限”循环</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221917760_watermark.jpg" alt="类似：死循环"></p><h4 id="3-5-1-基本语法"><a href="#3-5-1-基本语法" class="headerlink" title="3.5.1 基本语法"></a>3.5.1 基本语法</h4><p><strong>语法格式：</strong></p><ul><li>最简单”无限”循环格式：<code>while(true)</code> , <code>for(;;)</code></li></ul><p><strong>适用场景：</strong></p><ul><li>开发中，有时并不确定需要循环多少次，需要根据循环体内部某些条件，来控制循环的结束（使用break）。</li><li>如果此循环结构不能终止，则构成了死循环！开发中要避免出现死循环。</li></ul><h4 id="3-5-2-应用举例"><a href="#3-5-2-应用举例" class="headerlink" title="3.5.2 应用举例"></a>3.5.2 应用举例</h4><p><strong>案例1：</strong>实现爱你到永远…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndlessFor1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (;;)&#123;<br>            System.out.println(<span class="hljs-string">&quot;我爱你！&quot;</span>);<br>        &#125;<br><span class="hljs-comment">//        System.out.println(&quot;end&quot;);//永远无法到达的语句，编译报错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndlessFor2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (; <span class="hljs-literal">true</span>;)&#123; <span class="hljs-comment">//条件永远成立，死循环</span><br>            System.out.println(<span class="hljs-string">&quot;我爱你！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndlessFor3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&lt;=<span class="hljs-number">10</span>; )&#123; <span class="hljs-comment">//循环变量没有修改，条件永远成立，死循环</span><br>            System.out.println(<span class="hljs-string">&quot;我爱你！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>思考：如下代码执行效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EndlessFor4</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>; i&gt;=<span class="hljs-number">10</span>; )&#123; <span class="hljs-comment">//一次都不执行</span><br>            System.out.println(<span class="hljs-string">&quot;我爱你！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>从键盘读入个数不确定的整数，并判断读入的正数和负数的个数，输入为0时结束程序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PositiveNegative</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <br><span class="hljs-type">int</span> <span class="hljs-variable">positiveNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//统计正数的个数</span><br><span class="hljs-type">int</span> <span class="hljs-variable">negativeNumber</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//统计负数的个数</span><br><span class="hljs-keyword">for</span>(;;)&#123;  <span class="hljs-comment">//while(true)&#123;</span><br>System.out.println(<span class="hljs-string">&quot;请输入一个整数：(输入为0时结束程序)&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><span class="hljs-keyword">if</span>(num &gt; <span class="hljs-number">0</span>)&#123;<br> positiveNumber++;<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(num &lt; <span class="hljs-number">0</span>)&#123;<br> negativeNumber++;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;程序结束&quot;</span>);<br><span class="hljs-keyword">break</span>; <br>            &#125;<br>         &#125;<br> System.out.println(<span class="hljs-string">&quot;正数的个数为：&quot;</span>+ positiveNumber);<br> System.out.println(<span class="hljs-string">&quot;负数的个数为：&quot;</span>+ negativeNumber);  <br>        <br>         scanner.close();<br>&#125; <br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="3-6-嵌套循环（或多重循环）"><a href="#3-6-嵌套循环（或多重循环）" class="headerlink" title="3.6 嵌套循环（或多重循环）"></a>3.6 嵌套循环（或多重循环）</h3><h4 id="3-6-1-使用说明"><a href="#3-6-1-使用说明" class="headerlink" title="3.6.1 使用说明"></a>3.6.1 使用说明</h4><ul><li><strong>所谓嵌套循环</strong>，是指一个循环结构A的循环体是另一个循环结构B。比如，for循环里面还有一个for循环，就是嵌套循环。其中，for ,while ,do-while均可以作为外层循环或内层循环。<ul><li>外层循环：循环结构A</li><li>内层循环：循环结构B</li></ul></li><li>实质上，<code>嵌套循环就是把内层循环当成外层循环的循环体</code>。只有当内层循环的循环条件为false时，才会完全跳出内层循环，才可结束外层的当次循环，开始下一次的外层循环。</li><li>设外层循环次数为<code>m</code>次，内层为<code>n</code>次，则内层循环体实际上需要执行<code>m*n</code>次。</li><li><strong>技巧：</strong>从二维图形的角度看，外层循环控制<code>行数</code>，内层循环控制<code>列数</code>。</li><li><strong>开发经验：</strong>实际开发中，我们最多见到的嵌套循环是两层。一般不会出现超过三层的嵌套循环。如果将要出现，一定要停下来重新梳理业务逻辑，重新思考算法的实现，控制在三层以内。否则，可读性会很差。</li></ul><p>例如：两个for嵌套循环格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(初始化语句①; 循环条件语句②; 迭代语句⑦) &#123;<br>    <span class="hljs-keyword">for</span>(初始化语句③; 循环条件语句④; 迭代语句⑥) &#123;<br>      循环体语句⑤;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//执行过程：① - ② - ③ - ④ - ⑤ - ⑥ - ④ - ⑤ - ⑥ - ... - ④ - ⑦ - ② - ③ - ④ - ⑤ - ⑥ - ④..</span><br></code></pre></td></tr></table></figure><p><strong>执行特点：</strong>外层循环执行一次，内层循环执行一轮。</p><h4 id="3-6-2-应用举例"><a href="#3-6-2-应用举例" class="headerlink" title="3.6.2 应用举例"></a>3.6.2 应用举例</h4><p><strong>案例1：</strong>打印5行6个*</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">******</span><br><span class="hljs-comment">******</span><br><span class="hljs-comment">******</span><br><span class="hljs-comment">******</span><br><span class="hljs-comment">******</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= <span class="hljs-number">5</span>;j++)&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">6</span>;i++)&#123;<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>&#125;<br><br>System.out.println();<br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>打印5行直角三角形</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">*</span><br><span class="hljs-comment">**</span><br><span class="hljs-comment">***</span><br><span class="hljs-comment">****</span><br><span class="hljs-comment">*****</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>打印5行倒直角三角形</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-comment">*****</span><br><span class="hljs-comment">****</span><br><span class="hljs-comment">***</span><br><span class="hljs-comment">**</span><br><span class="hljs-comment">*</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">5</span>;i++)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= <span class="hljs-number">6</span> - i;j++)&#123;<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br><br>&#125;<br>System.out.println();<br><br>&#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例4：打印”菱形”形状的图案</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">        * </span><br><span class="hljs-comment">      * * * </span><br><span class="hljs-comment">    * * * * * </span><br><span class="hljs-comment">  * * * * * * * </span><br><span class="hljs-comment">* * * * * * * * * </span><br><span class="hljs-comment">  * * * * * * * </span><br><span class="hljs-comment">    * * * * * </span><br><span class="hljs-comment">      * * * </span><br><span class="hljs-comment">        * </span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest4</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">        上半部分im(表示-的个数)    n(表示*的个数)关系式：2*i + m = 10 --&gt; m = 10 - 2*i</span><br><span class="hljs-comment">    --------*   1   8   1n = 2 * i - 1</span><br><span class="hljs-comment">    ------* * *   2   6   3</span><br><span class="hljs-comment">    ----* * * * *   3   4   5</span><br><span class="hljs-comment">    --* * * * * * *   4   2       7</span><br><span class="hljs-comment">    * * * * * * * * *  5   0   9</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        下半部分         i      m                n              关系式： m = 2 * i</span><br><span class="hljs-comment">    --* * * * * * *    1       2                7                     n = 9 - 2 * i</span><br><span class="hljs-comment">    ----* * * * *      2       4                5</span><br><span class="hljs-comment">    ------* * *        3       6                3</span><br><span class="hljs-comment">    --------*          4       8                1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">            */</span><br>        <span class="hljs-comment">//上半部分</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">//-</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">10</span> - <span class="hljs-number">2</span> * i; j++) &#123;<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>            <span class="hljs-comment">//*</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>; k++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;* &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>        <span class="hljs-comment">//下半部分</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++) &#123;<br>            <span class="hljs-comment">//-</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">2</span> * i; j++) &#123;<br>                System.out.print(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br><br>            <span class="hljs-comment">//*</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; k &lt;= <span class="hljs-number">9</span> - <span class="hljs-number">2</span> * i; k++) &#123;<br>                System.out.print(<span class="hljs-string">&quot;* &quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例5：九九乘法表</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5/202402221917166_watermark.png" alt="image-20221113193013204"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForTest5</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">9</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                System.out.print(i + <span class="hljs-string">&quot;*&quot;</span> + j + <span class="hljs-string">&quot;=&quot;</span> + (i * j) + <span class="hljs-string">&quot;\t&quot;</span>);<br>            &#125;<br>            System.out.println();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-6-3-练习"><a href="#3-6-3-练习" class="headerlink" title="3.6.3 练习"></a>3.6.3 练习</h4><p><strong>练习1：</strong>将一天中的时间打印到控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForForDemo</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;hour &lt; <span class="hljs-number">24</span> ;hour++ ) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; min &lt; <span class="hljs-number">60</span> ; min++) &#123;<br>System.out.println(hour + <span class="hljs-string">&quot;时&quot;</span> + min +<span class="hljs-string">&quot;分&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-关键字break和continue的使用"><a href="#4-关键字break和continue的使用" class="headerlink" title="4. 关键字break和continue的使用"></a>4. 关键字break和continue的使用</h2><h3 id="4-1-break和continue的说明"><a href="#4-1-break和continue的说明" class="headerlink" title="4.1 break和continue的说明"></a>4.1 break和continue的说明</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">适用范围在循环结构中使用的作用相同点<br><br><span class="hljs-keyword">break</span><span class="hljs-keyword">switch</span>-<span class="hljs-keyword">case</span><br>循环结构一旦执行，就结束(或跳出)当前循环结构    此关键字的后面，不能声明语句<br><br><span class="hljs-keyword">continue</span>循环结构一旦执行，就结束(或跳出)当次循环结构    此关键字的后面，不能声明语句<br></code></pre></td></tr></table></figure><p>此外，很多语言都有goto语句，goto语句可以随意将控制转移到程序中的任意一条语句上，然后执行它，但使程序容易出错。Java中的break和continue是不同于goto的。</p><h3 id="4-2-应用举例"><a href="#4-2-应用举例" class="headerlink" title="4.2 应用举例"></a>4.2 应用举例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakContinueTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">10</span>;i++)&#123;<br><br><span class="hljs-keyword">if</span>(i % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//break;//123</span><br><span class="hljs-keyword">continue</span>;<span class="hljs-comment">//123567910</span><br><span class="hljs-comment">//如下的语句不可能被执行，编译不通过</span><br><span class="hljs-comment">//System.out.println(&quot;今晚迪丽热巴要约我吃饭&quot;);</span><br>&#125;<br><br>System.out.print(i);<br>&#125;<br><br>System.out.println(<span class="hljs-string">&quot;####&quot;</span>);<br><br><span class="hljs-comment">//嵌套循环中的使用</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">4</span>;i++)&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= <span class="hljs-number">10</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(j % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//break; //结束的是包裹break关键字的最近的一层循环！</span><br><span class="hljs-keyword">continue</span>;<span class="hljs-comment">//结束的是包裹break关键字的最近的一层循环的当次！</span><br>&#125;<br>System.out.print(j);<br>&#125;<br>System.out.println();<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-带标签的使用"><a href="#4-3-带标签的使用" class="headerlink" title="4.3 带标签的使用"></a>4.3 带标签的使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">break</span>语句用于终止某个语句块的执行<br>&#123;    …… <br><span class="hljs-keyword">break</span>;<br> ……<br>&#125;<br><br><span class="hljs-keyword">break</span>语句出现在多层嵌套的语句块中时，可以通过标签指明要终止的是哪一层语句块 <br>label1: &#123;   ……        <br>label2:     &#123;   ……<br>label3: &#123;   ……<br>           <span class="hljs-keyword">break</span> label2;<br>           ……<br> &#125;<br>     &#125;<br>&#125; <br><br></code></pre></td></tr></table></figure><ul><li><p>continue语句出现在多层嵌套的循环语句体中时，也可以通过标签指明要跳过的是哪一层循环。</p></li><li><p>标号语句必须紧接在循环的头部。标号语句不能用在非循环语句的前面。</p></li><li><p>举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BreakContinueTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>l:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">4</span>;i++)&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= <span class="hljs-number">10</span>;j++)&#123;<br><span class="hljs-keyword">if</span>(j % <span class="hljs-number">4</span> == <span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//break l;</span><br><span class="hljs-keyword">continue</span> l;<br>&#125;<br>System.out.print(j);<br>&#125;<br>System.out.println();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4-经典案例"><a href="#4-4-经典案例" class="headerlink" title="4.4 经典案例"></a>4.4 经典案例</h3><p><strong>题目：找出100以内所有的素数（质数）？100000以内的呢？</strong></p><p>目的：不同的代码的实现方式，可以效率差别很大。</p><p>分析：素数（质数）：只能被1和它本身整除的自然数。  —&gt; 从2开始，到这个数-1为止，此范围内没有这个数的约数。则此数是一个质数。<br>比如：2、3、5、7、11、13、17、19、23、…</p><p><strong>实现方式1：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumberTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><br><span class="hljs-comment">//boolean isFlag = true; //用于标识i是否被除尽过</span><br><br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">//记录当前时间距离1970-1-1 00:00:00的毫秒数</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录质数的个数</span><br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100000</span>;i++)&#123;  <span class="hljs-comment">//i</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//用于标识i是否被除尽过</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;j &lt;= i - <span class="hljs-number">1</span>;j++)&#123;<br><br><span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//表明i有约数</span><br>isFlag = <span class="hljs-literal">false</span>;<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//判断i是否是质数</span><br><span class="hljs-keyword">if</span>(isFlag)&#123; <span class="hljs-comment">//如果isFlag变量没有给修改过值，就意味着i没有被j除尽过。则i是一个质数</span><br><span class="hljs-comment">//System.out.println(i);</span><br>count++;<br>&#125;<br><br><span class="hljs-comment">//重置isFlag</span><br><span class="hljs-comment">//isFlag = true;</span><br><br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;质数的个数为：&quot;</span> + count);<br>System.out.println(<span class="hljs-string">&quot;执行此程序花费的毫秒数为：&quot;</span> + (end - start)); <span class="hljs-comment">//16628</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现方式2：</strong>针对实现方式1进行优化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumberTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">//记录当前时间距离1970-1-1 00:00:00的毫秒数</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录质数的个数</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100000</span>;i++)&#123;  <span class="hljs-comment">//i</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//用于标识i是否被除尽过</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;j &lt;= Math.sqrt(i);j++)&#123; <span class="hljs-comment">//优化2：将循环条件中的i改为Math.sqrt(i)</span><br><br><span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//表明i有约数</span><br>isFlag = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">break</span>;<span class="hljs-comment">//优化1：主要针对非质数起作用</span><br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//判断i是否是质数</span><br><span class="hljs-keyword">if</span>(isFlag)&#123; <span class="hljs-comment">//如果isFlag变量没有给修改过值，就意味着i没有被j除尽过。则i是一个质数</span><br><span class="hljs-comment">//System.out.println(i);</span><br>count++;<br>&#125;<br><br>&#125;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;质数的个数为：&quot;</span> + count);<br>System.out.println(<span class="hljs-string">&quot;执行此程序花费的毫秒数为：&quot;</span> + (end - start));<span class="hljs-comment">//1062</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>实现方式3（选做）：</strong>使用continue + 标签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PrimeNumberTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis(); <span class="hljs-comment">//记录当前时间距离1970-1-1 00:00:00的毫秒数</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录质数的个数</span><br><br>label:<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;i &lt;= <span class="hljs-number">100000</span>;i++)&#123;  <span class="hljs-comment">//i</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;j &lt;= Math.sqrt(i);j++)&#123; <span class="hljs-comment">//优化2：将循环条件中的i改为Math.sqrt(i)</span><br><br><span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123; <span class="hljs-comment">//表明i有约数</span><br><span class="hljs-keyword">continue</span> label;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//一旦程序能执行到此位置，说明i就是一个质数</span><br>System.out.println(i);<br>count++;<br>&#125;<br><br><br><span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>System.out.println(<span class="hljs-string">&quot;质数的个数为：&quot;</span> + count);<br>System.out.println(<span class="hljs-string">&quot;执行此程序花费的毫秒数为：&quot;</span> + (end - start));<span class="hljs-comment">//1062</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5-练习"><a href="#4-5-练习" class="headerlink" title="4.5 练习"></a>4.5 练习</h3><p><strong>练习1：</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs autoit">生成 <span class="hljs-number">1</span><span class="hljs-number">-100</span> 之间的随机数，直到生成了 <span class="hljs-number">97</span> 这个数，看看一共用了几次？<br><br>提示：使用 (<span class="hljs-built_in">int</span>)(Math.<span class="hljs-built_in">random</span>() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NumberGuessTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//记录循环的次数（或生成随机数进行比较的次数）</span><br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>            count++;<br>            <span class="hljs-keyword">if</span>(random == <span class="hljs-number">97</span>)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;直到生成随机数97，一共比较了&quot;</span> + count + <span class="hljs-string">&quot;次&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-Scanner：键盘输入功能的实现"><a href="#5-Scanner：键盘输入功能的实现" class="headerlink" title="5. Scanner：键盘输入功能的实现"></a>5. Scanner：键盘输入功能的实现</h2><ul><li><p>如何从键盘获取不同类型（基本数据类型、String类型）的变量：使用Scanner类。</p></li><li><p>键盘输入代码的四个步骤：</p><ol><li>导包：<code>import java.util.Scanner;</code></li><li>创建Scanner类型的对象：<code>Scanner scan = new Scanner(System.in);</code></li><li>调用Scanner类的相关方法（<code>next() / nextXxx()</code>），来获取指定类型的变量</li><li>释放资源：<code>scan.close();</code></li></ol></li><li><p>注意：需要根据相应的方法，来输入指定类型的值。如果输入的数据类型与要求的类型不匹配时，会报异常 导致程序终止。</p></li></ul><h3 id="5-1-各种类型的数据输入"><a href="#5-1-各种类型的数据输入" class="headerlink" title="5.1 各种类型的数据输入"></a>5.1 各种类型的数据输入</h3><p><strong>案例：</strong>小明注册某交友网站，要求录入个人相关信息。如下：</p><p>请输入你的网名、你的年龄、你的体重、你是否单身、你的性别等情况。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//① 导包</span><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerTest1</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//② 创建Scanner的对象</span><br>        <span class="hljs-comment">//Scanner是一个引用数据类型，它的全名称是java.util.Scanner</span><br>        <span class="hljs-comment">//scanner就是一个引用数据类型的变量了，赋给它的值是一个对象（对象的概念我们后面学习，暂时先这么叫）</span><br>        <span class="hljs-comment">//new Scanner(System.in)是一个new表达式，该表达式的结果是一个对象</span><br>        <span class="hljs-comment">//引用数据类型  变量 = 对象;</span><br>        <span class="hljs-comment">//这个等式的意思可以理解为用一个引用数据类型的变量代表一个对象，所以这个变量的名称又称为对象名</span><br>        <span class="hljs-comment">//我们也把scanner变量叫做scanner对象</span><br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<span class="hljs-comment">//System.in默认代表键盘输入</span><br>        <br>        <span class="hljs-comment">//③根据提示，调用Scanner的方法，获取不同类型的变量</span><br>        System.out.println(<span class="hljs-string">&quot;欢迎光临你好我好交友网站！&quot;</span>);<br>        System.out.print(<span class="hljs-string">&quot;请输入你的网名：&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> scanner.next();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入你的年龄：&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> scanner.nextInt();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入你的体重：&quot;</span>);<br>        <span class="hljs-type">double</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> scanner.nextDouble();<br><br>        System.out.print(<span class="hljs-string">&quot;你是否单身（true/false)：&quot;</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isSingle</span> <span class="hljs-operator">=</span> scanner.nextBoolean();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入你的性别：&quot;</span>);<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> scanner.next().charAt(<span class="hljs-number">0</span>);<span class="hljs-comment">//先按照字符串接收，然后再取字符串的第一个字符（下标为0）</span><br><br>        System.out.println(<span class="hljs-string">&quot;你的基本情况如下：&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;网名：&quot;</span> + name + <span class="hljs-string">&quot;\n年龄：&quot;</span> + age + <span class="hljs-string">&quot;\n体重：&quot;</span> + weight + <br>                           <span class="hljs-string">&quot;\n单身：&quot;</span> + isSingle + <span class="hljs-string">&quot;\n性别：&quot;</span> + gender);<br>        <br>        <span class="hljs-comment">//④ 关闭资源</span><br>        scanner.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-2-练习"><a href="#5-2-练习" class="headerlink" title="5.2 练习"></a>5.2 练习</h3><p><strong>练习1：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">大家都知道，男大当婚，女大当嫁。那么女方家长要嫁女儿，当然要提出一定的条件：高：<span class="hljs-number">180</span>cm以上；富：财富<span class="hljs-number">1</span>千万以上；帅：是。<br><br>如果这三个条件同时满足，则：“我一定要嫁给他!!!”<br>如果三个条件有为真的情况，则：“嫁吧，比上不足，比下有余。”<br>如果三个条件都不满足，则：“不嫁！”<br><br>提示：<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“身高: (cm));<br>scanner.nextInt();<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“财富: (千万));<br>scanner.nextDouble();<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“帅否: (<span class="hljs-keyword">true</span>/<span class="hljs-keyword">false</span>));   <br>scanner.nextBoolean();  <br><br><br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(“帅否: (是/否));<br>scanner.next();   &quot;是&quot;.equals(str)  <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerExer1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>System.out.println(<span class="hljs-string">&quot;请输入你的身高：(cm)&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">height</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br>System.out.println(<span class="hljs-string">&quot;请输入你的财富：(以千万为单位)&quot;</span>);<br><span class="hljs-type">double</span> <span class="hljs-variable">wealth</span> <span class="hljs-operator">=</span> scan.nextDouble();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">方式1：关于是否帅问题，我们使用boolean类型接收</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">System.out.println(&quot;帅否？(true/false)&quot;);</span><br><span class="hljs-comment">boolean isHandsome = scan.nextBoolean();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//判断</span><br><span class="hljs-comment">if(height &gt;= 180 &amp;&amp; wealth &gt;= 1.0 &amp;&amp; isHandsome)&#123; //不建议isHandsome == true</span><br><span class="hljs-comment">System.out.println(&quot;我一定要嫁给他!!!&quot;);</span><br><span class="hljs-comment">&#125;else if(height &gt;= 180 || wealth &gt;= 1.0 || isHandsome)&#123;</span><br><span class="hljs-comment">System.out.println(&quot;嫁吧，比上不足，比下有余。&quot;);</span><br><span class="hljs-comment">&#125;else&#123;</span><br><span class="hljs-comment">System.out.println(&quot;不嫁&quot;);</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//方式2：关于是否帅问题，我们使用String类型接收</span><br>System.out.println(<span class="hljs-string">&quot;帅否？(是/否)&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">isHandsome</span> <span class="hljs-operator">=</span> scan.next();<br><br><span class="hljs-comment">//判断</span><br><span class="hljs-keyword">if</span>(height &gt;= <span class="hljs-number">180</span> &amp;&amp; wealth &gt;= <span class="hljs-number">1.0</span> &amp;&amp; isHandsome == <span class="hljs-string">&quot;是&quot;</span>)&#123;  <span class="hljs-comment">//知识点：判断两个字符串是否相等，使用String的equals()</span><br>System.out.println(<span class="hljs-string">&quot;我一定要嫁给他!!!&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(height &gt;= <span class="hljs-number">180</span> || wealth &gt;= <span class="hljs-number">1.0</span> || isHandsome == <span class="hljs-string">&quot;是&quot;</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;嫁吧，比上不足，比下有余。&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;不嫁&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//关闭资源</span><br>scan.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习2：</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tap">我家的狗5岁了，5岁的狗相当于人类多大呢？其实，狗的前两年每一年相当于人类的10.5岁，之后每增加一年就增加四岁。那么5岁的狗相当于人类多少年龄呢？应该是：10.5 + 10.5 +<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 4 </span>+<span class="hljs-number"> 4 </span>= 33岁。<br><br>编写一个程序，获取用户输入的狗的年龄，通过程序显示其相当于人类的年龄。如果用户输入负数，请显示一个提示信息。<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerExer2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">Scanner</span> <span class="hljs-variable">scan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>System.out.println(<span class="hljs-string">&quot;请输入狗狗的年龄：&quot;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">dogAge</span> <span class="hljs-operator">=</span> scan.nextInt();<br><br><span class="hljs-comment">//通过分支语句，判断狗狗相当于人的年龄</span><br><span class="hljs-keyword">if</span>(dogAge &lt; <span class="hljs-number">0</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;你输入的狗狗的年龄不合法&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(dogAge &lt;= <span class="hljs-number">2</span>)&#123;<br>System.out.println(<span class="hljs-string">&quot;相当于人的年龄：&quot;</span> + (dogAge * <span class="hljs-number">10.5</span>));<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;相当于人的年龄：&quot;</span> + (<span class="hljs-number">2</span> * <span class="hljs-number">10.5</span> + (dogAge - <span class="hljs-number">2</span>) * <span class="hljs-number">4</span>));<br>&#125;<br><br><span class="hljs-comment">//关闭资源</span><br>scan.close();<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-如何获取一个随机数"><a href="#6-如何获取一个随机数" class="headerlink" title="6. 如何获取一个随机数"></a>6. 如何获取一个随机数</h2><p>如何产生一个指定范围的随机整数？</p><p>1、Math类的random()的调用，会返回一个[0,1)范围的一个double型值</p><p>2、Math.random() * 100  —&gt;  [0,100)<br>      (int)(Math.random() * 100)—&gt; [0,99]<br>      (int)(Math.random() * 100) + 5  —-&gt; [5,104]</p><p>3、如何获取<code>[a,b]</code>范围内的随机整数呢？<code>(int)(Math.random() * (b - a + 1)) + a</code></p><p>4、举例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MathRandomTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">double</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> Math.random();<br>System.out.println(value);<br><br><span class="hljs-comment">//[1,6]</span><br><span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)(Math.random() * <span class="hljs-number">6</span>) + <span class="hljs-number">1</span>; <span class="hljs-comment">//</span><br>System.out.println(number);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变量与运算符</title>
    <link href="/2024/02/21/2.%20%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <url>/2024/02/21/2.%20%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="1-关键字（keyword）"><a href="#1-关键字（keyword）" class="headerlink" title="1. 关键字（keyword）"></a>1. 关键字（keyword）</h2><ul><li>定义：<strong>被Java语言赋予了特殊含义，用做专门用途的字符串（或单词）</strong><ul><li>HelloWorld案例中，出现的关键字有 <code>class</code>、<code>public </code>  、 <code>static</code> 、  <code>void</code>  等，这些单词已经被Java定义好了。</li></ul></li><li>特点：全部关键字都是<code>小写字母</code>。</li><li>关键字比较多，不需要死记硬背，学到哪里记到哪里即可。</li><li>官方地址： <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730615_watermark.png" alt="image-20220310234414849"></p><blockquote><p> 说明：</p><ol><li>关键字一共<code>50个</code>，其中<code>const</code>和<code>goto</code>是<code>保留字</code>(reserved word)。</li><li><code>true</code>，<code>false</code>，<code>null</code>不在其中，它们看起来像关键字，其实是字面量，表示特殊的布尔值和空值。</li></ol></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730637_watermark.png" alt="image-20220310234557454" style="zoom: 67%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730666_watermark.png" alt="image-20220801143635356" style="zoom:66%;" /><h2 id="2-标识符-identifier"><a href="#2-标识符-identifier" class="headerlink" title="2. 标识符( identifier)"></a>2. 标识符( identifier)</h2><p>Java中变量、方法、类等要素命名时使用的字符序列，称为标识符。</p><p>技巧：凡是自己可以起名字的地方都叫标识符。</p><p><strong>标识符的命名规则</strong>（必须遵守的<code>硬性规定</code>）：</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">由<span class="hljs-number">26</span>个英文字母大小写，<span class="hljs-number">0</span>-<span class="hljs-number">9</span> ，_或 $ 组成  </span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">数字不可以开头。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">不可以使用关键字和保留字，但能包含关键字和保留字。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Java</span>中严格区分大小写，长度无限制。</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">标识符不能包含空格。</span><br></code></pre></td></tr></table></figure><blockquote><p>练习：miles、Test、a++、 –a、4#R、$4、 #44、apps、class、public、int、x、y、radius</p></blockquote><p><strong>标识符的命名规范</strong>（建议遵守的<code>软性要求</code>，否则工作时容易被鄙视）:</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">包名：多单词组成时所有字母都小写：xxxyyyzzz。</span><br>  例如：java.lang、com.atguigu.bean<br>  <br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">类名、接口名：多单词组成时，所有单词的首字母大写：<span class="hljs-title class_">XxxYyyZzz</span></span><br>  例如：HelloWorld，String，System等<br>  <br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</span><br>  例如：age,name,bookName,main,binarySearch,getName<br>  <br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">常量名：所有字母都大写。多单词时每个单词用下划线连接：<span class="hljs-variable constant_">XXX_YYY_ZZZ</span></span><br>  例如：MAX_VALUE,PI,DEFAULT_CAPACITY<br></code></pre></td></tr></table></figure><p>注意：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。</p><blockquote><p>更多细节详见《代码整洁之道_关于标识符.txt》《阿里巴巴Java开发手册-1.7.1-黄山版》</p></blockquote><h2 id="3-变量"><a href="#3-变量" class="headerlink" title="3. 变量"></a>3. 变量</h2><h3 id="3-1-为什么需要变量"><a href="#3-1-为什么需要变量" class="headerlink" title="3.1 为什么需要变量"></a>3.1 为什么需要变量</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730698_watermark.png" alt="image-20220513235020527"></p><p>一花一世界，如果把一个程序看做一个世界或一个社会的话，那么变量就是程序世界的花花草草、万事万物。即，<strong>变量是程序中不可或缺的组成单位，最基本的存储单元</strong>。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730719_watermark.png" alt="image-20220513235828042"></p><h3 id="3-2-初识变量"><a href="#3-2-初识变量" class="headerlink" title="3.2 初识变量"></a>3.2 初识变量</h3><ul><li><p>变量的概念：</p><ul><li><p>内存中的一个存储区域，该区域的数据可以在同一类型范围内不断变化</p></li><li><p>变量的构成包含三个要素：<code>数据类型</code>、<code>变量名</code>、<code>存储的值</code></p></li><li><p>Java中变量声明的格式：<code>数据类型 变量名 = 变量值</code></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730756_watermark.png" alt="image-20220311000744867" style="zoom:67%;" /></li></ul></li><li><p>变量的作用：用于在内存中保存数据。</p></li><li><p>使用变量注意：</p><ul><li>Java中每个变量必须先声明，后使用。</li><li>使用变量名来访问这块区域的数据。</li><li>变量的作用域：其定义所在的一对{ }内。</li><li>变量只有在其<code>作用域</code>内才有效。出了作用域，变量不可以再被调用。</li><li>同一个作用域内，不能定义重名的变量。</li></ul></li></ul><h3 id="3-3-Java中变量的数据类型"><a href="#3-3-Java中变量的数据类型" class="headerlink" title="3.3 Java中变量的数据类型"></a>3.3 Java中变量的数据类型</h3><p>Java中变量的数据类型分为两大类：</p><ul><li><p><strong>基本数据类型</strong>：包括 <code>整数类型</code>、<code>浮点数类型</code>、<code>字符类型</code>、<code>布尔类型</code>。 </p></li><li><p><strong>引用数据类型</strong>：包括<code>数组</code>、 <code>类</code>、<code>接口</code>、<code>枚举</code>、<code>注解</code>、<code>记录</code>。 </p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730431_watermark.png" alt="Java的数据类型"></p></li></ul><h3 id="3-4-变量的使用"><a href="#3-4-变量的使用" class="headerlink" title="3.4 变量的使用"></a>3.4 变量的使用</h3><h4 id="3-4-1-步骤1：变量的声明"><a href="#3-4-1-步骤1：变量的声明" class="headerlink" title="3.4.1 步骤1：变量的声明"></a>3.4.1 步骤1：变量的声明</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">格式：数据类型  变量名<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//例如：</span><br><span class="hljs-comment">//存储一个整数类型的年龄</span><br><span class="hljs-type">int</span> age; <br><br><span class="hljs-comment">//存储一个小数类型的体重</span><br><span class="hljs-type">double</span> weight;<br><br><span class="hljs-comment">//存储一个单字符类型的性别 </span><br><span class="hljs-type">char</span> gender;<br><br><span class="hljs-comment">//存储一个布尔类型的婚姻状态</span><br><span class="hljs-type">boolean</span> marry;<br><br><span class="hljs-comment">//存储一个字符串类型的姓名</span><br>String name;<br><br><span class="hljs-comment">//声明多个同类型的变量</span><br><span class="hljs-type">int</span> a,b,c; <span class="hljs-comment">//表示a,b,c三个变量都是int类型。</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：变量的数据类型可以是基本数据类型，也可以是引用数据类型。</p></blockquote><h4 id="3-4-2-步骤2：变量的赋值"><a href="#3-4-2-步骤2：变量的赋值" class="headerlink" title="3.4.2 步骤2：变量的赋值"></a>3.4.2 步骤2：变量的赋值</h4><p>给变量赋值，就是把“值”存到该变量代表的内存空间中。同时，给变量赋的值类型必须与变量声明的类型一致或兼容。</p><p><strong>变量赋值的语法格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">变量名 = 值;<br></code></pre></td></tr></table></figure><p>举例1：可以使用合适类型的<code>常量值</code>给已经声明的变量赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">age = <span class="hljs-number">18</span>;<br>weight = <span class="hljs-number">109</span>;<br>gender = <span class="hljs-string">&#x27;女&#x27;</span>;<br></code></pre></td></tr></table></figure><p>举例2：可以使用其他<code>变量</code>或者<code>表达式</code>给变量赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> m;<br>        <br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * x + y;<br></code></pre></td></tr></table></figure><p>3：变量可以反复赋值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//先声明，后初始化</span><br><span class="hljs-type">char</span> gender;<br>gender = <span class="hljs-string">&#x27;女&#x27;</span>;<br><br><span class="hljs-comment">//给变量重新赋值，修改gender变量的值</span><br>gender = <span class="hljs-string">&#x27;男&#x27;</span>;<br>System.out.println(<span class="hljs-string">&quot;gender = &quot;</span> + gender);<span class="hljs-comment">//gender = 男</span><br></code></pre></td></tr></table></figure><p>举例4：也可以将变量的声明和赋值一并执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">isBeauty</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;迪丽热巴&quot;</span>;<br></code></pre></td></tr></table></figure><p>内存结构如图：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730922_watermark.png" alt="image-20220514152216148" style="zoom: 80%;" /><h2 id="4-基本数据类型介绍"><a href="#4-基本数据类型介绍" class="headerlink" title="4. 基本数据类型介绍"></a>4. 基本数据类型介绍</h2><h3 id="4-1-整数类型：byte、short、int、long"><a href="#4-1-整数类型：byte、short、int、long" class="headerlink" title="4.1 整数类型：byte、short、int、long"></a>4.1 整数类型：byte、short、int、long</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730306_watermark.png" alt="image-20220520111756274" style="zoom: 50%;" /><ul><li>Java各整数类型有固定的表数范围和字段长度，不受具体操作系统的影响，以保证Java程序的可移植性。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730366_watermark.png" alt="image-20220311001553945" style="zoom:80%;" /><ul><li><p>定义long类型的变量，赋值时需要以”<code>l</code>“或”<code>L</code>“作为后缀。</p></li><li><p>Java程序中变量通常声明为int型，除非不足以表示较大的数，才使用long。</p></li><li><p>Java的整型<code>常量默认为 int 型</code>。</p></li></ul><h4 id="4-1-1-补充：计算机存储单位"><a href="#4-1-1-补充：计算机存储单位" class="headerlink" title="4.1.1 补充：计算机存储单位"></a>4.1.1 补充：计算机存储单位</h4><ul><li><p><strong>字节（Byte）：</strong>是计算机用于<code>计量存储容量</code>的<code>基本</code>单位，一个字节等于8 bit。</p></li><li><p><strong>位（bit）：</strong>是数据存储的<code>最小</code>单位。二进制数系统中，每个0或1就是一个位，叫做bit（比特），其中8 bit 就称为一个字节(Byte)。</p></li><li><p><strong>转换关系：</strong></p><ul><li>8 bit &#x3D; 1 Byte</li><li>1024 Byte &#x3D; 1 KB</li><li>1024 KB &#x3D; 1 MB</li><li>1024 MB &#x3D; 1 GB</li><li>1024 GB &#x3D; 1 TB</li></ul></li></ul><h3 id="4-2-浮点类型：float、double"><a href="#4-2-浮点类型：float、double" class="headerlink" title="4.2 浮点类型：float、double"></a>4.2 浮点类型：float、double</h3><ul><li>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730872_watermark.png" alt="image-20220311001749699" style="zoom:80%;" /><ul><li>浮点型常量有两种表示形式：<ul><li>十进制数形式。如：5.12       512.0f        .512   (必须有小数点）</li><li>科学计数法形式。如：5.12e2      512E2     100E-2</li></ul></li><li>float：<code>单精度</code>，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。    </li><li>double：<code>双精度</code>，精度是float的两倍。通常采用此类型。</li><li>定义float类型的变量，赋值时需要以”<code>f</code>“或”<code>F</code>“作为后缀。</li><li>Java 的浮点型<code>常量默认为double型</code>。</li></ul><h4 id="4-2-1-关于浮点型精度的说明"><a href="#4-2-1-关于浮点型精度的说明" class="headerlink" title="4.2.1 关于浮点型精度的说明"></a>4.2.1 关于浮点型精度的说明</h4><ul><li><p>并不是所有的小数都能可以精确的用二进制浮点数表示。二进制浮点数不能精确的表示0.1、0.01、0.001这样10的负次幂。</p></li><li><p>浮点类型float、double的数据不适合在<code>不容许舍入误差</code>的金融计算领域。如果需要<code>精确</code>数字计算或保留指定位数的精度，需要使用<code>BigDecimal类</code>。</p></li><li><p>测试用例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//测试1：（解释见章末企业真题：为什么0.1 + 0.2不等于0.3）</span><br>System.out.println(<span class="hljs-number">0.1</span> + <span class="hljs-number">0.2</span>);<span class="hljs-comment">//0.30000000000000004</span><br><br><span class="hljs-comment">//测试2：</span><br><span class="hljs-type">float</span> <span class="hljs-variable">ff1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123123123f</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">ff2</span> <span class="hljs-operator">=</span> ff1 + <span class="hljs-number">1</span>;<br>System.out.println(ff1);<br>System.out.println(ff2);<br>System.out.println(ff1 == ff2);<br><br></code></pre></td></tr></table></figure><h4 id="4-2-2-应用举例"><a href="#4-2-2-应用举例" class="headerlink" title="4.2.2 应用举例"></a>4.2.2 应用举例</h4><p>案例1：定义圆周率并赋值为3.14，现有3个圆的半径分别为1.2、2.5、6，求它们的面积。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:36</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">PI</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span>; <span class="hljs-comment">//圆周率</span><br><br>        <span class="hljs-type">double</span> <span class="hljs-variable">radius1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">radius2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2.5</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">radius3</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;第1个圆的面积：&quot;</span> + PI * radius1 * radius1);<br>        System.out.println(<span class="hljs-string">&quot;第2个圆的面积：&quot;</span> + PI * radius2 * radius2);<br>        System.out.println(<span class="hljs-string">&quot;第3个圆的面积：&quot;</span> + PI * radius3 * radius3);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>案例2：小明要到美国旅游，可是那里的温度是以华氏度为单位记录的。<br>它需要一个程序将华氏温度（80度）转换为摄氏度，并以华氏度和摄氏度为单位分别显示该温度。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">℃ <span class="hljs-operator">=</span> (℉ - <span class="hljs-number">32</span>) / <span class="hljs-number">1.8</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:51</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">hua</span> <span class="hljs-operator">=</span> <span class="hljs-number">80</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">she</span> <span class="hljs-operator">=</span> (hua-<span class="hljs-number">32</span>)/<span class="hljs-number">1.8</span>;<br>        System.out.println(<span class="hljs-string">&quot;华氏度&quot;</span> + hua+<span class="hljs-string">&quot;℉转为摄氏度是&quot;</span> +she+<span class="hljs-string">&quot;℃&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-字符类型：char"><a href="#4-3-字符类型：char" class="headerlink" title="4.3 字符类型：char"></a>4.3 字符类型：char</h3><ul><li><p>char 型数据用来表示通常意义上“<code>字符</code>”（占2字节）</p></li><li><p>Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符。</p></li><li><p>字符型变量的三种表现形式：</p><ul><li><p><strong>形式1：</strong>使用单引号(‘ ‘)括起来的<code>单个字符</code>。</p><p>例如：char c1 &#x3D; ‘a’;   char c2 &#x3D; ‘中’; char c3 &#x3D;  ‘9’;</p></li><li><p><strong>形式2：</strong>直接使用 <code>Unicode值</code>来表示字符型常量：‘<code>\uXXXX</code>’。其中，XXXX代表一个十六进制整数。</p><p>例如：\u0023 表示 ‘#’。</p></li><li><p><strong>形式3：</strong>Java中还允许使用<code>转义字符‘\’</code>来将其后的字符转变为特殊字符型常量。</p><p>例如：char c3 &#x3D; ‘\n’;  &#x2F;&#x2F; ‘\n’表示换行符</p></li></ul><table><thead><tr><th align="center">转义字符</th><th align="center">说明</th><th align="center">Unicode表示方式</th></tr></thead><tbody><tr><td align="center"><code>\n</code></td><td align="center">换行符</td><td align="center">\u000a</td></tr><tr><td align="center"><code>\t</code></td><td align="center">制表符</td><td align="center">\u0009</td></tr><tr><td align="center"><code>\&quot;</code></td><td align="center">双引号</td><td align="center">\u0022</td></tr><tr><td align="center"><code>\&#39;</code></td><td align="center">单引号</td><td align="center">\u0027</td></tr><tr><td align="center"><code>\\</code></td><td align="center">反斜线</td><td align="center">\u005c</td></tr><tr><td align="center"><code>\b</code></td><td align="center">退格符</td><td align="center">\u0008</td></tr><tr><td align="center"><code>\r</code></td><td align="center">回车符</td><td align="center">\u000d</td></tr></tbody></table></li><li><p>char类型是可以进行运算的。因为它都对应有Unicode码，可以看做是一个数值。</p></li></ul><h3 id="4-4-布尔类型：boolean"><a href="#4-4-布尔类型：boolean" class="headerlink" title="4.4 布尔类型：boolean"></a>4.4 布尔类型：boolean</h3><ul><li><p>boolean 类型用来判断逻辑条件，一般用于流程控制语句中：</p><ul><li>if条件控制语句；                  </li><li>while循环控制语句；     </li><li>for循环控制语句；</li><li>do-while循环控制语句；</li></ul></li><li><p><strong>boolean类型数据只有两个值：true、false，无其它。</strong></p><ul><li>不可以使用0或非 0 的整数替代false和true，这点和C语言不同。</li><li>拓展：Java虚拟机中没有任何供boolean值专用的字节码指令，Java语言表达所操作的boolean值，在编译之后都使用java虚拟机中的int数据类型来代替：true用1表示，false用0表示。——《java虚拟机规范 8版》</li></ul></li><li><p>举例：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">if</span>(isFlag)&#123;<br>    <span class="hljs-comment">//true分支</span><br>&#125;<span class="hljs-keyword">else</span>&#123;  <br>    <span class="hljs-comment">//false分支</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>经验之谈：</p><p>Less is More！建议不要这样写：if ( isFlag &#x3D; &#x3D; true )，只有新手才如此。关键也很容易写错成if(isFlag &#x3D; true)，这样就变成赋值isFlag为true而不是判断！<code>老鸟的写法</code>是if (isFlag)或者if ( !isFlag)。</p></blockquote><h2 id="5-基本数据类型变量间运算规则"><a href="#5-基本数据类型变量间运算规则" class="headerlink" title="5. 基本数据类型变量间运算规则"></a>5. 基本数据类型变量间运算规则</h2><p>在Java程序中，不同的基本数据类型（只有7种，不包含boolean类型）变量的值经常需要进行相互转换。</p><p>转换的方式有两种：<code>自动类型提升</code>和<code>强制类型转换</code>。</p><h3 id="5-1-自动类型提升"><a href="#5-1-自动类型提升" class="headerlink" title="5.1 自动类型提升"></a>5.1 自动类型提升</h3><p><strong>规则：将取值范围小（或容量小）的类型自动提升为取值范围大（或容量大）的类型 。</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211730112_watermark.png" alt="image-20220523162200891" style="zoom:67%;" /><p>基本数据类型的转换规则如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731141_watermark.png" alt="image-20220311002543688"></p><p>（1）当把存储范围小的值（常量值、变量的值、表达式计算的结果值）赋值给了存储范围大的变量时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<span class="hljs-comment">//char自动升级为int，其实就是把字符的编码值赋值给i变量了</span><br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<span class="hljs-comment">//int自动升级为double</span><br><span class="hljs-type">long</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234567</span>; <span class="hljs-comment">//右边的整数常量值如果在int范围呢，编译和运行都可以通过，这里涉及到数据类型转换</span><br><br><span class="hljs-comment">//byte bigB = 130;//错误，右边的整数常量值超过byte范围</span><br><span class="hljs-type">long</span> <span class="hljs-variable">bigNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">12345678912L</span>;<span class="hljs-comment">//右边的整数常量值如果超过int范围，必须加L，显式表示long类型。否则编译不通过</span><br></code></pre></td></tr></table></figure><p>（2）当存储范围小的数据类型与存储范围大的数据类型变量一起混合运算时，会按照其中最大的类型运算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.0</span>;<br><br><span class="hljs-type">double</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> i + b + d;<span class="hljs-comment">//混合运算，升级为double</span><br></code></pre></td></tr></table></figure><p>（3）当byte,short,char数据类型的变量进行算术运算时，按照int类型处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> b1 + b2;<span class="hljs-comment">//编译报错，b1 + b2自动升级为int</span><br><br><span class="hljs-type">char</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-type">char</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;A&#x27;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> c1 + c2;<span class="hljs-comment">//至少需要使用int类型来接收</span><br>System.out.println(c1 + c2);<span class="hljs-comment">//113 </span><br></code></pre></td></tr></table></figure><p><strong>练习：</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">设 x 为<span class="hljs-keyword">float</span>型变量，y为<span class="hljs-keyword">double</span>型变量，a为<span class="hljs-keyword">int</span>型变量，b为<span class="hljs-keyword">long</span>型变量，c为<span class="hljs-keyword">char</span>型变量，则表达式<br>x + y * a <span class="hljs-regexp">/ x + b /</span> y + c的值类型为：<br><br>A. <span class="hljs-keyword">int</span>   B. <span class="hljs-keyword">long</span>  C. <span class="hljs-keyword">double</span>  D. <span class="hljs-keyword">char</span><br></code></pre></td></tr></table></figure><h3 id="5-2-强制类型转换"><a href="#5-2-强制类型转换" class="headerlink" title="5.2 强制类型转换"></a>5.2 强制类型转换</h3><p>将<code>3.14</code> 赋值到<code>int</code> 类型变量会发生什么？产生编译失败，肯定无法赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.14</span>; <span class="hljs-comment">// 编译报错</span><br></code></pre></td></tr></table></figure><p>想要赋值成功，只有通过<code>强制类型转换</code>，将<code>double</code> 类型强制转换成<code>int</code> 类型才能赋值。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731346_watermark.png" alt="image-20220523162407722" style="zoom:67%;" /><p><strong>规则：将取值范围大（或容量大）的类型强制转换成取值范围小（或容量小）的类型。</strong></p><blockquote><p>自动类型提升是Java自动执行的，而强制类型转换是自动类型提升的逆运算，需要我们自己手动执行。</p></blockquote><p><strong>转换格式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">数据类型<span class="hljs-number">1</span> 变量名 = (数据类型<span class="hljs-number">1</span>)被强转数据值;  <span class="hljs-comment">//()中的数据类型必须&lt;=变量值的数据类型</span><br></code></pre></td></tr></table></figure><p>（1）当把存储范围大的值（常量值、变量的值、表达式计算的结果值）强制转换为存储范围小的变量时，可能会<code>损失精度</code>或<code>溢出</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">3.14</span>;<span class="hljs-comment">//损失精度</span><br><br><span class="hljs-type">double</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)d;<span class="hljs-comment">//损失精度</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br><span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i;<span class="hljs-comment">//溢出</span><br></code></pre></td></tr></table></figure><p>（2）当某个值想要提升数据类型时，也可以使用强制类型转换。这种情况的强制类型转换是<code>没有风险</code>的，通常省略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">double</span> <span class="hljs-variable">bigger</span> <span class="hljs-operator">=</span> (<span class="hljs-type">double</span>)(i/j);<br></code></pre></td></tr></table></figure><p>（3）声明long类型变量时，可以出现省略后缀的情况。float则不同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123L</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<span class="hljs-comment">//如何理解呢？ 此时可以看做是int类型的123自动类型提升为long类型</span><br><br><span class="hljs-comment">//long l3 = 123123123123; //报错，因为123123123123超出了int的范围。</span><br><span class="hljs-type">long</span> <span class="hljs-variable">l4</span> <span class="hljs-operator">=</span> <span class="hljs-number">123123123123L</span>;<br><br><br><span class="hljs-comment">//float f1 = 12.3; //报错，因为12.3看做是double，不能自动转换为float类型</span><br><span class="hljs-type">float</span> <span class="hljs-variable">f2</span> <span class="hljs-operator">=</span> <span class="hljs-number">12.3F</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">f3</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)<span class="hljs-number">12.3</span>;<br></code></pre></td></tr></table></figure><p><strong>练习：判断是否能通过编译</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>）<span class="hljs-type">short</span>  <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>   s = s-<span class="hljs-number">2</span>;                     <span class="hljs-comment">//判断：no</span><br><span class="hljs-number">2</span>） <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    b = b + <span class="hljs-number">4</span>;                  <span class="hljs-comment">//判断：no</span><br>    b = (<span class="hljs-type">byte</span>)(b+<span class="hljs-number">4</span>);            <span class="hljs-comment">//判断：yes</span><br><span class="hljs-number">3</span>）<span class="hljs-type">char</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> ‘a’;<br>   <span class="hljs-type">int</span>  <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>   <span class="hljs-type">float</span> <span class="hljs-variable">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">.314F</span>;<br>   <span class="hljs-type">double</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> c+i+d;       <span class="hljs-comment">//判断：yes</span><br><span class="hljs-number">4</span>） <span class="hljs-type">byte</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-type">short</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> s + b;            <span class="hljs-comment">//判断：no</span><br><br></code></pre></td></tr></table></figure><p><strong>问答：为什么标识符的声明规则里要求不能数字开头？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果允许数字开头，则如下的声明编译就可以通过：</span><br><span class="hljs-type">int</span> <span class="hljs-number">123L</span> = <span class="hljs-number">12</span>;<br><span class="hljs-comment">//进而，如下的声明中l的值到底是123？还是变量123L对应的取值12呢？ 出现歧义了。</span><br><span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">123L</span>;<br></code></pre></td></tr></table></figure><h3 id="5-3-基本数据类型与String的运算"><a href="#5-3-基本数据类型与String的运算" class="headerlink" title="5.3 基本数据类型与String的运算"></a>5.3 基本数据类型与String的运算</h3><h4 id="5-3-1-字符串类型：String"><a href="#5-3-1-字符串类型：String" class="headerlink" title="5.3.1 字符串类型：String"></a>5.3.1 字符串类型：String</h4><ul><li>String不是基本数据类型，属于引用数据类型</li><li>使用一对<code>&quot;&quot;</code>来表示一个字符串，内部可以包含0个、1个或多个字符。</li><li>声明方式与基本数据类型类似。例如：String str &#x3D; “尚硅谷”;</li></ul><h4 id="5-3-2-运算规则"><a href="#5-3-2-运算规则" class="headerlink" title="5.3.2 运算规则"></a>5.3.2 运算规则</h4><p>1、任意八种基本数据类型的数据与String类型只能进行连接“+”运算，且结果一定也是String类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;&quot;</span> + <span class="hljs-number">1</span> + <span class="hljs-number">2</span>);<span class="hljs-comment">//12</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> s1 + num + b1;<br>System.out.println(s2);<span class="hljs-comment">//abc10true</span><br><br><span class="hljs-comment">//String s3 = num + b1 + s1;//编译不通过，因为int类型不能与boolean运算</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> num + (b1 + s1);<span class="hljs-comment">//编译通过</span><br></code></pre></td></tr></table></figure><p>2、String类型不能通过强制类型()转换，转为其他的类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)str;<span class="hljs-comment">//错误的</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Integer.parseInt(str);<span class="hljs-comment">//正确的，后面才能讲到，借助包装类的方法才能转</span><br></code></pre></td></tr></table></figure><h4 id="5-3-3-案例与练习"><a href="#5-3-3-案例与练习" class="headerlink" title="5.3.3 案例与练习"></a>5.3.3 案例与练习</h4><p><strong>案例：公安局身份登记</strong></p><p>要求填写自己的姓名、年龄、性别、体重、婚姻状况（已婚用true表示，单身用false表示）、联系方式等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Info</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;康师傅&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">37</span>;<br>        <span class="hljs-type">char</span> <span class="hljs-variable">gender</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br>        <span class="hljs-type">double</span> <span class="hljs-variable">weight</span> <span class="hljs-operator">=</span> <span class="hljs-number">145.6</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isMarried</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">phoneNumber</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;13112341234&quot;</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;姓名：&quot;</span> + name);<br>        System.out.println(<span class="hljs-string">&quot;年龄：&quot;</span> + age);<br>        System.out.println(<span class="hljs-string">&quot;性别：&quot;</span> + gender);<br>        System.out.println(<span class="hljs-string">&quot;体重：&quot;</span> + weight);<br>        System.out.println(<span class="hljs-string">&quot;婚否：&quot;</span> + isMarried);<br>        System.out.println(<span class="hljs-string">&quot;电话：&quot;</span> + phoneNumber);<br><span class="hljs-comment">//或者</span><br>        System.out.println(<span class="hljs-string">&quot;name = &quot;</span> + name + <span class="hljs-string">&quot;,age = &quot;</span> + age + <span class="hljs-string">&quot;，gender = &quot;</span> + <br>                           gender + <span class="hljs-string">&quot;,weight = &quot;</span> + weight + <span class="hljs-string">&quot;,isMarried = &quot;</span> + isMarried +<br>                           <span class="hljs-string">&quot;,phoneNumber = &quot;</span> + phoneNumber);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习：</strong></p><p>练习1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;                       <span class="hljs-comment">//判断对错：</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-number">3.5f</span> + <span class="hljs-string">&quot;&quot;</span>;               <span class="hljs-comment">//判断str2对错：</span><br>System.out.println(str2);              <span class="hljs-comment">//输出：</span><br>System.out .println(<span class="hljs-number">3</span>+<span class="hljs-number">4</span>+<span class="hljs-string">&quot;Hello!&quot;</span>);     <span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;Hello!&quot;</span>+<span class="hljs-number">3</span>+<span class="hljs-number">4</span>);      <span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>+<span class="hljs-string">&quot;Hello!&quot;</span>);    <span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;Hello&quot;</span>+<span class="hljs-string">&#x27;a&#x27;</span>+<span class="hljs-number">1</span>);     <span class="hljs-comment">//输出：</span><br></code></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;*    *&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;*\t*&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span> + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&quot;*&quot;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&quot;\t&quot;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//输出：</span><br>System.out.println(<span class="hljs-string">&#x27;*&#x27;</span> + <span class="hljs-string">&#x27;\t&#x27;</span> + <span class="hljs-string">&#x27;*&#x27;</span>);<span class="hljs-comment">//输出：</span><br></code></pre></td></tr></table></figure><h2 id="6-计算机底层如何存储数据"><a href="#6-计算机底层如何存储数据" class="headerlink" title="6. 计算机底层如何存储数据"></a>6. 计算机底层如何存储数据</h2><p>计算机世界中只有二进制，所以计算机中存储和运算的<code>所有数据</code>都要转为<code>二进制</code>。包括数字、字符、图片、声音、视频等。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731332_watermark.jpg" alt="010101" style="zoom: 33%;" /><p><strong>世界上有10种人 ，认识和不认识二进制的。</strong></p><h3 id="6-1-进制的分类"><a href="#6-1-进制的分类" class="headerlink" title="6.1 进制的分类"></a>6.1 进制的分类</h3><ul><li><p><strong>十进制（decimal）</strong></p><ul><li>数字组成：0-9</li><li>进位规则：满十进一</li></ul></li><li><p><strong>二进制（binary）</strong></p><ul><li>数字组成：0-1</li><li>进位规则：满二进一，以<code>0b</code>或<code>0B</code>开头</li></ul></li><li><p><strong>八进制（octal）：很少使用</strong></p><ul><li>数字组成：0-7</li><li>进位规则：满八进一，以数字<code>0</code>开头表示</li></ul></li><li><p><strong>十六进制</strong></p><ul><li>数字组成：0-9，a-f</li><li>进位规则：满十六进一，以<code>0x</code>或<code>0X</code>开头表示。此处的 a-f 不区分大小写</li></ul></li></ul><p>代码演示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<span class="hljs-comment">//十进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0b101</span>;<span class="hljs-comment">//二进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> <span class="hljs-number">0127</span>;<span class="hljs-comment">//八进制</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num4</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x12aF</span>;<span class="hljs-comment">//十六进制</span><br><br>System.out.println(num1);<br>System.out.println(num2);<br>System.out.println(num3);<br>System.out.println(num4);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-2-进制的换算举例"><a href="#6-2-进制的换算举例" class="headerlink" title="6.2 进制的换算举例"></a>6.2 进制的换算举例</h3><table><thead><tr><th>十进制</th><th>二进制</th><th>八进制</th><th>十六进制</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td><td>1</td></tr><tr><td>2</td><td>10</td><td>2</td><td>2</td></tr><tr><td>3</td><td>11</td><td>3</td><td>3</td></tr><tr><td>4</td><td>100</td><td>4</td><td>4</td></tr><tr><td>5</td><td>101</td><td>5</td><td>5</td></tr><tr><td>6</td><td>110</td><td>6</td><td>6</td></tr><tr><td>7</td><td>111</td><td>7</td><td>7</td></tr><tr><td>8</td><td>1000</td><td>10</td><td>8</td></tr><tr><td>9</td><td>1001</td><td>11</td><td>9</td></tr><tr><td>10</td><td>1010</td><td>12</td><td>a或A</td></tr><tr><td>11</td><td>1011</td><td>13</td><td>b或B</td></tr><tr><td>12</td><td>1100</td><td>14</td><td>c或C</td></tr><tr><td>13</td><td>1101</td><td>15</td><td>d或D</td></tr><tr><td>14</td><td>1110</td><td>16</td><td>e或E</td></tr><tr><td>15</td><td>1111</td><td>17</td><td>f或F</td></tr><tr><td>16</td><td>10000</td><td>20</td><td>10</td></tr></tbody></table><h3 id="6-3-二进制的由来"><a href="#6-3-二进制的由来" class="headerlink" title="6.3 二进制的由来"></a>6.3 二进制的由来</h3><p>二进制，是计算技术中广泛采用的一种数制，由德国数理哲学大师<code>莱布尼茨</code>于1679年发明。</p><p>二进制数据是用0和1两个数码来表示的数。它的基数为2，进位规则是“<code>逢二进一</code>”。</p><p>二进制广泛应用于我们生活的方方面面。比如，广泛使用的摩尔斯电码（Morse Code），它由两种基本信号组成：短促的点信号“<code>·</code>”，读“<code>滴</code>”；保持一定时间的长信号“<code>—</code>”，读“<code>嗒</code>”。然后，组成了26个字母，从而拼写出相应的单词。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731940_watermark.png" alt="image-20220520105721126" style="zoom:67%;" /><p>记忆技巧：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731734_watermark.jpg" alt="morsecode" style="zoom:50%;" /><p>我们偶尔会看到的：SOS，即为：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731140_watermark.png" alt="image-20220520110206899"></p><h3 id="6-4-二进制转十进制"><a href="#6-4-二进制转十进制" class="headerlink" title="6.4 二进制转十进制"></a>6.4 二进制转十进制</h3><p><strong>二进制如何表示整数？</strong></p><ul><li><p>计算机数据的存储使用二进制<code>补码</code>形式存储，并且<code>最高位是符号位</code>。</p><ul><li>正数：<code>最高位是0</code></li><li>负数：<code>最高位是1</code></li></ul></li><li><p>规 定</p><ul><li>正数的补码与反码、原码一样，称为<code>三码合一</code></li><li>负数的补码与反码、原码不一样：<ul><li>负数的<code>原码</code>：把十进制转为二进制，然后最高位设置为1</li><li>负数的<code>反码</code>：在原码的基础上，最高位不变，其余位取反（0变1,1变0）</li><li>负数的<code>补码</code>：反码+1</li></ul></li></ul></li></ul><p><strong>二进制转十进制：权相加法</strong></p><p>针对于byte数据举例来说：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731663_watermark.png" alt="image-20220523114701881"></p><ul><li><p>例如：byte类型（1个字节，8位）</p><p>25 &#x3D;&#x3D;&gt; 原码  0001 1001 &#x3D;&#x3D;&gt; 反码  0001 1001 –&gt;补码  0001 1001</p><p>-25 &#x3D;&#x3D;&gt;原码  1001 1001 &#x3D;&#x3D;&gt; 反码1110 0110 &#x3D;&#x3D;&gt;补码 1110 0111</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">整数：<br>正数：<span class="hljs-number">25</span>   <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000000</span> <span class="hljs-number">00011001</span>（原码）<br>正数：<span class="hljs-number">25</span>   <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000000</span> <span class="hljs-number">00011001</span>（反码）<br>正数：<span class="hljs-number">25</span>   <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000000</span> <span class="hljs-number">00011001</span>（补码）<br><br>负数：-<span class="hljs-number">25</span>  <span class="hljs-number">10000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">000000000</span> <span class="hljs-number">00011001</span>（原码）<br>负数：-<span class="hljs-number">25</span>  <span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">111111111</span> <span class="hljs-number">11100110</span>（反码）<br>负数：-<span class="hljs-number">25</span>  <span class="hljs-number">11111111</span> <span class="hljs-number">11111111</span> <span class="hljs-number">111111111</span> <span class="hljs-number">11100111</span>（补码）<br></code></pre></td></tr></table></figure><p><strong>一个字节可以存储的整数范围是多少？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1个字节：8位</span><br><br><span class="hljs-number">0000</span> <span class="hljs-number">0001</span>  ~  <span class="hljs-number">0111</span> <span class="hljs-number">111</span> ==&gt; <span class="hljs-number">1</span>~<span class="hljs-number">127</span><br><br><span class="hljs-number">1000</span> <span class="hljs-number">0001</span> ~ <span class="hljs-number">1111</span> <span class="hljs-number">1111</span> ==&gt; -<span class="hljs-number">127</span> ~ -<span class="hljs-number">1</span><br><br><span class="hljs-number">0000</span> <span class="hljs-number">0000</span> ==&gt;<span class="hljs-number">0</span><br><br><span class="hljs-number">1000</span> <span class="hljs-number">0000</span> ==&gt; -<span class="hljs-number">128</span>（特殊规定）=-<span class="hljs-number">127</span>-<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="6-5-十进制转二进制"><a href="#6-5-十进制转二进制" class="headerlink" title="6.5 十进制转二进制"></a>6.5 十进制转二进制</h3><p>十进制转二进制：<code>除2取余的逆</code></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731997_watermark.png" alt="image-20220312000042595" style="zoom:67%;" /><h3 id="6-6-二进制与八进制、十六进制间的转换"><a href="#6-6-二进制与八进制、十六进制间的转换" class="headerlink" title="6.6 二进制与八进制、十六进制间的转换"></a>6.6 二进制与八进制、十六进制间的转换</h3><p><strong>二进制转八进制</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731408_watermark.png" alt="image-20220312000233863" style="zoom:80%;" /><p><strong>二进制转十六进制</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731222_watermark.png" alt="image-20220312000251113" style="zoom:80%;" /><p><strong>八进制、十六进制转二进制</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731430_watermark.png" alt="image-20220312000341297" style="zoom: 67%;" /><h3 id="6-7-各进制间的转换"><a href="#6-7-各进制间的转换" class="headerlink" title="6.7 各进制间的转换"></a>6.7 各进制间的转换</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731977_watermark.png" alt="image-20220312000143438" style="zoom:80%;" /><p><strong>练习：</strong></p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">1</span>.将以下十进制数转换为十六进制和二进制<br><span class="hljs-symbol">123 </span> <span class="hljs-number">256</span>  <span class="hljs-number">87</span>  <span class="hljs-number">62</span><br><br><br><span class="hljs-number">2</span>.将以下十六进制数转换为十进制和二进制<br><span class="hljs-number">0</span>x123   <span class="hljs-number">0</span>x25F  <span class="hljs-number">0</span>x38  <span class="hljs-number">0</span>x62<br></code></pre></td></tr></table></figure><h2 id="7-运算符（Operator）"><a href="#7-运算符（Operator）" class="headerlink" title="7. 运算符（Operator）"></a>7. 运算符（Operator）</h2><p>运算符是一种特殊的符号，用以表示数据的运算、赋值和比较等。</p><p>运算符的分类：</p><ul><li>按照<code>功能</code>分为：算术运算符、赋值运算符、比较(或关系)运算符、逻辑运算符、位运算符、条件运算符、Lambda运算符</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">算术运算符（7个）</td><td align="center">+、-、*、&#x2F;、%、++、–</td></tr><tr><td align="center">赋值运算符（12个）</td><td align="center">&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、&gt;&gt;&#x3D;、&lt;&lt;&#x3D;、&gt;&gt;&gt;&#x3D;、&amp;&#x3D;、|&#x3D;、^&#x3D;等</td></tr><tr><td align="center">比较(或关系)运算符（6个）</td><td align="center">&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;、&#x3D;&#x3D;、!&#x3D;</td></tr><tr><td align="center">逻辑运算符（6个）</td><td align="center">&amp;、|、^、!、&amp;&amp;、||</td></tr><tr><td align="center">位运算符（7个）</td><td align="center">&amp;、|、^、~、&lt;&lt;、&gt;&gt;、&gt;&gt;&gt;</td></tr><tr><td align="center">条件运算符（1个）</td><td align="center">(条件表达式)?结果1:结果2</td></tr><tr><td align="center">Lambda运算符（1个）</td><td align="center">-&gt;（第18章时讲解）</td></tr></tbody></table><ul><li>按照<code>操作数个数</code>分为：一元运算符（单目运算符）、二元运算符（双目运算符）、三元运算符 （三目运算符）</li></ul><table><thead><tr><th align="center">分类</th><th align="center">运算符</th></tr></thead><tbody><tr><td align="center">一元运算符（单目运算符）</td><td align="center">正号（+）、负号（-）、++、–、!、~</td></tr><tr><td align="center">二元运算符（双目运算符）</td><td align="center">除了一元和三元运算符剩下的都是二元运算符</td></tr><tr><td align="center">三元运算符 （三目运算符）</td><td align="center">(条件表达式)?结果1:结果2</td></tr></tbody></table><h3 id="7-1-算术运算符"><a href="#7-1-算术运算符" class="headerlink" title="7.1 算术运算符"></a>7.1 算术运算符</h3><h4 id="7-1-1-基本语法"><a href="#7-1-1-基本语法" class="headerlink" title="7.1.1 基本语法"></a>7.1.1 基本语法</h4><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731353_watermark.png" alt="image-20220312000848332"></p><p>举例1：加减乘除模</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><br>System.out.println(a + b);<span class="hljs-comment">// 7</span><br>System.out.println(a - b);<span class="hljs-comment">// -1</span><br>System.out.println(a * b);<span class="hljs-comment">// 12</span><br>System.out.println(a / b);<span class="hljs-comment">// 计算机结果是0，为什么不是0.75呢？</span><br>System.out.println(a % b);<span class="hljs-comment">// 3</span><br>        <br>        <span class="hljs-comment">//结果与被模数符号相同</span><br>        System.out.println(<span class="hljs-number">5</span>%<span class="hljs-number">2</span>);<span class="hljs-comment">//1</span><br>System.out.println(<span class="hljs-number">5</span>%-<span class="hljs-number">2</span>);<span class="hljs-comment">//1</span><br>System.out.println(-<span class="hljs-number">5</span>%<span class="hljs-number">2</span>);<span class="hljs-comment">//-1</span><br>System.out.println(-<span class="hljs-number">5</span>%-<span class="hljs-number">2</span>);<span class="hljs-comment">//-1</span><br><span class="hljs-comment">//商*除数 + 余数 = 被除数</span><br><span class="hljs-comment">//5%-2  ==&gt;商是-2，余数时1    (-2)*(-2)+1 = 5</span><br><span class="hljs-comment">//-5%2  ==&gt;商是-2，余数是-1   (-2)*2+(-1) = -4-1=-5</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例2：“+”号的两种用法</p><ul><li>第一种：对于<code>+</code>两边都是数值的话，<code>+</code>就是加法的意思</li><li>第二种：对于<code>+</code>两边至少有一边是字符串的话，<code>+</code>就是拼接的意思</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticTest2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 字符串类型的变量基本使用</span><br><span class="hljs-comment">// 数据类型 变量名称 = 数据值;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>System.out.println(str1); <span class="hljs-comment">// Hello</span><br><br>System.out.println(<span class="hljs-string">&quot;Hello&quot;</span> + <span class="hljs-string">&quot;World&quot;</span>); <span class="hljs-comment">// HelloWorld</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Java&quot;</span>;<br><span class="hljs-comment">// String + int --&gt; String</span><br>System.out.println(str2 + <span class="hljs-number">520</span>); <span class="hljs-comment">// Java520</span><br><span class="hljs-comment">// String + int + int</span><br><span class="hljs-comment">// String+ int</span><br><span class="hljs-comment">// String</span><br>System.out.println(str2 + <span class="hljs-number">5</span> + <span class="hljs-number">20</span>); <span class="hljs-comment">// Java520</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>举例3：自加自减运算</p><p>理解：<code>++</code>  运算，表示<code>自增1</code>。同理，<code>--</code> 运算，表示<code>自减1</code>，用法与++ 一致。</p><p>1、单独使用</p><ul><li>变量在单独运算的时候，变量<code>前++</code>和变量<code>后++</code>，是没有区别的。</li><li>变量<code>前++</code>   ：例如 <code>++a</code> 。</li><li>变量<code>后++</code>   ：例如 <code>a++</code> 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticTest3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 定义一个int类型的变量a</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-comment">//++a;</span><br>a++;<br>        <span class="hljs-comment">// 无论是变量前++还是变量后++，结果都是4</span><br>System.out.println(a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、复合使用</p><ul><li>和<code>其他变量放在一起使用</code>或者和<code>输出语句放在一起使用</code>，<code>前++</code>和<code>后++</code>就产生了不同。</li></ul><ul><li>变量<code>前++</code> ：变量先自增1，然后再运算。</li><li>变量<code>后++</code> ：变量先运算，然后再自增1。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticTest4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 其他变量放在一起使用</span><br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-comment">//int y = ++x; // y的值是4，x的值是4，</span><br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> x++; <span class="hljs-comment">// y的值是3，x的值是4</span><br><br>System.out.println(x);<br>System.out.println(y);<br>System.out.println(<span class="hljs-string">&quot;==========&quot;</span>);<br>        <br><span class="hljs-comment">// 和输出语句一起</span><br><span class="hljs-type">int</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><span class="hljs-comment">//System.out.println(++z);// 输出结果是6，z的值也是6</span><br>System.out.println(z++);<span class="hljs-comment">// 输出结果是5，z的值是6</span><br>System.out.println(z);<br>        <br>&#125; <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-1-2-案例与练习"><a href="#7-1-2-案例与练习" class="headerlink" title="7.1.2 案例与练习"></a>7.1.2 案例与练习</h4><p><strong>案例1：</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs">随意给出一个整数，打印显示它的个位数，十位数，百位数的值。<br>格式如下：<br>数字xxx的情况如下：<br>个位数：<br>十位数：<br>百位数：<br><br>例如：<br>数字153的情况如下：<br>个位数：3<br>十位数：5<br>百位数：1<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:20</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">187</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> num / <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">100</span> / <span class="hljs-number">10</span>;<span class="hljs-comment">//int shi = num / 10 % 10;</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">10</span>;<br><br>System.out.println(<span class="hljs-string">&quot;百位为：&quot;</span> + bai);<br>System.out.println(<span class="hljs-string">&quot;十位为：&quot;</span> + shi);<br>System.out.println(<span class="hljs-string">&quot;个位为：&quot;</span> + ge);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>拓展：获取一个四位数的个位，十位，百位，千位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:39</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String [] args)</span> &#123;<br>        <span class="hljs-comment">//1.定义一个变量，赋值为一个四位数整数，例如1234</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">1234</span>;<br><br>        <span class="hljs-comment">//2.通过运算操作求出个位，十位，百位，千位</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ge</span> <span class="hljs-operator">=</span> num % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">shi</span> <span class="hljs-operator">=</span> num /<span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">bai</span> <span class="hljs-operator">=</span> num /<span class="hljs-number">100</span> % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">qian</span> <span class="hljs-operator">=</span> num / <span class="hljs-number">1000</span> % <span class="hljs-number">10</span>;<br><br>        System.out.println(<span class="hljs-string">&quot;个位上的数字是：&quot;</span> + ge);<br>        System.out.println(<span class="hljs-string">&quot;十位上的数字是：&quot;</span> + shi);<br>        System.out.println(<span class="hljs-string">&quot;百位上的数字是：&quot;</span> + bai);<br>        System.out.println(<span class="hljs-string">&quot;千位上的数字是：&quot;</span> + qian);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>为抵抗洪水，战士连续作战89小时，编程计算共多少天零多少小时？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 17:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hours</span> <span class="hljs-operator">=</span> <span class="hljs-number">89</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> hours / <span class="hljs-number">24</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">hour</span> <span class="hljs-operator">=</span> hours % <span class="hljs-number">24</span>;<br>        System.out.println(<span class="hljs-string">&quot;为抵抗洪水，战士连续作战89小时：&quot;</span>);<br>        System.out.println(hours + <span class="hljs-string">&quot;是&quot;</span> + day + <span class="hljs-string">&quot;天&quot;</span> + hour +<span class="hljs-string">&quot;小时&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习1：算术运算符：自加、自减</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ArithmeticExer3</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> i1++;<br>        System.out.print(<span class="hljs-string">&quot;i=&quot;</span>+i); <span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;i1=&quot;</span>+i1);<span class="hljs-comment">//</span><br>        i = ++i1;<br>        System.out.print(<span class="hljs-string">&quot;i=&quot;</span>+i);<span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;i1=&quot;</span>+i1);<span class="hljs-comment">//</span><br>        i = i2--;<br>        System.out.print(<span class="hljs-string">&quot;i=&quot;</span>+i);<span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;i2=&quot;</span>+i2);<span class="hljs-comment">//</span><br>        i = --i2;<br>        System.out.print(<span class="hljs-string">&quot;i=&quot;</span>+i);<span class="hljs-comment">//</span><br>        System.out.println(<span class="hljs-string">&quot;i2=&quot;</span>+i2);<span class="hljs-comment">//</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;5+5=&quot;</span> + <span class="hljs-number">5</span> + <span class="hljs-number">5</span>); <span class="hljs-comment">//打印结果是？ 5+5=55 ?</span><br></code></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span> <span class="hljs-variable">bb1</span> <span class="hljs-operator">=</span> <span class="hljs-number">127</span>;<br>bb1++;<br>System.out.println(<span class="hljs-string">&quot;bb1 = &quot;</span> + bb1);<span class="hljs-comment">//-128</span><br></code></pre></td></tr></table></figure><p>练习4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i++ + ++i * i++;<br>System.out.println(<span class="hljs-string">&quot;j = &quot;</span> + j);<br></code></pre></td></tr></table></figure><p>练习5：（企业真题）写出下列程序的输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i++;<br>System.out.println(j);<br><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>m = m++; <span class="hljs-comment">//(1)先取b的值“2”放操作数栈 (2)m再自增,m=3 (3)再把操作数栈中的&quot;2&quot;赋值给m,m=2</span><br>System.out.println(m);<br></code></pre></td></tr></table></figure><h3 id="7-2-赋值运算符"><a href="#7-2-赋值运算符" class="headerlink" title="7.2 赋值运算符"></a>7.2 赋值运算符</h3><h4 id="7-2-1-基本语法"><a href="#7-2-1-基本语法" class="headerlink" title="7.2.1 基本语法"></a>7.2.1 基本语法</h4><ul><li><p>符号：&#x3D; </p><ul><li>当“&#x3D;”两侧数据类型不一致时，可以使用自动类型转换或使用强制类型转换原则进行处理。</li><li>支持<code>连续赋值</code>。</li></ul></li><li><p>扩展赋值运算符： +&#x3D;、 -&#x3D;、*&#x3D;、 &#x2F;&#x3D;、%&#x3D;</p><table><thead><tr><th align="center">赋值运算符</th><th align="center">符号解释</th></tr></thead><tbody><tr><td align="center"><code>+=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相加</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>-=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相减</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>*=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相乘</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>/=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>相除</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr><tr><td align="center"><code>%=</code></td><td align="center">将符号<code>左边的值</code>和<code>右边的值</code>进行<code>取余</code>操作，最后将结果<code>赋值给左边的变量</code></td></tr></tbody></table></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SetValueTest1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span> i1; <span class="hljs-comment">//自动类型转换</span><br><br><span class="hljs-type">byte</span> <span class="hljs-variable">bb1</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>)i1; <span class="hljs-comment">//强制类型转换</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> i1;<br><br><span class="hljs-comment">//连续赋值的测试</span><br><span class="hljs-comment">//以前的写法</span><br><span class="hljs-type">int</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">//连续赋值的写法</span><br><span class="hljs-type">int</span> a2,b2;<br>a2 = b2 = <span class="hljs-number">10</span>;<br><br><span class="hljs-type">int</span> <span class="hljs-variable">a3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>,b3 = <span class="hljs-number">20</span>;<br><br><span class="hljs-comment">//举例说明+=  -=  *=  /=   %=  </span><br><span class="hljs-type">int</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>m1 += <span class="hljs-number">5</span>; <span class="hljs-comment">//类似于 m1 = m1 + 5的操作，但不等同于。</span><br>System.out.println(m1);<span class="hljs-comment">//15</span><br><br><span class="hljs-comment">//练习1：开发中，如何实现一个变量+2的操作呢？</span><br><span class="hljs-comment">// += 的操作不会改变变量本身的数据类型。其他拓展的运算符也如此。</span><br><span class="hljs-comment">//写法1：推荐</span><br><span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>s1 += <span class="hljs-number">2</span>; <span class="hljs-comment">//编译通过，因为在得到int类型的结果后，JVM自动完成一步强制类型转换，将int类型强转成short</span><br>System.out.println(s1);<span class="hljs-comment">//12</span><br><span class="hljs-comment">//写法2：</span><br><span class="hljs-type">short</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-comment">//s2 = s2 + 2;//编译报错，因为将int类型的结果赋值给short类型的变量s时，可能损失精度</span><br>s2 = (<span class="hljs-type">short</span>)(s2 + <span class="hljs-number">2</span>);<br>System.out.println(s2);<br><br><br><span class="hljs-comment">//练习2：开发中，如何实现一个变量+1的操作呢？</span><br><span class="hljs-comment">//写法1：推荐</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num1++;<br>System.out.println(num1);<br><br><span class="hljs-comment">//写法2：</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num2 += <span class="hljs-number">1</span>;<br>System.out.println(num2);<br><br><span class="hljs-comment">//写法3：</span><br><span class="hljs-type">int</span> <span class="hljs-variable">num3</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>num3 = num3 + <span class="hljs-number">1</span>;<br>System.out.println(num3);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-2-2-练习"><a href="#7-2-2-练习" class="headerlink" title="7.2.2 练习"></a>7.2.2 练习</h4><p>练习1：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>; <br>s = s+<span class="hljs-number">2</span>;  <span class="hljs-comment">//① 编译报错</span><br>s += <span class="hljs-number">2</span>;   <span class="hljs-comment">//② 正常执行</span><br><br><span class="hljs-comment">//①和②有什么区别？ </span><br><br></code></pre></td></tr></table></figure><p>练习2：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>i *= <span class="hljs-number">0.1</span>;<br>System.out.println(i);<span class="hljs-comment">//0</span><br>i++;<br>System.out.println(i);<span class="hljs-comment">//1</span><br><br></code></pre></td></tr></table></figure><p>练习3：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>n *= m++; <span class="hljs-comment">//n = n * m++;</span><br>System.out.println(<span class="hljs-string">&quot;m=&quot;</span> + m);<span class="hljs-comment">//3</span><br>System.out.println(<span class="hljs-string">&quot;n=&quot;</span> + n);<span class="hljs-comment">//6</span><br><br></code></pre></td></tr></table></figure><p>练习4：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>n += (n++) + (++n);  <span class="hljs-comment">//n = n + (n++) + (++n)</span><br>System.out.println(n);<span class="hljs-comment">//32</span><br><br></code></pre></td></tr></table></figure><p>练习5：你有几种办法实现变量值减1？变量值减2呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 16:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MinusTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//练习①：变量值减1</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//方式1：</span><br>        <span class="hljs-comment">//s = (short)(s - 1);</span><br>        <span class="hljs-comment">//方式2：推荐</span><br>        s--; <span class="hljs-comment">//或者 --s</span><br>        <span class="hljs-comment">//方式3：</span><br>        s -= <span class="hljs-number">1</span>;<br><br>        <span class="hljs-comment">//练习②：变量值减2</span><br>        <span class="hljs-type">short</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-comment">//方式1：</span><br>        <span class="hljs-comment">//s1 = (short)(s1 - 2);</span><br>        <span class="hljs-comment">//方式2：推荐</span><br>        s1 -= <span class="hljs-number">2</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-3-比较-关系-运算符"><a href="#7-3-比较-关系-运算符" class="headerlink" title="7.3 比较(关系)运算符"></a>7.3 比较(关系)运算符</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731870_watermark.png" alt="image-20220312001742263"></p><ul><li><p>比较运算符的结果都是boolean型，也就是要么是true，要么是false。</p></li><li><p>&gt;   &lt;   &gt;&#x3D;  &lt;&#x3D; ：只适用于基本数据类型（除boolean类型之外）</p><p>&#x3D;&#x3D;   !&#x3D; ：适用于基本数据类型和引用数据类型</p></li><li><p>比较运算符“<code>==</code>”不能误写成“<code>=</code>”</p></li></ul><p>举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>System.out.println(i1 == i2);<span class="hljs-comment">//false</span><br>System.out.println(i1 != i2);<span class="hljs-comment">//true</span><br>System.out.println(i1 &gt;= i2);<span class="hljs-comment">//false</span><br><br><br><span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>System.out.println(m == n);<span class="hljs-comment">//false</span><br>System.out.println(m = n);<span class="hljs-comment">//20</span><br><br><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>System.out.println(b1 == b2);<span class="hljs-comment">//false</span><br>System.out.println(b1 = b2);<span class="hljs-comment">//true</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>思考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><span class="hljs-comment">//区分好==和=的区别。</span><br><span class="hljs-keyword">if</span>(b1 == <span class="hljs-literal">true</span>)  <span class="hljs-comment">//if(b1 = true)</span><br>System.out.println(<span class="hljs-string">&quot;结果为真&quot;</span>);<br><span class="hljs-keyword">else</span><br>System.out.println(<span class="hljs-string">&quot;结果为假&quot;</span>);<br><br></code></pre></td></tr></table></figure><h3 id="7-4-逻辑运算符"><a href="#7-4-逻辑运算符" class="headerlink" title="7.4 逻辑运算符"></a>7.4 逻辑运算符</h3><h4 id="7-4-1-基本语法"><a href="#7-4-1-基本语法" class="headerlink" title="7.4.1 基本语法"></a>7.4.1 基本语法</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731548_watermark.png" alt="image-20220312001943403" style="zoom: 67%;" /><ul><li><p>逻辑运算符，操作的都是boolean类型的变量或常量，而且运算得结果也是boolean类型的值。</p></li><li><p>运算符说明：</p><ul><li>&amp; 和 &amp;&amp;：表示”且”关系，当符号左右两边布尔值都是true时，结果才能为true。否则，为false。</li><li>| 和 || ：表示”或”关系，当符号两边布尔值有一边为true时，结果为true。当两边都为false时，结果为false</li><li>! ：表示”非”关系，当变量布尔值为true时，结果为false。当变量布尔值为false时，结果为true。</li><li>^ ：当符号左右两边布尔值不同时，结果为true。当两边布尔值相同时，结果为false。<ul><li>理解：<code>异或，追求的是“异”！</code></li></ul></li></ul></li><li><p>逻辑运算符用于连接布尔型表达式，在Java中不可以写成 3 &lt; x &lt; 6，应该写成x &gt; 3 &amp; x &lt; 6 。</p></li><li><p><strong>区分“&amp;”和“&amp;&amp;”：</strong></p><ul><li><p>相同点：如果符号左边是true，则二者都执行符号右边的操作</p></li><li><p>不同点：&amp; ： 如果符号左边是false,则继续执行符号右边的操作</p></li></ul><p>​                     &amp;&amp; ：如果符号左边是false,则不再继续执行符号右边的操作</p><ul><li>建议：开发中，推荐使用 &amp;&amp;</li></ul></li><li><p><strong>区分“|”和“||”：</strong></p><ul><li><p>相同点：如果符号左边是false，则二者都执行符号右边的操作</p></li><li><p>不同点：| ： 如果符号左边是true，则继续执行符号右边的操作</p><p>​               || ：如果符号左边是true，则不再继续执行符号右边的操作</p></li><li><p>建议：开发中，推荐使用 ||</p></li></ul></li></ul><p> 代码举例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginTest</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">4</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br><span class="hljs-comment">// &amp; 与，且；有false则false</span><br>System.out.println((a &gt; b) &amp; (a &gt; c)); <br>System.out.println((a &gt; b) &amp; (a &lt; c)); <br>System.out.println((a &lt; b) &amp; (a &gt; c)); <br>System.out.println((a &lt; b) &amp; (a &lt; c)); <br>System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);<br><span class="hljs-comment">// | 或；有true则true</span><br>System.out.println((a &gt; b) | (a &gt; c)); <br>System.out.println((a &gt; b) | (a &lt; c)); <br>System.out.println((a &lt; b) | (a &gt; c));<br>System.out.println((a &lt; b) | (a &lt; c));<br>System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);<br><span class="hljs-comment">// ^ 异或；相同为false，不同为true</span><br>System.out.println((a &gt; b) ^ (a &gt; c));<br>System.out.println((a &gt; b) ^ (a &lt; c)); <br>System.out.println((a &lt; b) ^ (a &gt; c)); <br>System.out.println((a &lt; b) ^ (a &lt; c)); <br>System.out.println(<span class="hljs-string">&quot;===============&quot;</span>);<br><span class="hljs-comment">// ! 非；非false则true，非true则false</span><br>System.out.println(!<span class="hljs-literal">false</span>);<br>System.out.println(!<span class="hljs-literal">true</span>);<br>        <br>        <span class="hljs-comment">//&amp;和&amp;&amp;的区别</span><br>        System.out.println((a &gt; b) &amp; (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println((a &gt; b) &amp;&amp; (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println((a == b) &amp;&amp; (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        <br>        <span class="hljs-comment">//|和||的区别</span><br>        System.out.println((a &gt; b) | (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println((a &gt; b) || (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>        System.out.println((a == b) || (a++ &gt; c)); <br>        System.out.println(<span class="hljs-string">&quot;a = &quot;</span> + a);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-4-2-案例与练习"><a href="#7-4-2-案例与练习" class="headerlink" title="7.4.2 案例与练习"></a>7.4.2 案例与练习</h4><p><strong>案例：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span>. 定义类 CompareLogicExer<br><span class="hljs-number">2</span>. 定义 <span class="hljs-selector-tag">main</span>方法<br><span class="hljs-number">3</span>. 定义一个int类型变量<span class="hljs-selector-tag">a</span>,变量<span class="hljs-selector-tag">b</span>,都赋值为<span class="hljs-number">20</span><br><span class="hljs-number">4</span>. 定义boolean类型变量bo1 , 判断++<span class="hljs-selector-tag">a</span> 是否被<span class="hljs-number">3</span>整除,并且<span class="hljs-selector-tag">a</span>++ 是否被<span class="hljs-number">7</span>整除,将结果赋值给bo1<br><span class="hljs-number">5</span>. 输出<span class="hljs-selector-tag">a</span>的值,bo1的值<br><span class="hljs-number">6</span>. 定义boolean类型变量bo2 , 判断<span class="hljs-selector-tag">b</span>++ 是否被<span class="hljs-number">3</span>整除,并且++<span class="hljs-selector-tag">b</span> 是否被<span class="hljs-number">7</span>整除,将结果赋值给bo2<br><span class="hljs-number">7</span>. 输出<span class="hljs-selector-tag">b</span>的值,bo2的值<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompareLogicExer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bo1</span> <span class="hljs-operator">=</span> ((++a % <span class="hljs-number">3</span>) == <span class="hljs-number">0</span>) &amp;&amp; ((a++ % <span class="hljs-number">7</span>) == <span class="hljs-number">0</span>);<br>        System.out.println(<span class="hljs-string">&quot;bo1的值：&quot;</span> + bo1);<br>        System.out.println(<span class="hljs-string">&quot;a的值：&quot;</span> + a);<br>        System.out.println(<span class="hljs-string">&quot;----------------------------&quot;</span>);<br>        <br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">bo2</span> <span class="hljs-operator">=</span> ((b++ % <span class="hljs-number">3</span>) == <span class="hljs-number">0</span>) &amp;&amp; ((++b % <span class="hljs-number">7</span>) == <span class="hljs-number">0</span>); <br>        System.out.println(<span class="hljs-string">&quot;bo2的值：&quot;</span> + bo2);<br>        System.out.println(<span class="hljs-string">&quot;b的值：&quot;</span> + b);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>练习1：</strong>区分 &amp; 和 &amp;&amp; </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(x++ == <span class="hljs-number">2</span> &amp; ++y == <span class="hljs-number">2</span>)&#123;<br>x = <span class="hljs-number">7</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x=&quot;</span> + x + <span class="hljs-string">&quot;,y=&quot;</span> + y);<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>,y = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(x++ == <span class="hljs-number">2</span> &amp;&amp; ++y == <span class="hljs-number">2</span>)&#123;<br>x =<span class="hljs-number">7</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x=&quot;</span>+x+<span class="hljs-string">&quot;,y=&quot;</span>+y);<br><br></code></pre></td></tr></table></figure><p><strong>练习2：</strong>区分 | 和 ||</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>,y = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(x++==<span class="hljs-number">1</span> | ++y==<span class="hljs-number">1</span>)&#123;<br>x =<span class="hljs-number">7</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x=&quot;</span>+x+<span class="hljs-string">&quot;,y=&quot;</span>+y);<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>,y = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">if</span>(x++==<span class="hljs-number">1</span> || ++y==<span class="hljs-number">1</span>)&#123;<br>x =<span class="hljs-number">7</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;x=&quot;</span>+x+<span class="hljs-string">&quot;,y=&quot;</span>+y);<br><br></code></pre></td></tr></table></figure><p><strong>练习3：</strong>程序输出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span>  <span class="hljs-title class_">Test</span>  &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String []  args)</span>  &#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-type">short</span> <span class="hljs-variable">z</span> <span class="hljs-operator">=</span> <span class="hljs-number">42</span>;<br>        <br>        <span class="hljs-keyword">if</span> ((z++ == <span class="hljs-number">42</span>) &amp;&amp; (y = <span class="hljs-literal">true</span>)) &#123;<br>            z++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ((x = <span class="hljs-literal">false</span>) || (++z == <span class="hljs-number">45</span>)) &#123;<br>            z++;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">&quot;z=&quot;</span> + z);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//结果为：</span><br><span class="hljs-comment">//z= 46</span><br></code></pre></td></tr></table></figure><h3 id="7-5-位运算符"><a href="#7-5-位运算符" class="headerlink" title="7.5 位运算符"></a>7.5 位运算符</h3><h4 id="7-5-1-基本语法"><a href="#7-5-1-基本语法" class="headerlink" title="7.5.1 基本语法"></a>7.5.1 基本语法</h4><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731874_watermark.png" alt="image-20220313174721111" style="zoom:75%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731301_watermark.png" alt="image-20220312002506339" style="zoom:67%;" /><ul><li>位运算符的运算过程都是基于二进制的补码运算</li></ul><p><strong>（1）左移：&lt;&lt;</strong></p><p>运算规则：在一定范围内，数据每向左移动一位，相当于原数据*2。（正数、负数都适用）</p><p>【注意】当左移的位数n超过该数据类型的总位数时，相当于左移（n-总位数）位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">3</span>&lt;&lt;<span class="hljs-number">4</span>  类似于  <span class="hljs-number">3</span>*<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次幂 =&gt; <span class="hljs-number">3</span>*<span class="hljs-number">16</span> =&gt; <span class="hljs-number">48</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731941_watermark.png" alt="image-20200225113651675"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">3</span>&lt;&lt;<span class="hljs-number">4</span>  类似于  -<span class="hljs-number">3</span>*<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次幂 =&gt; -<span class="hljs-number">3</span>*<span class="hljs-number">16</span> =&gt; -<span class="hljs-number">48</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731211_watermark.png" alt="image-20200225114707524"></p><p><strong>（2）右移：&gt;&gt;</strong></p><p>运算规则：在一定范围内，数据每向右移动一位，相当于原数据&#x2F;2。（正数、负数都适用）</p><p>【注意】如果不能整除，<code>向下取整</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">69</span>&gt;&gt;<span class="hljs-number">4</span>  类似于  <span class="hljs-number">69</span>/<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次 = <span class="hljs-number">69</span>/<span class="hljs-number">16</span> =<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731662_watermark.png" alt="image-20200225115636844"></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-string">-69</span>&gt;&gt;4  类似于  <span class="hljs-string">-69</span>/2的4次 = <span class="hljs-string">-69</span>/16 = <span class="hljs-string">-5</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731142_watermark.png" alt="image-20200225120112188"></p><p><strong>（3）无符号右移：&gt;&gt;&gt;</strong></p><p>运算规则：往右移动后，左边空出来的位直接补0。（正数、负数都适用）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">69</span>&gt;&gt;&gt;<span class="hljs-number">4</span>  类似于  <span class="hljs-number">69</span>/<span class="hljs-number">2</span>的<span class="hljs-number">4</span>次 = <span class="hljs-number">69</span>/<span class="hljs-number">16</span> =<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731824_watermark.png" alt="image-20200225121104734"></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-69&gt;&gt;&gt;4   结果：268435451</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731209_watermark.png" alt="image-20200225121244290"></p><p><strong>（4）按位与：&amp;</strong></p><p>运算规则：对应位都是1才为1，否则为0。</p><ul><li><p>1 &amp; 1 结果为1</p></li><li><p>1 &amp; 0 结果为0</p></li><li><p>0 &amp; 1 结果为0</p></li><li><p>0 &amp; 0 结果为0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">9</span> &amp; <span class="hljs-number">7</span> = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731837_watermark.png" alt="image-20200225122440953"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">9</span> &amp; <span class="hljs-number">7</span> = <span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731199_watermark.png" alt="image-20200225122221616"></p><p><strong>（5）按位或：|</strong></p><p>运算规则：对应位只要有1即为1，否则为0。</p><ul><li><p>1 | 1 结果为1</p></li><li><p>1 | 0 结果为1</p></li><li><p>0 | 1 结果为1</p></li><li><p>0 &amp; 0 结果为0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">9</span> | <span class="hljs-number">7</span>  <span class="hljs-comment">//结果： 15</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731532_watermark.png" alt="image-20200225122758851"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">9</span> | <span class="hljs-number">7</span> <span class="hljs-comment">//结果： -9</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731855_watermark.png" alt="image-20200225123409130"></p><p><strong>（6）按位异或：^</strong></p><p>运算规则：对应位一个为1一个为0，才为1，否则为0。</p><ul><li><p>1 ^ 1 结果为0</p></li><li><p>1 ^ 0 结果为1</p></li><li><p>0 ^ 1 结果为1</p></li><li><p>0 ^ 0 结果为0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">9</span> ^ <span class="hljs-number">7</span>  <span class="hljs-comment">//结果为14</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731050_watermark.png" alt="image-20200225123445305"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">-<span class="hljs-number">9</span> ^ <span class="hljs-number">7</span> <span class="hljs-comment">//结果为-16</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731378_watermark.png" alt="image-20200225133145727"></p><p><strong>（7）按位取反：~</strong></p><p>运算规则：对应位为1，则结果为0；对应位为0，则结果为1。</p><ul><li><p>~0就是1  </p></li><li><p>~1就是0</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">~<span class="hljs-number">9</span>  <span class="hljs-comment">//结果：-10</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731749_watermark.png" alt="image-20200225124112662"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">~-<span class="hljs-number">9</span>  <span class="hljs-comment">//结果：8</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731945_watermark.png" alt="image-20200225124156862"></p><h4 id="7-5-2-举例"><a href="#7-5-2-举例" class="headerlink" title="7.5.2 举例"></a>7.5.2 举例</h4><p><strong>举例1：</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731320_watermark.jpg" alt="snipaste_20220312_002549" style="zoom: 67%;" /><p><strong>举例2：体会 m &#x3D; k ^ n &#x3D; (m ^ n) ^ n</strong></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731177_watermark.png" alt="image-20220312002736157" style="zoom:67%;" /><h4 id="7-5-3-案例"><a href="#7-5-3-案例" class="headerlink" title="7.5.3 案例"></a>7.5.3 案例</h4><p><strong>案例1：</strong>高效的方式计算2 * 8的值（经典面试题）</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tap">答案：2 &lt;&lt;<span class="hljs-number"> 3 </span>、 <span class="hljs-number"> 8 </span> &lt;&lt; 1<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>如何交换两个int型变量的值？String呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 16:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BitExer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br><br><span class="hljs-comment">//（推荐）实现方式1：优点：容易理解，适用于不同数据类型    缺点：需要额外定义变量</span><br><span class="hljs-comment">//int temp = m;</span><br><span class="hljs-comment">//m = n;</span><br><span class="hljs-comment">//n = temp;</span><br><br><span class="hljs-comment">//实现方式2：优点：没有额外定义变量    缺点：可能超出int的范围；只能适用于数值类型</span><br><span class="hljs-comment">//m = m + n; //15 = 10 + 5</span><br><span class="hljs-comment">//n = m - n;//10 = 15 - 5</span><br><span class="hljs-comment">//m = m - n;//5 = 15 - 10</span><br><br><span class="hljs-comment">//实现方式3：优点：没有额外定义变量    缺点：不易理解；只能适用于数值类型</span><br>m = m ^ n; <br>n = m ^ n; <span class="hljs-comment">//(m ^ n) ^ n</span><br>m = m ^ n;<br><br>System.out.println(<span class="hljs-string">&quot;m = &quot;</span> + m + <span class="hljs-string">&quot;, n = &quot;</span> + n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="7-6-条件运算符"><a href="#7-6-条件运算符" class="headerlink" title="7.6 条件运算符"></a>7.6 条件运算符</h3><h4 id="7-6-1-基本语法"><a href="#7-6-1-基本语法" class="headerlink" title="7.6.1 基本语法"></a>7.6.1 基本语法</h4><ul><li>条件运算符格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">(条件表达式)? 表达式<span class="hljs-number">1</span>:表达式<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li><p>说明：条件表达式是boolean类型的结果，根据boolean的值选择表达式1或表达式2</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731633_watermark.png" alt="image-20220312002841945" style="zoom:67%;" /></li><li><p>如果运算后的结果赋给新的变量，要求表达式1和表达式2为同种或兼容的类型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> (<span class="hljs-number">1</span>==<span class="hljs-number">2</span> ? <span class="hljs-number">100</span> : <span class="hljs-number">200</span>);<br>    System.out.println(i);<span class="hljs-comment">//200</span><br>    <br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">marry</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>System.out.println(marry ? <span class="hljs-string">&quot;已婚&quot;</span> : <span class="hljs-string">&quot;未婚&quot;</span>  );<br>    <br>    <span class="hljs-type">double</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> (m1 &gt; m2)? <span class="hljs-number">1</span> : <span class="hljs-number">2.0</span>;<br>System.out.println(d1);<br>    <br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">12</span>;<br>    System.out.println(num &gt; <span class="hljs-number">0</span>? <span class="hljs-literal">true</span> : <span class="hljs-string">&quot;num非正数&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-6-2-案例"><a href="#7-6-2-案例" class="headerlink" title="7.6.2 案例"></a>7.6.2 案例</h4><p><strong>案例1：</strong>获取两个数中的较大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionExer1</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//获取两个数的较大值</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">max1</span> <span class="hljs-operator">=</span> (m1 &gt; m2)? m1 : m2;<br>        System.out.println(<span class="hljs-string">&quot;m1和m2中的较大值为&quot;</span> + max1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：</strong>获取三个数中的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionExer2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">23</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">13</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> <span class="hljs-number">33</span>;<br>        <span class="hljs-comment">//写法1：</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">tempMax</span> <span class="hljs-operator">=</span> (n1 &gt; n2)? n1:n2;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalMax</span> <span class="hljs-operator">=</span> (tempMax &gt; n3)? tempMax : n3;<br>        System.out.println(<span class="hljs-string">&quot;三个数中最大值为：&quot;</span> + finalMax);<br><br>        <span class="hljs-comment">//写法2：不推荐，可读性差</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalMax1</span> <span class="hljs-operator">=</span> (((n1 &gt; n2)? n1:n2) &gt; n3)? ((n1 &gt; n2)? n1:n2) : n3;<br>        System.out.println(<span class="hljs-string">&quot;三个数中最大值为：&quot;</span> + finalMax1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例3：</strong>今天是周2，10天以后是周几？</p><p>要求：控制台输出”今天是周2，10天以后是周x”。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@create</span> 12:46</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConditionExer3</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">week</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>        week += <span class="hljs-number">10</span>;<br>        week %= <span class="hljs-number">7</span>;<br>        System.out.println(<span class="hljs-string">&quot;今天是周2,10天以后是周&quot;</span> + (week == <span class="hljs-number">0</span> ? <span class="hljs-string">&quot;日&quot;</span> : week));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="7-6-3-与if-else的转换关系"><a href="#7-6-3-与if-else的转换关系" class="headerlink" title="7.6.3 与if-else的转换关系"></a>7.6.3 与if-else的转换关系</h4><ul><li><p>凡是可以使用条件运算符的地方，都可以改写为if-else结构。反之，不成立。</p></li><li><p>开发中，如果既可以使用条件运算符，又可以使用if-else，推荐使用条件运算符。因为执行效率稍高。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//if-else实现获取两个数的较大值</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br><br><span class="hljs-type">int</span> max;<span class="hljs-comment">//声明变量max，用于记录i1和i2的较大值</span><br><br><span class="hljs-keyword">if</span>(i1 &gt; i2)&#123;<br>    max = i1;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    max = i2;<br>&#125;<br><br>System.out.println(max);<br></code></pre></td></tr></table></figure><h3 id="7-7-运算符优先级"><a href="#7-7-运算符优先级" class="headerlink" title="7.7 运算符优先级"></a>7.7 运算符优先级</h3><p>运算符有不同的优先级，所谓优先级就是在表达式运算中的运算符顺序。</p><p>上一行中的运算符总是优先于下一行的。</p><table><thead><tr><th>优先级</th><th align="center">运算符说明</th><th align="center">Java运算符</th></tr></thead><tbody><tr><td>1</td><td align="center">括号</td><td align="center"><code>()</code>、<code>[]</code>、<code>&#123;&#125;</code></td></tr><tr><td>2</td><td align="center">正负号</td><td align="center"><code>+</code>、<code>-</code></td></tr><tr><td>3</td><td align="center">单元运算符</td><td align="center"><code>++</code>、<code>--</code>、<code>~</code>、<code>！</code></td></tr><tr><td>4</td><td align="center">乘法、除法、求余</td><td align="center"><code>*</code>、<code>/</code>、<code>%</code></td></tr><tr><td>5</td><td align="center">加法、减法</td><td align="center"><code>+</code>、<code>-</code></td></tr><tr><td>6</td><td align="center">移位运算符</td><td align="center"><code>&lt;&lt;</code>、<code>&gt;&gt;</code>、<code>&gt;&gt;&gt;</code></td></tr><tr><td>7</td><td align="center">关系运算符</td><td align="center"><code>&lt;</code>、<code>&lt;=</code>、<code>&gt;=</code>、<code>&gt;</code>、<code>instanceof</code></td></tr><tr><td>8</td><td align="center">等价运算符</td><td align="center"><code>==</code>、<code>!=</code></td></tr><tr><td>9</td><td align="center">按位与</td><td align="center"><code>&amp;</code></td></tr><tr><td>10</td><td align="center">按位异或</td><td align="center"><code>^</code></td></tr><tr><td>11</td><td align="center">按位或</td><td align="center">&#96;</td></tr><tr><td>12</td><td align="center">条件与</td><td align="center"><code>&amp;&amp;</code></td></tr><tr><td>13</td><td align="center">条件或</td><td align="center">&#96;</td></tr><tr><td>14</td><td align="center">三元运算符</td><td align="center"><code>? :</code></td></tr><tr><td>15</td><td align="center">赋值运算符</td><td align="center"><code>=</code>、<code>+=</code>、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></td></tr><tr><td>16</td><td align="center">位赋值运算符</td><td align="center"><code>&amp;=</code>、&#96;</td></tr></tbody></table><blockquote><p>开发建议：</p><ol><li>不要过多的依赖运算的优先级来控制表达式的执行顺序，这样可读性太差，尽量<code>使用()来控制</code>表达式的执行顺序。</li><li>不要把一个表达式写得过于复杂，如果一个表达式过于复杂，则把它<code>分成几步</code>来完成。例如：<br>​ (num1 + num2) * 2 &gt; num3 &amp;&amp; num2 &gt; num3 ? num3 : num1 + num2;</li></ol></blockquote><h2 id="8-【拓展】关于字符集"><a href="#8-【拓展】关于字符集" class="headerlink" title="8. 【拓展】关于字符集"></a>8. 【拓展】关于字符集</h2><h3 id="8-1-字符集"><a href="#8-1-字符集" class="headerlink" title="8.1 字符集"></a>8.1 字符集</h3><ul><li><strong>编码与解码</strong></li></ul><p>计算机中储存的信息都是用<code>二进制数</code>表示的，而我们在屏幕上看到的数字、英文、标点符号、汉字等字符是二进制数转换之后的结果。按照某种规则，将字符存储到计算机中，称为<code>编码</code> 。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<code>解码</code> 。</p><ul><li><p><strong>字符编码（Character Encoding）</strong> : 就是一套自然语言的字符与二进制数之间的对应规则。</p></li><li><p><strong>字符集</strong>：也叫编码表。是一个系统支持的所有字符的集合，包括各国家文字、标点符号、图形符号、数字等。</p></li></ul><h3 id="8-2-ASCII码"><a href="#8-2-ASCII码" class="headerlink" title="8.2 ASCII码"></a>8.2 ASCII码</h3><ul><li>ASCII码（American Standard Code for Information Interchange，美国信息交换标准代码）：上个世纪60年代，美国制定了一套字符编码，对<code>英语字符</code>与二进制位之间的关系，做了统一规定。这被称为ASCII码。</li><li>ASCII码用于显示现代英语，主要包括控制字符（回车键、退格、换行键等）和可显示字符（英文大小写字符、阿拉伯数字和西文符号）。</li><li>基本的ASCII字符集，使用7位（bits）表示一个字符（最前面的1位统一规定为0），共<code>128个</code>字符。比如：空格“SPACE”是32（二进制00100000），大写的字母A是65（二进制01000001）。</li><li>缺点：不能表示所有字符。</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731034_watermark.png" alt="image-20220513095907601"></p><h3 id="8-3-ISO-8859-1字符集"><a href="#8-3-ISO-8859-1字符集" class="headerlink" title="8.3 ISO-8859-1字符集"></a>8.3 ISO-8859-1字符集</h3><ul><li>拉丁码表，别名Latin-1，用于显示欧洲使用的语言，包括荷兰语、德语、意大利语、葡萄牙语等</li><li>ISO-8859-1使用单字节编码，兼容ASCII编码。</li></ul><h3 id="8-4-GBxxx字符集"><a href="#8-4-GBxxx字符集" class="headerlink" title="8.4 GBxxx字符集"></a>8.4 GBxxx字符集</h3><ul><li>GB就是国标的意思，是为了<code>显示中文</code>而设计的一套字符集。</li><li><strong>GB2312</strong>：简体中文码表。一个小于127的字符的意义与原来相同，即向下兼容ASCII码。但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含<code>7000多个简体汉字</code>，此外数学符号、罗马希腊的字母、日文的假名们都编进去了，这就是常说的”全角”字符，而原来在127号以下的那些符号就叫”半角”字符了。</li><li><strong>GBK</strong>：最常用的中文码表。是在GB2312标准基础上的扩展规范，使用了<code>双字节</code>编码方案，共收录了<code>21003个</code>汉字，完全兼容GB2312标准，同时支持<code>繁体汉字</code>以及日韩汉字等。</li><li><strong>GB18030</strong>：最新的中文码表。收录汉字<code>70244个</code>，采用<code>多字节</code>编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等。</li></ul><h3 id="8-5-Unicode码"><a href="#8-5-Unicode码" class="headerlink" title="8.5 Unicode码"></a>8.5 Unicode码</h3><ul><li><p>Unicode编码为表达<code>任意语言的任意字符</code>而设计，也称为统一码、标准万国码。Unicode 将世界上所有的文字用<code>2个字节</code>统一进行编码，为每个字符设定唯一的二进制编码，以满足跨语言、跨平台进行文本处理的要求。</p></li><li><p>Unicode 的缺点：这里有三个问题：</p><ul><li>第一，英文字母只用一个字节表示就够了，如果用更多的字节存储是<code>极大的浪费</code>。</li><li>第二，如何才能<code>区别Unicode和ASCII</code>？计算机怎么知道两个字节表示一个符号，而不是分别表示两个符号呢？</li><li>第三，如果和GBK等双字节编码方式一样，用最高位是1或0表示两个字节和一个字节，就少了很多值无法用于表示字符，<code>不够表示所有字符</code>。</li></ul></li><li><p>Unicode在很长一段时间内无法推广，直到互联网的出现，为解决Unicode如何在网络上传输的问题，于是面向传输的众多 UTF（UCS Transfer Format）标准出现。具体来说，有三种编码方案，UTF-8、UTF-16和UTF-32。</p></li></ul><h3 id="8-6-UTF-8"><a href="#8-6-UTF-8" class="headerlink" title="8.6 UTF-8"></a>8.6 UTF-8</h3><ul><li>Unicode是字符集，UTF-8、UTF-16、UTF-32是三种<code>将数字转换到程序数据</code>的编码方案。顾名思义，UTF-8就是每次8个位传输数据，而UTF-16就是每次16个位。其中，UTF-8 是在互联网上<code>使用最广</code>的一种 Unicode 的实现方式。</li><li>互联网工程工作小组（IETF）要求所有互联网协议都必须支持UTF-8编码。所以，我们开发Web应用，也要使用UTF-8编码。UTF-8 是一种<code>变长的编码方式</code>。它可以使用 1-4 个字节表示一个符号它使用一至四个字节为每个字符编码，编码规则：<ol><li>128个US-ASCII字符，只需一个字节编码。</li><li>拉丁文等字符，需要二个字节编码。 </li><li>大部分常用字（含中文），使用三个字节编码。</li><li>其他极少使用的Unicode辅助字符，使用四字节编码。</li></ol></li></ul><ul><li>举例</li></ul><p>Unicode符号范围  | UTF-8编码方式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">(十六进制)</span>           <span class="hljs-string">|</span> <span class="hljs-string">（二进制）</span><br><br><span class="hljs-string">————————————————————|—–—–—–—–—–—–—–—–—–—–—–—–—–—–</span><br><br><span class="hljs-number">0000 </span><span class="hljs-number">0000</span><span class="hljs-number">-0000</span> <span class="hljs-string">007F</span> <span class="hljs-string">|</span> <span class="hljs-string">0xxxxxxx（兼容原来的ASCII）</span><br><br><span class="hljs-number">0000 </span><span class="hljs-number">0080</span><span class="hljs-number">-0000</span> <span class="hljs-string">07FF</span> <span class="hljs-string">|</span> <span class="hljs-string">110xxxxx</span> <span class="hljs-string">10xxxxxx</span><br><br><span class="hljs-number">0000 </span><span class="hljs-number">0800</span><span class="hljs-number">-0000</span> <span class="hljs-string">FFFF</span> <span class="hljs-string">|</span> <span class="hljs-string">1110xxxx</span> <span class="hljs-string">10xxxxxx</span> <span class="hljs-string">10xxxxxx</span><br><br><span class="hljs-number">0001 </span><span class="hljs-number">0000</span><span class="hljs-number">-0010</span> <span class="hljs-string">FFFF</span> <span class="hljs-string">|</span> <span class="hljs-string">11110xxx</span> <span class="hljs-string">10xxxxxx</span> <span class="hljs-string">10xxxxxx</span> <span class="hljs-string">10xxxxxx</span><br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731771_watermark.png" alt="image-20220525164636164"></p><h3 id="8-7-小结"><a href="#8-7-小结" class="headerlink" title="8.7 小结"></a>8.7 小结</h3><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/%E5%8F%98%E9%87%8F%E4%B8%8E%E8%BF%90%E7%AE%97%E7%AC%A6/202402211731059_watermark.jpg" alt="字符集"></p><blockquote><p>注意：在中文操作系统上，ANSI（美国国家标准学会、AMERICAN NATIONAL STANDARDS INSTITUTE: ANSI）编码即为GBK；在英文操作系统上，ANSI编码即为ISO-8859-1。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java语言概述</title>
    <link href="/2024/02/21/1.%20Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/"/>
    <url>/2024/02/21/1.%20Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Java语言概述"><a href="#1-Java语言概述" class="headerlink" title="1. Java语言概述"></a>1. Java语言概述</h2><h3 id="1-1-Java概述"><a href="#1-1-Java概述" class="headerlink" title="1.1 Java概述"></a>1.1 Java概述</h3><ul><li><p>是<code>SUN</code>(Stanford University Network，斯坦福大学网络公司 ) <code>1995年</code>推出的一门高级编程语言。</p></li><li><p>是一种面向Internet的编程语言。Java一开始富有吸引力是因为Java程序可以在<code>Web浏览器</code>中运行。这些Java程序被称为<code>Java小程序</code>（applet），内嵌在HTML代码中。</p></li><li><p>伴随着互联网的迅猛发展，以及Java技术在web方面的不断成熟，已经成为Web应用程序的首选开发语言。</p></li></ul><h3 id="1-2-Java语言简史"><a href="#1-2-Java语言简史" class="headerlink" title="1.2 Java语言简史"></a>1.2 Java语言简史</h3><p><strong>起步阶段：</strong></p><p>1991年，Sun公司的工程师小组想要设计一种语言，应用在<code>电视机</code>、<code>电话</code>、<code>闹钟</code>、<code>烤面包机</code>等家用电器的控制和通信。由于这些设备的<code>处理能力</code>和<code>内存</code>都很有限，并且不同的厂商会选择不同的中央处理器(CPU)，因此这种语言的关键是<code>代码短小</code>、<code>紧凑</code>且<code>与平台无关</code>（即不能与任何特定的体系结构捆绑在一起）。</p><p>Gosling团队率先创造了这个语言，并命名为“<code>Oak</code>“（起名的原因是因为他非常喜欢自己办公室外的橡树)。后因智能化家电的市场需求没有预期的高，Sun公司放弃了该项计划。</p><p>随着20世纪90年代互联网的发展，Sun公司发现该语言在互联网上应用的前景，于是改造了Oak，于1995年5月以Java的名称正式发布。（Java是印度尼西亚<code>爪哇岛</code>的英文名称，因盛产咖啡而闻名。）</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/Java%E5%9B%BE%E6%A0%87_watermark.png" alt="Java图标"></p><p><strong>发展阶段：</strong></p><table><thead><tr><th align="center">发行版本</th><th align="center">发行时间</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center">Java 1.0</td><td align="center">1996.01.23</td><td align="center">Sun公司发布了Java的第一个开发工具包</td></tr><tr><td align="center">Java 1.1</td><td align="center">1997.02.19</td><td align="center">JavaOne会议召开，创当时全球同类会议规模之最。</td></tr><tr><td align="center">Java 1.2</td><td align="center">1998.12.08</td><td align="center">Java拆分成：J2SE（标准版）、J2EE（企业版）、J2ME（小型版）</td></tr><tr><td align="center">Java 1.3</td><td align="center">2000.05.08</td><td align="center"></td></tr><tr><td align="center">Java1.4</td><td align="center">2004.02.06</td><td align="center"></td></tr><tr><td align="center"><strong>Java 5.0</strong></td><td align="center"><strong>2004.09.30</strong></td><td align="center"><strong>①版本号从1.4直接更新至5.0；②平台更名为JavaSE、JavaEE、JavaME</strong></td></tr><tr><td align="center">Java 6.0</td><td align="center">2006.12.11</td><td align="center">2009.04.20 Oracle宣布收购SUN公司</td></tr><tr><td align="center"></td><td align="center">2009.04.20</td><td align="center">Oracle公司收购SUN，交易价格<code>74亿</code>美元。</td></tr><tr><td align="center">Java 7.0</td><td align="center">2011.07.02</td><td align="center"></td></tr><tr><td align="center"><strong>Java 8.0</strong></td><td align="center"><strong>2014.03.18</strong></td><td align="center"><strong>此版本是继Java 5.0以来变化最大的版本。是长期支持版本（LTS）</strong></td></tr><tr><td align="center">Java 9.0</td><td align="center">2017.09.22</td><td align="center">①此版本开始，<strong>每半年更新一次</strong>；②Java 9.0开始不再支持windows 32位系统</td></tr><tr><td align="center">Java 10.0</td><td align="center">2018.03.21</td><td align="center"></td></tr><tr><td align="center"><strong>Java 11.0</strong></td><td align="center"><strong>2018.09.25</strong></td><td align="center"><strong>JDK安装包取消独立JRE安装包，是长期支持版本（LTS）</strong></td></tr><tr><td align="center">Java 12.0</td><td align="center">2019.03.19</td><td align="center"></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center"></td></tr><tr><td align="center"><strong>Java17.0</strong></td><td align="center"><strong>2021.09</strong></td><td align="center"><strong>发布Java 17.0，版本号也称为21.9，是长期支持版本。</strong></td></tr><tr><td align="center">…</td><td align="center">…</td><td align="center"></td></tr><tr><td align="center">Java19.0</td><td align="center">2022.09</td><td align="center">发布Java19.0，版本号也称为22.9。</td></tr></tbody></table><h3 id="1-3-Java之父"><a href="#1-3-Java之父" class="headerlink" title="1.3 Java之父"></a>1.3 Java之父</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/Java%E4%B9%8B%E7%88%B6_watermark.png" alt="image-20220310152923961" style="zoom:67%;" /><ul><li><code>詹姆斯·高斯林(James Gosling)</code>先生以“Java 技术之父”而闻名于世。他是Java 技术的创始人，他亲手设计了Java语言，并开发了Java编译器和Java虚拟机，使Java成为了世界上最流行的开发语言。</li><li>James Gosling于1984 年加入Sun公司，并一直服务于Sun公司，直至2010年前后，Sun被Oracle并购而加入Oracle，担任客户端软件集团的首席技术官; 2010年4月从Oracle离职。</li></ul><h3 id="1-4-公司八卦"><a href="#1-4-公司八卦" class="headerlink" title="1.4 公司八卦"></a>1.4 公司八卦</h3><ul><li><strong>SUN 与 Oracle</strong></li></ul><blockquote><p>SUN是一家<code>极具创新能力</code>的公司，2001年 “9.11”以前，SUN公司市值<code>超过1000亿</code>美元。 但是没能利用Java构建一个强有力、可变现的生态系统，没打好Java这张牌。此后，互联网泡沫破裂，硬件需求大幅减少，它的市值在一个月之内跌幅超过90%。<strong>SUN公司的成长用了20年，而衰落只用了1年！</strong></p></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/sun%E4%B8%8E%E7%94%B2%E9%AA%A8%E6%96%87_watermark.png" alt="image-20220309230923533" style="zoom: 67%;" /><ul><li><strong>Oracle 与 Google</strong></li></ul><blockquote><p>Google和Oracle的侵权事件：</p><p>2010 年 8 月，Oracle 起诉 Google 的 Android 系统侵权，要求赔偿 26 亿美元。</p><ul><li>Oracle认为Google的代码中使用了Java的<code>37个API</code>，并且认为Google是故意为之，因为这样做的好处是可以让更多的Java程序员更容易接受Android的代码。</li><li>Oracle认为Android 中有<code>9行代码</code>直接抄袭了Java的实现。这9行牛气哄哄的代码都出自一人之手，他就是Java 大牛——<code>Joshua Bloch</code>。</li></ul><p>2018 年 3 月，美国联邦巡回上诉法院裁决，谷歌侵犯了甲骨文的版权，支付高达<code>88亿美元</code>的赔偿金。</p><p>2021 年 4 月，美国最高法院给出了最终裁决：谷歌胜诉，其代码属于“合理使用”的范畴。为期十多年的软件行业“第一版权案”落幕。</p></blockquote><blockquote></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Code In OpenJDK / Android ：</span><br><span class="hljs-number">1.</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rangeCheck</span><span class="hljs-params">(<span class="hljs-type">int</span> arrayLen, <span class="hljs-type">int</span> fromIndex, <span class="hljs-type">int</span> toIndex)</span> &#123;<br><span class="hljs-number">2.</span>    <span class="hljs-keyword">if</span> (fromIndex &gt; toIndex)<br><span class="hljs-number">3.</span>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;fromIndex(&quot;</span> + fromIndex +<br><span class="hljs-number">4.</span>                   <span class="hljs-string">&quot;) &gt; toIndex(&quot;</span> + toIndex+<span class="hljs-string">&quot;)&quot;</span>);<br><span class="hljs-number">5.</span>    <span class="hljs-keyword">if</span> (fromIndex &lt; <span class="hljs-number">0</span>)<br><span class="hljs-number">6.</span>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(fromIndex);<br><span class="hljs-number">7.</span>    <span class="hljs-keyword">if</span> (toIndex &gt; arrayLen)<br><span class="hljs-number">8.</span>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayIndexOutOfBoundsException</span>(toIndex);<br><span class="hljs-number">9.</span> &#125;<br></code></pre></td></tr></table></figure><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/Google%E4%B8%8EOracle_watermark.png" alt="image-20221027145908490"></p><h3 id="1-5-Java技术体系平台"><a href="#1-5-Java技术体系平台" class="headerlink" title="1.5 Java技术体系平台"></a>1.5 Java技术体系平台</h3><ul><li><strong>Java SE(Java Standard Edition)标准版</strong><ul><li>支持面向<code>桌面级应用</code>（如Windows下的应用程序）的Java平台，即定位个人计算机的应用开发。</li><li>包括用户界面接口AWT及Swing，网络功能与国际化、图像处理能力以及输入输出支持等。</li><li>此版本以前称为J2SE</li></ul></li><li><strong>Java EE(Java Enterprise Edition)企业版</strong><ul><li>为开发企业环境下的应用程序提供的一套解决方案，即定位<code>在服务器端的Web应用开发</code>。</li><li>JavaEE是JavaSE的扩展，增加了用于服务器开发的类库。如：Servlet能够延伸服务器的功能，通过请求-响应的模式来处理客户端的请求；JSP是一种可以将Java程序代码内嵌在网页内的技术。</li><li>版本以前称为J2EE</li></ul></li><li><strong>Java ME(Java Micro Edition)小型版</strong><ul><li>支持Java程序运行在<code>移动终端（手机、机顶盒）上的平台</code>，即定位在消费性电子产品的应用开发</li><li>JavaME是JavaSE的内伸，精简了JavaSE 的核心类库，同时也提供自己的扩展类。增加了适合微小装置的类库：javax.microedition.io.*等。</li><li>此版本以前称为J2ME</li></ul></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/EE%E3%80%81SE%E3%80%81ME%E5%85%B3%E8%81%94_watermark.png" alt="image-20211218093009884"></p><blockquote><p>注意：</p><p>Android开发不等同于Java ME的开发</p></blockquote><h2 id="2-Java开发环境搭建"><a href="#2-Java开发环境搭建" class="headerlink" title="2. Java开发环境搭建"></a>2. Java开发环境搭建</h2><h3 id="2-1-什么是JDK、JRE"><a href="#2-1-什么是JDK、JRE" class="headerlink" title="2.1 什么是JDK、JRE"></a>2.1 什么是JDK、JRE</h3><ul><li><strong>JDK</strong>  (Java Development Kit)：是Java程序开发工具包，包含<code>JRE</code> 和开发人员使用的工具。</li><li>**JRE ** (Java Runtime Environment) ：是Java程序的运行时环境，包含<code>JVM</code> 和运行时所需要的<code>核心类库</code>。</li></ul><p>如下是Java 8.0 Platform：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211115901_watermark.jpg"></p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211115871_watermark.png" alt="image-20220310200731185" style="zoom:67%;" /><blockquote><p>小结：</p><p>JDK &#x3D; JRE + 开发工具集（例如Javac编译工具等）</p><p>JRE &#x3D; JVM + Java SE标准类库</p></blockquote><h3 id="2-2-JDK版本选择"><a href="#2-2-JDK版本选择" class="headerlink" title="2.2 JDK版本选择"></a>2.2 JDK版本选择</h3><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211041655_watermark.png" alt="image-20221108221057540" style="zoom:80%;" /><hr><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211041706_watermark.png" alt="image-20220310201541841"></p><ul><li>自Java 8版本发布以来，其后的每次更新，都会有小伙伴高呼：<strong>Java8 YYDS！</strong></li><li>论坛的声音：“<code>你发任你发，我用Java 8！</code>”</li></ul><p><strong>数据说话1：</strong></p><p>JRebel 于2022年4月前后发布了《2022 年Java生态系统状况报告》，报告中提到使用Java11 的占比最多，Java 8 紧随其后，如下图。而此前2020年的报告显示，Java8占比达到了<code>84.48%</code>。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211041728_watermark.jpeg" alt="d315"></p><blockquote><p>我的分析：</p><p>G1是最受欢迎的GC算法。Java 11及更高版本的G1收集器是默认的GC，而Java 8中并不是。出于对G1的喜爱，很多开发者才会选择抛弃Java 8。</p></blockquote><p><strong>数据说话2：</strong></p><p>此外，某美国软件开发商在对近千名专业的Java开发者调研后，发布的《2022年Java开发者生产力报告》称：八年前发布的Java 8依然是Java中应用最广泛的版本，占比 <code>37%</code>，其次是 Java 11，占比<code>29%</code> 。</p><p><strong>高斯林说话：</strong></p><hr><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211041742_watermark.png" alt="image-20220428151952049" style="zoom: 67%;" /><p><strong>Spring框架说话：</strong></p><p>在Java 17正式发布之前，Java开发框架Spring率先在官博宣布，Spring Framework 6和Spring Boot 3计划在2022年第四季度实现总体可用性的高端基线：</p><ul><li><p>Java 17+(来自 Spring Framework 5.3.x 线中的 Java 8-17)</p></li><li><p>Jakarta EE 9+（来自Spring框架5.3.x 线中的 Java EE 7-8）</p></li></ul><p>Spring 官方说明：<code>https://spring.io/blog/2022/01/20/spring-boot-3-0-0-m1-is-now-available</code></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211041767_watermark.png" alt="image-20220527155439683"></p><blockquote><p>意味着：springboot3.0 是需要用java17和spring6.0为基础建设。如果从企业选型最新springboot3.0作为架构来说，它搭配jdk17肯定是标配了。</p></blockquote><h3 id="2-3-JDK的下载"><a href="#2-3-JDK的下载" class="headerlink" title="2.3 JDK的下载"></a>2.3 JDK的下载</h3><ul><li>下载网址（Oracle公司官网）：<a href="http://www.oracle.com/">www.oracle.com</a></li><li>下载步骤：如图所示，在官网底部选择Developers开发者</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043477_watermark.png" alt="1572254490435"></p><p>（1）在Developers页面中间的技术分类部分，选择<code>Java</code>，单击进入，如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043496_watermark.png" alt="image-20211019110551338" style="zoom: 50%;" /><p>（2）这里展示的是最新Java版本，例如Java17。单击<code>Download Java</code>，然后选择具体的版本下载。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043562_watermark.png" alt="image-20211019110843394" style="zoom:80%;" /><p>（3）选择Download Java按钮后</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043532_watermark.png" alt="image-20211019111110242"></p><p>（4）如果想安装Java8 可以选择如下位置：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043547_watermark.png" alt="image-20211019111150970" style="zoom:80%;" /><p>（5）选择Accept License Agreement，</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043583_watermark.png" alt="image-20211019111252989" style="zoom:80%;" /><p>（6）注册或登录后下载：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043653_watermark.png" alt="image-20211019111922387" style="zoom:50%;" /><p>（7）如果需要安装其它版本，可以选择Java archive：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043410_watermark.png" alt="image-20220801004606762" style="zoom: 67%;" /><p>接着进行选择下载即可：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043664_watermark.png" alt="image-20220801004648997" style="zoom:67%;" /><h3 id="2-4-JDK的安装"><a href="#2-4-JDK的安装" class="headerlink" title="2.4 JDK的安装"></a>2.4 JDK的安装</h3><ul><li>安装说明<ul><li>傻瓜式安装，下一步即可。</li><li><strong>建议：安装路径不要有中文或者空格等特殊符号。</strong></li><li><strong>本套课程会同时安装JDK8 和 JDK17，并以JDK17为默认版本进行讲解。</strong></li></ul></li></ul><ul><li>安装步骤：</li></ul><p>（1）双击<code>jdk-17_windows-x64_bin.exe</code>文件，并单击下一步，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043959_watermark.png" alt="image-20220303083718546"></p><p>（2）修改安装路径，单击更改，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043099_watermark.png" alt="image-20220303083759546"></p><p>（3）将安装路径修改为<code>D:\develop_tools\jdk\jdk-17.0.2\</code>，并单击下一步，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043059_watermark.png" alt="image-20220303083845794"></p><p>（4）稍后几秒，安装完成，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043752_watermark.png" alt="image-20220303083905277"></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043507_watermark.png" alt="image-20220303083931309"></p><h3 id="2-5-配置path环境变量"><a href="#2-5-配置path环境变量" class="headerlink" title="2.5 配置path环境变量"></a>2.5 配置path环境变量</h3><h4 id="7-5-1-理解path环境变量"><a href="#7-5-1-理解path环境变量" class="headerlink" title="7.5.1 理解path环境变量"></a>7.5.1 理解path环境变量</h4><p><strong>什么是path环境变量？</strong></p><p>答：window操作系统执行命令时，所要搜寻的路径。</p><p><strong>为什么配置path？</strong></p><p>答：希望在命令行使用javac.exe等工具时，任意目录下都可以找到这个工具所在的目录。</p><p><strong>以JDK为例演示</strong></p><p>我们在<code>C:\Users\songhk</code>目录下使用javac命令，结果如下：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043254_watermark.png" alt="image-20220310223852720"></p><p>我们在JDK的安装目录的bin目录下使用javac命令，结果如下：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043093_watermark.png" alt="image-20220607113708022" style="zoom:75%;" /><p>我们不可能每次使用java.exe，javac.exe等工具的时候都进入到JDK的安装目录下，太麻烦了。这时就需要配置path环境变量。</p><h4 id="2-5-2-JDK8配置方案1：只配置path"><a href="#2-5-2-JDK8配置方案1：只配置path" class="headerlink" title="2.5.2 JDK8配置方案1：只配置path"></a>2.5.2 JDK8配置方案1：只配置path</h4><ul><li>步骤：</li></ul><p>（1）打开桌面上的计算机，进入后在左侧找到<code>此电脑</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043295_watermark.png" alt="image-20220310224844837"></p><p>（2）选择<code>高级系统设置</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043918_watermark.png" alt="image-20220310224912273"></p><p>（3）在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043018_watermark.png" alt="image-20220310224952745"></p><p>（4）在<code>系统变量</code>中，选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ,如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043974_watermark.png" alt="image-20220310225023208"></p><p>（5）点击<code>新建</code>，填入<code>D:\develop_tools\jdk\jdk1.8.0_271\bin</code>  ，并将此值<code>上移</code>到变量列表的首位。如图所示：</p><ul><li>编辑模式1：</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043297_watermark.png" alt="image-20220607114102135" style="zoom:80%;" /><ul><li>编辑模式2：（注意，结尾需要有英文模式下的;）</li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043775_watermark.png" alt="image-20220929104547925"></p><p>（6）环境变量配置完成，<strong>重新开启</strong>DOS命令行，在任意目录下输入<code>javac</code> 或<code>java</code>命令或<code>java -version</code>，运行成功。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043034_watermark.png" alt="image-20220607114432286" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043332_watermark.png" alt="image-20220607114517652" style="zoom:90%;" /><h4 id="2-5-3-JDK8配置方案2：配置JAVA-HOME-path（推荐）"><a href="#2-5-3-JDK8配置方案2：配置JAVA-HOME-path（推荐）" class="headerlink" title="2.5.3 JDK8配置方案2：配置JAVA_HOME+path（推荐）"></a>2.5.3 JDK8配置方案2：配置JAVA_HOME+path（推荐）</h4><ul><li>步骤：</li></ul><p>（1）打开桌面上的计算机，进入后在左侧找到<code>计算机</code>，单击鼠标<code>右键</code>，选择<code>属性</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043295_watermark.png" alt="image-20220310224844837"></p><p>（2）选择<code>高级系统设置</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043918_watermark.png" alt="image-20220310224912273"></p><p>（3）在<code>高级</code>选项卡，单击<code>环境变量</code>，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043018_watermark.png" alt="image-20220310224952745"></p><p>（4）在<code>系统变量</code>中，单击<code>新建</code> ，创建新的环境变量，如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043318_watermark.png" alt="image-20220310225245208" style="zoom:90%;" /><p>（5）变量名输入<code>JAVA_HOME</code>，变量值输入 <code>D:\develop_tools\jdk\jdk1.8.0_271</code> ，单击<code>确定</code>，如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043901_watermark.png" alt="image-20220607114800372" style="zoom:80%;" /><p>（6）选中<code>Path</code> 环境变量，<code>双击</code>或者<code>点击编辑</code> ，如图所示：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043974_watermark.png" alt="image-20220310225023208"></p><p>（7）在变量值的最前面，键入<code>%JAVA_HOME%\bin</code>。如图所示：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043283_watermark.png" alt="image-20220607114953758" style="zoom:80%;" /><blockquote><p>注意：强烈建议将%JAVA_HOME%\bin声明在path环境变量中所有变量的最前面！</p></blockquote><p>（8）环境变量配置完成，<strong>重启</strong>DOS命令行，在任意目录下输入<code>javac</code> 或<code>java</code>命令或<code>java -version</code>，运行成功。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043034_watermark.png" alt="image-20220607114432286" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043332_watermark.png" alt="image-20220607114517652" style="zoom:90%;" /><blockquote><p>我想说：</p><p>有的书籍、论坛、视频上还提到配置classpath，用于指名class文件识别的路径。其实是没必要的，反而建议大家如果配置了classpath环境变量，要删除。对于初学者，反而不友好。</p></blockquote><p><strong>小结如下：</strong></p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043619_watermark.png" alt="image-20220607115255562"></p><h4 id="2-5-4-JDK17配置方案：自动配置"><a href="#2-5-4-JDK17配置方案：自动配置" class="headerlink" title="2.5.4 JDK17配置方案：自动配置"></a>2.5.4 JDK17配置方案：自动配置</h4><p>不管大家有没有提前安装JDK8或其它版本JDK，在我们安装完JDK17之后，理应按JDK8的方式配置path环境变量。但是，我们发现在安装完JDK17以后，配置环境变量之前，执行CMD指令：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043768_watermark.png" alt="image-20220607115700870" style="zoom:80%;" /><p>竟然成功了！而且是17.0.2版本。因为JDK17在安装之后，自动进行了环境变量的配置。如下：</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043747_watermark.png" alt="image-20220607115840388" style="zoom:80%;" /><p>这里建议，将JDK17安装的路径，设置为JAVA_HOME，并将<code>%JAVA_HOME%\bin</code>上移到首位。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043937_watermark.png" alt="image-20221110142710972" style="zoom:80%;" /><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043712_watermark.png" alt="image-20221110142734279" style="zoom:80%;" /><blockquote><p>思考：如果你仍然希望在JDK8下开发Java程序？如何做呢？</p></blockquote><h2 id="3-开发体验：HelloWorld（掌握）"><a href="#3-开发体验：HelloWorld（掌握）" class="headerlink" title="3. 开发体验：HelloWorld（掌握）"></a>3. 开发体验：HelloWorld（掌握）</h2><p>JDK安装完毕，我们就可以开发第一个Java程序了，习惯性的称为：HelloWorld。</p><h3 id="3-1-开发步骤"><a href="#3-1-开发步骤" class="headerlink" title="3.1 开发步骤"></a>3.1 开发步骤</h3><p>Java程序开发三步骤：<strong>编写</strong>、<strong>编译</strong>、<strong>运行</strong>。</p><ul><li>将 Java 代码<strong>编写</strong>到扩展名为 .java 的源文件中</li><li>通过 javac.exe 命令对该 java 文件进行<strong>编译</strong>，生成一个或多个字节码文件</li><li>通过 java.exe 命令对生成的 class 文件进行<strong>运行</strong></li></ul><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211043432_watermark.png" alt="image-20220310230210728"></p><h3 id="3-2-编写"><a href="#3-2-编写" class="headerlink" title="3.2 编写"></a>3.2 编写</h3><p>（1）在<code>D:\JavaSE\chapter01</code> 目录下新建文本文件，完整的文件名修改为<code>HelloWorld.java</code>，其中文件名为<code>HelloWorld</code>，后缀名必须为<code>.java</code>。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043146_watermark.png" alt="image-20220801010222222" style="zoom:90%;" /><p>（2）用记事本或editplus等文本编辑器打开（虽然记事本也可以，但是没有关键字颜色标识，不利于初学者学习）</p><p>（3）在文件中输入如下代码，并且保存：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloChina</span> &#123;<br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;HelloWorld!!&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>友情提示1：每个字母和符号必须与示例代码一模一样，包括大小写在内。</strong></p></li><li><p>友情提示2：</p></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043876_watermark.png" alt="image-20220310230618659" style="zoom:67%;" /><p>或</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043442_watermark.png" alt="image-20220521173215013" style="zoom:90%;" /><p>第一个<code>HelloWord</code> 源程序就编写完成了，但是这个文件是程序员编写的，JVM是看不懂的，也就不能运行，因此我们必须将编写好的<code>Java源文件</code> 编译成JVM可以看懂的<code>字节码文件</code> ，也就是<code>.class</code>文件。</p><h3 id="3-3-编译"><a href="#3-3-编译" class="headerlink" title="3.3 编译"></a>3.3 编译</h3><p>在DOS命令行中，进入<code>D:\JavaSE\chapter01</code>目录，使用<code>javac</code> 命令进行编译。</p><p>使用文件资源管理器打开<code>D:\JavaSE\chapter01</code>目录，然后在地址栏输入cmd。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043806_watermark.png" alt="image-20220801010435144" style="zoom:80%;" /><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">javac Java源文件名.后缀名java<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">javac </span>HelloWorld.<span class="hljs-keyword">java</span><br></code></pre></td></tr></table></figure><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043528_watermark.png" alt="image-20220801010840640" style="zoom:80%;" /><p>编译成功后，命令行没有任何提示。打开<code>D:\JavaSE\chapter01</code>目录，发现产生了一个新的文件 <code>HelloChina.class</code>，该文件就是编译后的文件，是Java的可运行文件，称为<strong>字节码文件</strong>，有了字节码文件，就可以运行程序了。 </p><h3 id="3-4-运行"><a href="#3-4-运行" class="headerlink" title="3.4 运行"></a>3.4 运行</h3><p>在DOS命令行中，在字节码文件目录下，使用<code>java</code> 命令进行运行。</p><p>命令：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">java 主类名字<br></code></pre></td></tr></table></figure><p>主类是指包含main方法的类，main方法是Java程序的入口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">java HelloChina</span><br></code></pre></td></tr></table></figure><blockquote><p>错误演示：</p><p>java HelloChina.class</p></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043382_watermark.png" alt="image-20220801011104381" style="zoom:80%;" /><h2 id="4-Java开发工具"><a href="#4-Java开发工具" class="headerlink" title="4. Java开发工具"></a>4. Java开发工具</h2><h3 id="4-1-都有哪些开发Java的工具"><a href="#4-1-都有哪些开发Java的工具" class="headerlink" title="4.1 都有哪些开发Java的工具"></a>4.1 都有哪些开发Java的工具</h3><ul><li>级别一：文本开发工具</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211043732_watermark.png" alt="image-20220513185907022" style="zoom:50%;" /><ul><li>级别二：集成开发环境（Integrated Development Environment，IDE）</li></ul><blockquote><p>把代码编写，编译，执行，调试等多种功能综合到一起的开发工具。</p></blockquote><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044877_watermark.png" alt="image-20220513190655773" style="zoom:50%;" /><h3 id="4-2-如何选择"><a href="#4-2-如何选择" class="headerlink" title="4.2 如何选择"></a>4.2 如何选择</h3><p>前期我们先使用文本开发工具，培养<code>代码感</code>，利于公司笔、面试。</p><p>后期我们使用IDE，提供<code>更强大的功能支持</code>。</p><h2 id="5-HelloWorld案例常见错误"><a href="#5-HelloWorld案例常见错误" class="headerlink" title="5. HelloWorld案例常见错误"></a>5. HelloWorld案例常见错误</h2><h3 id="5-1-拼写问题"><a href="#5-1-拼写问题" class="headerlink" title="5.1 拼写问题"></a>5.1 拼写问题</h3><ul><li><pre><code class="hljs">单词拼写问题</code></pre><ul><li>正确：class         错误：Class</li><li>正确：String                    错误：string</li><li>正确：System                  错误：system</li><li>正确：main         错误：mian</li></ul></li><li><pre><code class="hljs">Java语言是一门严格区分大小写的语言</code></pre></li><li><pre><code class="hljs">标点符号使用问题</code></pre><ul><li>不能用中文符号，英文半角的标点符号（正确）</li><li>括号问题，成对出现</li></ul></li></ul><h3 id="5-2-编译、运行路径问题"><a href="#5-2-编译、运行路径问题" class="headerlink" title="5.2 编译、运行路径问题"></a>5.2 编译、运行路径问题</h3><p>举例1：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044877_watermark.png" alt="image-20220310231657692" style="zoom:80%;" /><ul><li>源文件名不存在或者写错</li><li>当前路径错误</li><li>后缀名隐藏问题</li></ul><p>举例2：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044153_watermark.png" alt="image-20220310231717893" style="zoom:80%;" /><ul><li>类文件名写错，尤其文件名与类名不一致时，要小心</li><li>类文件不在当前路径下，或者不在classpath指定路径下</li></ul><h3 id="5-3-语法问题"><a href="#5-3-语法问题" class="headerlink" title="5.3 语法问题"></a>5.3 语法问题</h3><p>举例1：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044244_watermark.png" alt="image-20220310231746581" style="zoom:90%;" /><p>声明为public的类应与文件名一致，否知编译失败。</p><p>举例2：</p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044048_watermark.png" alt="image-20220310231815405" style="zoom:80%;" /><p>编译失败，注意错误出现的行数，再到源代码中指定位置改错</p><h3 id="5-4-字符编码问题"><a href="#5-4-字符编码问题" class="headerlink" title="5.4 字符编码问题"></a>5.4 字符编码问题</h3><p>当cmd命令行窗口的字符编码与.java源文件的字符编码不一致，如何解决？</p><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044745_watermark.png" alt="1557881223916"></p><p>解决方案一：</p><ul><li>在Notepad++等编辑器中，修改源文件的字符编码：</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044898_watermark.png" alt="1557881271819" style="zoom:80%;" /><ul><li>在EditPlus中可以将Java源文件另存为ANSI编码方式（中文操作系统下即为GBK字符集）</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044327_watermark.png" alt="1658810752424" style="zoom:80%;" /><p>解决方案二：</p><pre><code class="hljs">在使用javac命令式，可以指定源文件的字符编码</code></pre><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">javac -encoding utf-<span class="hljs-number">8</span> Review01.java<br></code></pre></td></tr></table></figure><h3 id="5-5-建议"><a href="#5-5-建议" class="headerlink" title="5.5 建议"></a>5.5 建议</h3><ul><li><p>注意缩进!</p><ul><li><p>一定要有缩进。缩进就像人得体的衣着一样！</p></li><li><p>只要遇到{}就缩进，缩进的快捷键tab键。</p></li></ul></li><li><p>必要的空格</p><ul><li>变量类型、变量、赋值符号、变量值之间填充相应空格，更美观。比如： int num &#x3D; 10;</li></ul></li></ul><h2 id="6-HelloWorld小结"><a href="#6-HelloWorld小结" class="headerlink" title="6. HelloWorld小结"></a>6. HelloWorld小结</h2><h3 id="6-1-Java程序的结构与格式"><a href="#6-1-Java程序的结构与格式" class="headerlink" title="6.1 Java程序的结构与格式"></a>6.1 Java程序的结构与格式</h3><p>结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">类&#123;<br>    方法&#123;<br>        语句;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>格式：</p><p>（1）每一级缩进一个Tab键</p><p>（2）{}的左半部分在行尾，右半部分单独一行，与和它成对的”{“的行首对齐</p><h3 id="6-2-Java程序的入口"><a href="#6-2-Java程序的入口" class="headerlink" title="6.2 Java程序的入口"></a>6.2 Java程序的入口</h3><p>Java程序的入口是main方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-3-两种常见的输出语句"><a href="#6-3-两种常见的输出语句" class="headerlink" title="6.3 两种常见的输出语句"></a>6.3 两种常见的输出语句</h3><ul><li><p><strong>换行输出语句</strong>：输出内容，完毕后进行换行，格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(输出内容);<br></code></pre></td></tr></table></figure></li><li><p><strong>直接输出语句</strong>：输出内容，完毕后不做任何处理，格式如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.print(输出内容);<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>注意事项：</p><p>​换行输出语句，括号内可以什么都不写，只做换行处理</p><p>​直接输出语句，括号内什么都不写的话，编译报错</p></blockquote><h3 id="6-4-源文件名与类名"><a href="#6-4-源文件名与类名" class="headerlink" title="6.4 源文件名与类名"></a>6.4 源文件名与类名</h3><p>（1）源文件名是否必须与类名一致？public呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">如果这个类不是<span class="hljs-keyword">public</span>，那么源文件名可以和类名不一致。但是不便于代码维护。<br><br>如果这个类是<span class="hljs-keyword">public</span>，那么要求源文件名必须与类名一致。否则编译报错。<br><br>我们建议大家，不管是否是<span class="hljs-keyword">public</span>，都与源文件名保持一致，而且一个源文件尽量只写一个类，目的是为了好维护。<br></code></pre></td></tr></table></figure><p>（2）一个源文件中是否可以有多个类？public呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">一个源文件中可以有多个类，编译后会生成多个.class字节码文件。<br><br>但是一个源文件只能有一个<span class="hljs-keyword">public</span>的类。<br></code></pre></td></tr></table></figure><h2 id="7-注释-comment"><a href="#7-注释-comment" class="headerlink" title="7. 注释(comment)"></a>7. 注释(comment)</h2><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044387_watermark.png" alt="image-20220610113151774" style="zoom: 67%;" /><ul><li><p>什么是注释？</p><ul><li>源文件中用于解释、说明程序的文字就是注释。</li></ul></li><li><p>注释是一个程序员必须要具有的良好编程习惯。实际开发中，程序员可以先将自己的<code>思想</code>通过注释整理出来，再用<code>代码</code>去体现。</p><blockquote><p>程序员最讨厌两件事：</p><p>一件是自己写代码被要求加注释</p><p>另一件是接手别人代码，发现没有注释</p></blockquote></li><li><p>不加注释的危害</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044750_watermark.gif"></p></li><li><p>Java中的注释类型：</p><ul><li><p>单行注释</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-comment">//注释文字</span><br></code></pre></td></tr></table></figure></li><li><p>多行注释</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">注释文字1 </span><br><span class="hljs-comment">注释文字2</span><br><span class="hljs-comment">注释文字3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure></li><li><p>文档注释 (Java特有)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  <span class="hljs-doctag">@author</span>  指定java程序的作者</span><br><span class="hljs-comment">  <span class="hljs-doctag">@version</span>  指定源文件的版本</span><br><span class="hljs-comment">*/</span> <br></code></pre></td></tr></table></figure></li></ul></li><li><p>注释的作用</p><ul><li>它提升了程序的可阅读性。（不加注释的危害性，见图。）</li><li>调试程序的重要方法。</li></ul></li><li><p><strong>具体使用1：单行注释、多行注释</strong></p><ul><li><p>对于单行和多行注释，被注释的文字，不会不会出现在字节码文件中，进而不会被JVM（java虚拟机）解释执行。</p></li><li><p>多行注释里面不允许有多行注释嵌套。</p></li><li><p>一个段子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java">A：嘿 <span class="hljs-comment">//是什么意思啊？</span><br>B：嘿.<br>A：呃 我问你<span class="hljs-comment">//是什么意思？</span><br>B：问吧.<br>A：我刚才不是问了么？<br>B：啊？<br>A：你再看看记录...<br>B：看完了.<br>A：......所以<span class="hljs-comment">//是啥？</span><br>B：所以什么？<br>A：你存心耍我呢吧？<br>B：没有啊 你想问什么？<br>……<br>不断循环之后，A一气之下和B绝交，自己苦学程序。<br>N年之后，A终于修成正果，回想起B，又把聊天记录翻出来看，这时，他突然发现B没有耍他……<br>而他自己也不知道当年他问B的究竟是什么问题……<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>具体使用2：文档注释（Java特有）</strong></p><ul><li><p>文档注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。</p></li><li><p>操作方式。比如：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">javadoc -d mydoc -author -<span class="hljs-built_in">version</span> HelloWorld.java<br></code></pre></td></tr></table></figure></li></ul></li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044205_watermark.png" alt="image-20220310232527578" style="zoom:67%;" /><p>案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//单行注释</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">文档注释演示。这是我的第一个Java程序！^_^</span><br><span class="hljs-comment"><span class="hljs-doctag">@author</span> songhk</span><br><span class="hljs-comment"><span class="hljs-doctag">@version</span> 1.0</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span>&#123;<br>    <br><span class="hljs-comment">/**</span><br><span class="hljs-comment">Java程序的入口</span><br><span class="hljs-comment"><span class="hljs-doctag">@param</span> args main方法的命令参数</span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-Java-API文档"><a href="#8-Java-API文档" class="headerlink" title="8. Java API文档"></a>8. Java API文档</h2><ul><li>API （Application Programming Interface，应用程序编程接口）是 Java 提供的基本编程接口。</li><li>Java语言提供了大量的基础类，因此 Oracle 也为这些基础类提供了相应的说明文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法。大多数Java书籍中的类的介绍都要参照它来完成，它是编程者经常查阅的资料。</li><li>Java API文档，即为JDK使用说明书、帮助文档。类似于：</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211111371_watermark.jpg" alt="新华字典" style="zoom:28%;" /><ul><li><p>下载API文档：</p><ul><li><p>在线看：<a href="https://docs.oracle.com/en/java/javase/17/docs/api/index.html">https://docs.oracle.com/en/java/javase/17/docs/api/index.html</a></p></li><li><p>离线下载：<a href="https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html">https://www.oracle.com/java/technologies/javase-jdk17-doc-downloads.html</a></p></li></ul></li></ul><h2 id="9-Java核心机制：JVM"><a href="#9-Java核心机制：JVM" class="headerlink" title="9. Java核心机制：JVM"></a>9. Java核心机制：JVM</h2><h3 id="9-1-Java语言的优缺点"><a href="#9-1-Java语言的优缺点" class="headerlink" title="9.1 Java语言的优缺点"></a>9.1 Java语言的优缺点</h3><p>Java确实是从C语言和C++语言继承了许多成份，甚至可以将Java看成是类C语言发展和衍生的产物。“青出于蓝，而胜于蓝”。</p><h4 id="9-1-1-优点"><a href="#9-1-1-优点" class="headerlink" title="9.1.1 优点"></a>9.1.1 优点</h4><ul><li><strong>跨平台性：</strong>这是Java的核心优势。Java在最初设计时就很注重移植和跨平台性。比如：Java的int永远都是32位。不像C++可能是16，32，可能是根据编译器厂商规定的变化。</li><li>通过Java语言编写的应用程序在不同的系统平台上都可以运行。“<code>Write once , Run Anywhere</code>”。</li><li>原理：只要在需要运行 java 应用程序的操作系统上，先安装一个Java虚拟机 (<code>J</code>VM ，Java <code>V</code>irtual <code>M</code>achine) 即可。由JVM来负责Java程序在该系统中的运行。</li></ul><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/JVM%E7%9A%84%E8%B7%A8%E5%B9%B3%E5%8F%B0%E6%80%A7-1666858570703_watermark.jpg" alt="JVM的跨平台性" style="zoom:70%;" /><ul><li><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044493_watermark.png" alt="image-20211217111217831"></p></li><li><p><strong>面向对象性：</strong></p><p>面向对象是一种程序设计技术，非常<code>适合大型软件的设计和开发</code>。面向对象编程支持封装、继承、多态等特性，让程序更好达到<code>高内聚</code>，<code>低耦合</code>的标准。</p></li><li><p><strong>健壮性：</strong>吸收了C&#x2F;C++语言的优点，但去掉了其影响程序健壮性的部分（如指针、内存的申请与释放等），提供了一个相对安全的内存管理和访问机制。</p></li><li><p><strong>安全性高：</strong></p><p>Java适合于网络&#x2F;分布式环境，需要提供一个安全机制以防恶意代码的攻击。如：<code>安全防范机制</code>（ClassLoader类加载器），可以分配不同的命名空间以防替代本地的同名类、字节代码检查。</p></li><li><p><strong>简单性：</strong></p><p>Java就是C++语法的<code>简化版</code>，我们也可以将Java称之为“<code>C++--</code>”。比如：头文件，指针运算，结构，联合，操作符重载，虚基类等。</p></li><li><p><strong>高性能：</strong></p><ul><li><p>Java最初发展阶段，总是被人诟病“<code>性能低</code>”；客观上，高级语言运行效率总是低于低级语言的，这个无法避免。Java语言本身发展中通过虚拟机的优化提升了<code>几十倍运行效率</code>。比如，通过JIT(JUST IN TIME)即时编译技术提高运行效率。</p></li><li><p><code>Java低性能的短腿，已经被完全解决了</code>。业界发展上，我们也看到很多C++应用转到Java开发，很多C++程序员转型为Java程序员。</p></li></ul></li></ul><h4 id="9-1-2-缺点"><a href="#9-1-2-缺点" class="headerlink" title="9.1.2 缺点"></a>9.1.2 缺点</h4><ul><li><code>语法过于复杂、严谨</code>，对程序员的约束比较多，与python、php等相比入门较难。但是一旦学会了，就业岗位需求量大，而且<code>薪资待遇节节攀升</code>。</li><li>一般适用于大型网站开发，<code>整个架构会比较重</code>，对于初创公司开发和维护人员的成本比较高（即薪资高），选择用Java语言开发网站或应用系统的需要一定的经济实力。</li><li><code>并非适用于所有领域</code>。比如，Objective C、Swift在iOS设备上就有着无可取代的地位。浏览器中的处理几乎完全由JavaScript掌控。Windows程序通常都用C++或C#编写。Java在服务器端编程和跨平台客户端应用领域则很有优势。</li></ul><h3 id="9-2-JVM功能说明"><a href="#9-2-JVM功能说明" class="headerlink" title="9.2 JVM功能说明"></a>9.2 JVM功能说明</h3><p><strong>JVM</strong>（<code>J</code>ava <code>V</code>irtual <code>M</code>achine ，Java虚拟机）：是一个虚拟的计算机，是Java程序的运行环境。JVM具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044323_watermark.png" alt="image-20220310165805739" style="zoom:67%;" /><h4 id="9-2-1-功能1：实现Java程序的跨平台性"><a href="#9-2-1-功能1：实现Java程序的跨平台性" class="headerlink" title="9.2.1 功能1：实现Java程序的跨平台性"></a>9.2.1 功能1：实现Java程序的跨平台性</h4><p>我们编写的Java代码，都运行在<strong>JVM</strong> 之上。正是因为有了JVM，才使得Java程序具备了跨平台性。</p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java语言概述/202402211044107_watermark.png" alt="image-20220513191856727" style="zoom:50%;" /><p>使用JVM前后对比：</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044094_watermark.png" alt="image-20220514151716805"></p><h4 id="9-2-2-功能2：自动内存管理-内存分配、内存回收"><a href="#9-2-2-功能2：自动内存管理-内存分配、内存回收" class="headerlink" title="9.2.2 功能2：自动内存管理(内存分配、内存回收)"></a>9.2.2 功能2：自动内存管理(内存分配、内存回收)</h4><ul><li>Java程序在运行过程中，涉及到运算的<code>数据的分配</code>、<code>存储</code>等都由JVM来完成</li><li>Java消除了程序员回收无用内存空间的职责。提供了一种系统级线程跟踪存储空间的分配情况，在内存空间达到相应阈值时，检查并释放可被释放的存储器空间。</li><li>GC的自动回收，提高了内存空间的利用效率，也提高了编程人员的效率，很大程度上<code>减少了</code>因为没有释放空间而导致的<code>内存泄漏</code>。</li></ul><blockquote><p>面试题：</p><p>Java程序还会出现内存溢出和内存泄漏问题吗？  Yes!</p></blockquote><h2 id="10-章节案例"><a href="#10-章节案例" class="headerlink" title="10. 章节案例"></a>10. 章节案例</h2><p><strong>案例1：个人信息输出</strong></p><p> <img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044000_watermark.png" alt="image-20220315221336038"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise1</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;姓名：康师傅&quot;</span>);<br>System.out.println();<span class="hljs-comment">//换行操作</span><br>System.out.println(<span class="hljs-string">&quot;性别：男&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;家庭住址：北京程序员聚集地：回龙观&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>案例2：输出：心形</strong> </p><p>结合\n(换行)，\t(制表符)，空格等在控制台打印出如下图所示的效果。</p><p><img src="https://note-1304926383.cos.ap-beijing.myqcloud.com/2024/java_watermark/Java%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0/202402211044165_watermark.png" alt="image-20220309004152219"> </p><p>方式一：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//方式一：</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise2</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><span class="hljs-comment">//System.out.print(&quot;\t&quot;);</span><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;I love java&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br><br>System.out.println(<span class="hljs-string">&quot;*&quot;</span>);<br><br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;    &quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>);<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Exercise3</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br><br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;I love Java&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;&quot;</span>+<span class="hljs-string">&quot;\t\t&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br>System.out.print(<span class="hljs-string">&quot;\t\t\t\t\t\t\t&quot;</span>+<span class="hljs-string">&quot;*&quot;</span>+<span class="hljs-string">&quot;\n&quot;</span>);<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
